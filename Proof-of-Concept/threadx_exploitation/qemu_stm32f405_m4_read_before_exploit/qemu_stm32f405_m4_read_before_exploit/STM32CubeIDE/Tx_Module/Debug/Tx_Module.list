
Tx_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     0000009c  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  0802009c  08021978  00011978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  0802009c  08021978  00011978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  0802009c  0802009c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          0000002c  08021908  08021908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  0802009c  08021978  00011978  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  0802009c  0802009c  00011978  2**0
                  CONTENTS
  7 .hash         00000000  0802009c  08021978  00011978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         0000186c  0802009c  0802009c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       00000044  08021934  08021934  00011934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  2001c02c  2001c02c  00011978  2**0
                  CONTENTS
 11 .data_run     00000000  2001c02c  2001c02c  00011978  2**0
                  CONTENTS
 12 .bss          0000082c  2001c02c  2001c02c  0001c02c  2**2
                  ALLOC
 13 .heap         00000080  2001c858  2001c858  0001c02c  2**0
                  ALLOC
 14 .debug_info   0001c315  00000000  00000000  00011978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a2a  00000000  00000000  0002dc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ca0  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c422  00000000  00000000  00034358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d093  00000000  00000000  0004077a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000150e1  00000000  00000000  0006d80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000828ee  2**0
                  CONTENTS, READONLY
 21 .ARM.attributes 00000032  00000000  00000000  00082931  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000165c  00000000  00000000  00082964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a1  00000000  00000000  00083fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000991 	.word	0x00000991
 802001c:	00000081 	.word	0x00000081
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	000007f5 	.word	0x000007f5
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001978 	.word	0x00001978
 802003c:	000008d8 	.word	0x000008d8
	...
 8020080:	00001b41 	.word	0x00001b41
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	00000011 	.word	0x00000011
 8020090:	2d453705 	.word	0x2d453705
 8020094:	0d06004d 	.word	0x0d06004d
 8020098:	02094d07 	.word	0x02094d07

Disassembly of section .text:

0802009c <default_module_start>:
void thread_0_entry(ULONG thread_input);
void Error_Handler(void);

/* Module entry function */
void    default_module_start(ULONG id)
{
 802009c:	b580      	push	{r7, lr}
 802009e:	b08c      	sub	sp, #48	; 0x30
 80200a0:	af08      	add	r7, sp, #32
 80200a2:	6078      	str	r0, [r7, #4]
    CHAR    *pointer;

    /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
       their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
       the control block(s).  */
    txm_module_object_allocate((void*)&thread_0, sizeof(TX_THREAD));
 80200a4:	21e8      	movs	r1, #232	; 0xe8
 80200a6:	4b23      	ldr	r3, [pc, #140]	; (8020134 <default_module_start+0x98>)
 80200a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80200ac:	4618      	mov	r0, r3
 80200ae:	f000 fc19 	bl	80208e4 <_txm_module_object_allocate>
    txm_module_object_allocate((void*)&byte_pool_0, sizeof(TX_BYTE_POOL));
 80200b2:	2134      	movs	r1, #52	; 0x34
 80200b4:	4b20      	ldr	r3, [pc, #128]	; (8020138 <default_module_start+0x9c>)
 80200b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80200ba:	4618      	mov	r0, r3
 80200bc:	f000 fc12 	bl	80208e4 <_txm_module_object_allocate>

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(byte_pool_0, "module byte pool 0", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80200c0:	4b1d      	ldr	r3, [pc, #116]	; (8020138 <default_module_start+0x9c>)
 80200c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80200c6:	6818      	ldr	r0, [r3, #0]
 80200c8:	2334      	movs	r3, #52	; 0x34
 80200ca:	9300      	str	r3, [sp, #0]
 80200cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80200d0:	4a1a      	ldr	r2, [pc, #104]	; (802013c <default_module_start+0xa0>)
 80200d2:	f859 2002 	ldr.w	r2, [r9, r2]
 80200d6:	491a      	ldr	r1, [pc, #104]	; (8020140 <default_module_start+0xa4>)
 80200d8:	4479      	add	r1, pc
 80200da:	f000 f9db 	bl	8020494 <_txe_byte_pool_create>

    /* Allocate the stack for thread 0.  */
    tx_byte_allocate(byte_pool_0, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80200de:	4b16      	ldr	r3, [pc, #88]	; (8020138 <default_module_start+0x9c>)
 80200e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80200e4:	6818      	ldr	r0, [r3, #0]
 80200e6:	f107 010c 	add.w	r1, r7, #12
 80200ea:	2300      	movs	r3, #0
 80200ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80200f0:	f000 f9b2 	bl	8020458 <_txe_byte_allocate>

    /* Create the main thread.  */
    tx_thread_create(thread_0, "module thread 0", thread_0_entry, 0,
 80200f4:	4b0f      	ldr	r3, [pc, #60]	; (8020134 <default_module_start+0x98>)
 80200f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80200fa:	6818      	ldr	r0, [r3, #0]
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	22e8      	movs	r2, #232	; 0xe8
 8020100:	9206      	str	r2, [sp, #24]
 8020102:	2201      	movs	r2, #1
 8020104:	9205      	str	r2, [sp, #20]
 8020106:	2200      	movs	r2, #0
 8020108:	9204      	str	r2, [sp, #16]
 802010a:	2202      	movs	r2, #2
 802010c:	9203      	str	r2, [sp, #12]
 802010e:	2202      	movs	r2, #2
 8020110:	9202      	str	r2, [sp, #8]
 8020112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020116:	9201      	str	r2, [sp, #4]
 8020118:	9300      	str	r3, [sp, #0]
 802011a:	2300      	movs	r3, #0
 802011c:	4a09      	ldr	r2, [pc, #36]	; (8020144 <default_module_start+0xa8>)
 802011e:	f859 2002 	ldr.w	r2, [r9, r2]
 8020122:	4909      	ldr	r1, [pc, #36]	; (8020148 <default_module_start+0xac>)
 8020124:	4479      	add	r1, pc
 8020126:	f000 ffad 	bl	8021084 <_txe_thread_create>
            pointer, DEFAULT_STACK_SIZE,
            2, 2, TX_NO_TIME_SLICE, TX_AUTO_START);

}
 802012a:	bf00      	nop
 802012c:	3710      	adds	r7, #16
 802012e:	46bd      	mov	sp, r7
 8020130:	bd80      	pop	{r7, pc}
 8020132:	bf00      	nop
 8020134:	00000014 	.word	0x00000014
 8020138:	00000010 	.word	0x00000010
 802013c:	0000000c 	.word	0x0000000c
 8020140:	00001858 	.word	0x00001858
 8020144:	0000001c 	.word	0x0000001c
 8020148:	00001820 	.word	0x00001820

0802014c <MaliciousTimerFunction>:

ULONG privileged_read_test;

void MaliciousTimerFunction(void){}
 802014c:	b480      	push	{r7}
 802014e:	af00      	add	r7, sp, #0
 8020150:	bf00      	nop
 8020152:	46bd      	mov	sp, r7
 8020154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020158:	4770      	bx	lr

0802015a <MainThread_Entry>:

void MainThread_Entry(ULONG thread_input){}
 802015a:	b480      	push	{r7}
 802015c:	b083      	sub	sp, #12
 802015e:	af00      	add	r7, sp, #0
 8020160:	6078      	str	r0, [r7, #4]
 8020162:	bf00      	nop
 8020164:	370c      	adds	r7, #12
 8020166:	46bd      	mov	sp, r7
 8020168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802016c:	4770      	bx	lr

0802016e <thread_0_entry>:

/* Module main thread function */
void thread_0_entry(ULONG thread_input)
{
 802016e:	b580      	push	{r7, lr}
 8020170:	b08c      	sub	sp, #48	; 0x30
 8020172:	af04      	add	r7, sp, #16
 8020174:	6078      	str	r0, [r7, #4]
//    Error_Handler();
//  }

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 8020176:	f107 0314 	add.w	r3, r7, #20
 802017a:	2134      	movs	r1, #52	; 0x34
 802017c:	4618      	mov	r0, r3
 802017e:	f000 fbb1 	bl	80208e4 <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 8020182:	6978      	ldr	r0, [r7, #20]
 8020184:	2334      	movs	r3, #52	; 0x34
 8020186:	9303      	str	r3, [sp, #12]
 8020188:	2300      	movs	r3, #0
 802018a:	9302      	str	r3, [sp, #8]
 802018c:	4b38      	ldr	r3, [pc, #224]	; (8020270 <thread_0_entry+0x102>)
 802018e:	9301      	str	r3, [sp, #4]
 8020190:	4b37      	ldr	r3, [pc, #220]	; (8020270 <thread_0_entry+0x102>)
 8020192:	9300      	str	r3, [sp, #0]
 8020194:	4b36      	ldr	r3, [pc, #216]	; (8020270 <thread_0_entry+0x102>)
 8020196:	4a38      	ldr	r2, [pc, #224]	; (8020278 <thread_0_entry+0x10a>)
 8020198:	f859 2002 	ldr.w	r2, [r9, r2]
 802019c:	4937      	ldr	r1, [pc, #220]	; (802027c <thread_0_entry+0x10e>)
 802019e:	4479      	add	r1, pc
 80201a0:	f001 f9bc 	bl	802151c <_txe_timer_create>

  TX_QUEUE *MaliciousQueue;
  txm_module_object_allocate((void*)&MaliciousQueue, sizeof(TX_QUEUE));
 80201a4:	f107 0310 	add.w	r3, r7, #16
 80201a8:	2144      	movs	r1, #68	; 0x44
 80201aa:	4618      	mov	r0, r3
 80201ac:	f000 fb9a 	bl	80208e4 <_txm_module_object_allocate>
  tx_byte_allocate(byte_pool_0, (VOID **) &pointer, 16 * sizeof(ULONG), TX_NO_WAIT);
 80201b0:	4b33      	ldr	r3, [pc, #204]	; (8020280 <thread_0_entry+0x112>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	6818      	ldr	r0, [r3, #0]
 80201b8:	f107 0118 	add.w	r1, r7, #24
 80201bc:	2300      	movs	r3, #0
 80201be:	2240      	movs	r2, #64	; 0x40
 80201c0:	f000 f94a 	bl	8020458 <_txe_byte_allocate>
  tx_queue_create(MaliciousQueue, "Malicious Queue",TX_1_ULONG, pointer, 16 * sizeof(ULONG));
 80201c4:	6938      	ldr	r0, [r7, #16]
 80201c6:	69bb      	ldr	r3, [r7, #24]
 80201c8:	2244      	movs	r2, #68	; 0x44
 80201ca:	9201      	str	r2, [sp, #4]
 80201cc:	2240      	movs	r2, #64	; 0x40
 80201ce:	9200      	str	r2, [sp, #0]
 80201d0:	2201      	movs	r2, #1
 80201d2:	492c      	ldr	r1, [pc, #176]	; (8020284 <thread_0_entry+0x116>)
 80201d4:	4479      	add	r1, pc
 80201d6:	f000 fd27 	bl	8020c28 <_txe_queue_create>

  // read from privileged kernel memory
  privileged_read_test = MaliciousTimer->tx_timer_id;
 80201da:	697b      	ldr	r3, [r7, #20]
 80201dc:	681a      	ldr	r2, [r3, #0]
 80201de:	4b2a      	ldr	r3, [pc, #168]	; (8020288 <thread_0_entry+0x11a>)
 80201e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80201e4:	601a      	str	r2, [r3, #0]

  ULONG time_slice;
  TX_THREAD *ForgedThread;
  // write queue_write
  ForgedThread = (ULONG) MaliciousTimer + 8;
 80201e6:	697b      	ldr	r3, [r7, #20]
 80201e8:	3308      	adds	r3, #8
 80201ea:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80201ec:	f107 030c 	add.w	r3, r7, #12
 80201f0:	461a      	mov	r2, r3
 80201f2:	491f      	ldr	r1, [pc, #124]	; (8020270 <thread_0_entry+0x102>)
 80201f4:	69f8      	ldr	r0, [r7, #28]
 80201f6:	f001 f90d 	bl	8021414 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 32;
 80201fa:	697b      	ldr	r3, [r7, #20]
 80201fc:	3320      	adds	r3, #32
 80201fe:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020200:	f107 030c 	add.w	r3, r7, #12
 8020204:	461a      	mov	r2, r3
 8020206:	491a      	ldr	r1, [pc, #104]	; (8020270 <thread_0_entry+0x102>)
 8020208:	69f8      	ldr	r0, [r7, #28]
 802020a:	f001 f903 	bl	8021414 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 56;
 802020e:	697b      	ldr	r3, [r7, #20]
 8020210:	3338      	adds	r3, #56	; 0x38
 8020212:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020214:	f107 030c 	add.w	r3, r7, #12
 8020218:	461a      	mov	r2, r3
 802021a:	4915      	ldr	r1, [pc, #84]	; (8020270 <thread_0_entry+0x102>)
 802021c:	69f8      	ldr	r0, [r7, #28]
 802021e:	f001 f8f9 	bl	8021414 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 84;
 8020222:	697b      	ldr	r3, [r7, #20]
 8020224:	3354      	adds	r3, #84	; 0x54
 8020226:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 8020228:	f107 030c 	add.w	r3, r7, #12
 802022c:	461a      	mov	r2, r3
 802022e:	4911      	ldr	r1, [pc, #68]	; (8020274 <thread_0_entry+0x106>)
 8020230:	69f8      	ldr	r0, [r7, #28]
 8020232:	f001 f8ef 	bl	8021414 <_txe_thread_time_slice_change>
  // write queue_message_size
  ForgedThread = (ULONG) MaliciousTimer + 56;
 8020236:	697b      	ldr	r3, [r7, #20]
 8020238:	3338      	adds	r3, #56	; 0x38
 802023a:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x4, &time_slice);
 802023c:	f107 030c 	add.w	r3, r7, #12
 8020240:	461a      	mov	r2, r3
 8020242:	2104      	movs	r1, #4
 8020244:	69f8      	ldr	r0, [r7, #28]
 8020246:	f001 f8e5 	bl	8021414 <_txe_thread_time_slice_change>

  ULONG value = 0;
 802024a:	2300      	movs	r3, #0
 802024c:	60bb      	str	r3, [r7, #8]
  //dereference queue_write in queue object
  tx_queue_send(MaliciousQueue, &value, 0);
 802024e:	693b      	ldr	r3, [r7, #16]
 8020250:	f107 0108 	add.w	r1, r7, #8
 8020254:	2200      	movs	r2, #0
 8020256:	4618      	mov	r0, r3
 8020258:	f000 fde4 	bl	8020e24 <_txe_queue_send>

  // read from privileged kernel memory
  privileged_read_test = MaliciousTimer->tx_timer_id;
 802025c:	697b      	ldr	r3, [r7, #20]
 802025e:	681a      	ldr	r2, [r3, #0]
 8020260:	4b09      	ldr	r3, [pc, #36]	; (8020288 <thread_0_entry+0x11a>)
 8020262:	f859 3003 	ldr.w	r3, [r9, r3]
 8020266:	601a      	str	r2, [r3, #0]
//  *(ULONG *)READONLY_REGION = 0xABABABAB;
//  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
//
//  /* Suppress unused variable warning */
//  UNUSED(readbuffer);
}
 8020268:	bf00      	nop
 802026a:	3720      	adds	r7, #32
 802026c:	46bd      	mov	sp, r7
 802026e:	bd80      	pop	{r7, pc}
 8020270:	54485244 	.word	0x54485244
 8020274:	e000ed94 	.word	0xe000ed94
 8020278:	00000000 	.word	0x00000000
 802027c:	000017b6 	.word	0x000017b6
 8020280:	00000010 	.word	0x00000010
 8020284:	00001790 	.word	0x00001790
 8020288:	00000018 	.word	0x00000018

0802028c <Error_Handler>:

void Error_Handler(void)
{
 802028c:	b580      	push	{r7, lr}
 802028e:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 8020290:	f04f 30ff 	mov.w	r0, #4294967295
 8020294:	f001 f866 	bl	8021364 <_tx_thread_sleep>
}
 8020298:	bf00      	nop
 802029a:	bd80      	pop	{r7, pc}

0802029c <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 802029c:	b590      	push	{r4, r7, lr}
 802029e:	b087      	sub	sp, #28
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	60f8      	str	r0, [r7, #12]
 80202a4:	60b9      	str	r1, [r7, #8]
 80202a6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 80202a8:	4b07      	ldr	r3, [pc, #28]	; (80202c8 <_txe_block_allocate+0x2c>)
 80202aa:	f859 3003 	ldr.w	r3, [r9, r3]
 80202ae:	681c      	ldr	r4, [r3, #0]
 80202b0:	68f9      	ldr	r1, [r7, #12]
 80202b2:	68ba      	ldr	r2, [r7, #8]
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	2001      	movs	r0, #1
 80202b8:	47a0      	blx	r4
 80202ba:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80202bc:	697b      	ldr	r3, [r7, #20]
}
 80202be:	4618      	mov	r0, r3
 80202c0:	371c      	adds	r7, #28
 80202c2:	46bd      	mov	sp, r7
 80202c4:	bd90      	pop	{r4, r7, pc}
 80202c6:	bf00      	nop
 80202c8:	00000004 	.word	0x00000004

080202cc <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80202cc:	b590      	push	{r4, r7, lr}
 80202ce:	b08b      	sub	sp, #44	; 0x2c
 80202d0:	af00      	add	r7, sp, #0
 80202d2:	60f8      	str	r0, [r7, #12]
 80202d4:	60b9      	str	r1, [r7, #8]
 80202d6:	607a      	str	r2, [r7, #4]
 80202d8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 80202de:	683b      	ldr	r3, [r7, #0]
 80202e0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 80202e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202e4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 80202e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202e8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80202ea:	4b08      	ldr	r3, [pc, #32]	; (802030c <_txe_block_pool_create+0x40>)
 80202ec:	f859 3003 	ldr.w	r3, [r9, r3]
 80202f0:	681c      	ldr	r4, [r3, #0]
 80202f2:	68f9      	ldr	r1, [r7, #12]
 80202f4:	68ba      	ldr	r2, [r7, #8]
 80202f6:	f107 0314 	add.w	r3, r7, #20
 80202fa:	2002      	movs	r0, #2
 80202fc:	47a0      	blx	r4
 80202fe:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020302:	4618      	mov	r0, r3
 8020304:	372c      	adds	r7, #44	; 0x2c
 8020306:	46bd      	mov	sp, r7
 8020308:	bd90      	pop	{r4, r7, pc}
 802030a:	bf00      	nop
 802030c:	00000004 	.word	0x00000004

08020310 <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8020310:	b590      	push	{r4, r7, lr}
 8020312:	b085      	sub	sp, #20
 8020314:	af00      	add	r7, sp, #0
 8020316:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020318:	4b07      	ldr	r3, [pc, #28]	; (8020338 <_txe_block_pool_delete+0x28>)
 802031a:	f859 3003 	ldr.w	r3, [r9, r3]
 802031e:	681c      	ldr	r4, [r3, #0]
 8020320:	6879      	ldr	r1, [r7, #4]
 8020322:	2300      	movs	r3, #0
 8020324:	2200      	movs	r2, #0
 8020326:	2003      	movs	r0, #3
 8020328:	47a0      	blx	r4
 802032a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802032c:	68fb      	ldr	r3, [r7, #12]
}
 802032e:	4618      	mov	r0, r3
 8020330:	3714      	adds	r7, #20
 8020332:	46bd      	mov	sp, r7
 8020334:	bd90      	pop	{r4, r7, pc}
 8020336:	bf00      	nop
 8020338:	00000004 	.word	0x00000004

0802033c <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 802033c:	b590      	push	{r4, r7, lr}
 802033e:	b08b      	sub	sp, #44	; 0x2c
 8020340:	af00      	add	r7, sp, #0
 8020342:	60f8      	str	r0, [r7, #12]
 8020344:	60b9      	str	r1, [r7, #8]
 8020346:	607a      	str	r2, [r7, #4]
 8020348:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 802034e:	683b      	ldr	r3, [r7, #0]
 8020350:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020354:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020358:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802035a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802035c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802035e:	4b08      	ldr	r3, [pc, #32]	; (8020380 <_txe_block_pool_info_get+0x44>)
 8020360:	f859 3003 	ldr.w	r3, [r9, r3]
 8020364:	681c      	ldr	r4, [r3, #0]
 8020366:	68f9      	ldr	r1, [r7, #12]
 8020368:	68ba      	ldr	r2, [r7, #8]
 802036a:	f107 0310 	add.w	r3, r7, #16
 802036e:	2004      	movs	r0, #4
 8020370:	47a0      	blx	r4
 8020372:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020376:	4618      	mov	r0, r3
 8020378:	372c      	adds	r7, #44	; 0x2c
 802037a:	46bd      	mov	sp, r7
 802037c:	bd90      	pop	{r4, r7, pc}
 802037e:	bf00      	nop
 8020380:	00000004 	.word	0x00000004

08020384 <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 8020384:	b590      	push	{r4, r7, lr}
 8020386:	b089      	sub	sp, #36	; 0x24
 8020388:	af00      	add	r7, sp, #0
 802038a:	60f8      	str	r0, [r7, #12]
 802038c:	60b9      	str	r1, [r7, #8]
 802038e:	607a      	str	r2, [r7, #4]
 8020390:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020396:	683b      	ldr	r3, [r7, #0]
 8020398:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 802039a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802039c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 802039e:	4b08      	ldr	r3, [pc, #32]	; (80203c0 <_tx_block_pool_performance_info_get+0x3c>)
 80203a0:	f859 3003 	ldr.w	r3, [r9, r3]
 80203a4:	681c      	ldr	r4, [r3, #0]
 80203a6:	68f9      	ldr	r1, [r7, #12]
 80203a8:	68ba      	ldr	r2, [r7, #8]
 80203aa:	f107 0310 	add.w	r3, r7, #16
 80203ae:	2005      	movs	r0, #5
 80203b0:	47a0      	blx	r4
 80203b2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80203b4:	69fb      	ldr	r3, [r7, #28]
}
 80203b6:	4618      	mov	r0, r3
 80203b8:	3724      	adds	r7, #36	; 0x24
 80203ba:	46bd      	mov	sp, r7
 80203bc:	bd90      	pop	{r4, r7, pc}
 80203be:	bf00      	nop
 80203c0:	00000004 	.word	0x00000004

080203c4 <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80203c4:	b590      	push	{r4, r7, lr}
 80203c6:	b089      	sub	sp, #36	; 0x24
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	60f8      	str	r0, [r7, #12]
 80203cc:	60b9      	str	r1, [r7, #8]
 80203ce:	607a      	str	r2, [r7, #4]
 80203d0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80203d6:	683b      	ldr	r3, [r7, #0]
 80203d8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80203da:	4b08      	ldr	r3, [pc, #32]	; (80203fc <_tx_block_pool_performance_system_info_get+0x38>)
 80203dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80203e0:	681c      	ldr	r4, [r3, #0]
 80203e2:	68f9      	ldr	r1, [r7, #12]
 80203e4:	68ba      	ldr	r2, [r7, #8]
 80203e6:	f107 0314 	add.w	r3, r7, #20
 80203ea:	2006      	movs	r0, #6
 80203ec:	47a0      	blx	r4
 80203ee:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80203f0:	69fb      	ldr	r3, [r7, #28]
}
 80203f2:	4618      	mov	r0, r3
 80203f4:	3724      	adds	r7, #36	; 0x24
 80203f6:	46bd      	mov	sp, r7
 80203f8:	bd90      	pop	{r4, r7, pc}
 80203fa:	bf00      	nop
 80203fc:	00000004 	.word	0x00000004

08020400 <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 8020400:	b590      	push	{r4, r7, lr}
 8020402:	b085      	sub	sp, #20
 8020404:	af00      	add	r7, sp, #0
 8020406:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020408:	4b07      	ldr	r3, [pc, #28]	; (8020428 <_txe_block_pool_prioritize+0x28>)
 802040a:	f859 3003 	ldr.w	r3, [r9, r3]
 802040e:	681c      	ldr	r4, [r3, #0]
 8020410:	6879      	ldr	r1, [r7, #4]
 8020412:	2300      	movs	r3, #0
 8020414:	2200      	movs	r2, #0
 8020416:	2007      	movs	r0, #7
 8020418:	47a0      	blx	r4
 802041a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802041c:	68fb      	ldr	r3, [r7, #12]
}
 802041e:	4618      	mov	r0, r3
 8020420:	3714      	adds	r7, #20
 8020422:	46bd      	mov	sp, r7
 8020424:	bd90      	pop	{r4, r7, pc}
 8020426:	bf00      	nop
 8020428:	00000004 	.word	0x00000004

0802042c <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 802042c:	b590      	push	{r4, r7, lr}
 802042e:	b085      	sub	sp, #20
 8020430:	af00      	add	r7, sp, #0
 8020432:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 8020434:	4b07      	ldr	r3, [pc, #28]	; (8020454 <_txe_block_release+0x28>)
 8020436:	f859 3003 	ldr.w	r3, [r9, r3]
 802043a:	681c      	ldr	r4, [r3, #0]
 802043c:	6879      	ldr	r1, [r7, #4]
 802043e:	2300      	movs	r3, #0
 8020440:	2200      	movs	r2, #0
 8020442:	2008      	movs	r0, #8
 8020444:	47a0      	blx	r4
 8020446:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020448:	68fb      	ldr	r3, [r7, #12]
}
 802044a:	4618      	mov	r0, r3
 802044c:	3714      	adds	r7, #20
 802044e:	46bd      	mov	sp, r7
 8020450:	bd90      	pop	{r4, r7, pc}
 8020452:	bf00      	nop
 8020454:	00000004 	.word	0x00000004

08020458 <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 8020458:	b590      	push	{r4, r7, lr}
 802045a:	b089      	sub	sp, #36	; 0x24
 802045c:	af00      	add	r7, sp, #0
 802045e:	60f8      	str	r0, [r7, #12]
 8020460:	60b9      	str	r1, [r7, #8]
 8020462:	607a      	str	r2, [r7, #4]
 8020464:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 802046a:	683b      	ldr	r3, [r7, #0]
 802046c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 802046e:	4b08      	ldr	r3, [pc, #32]	; (8020490 <_txe_byte_allocate+0x38>)
 8020470:	f859 3003 	ldr.w	r3, [r9, r3]
 8020474:	681c      	ldr	r4, [r3, #0]
 8020476:	68f9      	ldr	r1, [r7, #12]
 8020478:	68ba      	ldr	r2, [r7, #8]
 802047a:	f107 0314 	add.w	r3, r7, #20
 802047e:	2009      	movs	r0, #9
 8020480:	47a0      	blx	r4
 8020482:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020484:	69fb      	ldr	r3, [r7, #28]
}
 8020486:	4618      	mov	r0, r3
 8020488:	3724      	adds	r7, #36	; 0x24
 802048a:	46bd      	mov	sp, r7
 802048c:	bd90      	pop	{r4, r7, pc}
 802048e:	bf00      	nop
 8020490:	00000004 	.word	0x00000004

08020494 <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8020494:	b590      	push	{r4, r7, lr}
 8020496:	b089      	sub	sp, #36	; 0x24
 8020498:	af00      	add	r7, sp, #0
 802049a:	60f8      	str	r0, [r7, #12]
 802049c:	60b9      	str	r1, [r7, #8]
 802049e:	607a      	str	r2, [r7, #4]
 80204a0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 80204a6:	683b      	ldr	r3, [r7, #0]
 80204a8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 80204aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204ac:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80204ae:	4b08      	ldr	r3, [pc, #32]	; (80204d0 <_txe_byte_pool_create+0x3c>)
 80204b0:	f859 3003 	ldr.w	r3, [r9, r3]
 80204b4:	681c      	ldr	r4, [r3, #0]
 80204b6:	68f9      	ldr	r1, [r7, #12]
 80204b8:	68ba      	ldr	r2, [r7, #8]
 80204ba:	f107 0310 	add.w	r3, r7, #16
 80204be:	200a      	movs	r0, #10
 80204c0:	47a0      	blx	r4
 80204c2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80204c4:	69fb      	ldr	r3, [r7, #28]
}
 80204c6:	4618      	mov	r0, r3
 80204c8:	3724      	adds	r7, #36	; 0x24
 80204ca:	46bd      	mov	sp, r7
 80204cc:	bd90      	pop	{r4, r7, pc}
 80204ce:	bf00      	nop
 80204d0:	00000004 	.word	0x00000004

080204d4 <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80204d4:	b590      	push	{r4, r7, lr}
 80204d6:	b085      	sub	sp, #20
 80204d8:	af00      	add	r7, sp, #0
 80204da:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80204dc:	4b07      	ldr	r3, [pc, #28]	; (80204fc <_txe_byte_pool_delete+0x28>)
 80204de:	f859 3003 	ldr.w	r3, [r9, r3]
 80204e2:	681c      	ldr	r4, [r3, #0]
 80204e4:	6879      	ldr	r1, [r7, #4]
 80204e6:	2300      	movs	r3, #0
 80204e8:	2200      	movs	r2, #0
 80204ea:	200b      	movs	r0, #11
 80204ec:	47a0      	blx	r4
 80204ee:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80204f0:	68fb      	ldr	r3, [r7, #12]
}
 80204f2:	4618      	mov	r0, r3
 80204f4:	3714      	adds	r7, #20
 80204f6:	46bd      	mov	sp, r7
 80204f8:	bd90      	pop	{r4, r7, pc}
 80204fa:	bf00      	nop
 80204fc:	00000004 	.word	0x00000004

08020500 <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8020500:	b590      	push	{r4, r7, lr}
 8020502:	b08b      	sub	sp, #44	; 0x2c
 8020504:	af00      	add	r7, sp, #0
 8020506:	60f8      	str	r0, [r7, #12]
 8020508:	60b9      	str	r1, [r7, #8]
 802050a:	607a      	str	r2, [r7, #4]
 802050c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 8020512:	683b      	ldr	r3, [r7, #0]
 8020514:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020518:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802051a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802051c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802051e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020520:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020522:	4b08      	ldr	r3, [pc, #32]	; (8020544 <_txe_byte_pool_info_get+0x44>)
 8020524:	f859 3003 	ldr.w	r3, [r9, r3]
 8020528:	681c      	ldr	r4, [r3, #0]
 802052a:	68f9      	ldr	r1, [r7, #12]
 802052c:	68ba      	ldr	r2, [r7, #8]
 802052e:	f107 0310 	add.w	r3, r7, #16
 8020532:	200c      	movs	r0, #12
 8020534:	47a0      	blx	r4
 8020536:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802053a:	4618      	mov	r0, r3
 802053c:	372c      	adds	r7, #44	; 0x2c
 802053e:	46bd      	mov	sp, r7
 8020540:	bd90      	pop	{r4, r7, pc}
 8020542:	bf00      	nop
 8020544:	00000004 	.word	0x00000004

08020548 <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020548:	b590      	push	{r4, r7, lr}
 802054a:	b08d      	sub	sp, #52	; 0x34
 802054c:	af00      	add	r7, sp, #0
 802054e:	60f8      	str	r0, [r7, #12]
 8020550:	60b9      	str	r1, [r7, #8]
 8020552:	607a      	str	r2, [r7, #4]
 8020554:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 802055a:	683b      	ldr	r3, [r7, #0]
 802055c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 802055e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020560:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 8020562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020564:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 8020566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020568:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802056a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802056c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 802056e:	4b08      	ldr	r3, [pc, #32]	; (8020590 <_tx_byte_pool_performance_info_get+0x48>)
 8020570:	f859 3003 	ldr.w	r3, [r9, r3]
 8020574:	681c      	ldr	r4, [r3, #0]
 8020576:	68f9      	ldr	r1, [r7, #12]
 8020578:	68ba      	ldr	r2, [r7, #8]
 802057a:	f107 0314 	add.w	r3, r7, #20
 802057e:	200d      	movs	r0, #13
 8020580:	47a0      	blx	r4
 8020582:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8020584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8020586:	4618      	mov	r0, r3
 8020588:	3734      	adds	r7, #52	; 0x34
 802058a:	46bd      	mov	sp, r7
 802058c:	bd90      	pop	{r4, r7, pc}
 802058e:	bf00      	nop
 8020590:	00000004 	.word	0x00000004

08020594 <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020594:	b590      	push	{r4, r7, lr}
 8020596:	b08b      	sub	sp, #44	; 0x2c
 8020598:	af00      	add	r7, sp, #0
 802059a:	60f8      	str	r0, [r7, #12]
 802059c:	60b9      	str	r1, [r7, #8]
 802059e:	607a      	str	r2, [r7, #4]
 80205a0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 80205a6:	683b      	ldr	r3, [r7, #0]
 80205a8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 80205aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80205ac:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 80205ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80205b0:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 80205b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80205b4:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80205b6:	4b08      	ldr	r3, [pc, #32]	; (80205d8 <_tx_byte_pool_performance_system_info_get+0x44>)
 80205b8:	f859 3003 	ldr.w	r3, [r9, r3]
 80205bc:	681c      	ldr	r4, [r3, #0]
 80205be:	68f9      	ldr	r1, [r7, #12]
 80205c0:	68ba      	ldr	r2, [r7, #8]
 80205c2:	f107 0310 	add.w	r3, r7, #16
 80205c6:	200e      	movs	r0, #14
 80205c8:	47a0      	blx	r4
 80205ca:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80205cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80205ce:	4618      	mov	r0, r3
 80205d0:	372c      	adds	r7, #44	; 0x2c
 80205d2:	46bd      	mov	sp, r7
 80205d4:	bd90      	pop	{r4, r7, pc}
 80205d6:	bf00      	nop
 80205d8:	00000004 	.word	0x00000004

080205dc <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 80205dc:	b590      	push	{r4, r7, lr}
 80205de:	b085      	sub	sp, #20
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80205e4:	4b07      	ldr	r3, [pc, #28]	; (8020604 <_txe_byte_pool_prioritize+0x28>)
 80205e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80205ea:	681c      	ldr	r4, [r3, #0]
 80205ec:	6879      	ldr	r1, [r7, #4]
 80205ee:	2300      	movs	r3, #0
 80205f0:	2200      	movs	r2, #0
 80205f2:	200f      	movs	r0, #15
 80205f4:	47a0      	blx	r4
 80205f6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80205f8:	68fb      	ldr	r3, [r7, #12]
}
 80205fa:	4618      	mov	r0, r3
 80205fc:	3714      	adds	r7, #20
 80205fe:	46bd      	mov	sp, r7
 8020600:	bd90      	pop	{r4, r7, pc}
 8020602:	bf00      	nop
 8020604:	00000004 	.word	0x00000004

08020608 <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 8020608:	b590      	push	{r4, r7, lr}
 802060a:	b085      	sub	sp, #20
 802060c:	af00      	add	r7, sp, #0
 802060e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 8020610:	4b07      	ldr	r3, [pc, #28]	; (8020630 <_txe_byte_release+0x28>)
 8020612:	f859 3003 	ldr.w	r3, [r9, r3]
 8020616:	681c      	ldr	r4, [r3, #0]
 8020618:	6879      	ldr	r1, [r7, #4]
 802061a:	2300      	movs	r3, #0
 802061c:	2200      	movs	r2, #0
 802061e:	2010      	movs	r0, #16
 8020620:	47a0      	blx	r4
 8020622:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020624:	68fb      	ldr	r3, [r7, #12]
}
 8020626:	4618      	mov	r0, r3
 8020628:	3714      	adds	r7, #20
 802062a:	46bd      	mov	sp, r7
 802062c:	bd90      	pop	{r4, r7, pc}
 802062e:	bf00      	nop
 8020630:	00000004 	.word	0x00000004

08020634 <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8020634:	b590      	push	{r4, r7, lr}
 8020636:	b087      	sub	sp, #28
 8020638:	af00      	add	r7, sp, #0
 802063a:	60f8      	str	r0, [r7, #12]
 802063c:	60b9      	str	r1, [r7, #8]
 802063e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 8020640:	4b07      	ldr	r3, [pc, #28]	; (8020660 <_txe_event_flags_create+0x2c>)
 8020642:	f859 3003 	ldr.w	r3, [r9, r3]
 8020646:	681c      	ldr	r4, [r3, #0]
 8020648:	68f9      	ldr	r1, [r7, #12]
 802064a:	68ba      	ldr	r2, [r7, #8]
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	2011      	movs	r0, #17
 8020650:	47a0      	blx	r4
 8020652:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020654:	697b      	ldr	r3, [r7, #20]
}
 8020656:	4618      	mov	r0, r3
 8020658:	371c      	adds	r7, #28
 802065a:	46bd      	mov	sp, r7
 802065c:	bd90      	pop	{r4, r7, pc}
 802065e:	bf00      	nop
 8020660:	00000004 	.word	0x00000004

08020664 <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8020664:	b590      	push	{r4, r7, lr}
 8020666:	b085      	sub	sp, #20
 8020668:	af00      	add	r7, sp, #0
 802066a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 802066c:	4b07      	ldr	r3, [pc, #28]	; (802068c <_txe_event_flags_delete+0x28>)
 802066e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020672:	681c      	ldr	r4, [r3, #0]
 8020674:	6879      	ldr	r1, [r7, #4]
 8020676:	2300      	movs	r3, #0
 8020678:	2200      	movs	r2, #0
 802067a:	2012      	movs	r0, #18
 802067c:	47a0      	blx	r4
 802067e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020680:	68fb      	ldr	r3, [r7, #12]
}
 8020682:	4618      	mov	r0, r3
 8020684:	3714      	adds	r7, #20
 8020686:	46bd      	mov	sp, r7
 8020688:	bd90      	pop	{r4, r7, pc}
 802068a:	bf00      	nop
 802068c:	00000004 	.word	0x00000004

08020690 <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8020690:	b590      	push	{r4, r7, lr}
 8020692:	b089      	sub	sp, #36	; 0x24
 8020694:	af00      	add	r7, sp, #0
 8020696:	60f8      	str	r0, [r7, #12]
 8020698:	60b9      	str	r1, [r7, #8]
 802069a:	607a      	str	r2, [r7, #4]
 802069c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 80206a2:	683b      	ldr	r3, [r7, #0]
 80206a4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 80206a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206a8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 80206aa:	4b08      	ldr	r3, [pc, #32]	; (80206cc <_txe_event_flags_get+0x3c>)
 80206ac:	f859 3003 	ldr.w	r3, [r9, r3]
 80206b0:	681c      	ldr	r4, [r3, #0]
 80206b2:	68f9      	ldr	r1, [r7, #12]
 80206b4:	f107 0310 	add.w	r3, r7, #16
 80206b8:	68ba      	ldr	r2, [r7, #8]
 80206ba:	2013      	movs	r0, #19
 80206bc:	47a0      	blx	r4
 80206be:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206c0:	69fb      	ldr	r3, [r7, #28]
}
 80206c2:	4618      	mov	r0, r3
 80206c4:	3724      	adds	r7, #36	; 0x24
 80206c6:	46bd      	mov	sp, r7
 80206c8:	bd90      	pop	{r4, r7, pc}
 80206ca:	bf00      	nop
 80206cc:	00000004 	.word	0x00000004

080206d0 <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 80206d0:	b590      	push	{r4, r7, lr}
 80206d2:	b08b      	sub	sp, #44	; 0x2c
 80206d4:	af00      	add	r7, sp, #0
 80206d6:	60f8      	str	r0, [r7, #12]
 80206d8:	60b9      	str	r1, [r7, #8]
 80206da:	607a      	str	r2, [r7, #4]
 80206dc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 80206de:	687b      	ldr	r3, [r7, #4]
 80206e0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 80206e2:	683b      	ldr	r3, [r7, #0]
 80206e4:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 80206e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206e8:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 80206ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206ec:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80206ee:	4b08      	ldr	r3, [pc, #32]	; (8020710 <_txe_event_flags_info_get+0x40>)
 80206f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80206f4:	681c      	ldr	r4, [r3, #0]
 80206f6:	68f9      	ldr	r1, [r7, #12]
 80206f8:	68ba      	ldr	r2, [r7, #8]
 80206fa:	f107 0314 	add.w	r3, r7, #20
 80206fe:	2014      	movs	r0, #20
 8020700:	47a0      	blx	r4
 8020702:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020706:	4618      	mov	r0, r3
 8020708:	372c      	adds	r7, #44	; 0x2c
 802070a:	46bd      	mov	sp, r7
 802070c:	bd90      	pop	{r4, r7, pc}
 802070e:	bf00      	nop
 8020710:	00000004 	.word	0x00000004

08020714 <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020714:	b590      	push	{r4, r7, lr}
 8020716:	b089      	sub	sp, #36	; 0x24
 8020718:	af00      	add	r7, sp, #0
 802071a:	60f8      	str	r0, [r7, #12]
 802071c:	60b9      	str	r1, [r7, #8]
 802071e:	607a      	str	r2, [r7, #4]
 8020720:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020726:	683b      	ldr	r3, [r7, #0]
 8020728:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 802072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802072c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 802072e:	4b08      	ldr	r3, [pc, #32]	; (8020750 <_tx_event_flags_performance_info_get+0x3c>)
 8020730:	f859 3003 	ldr.w	r3, [r9, r3]
 8020734:	681c      	ldr	r4, [r3, #0]
 8020736:	68f9      	ldr	r1, [r7, #12]
 8020738:	68ba      	ldr	r2, [r7, #8]
 802073a:	f107 0310 	add.w	r3, r7, #16
 802073e:	2015      	movs	r0, #21
 8020740:	47a0      	blx	r4
 8020742:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020744:	69fb      	ldr	r3, [r7, #28]
}
 8020746:	4618      	mov	r0, r3
 8020748:	3724      	adds	r7, #36	; 0x24
 802074a:	46bd      	mov	sp, r7
 802074c:	bd90      	pop	{r4, r7, pc}
 802074e:	bf00      	nop
 8020750:	00000004 	.word	0x00000004

08020754 <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020754:	b590      	push	{r4, r7, lr}
 8020756:	b089      	sub	sp, #36	; 0x24
 8020758:	af00      	add	r7, sp, #0
 802075a:	60f8      	str	r0, [r7, #12]
 802075c:	60b9      	str	r1, [r7, #8]
 802075e:	607a      	str	r2, [r7, #4]
 8020760:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020766:	683b      	ldr	r3, [r7, #0]
 8020768:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 802076a:	4b08      	ldr	r3, [pc, #32]	; (802078c <_tx_event_flags_performance_system_info_get+0x38>)
 802076c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020770:	681c      	ldr	r4, [r3, #0]
 8020772:	68f9      	ldr	r1, [r7, #12]
 8020774:	68ba      	ldr	r2, [r7, #8]
 8020776:	f107 0314 	add.w	r3, r7, #20
 802077a:	2016      	movs	r0, #22
 802077c:	47a0      	blx	r4
 802077e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020780:	69fb      	ldr	r3, [r7, #28]
}
 8020782:	4618      	mov	r0, r3
 8020784:	3724      	adds	r7, #36	; 0x24
 8020786:	46bd      	mov	sp, r7
 8020788:	bd90      	pop	{r4, r7, pc}
 802078a:	bf00      	nop
 802078c:	00000004 	.word	0x00000004

08020790 <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8020790:	b590      	push	{r4, r7, lr}
 8020792:	b087      	sub	sp, #28
 8020794:	af00      	add	r7, sp, #0
 8020796:	60f8      	str	r0, [r7, #12]
 8020798:	60b9      	str	r1, [r7, #8]
 802079a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 802079c:	4b07      	ldr	r3, [pc, #28]	; (80207bc <_txe_event_flags_set+0x2c>)
 802079e:	f859 3003 	ldr.w	r3, [r9, r3]
 80207a2:	681c      	ldr	r4, [r3, #0]
 80207a4:	68f9      	ldr	r1, [r7, #12]
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	68ba      	ldr	r2, [r7, #8]
 80207aa:	2017      	movs	r0, #23
 80207ac:	47a0      	blx	r4
 80207ae:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80207b0:	697b      	ldr	r3, [r7, #20]
}
 80207b2:	4618      	mov	r0, r3
 80207b4:	371c      	adds	r7, #28
 80207b6:	46bd      	mov	sp, r7
 80207b8:	bd90      	pop	{r4, r7, pc}
 80207ba:	bf00      	nop
 80207bc:	00000004 	.word	0x00000004

080207c0 <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80207c0:	b590      	push	{r4, r7, lr}
 80207c2:	b085      	sub	sp, #20
 80207c4:	af00      	add	r7, sp, #0
 80207c6:	6078      	str	r0, [r7, #4]
 80207c8:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80207ca:	4b07      	ldr	r3, [pc, #28]	; (80207e8 <_txe_event_flags_set_notify+0x28>)
 80207cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80207d0:	681c      	ldr	r4, [r3, #0]
 80207d2:	6879      	ldr	r1, [r7, #4]
 80207d4:	683a      	ldr	r2, [r7, #0]
 80207d6:	2300      	movs	r3, #0
 80207d8:	2018      	movs	r0, #24
 80207da:	47a0      	blx	r4
 80207dc:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80207de:	68fb      	ldr	r3, [r7, #12]
}
 80207e0:	4618      	mov	r0, r3
 80207e2:	3714      	adds	r7, #20
 80207e4:	46bd      	mov	sp, r7
 80207e6:	bd90      	pop	{r4, r7, pc}
 80207e8:	00000004 	.word	0x00000004

080207ec <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 80207ec:	b590      	push	{r4, r7, lr}
 80207ee:	b087      	sub	sp, #28
 80207f0:	af00      	add	r7, sp, #0
 80207f2:	60f8      	str	r0, [r7, #12]
 80207f4:	60b9      	str	r1, [r7, #8]
 80207f6:	607a      	str	r2, [r7, #4]
 80207f8:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 80207fa:	4b08      	ldr	r3, [pc, #32]	; (802081c <_txm_module_application_request+0x30>)
 80207fc:	f859 3003 	ldr.w	r3, [r9, r3]
 8020800:	681c      	ldr	r4, [r3, #0]
 8020802:	68fb      	ldr	r3, [r7, #12]
 8020804:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 8020808:	683b      	ldr	r3, [r7, #0]
 802080a:	687a      	ldr	r2, [r7, #4]
 802080c:	68b9      	ldr	r1, [r7, #8]
 802080e:	47a0      	blx	r4
 8020810:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020812:	697b      	ldr	r3, [r7, #20]
}
 8020814:	4618      	mov	r0, r3
 8020816:	371c      	adds	r7, #28
 8020818:	46bd      	mov	sp, r7
 802081a:	bd90      	pop	{r4, r7, pc}
 802081c:	00000004 	.word	0x00000004

08020820 <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 8020820:	b580      	push	{r7, lr}
 8020822:	b098      	sub	sp, #96	; 0x60
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 8020828:	4b2d      	ldr	r3, [pc, #180]	; (80208e0 <_txm_module_callback_request_thread_entry+0xc0>)
 802082a:	f859 3003 	ldr.w	r3, [r9, r3]
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020832:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020834:	f107 030c 	add.w	r3, r7, #12
 8020838:	f04f 32ff 	mov.w	r2, #4294967295
 802083c:	4619      	mov	r1, r3
 802083e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020840:	f000 fad8 	bl	8020df4 <_txe_queue_receive>
 8020844:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 8020846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020848:	2b00      	cmp	r3, #0
 802084a:	d144      	bne.n	80208d6 <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 802084c:	693b      	ldr	r3, [r7, #16]
 802084e:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020850:	e03d      	b.n	80208ce <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 8020852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020854:	3b01      	subs	r3, #1
 8020856:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 8020858:	68fb      	ldr	r3, [r7, #12]
 802085a:	2b04      	cmp	r3, #4
 802085c:	d836      	bhi.n	80208cc <_txm_module_callback_request_thread_entry+0xac>
 802085e:	a202      	add	r2, pc, #8	; (adr r2, 8020868 <_txm_module_callback_request_thread_entry+0x48>)
 8020860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020864:	441a      	add	r2, r3
 8020866:	4710      	bx	r2
 8020868:	00000015 	.word	0x00000015
 802086c:	00000023 	.word	0x00000023
 8020870:	00000033 	.word	0x00000033
 8020874:	00000043 	.word	0x00000043
 8020878:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 802087c:	697b      	ldr	r3, [r7, #20]
 802087e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020880:	69ba      	ldr	r2, [r7, #24]
 8020882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020884:	4610      	mov	r0, r2
 8020886:	4798      	blx	r3

                break;
 8020888:	e021      	b.n	80208ce <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 802088a:	697b      	ldr	r3, [r7, #20]
 802088c:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 802088e:	69bb      	ldr	r3, [r7, #24]
 8020890:	461a      	mov	r2, r3
 8020892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020894:	4610      	mov	r0, r2
 8020896:	4798      	blx	r3

                break;
 8020898:	e019      	b.n	80208ce <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 802089a:	697b      	ldr	r3, [r7, #20]
 802089c:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 802089e:	69bb      	ldr	r3, [r7, #24]
 80208a0:	461a      	mov	r2, r3
 80208a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80208a4:	4610      	mov	r0, r2
 80208a6:	4798      	blx	r3

                break;
 80208a8:	e011      	b.n	80208ce <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 80208aa:	697b      	ldr	r3, [r7, #20]
 80208ac:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 80208ae:	69bb      	ldr	r3, [r7, #24]
 80208b0:	461a      	mov	r2, r3
 80208b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80208b4:	4610      	mov	r0, r2
 80208b6:	4798      	blx	r3

                break;
 80208b8:	e009      	b.n	80208ce <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 80208ba:	697b      	ldr	r3, [r7, #20]
 80208bc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 80208be:	69bb      	ldr	r3, [r7, #24]
 80208c0:	4618      	mov	r0, r3
 80208c2:	69fa      	ldr	r2, [r7, #28]
 80208c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80208c6:	4611      	mov	r1, r2
 80208c8:	4798      	blx	r3

                break;
 80208ca:	e000      	b.n	80208ce <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 80208cc:	bf00      	nop
        while (activation_count)
 80208ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	d1be      	bne.n	8020852 <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 80208d4:	e7ae      	b.n	8020834 <_txm_module_callback_request_thread_entry+0x14>
            break;
 80208d6:	bf00      	nop
            }
        }
    }
}
 80208d8:	bf00      	nop
 80208da:	3760      	adds	r7, #96	; 0x60
 80208dc:	46bd      	mov	sp, r7
 80208de:	bd80      	pop	{r7, pc}
 80208e0:	00000008 	.word	0x00000008

080208e4 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 80208e4:	b590      	push	{r4, r7, lr}
 80208e6:	b085      	sub	sp, #20
 80208e8:	af00      	add	r7, sp, #0
 80208ea:	6078      	str	r0, [r7, #4]
 80208ec:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 80208ee:	4b07      	ldr	r3, [pc, #28]	; (802090c <_txm_module_object_allocate+0x28>)
 80208f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80208f4:	681c      	ldr	r4, [r3, #0]
 80208f6:	6879      	ldr	r1, [r7, #4]
 80208f8:	2300      	movs	r3, #0
 80208fa:	683a      	ldr	r2, [r7, #0]
 80208fc:	205f      	movs	r0, #95	; 0x5f
 80208fe:	47a0      	blx	r4
 8020900:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020902:	68fb      	ldr	r3, [r7, #12]
}
 8020904:	4618      	mov	r0, r3
 8020906:	3714      	adds	r7, #20
 8020908:	46bd      	mov	sp, r7
 802090a:	bd90      	pop	{r4, r7, pc}
 802090c:	00000004 	.word	0x00000004

08020910 <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 8020910:	b590      	push	{r4, r7, lr}
 8020912:	b085      	sub	sp, #20
 8020914:	af00      	add	r7, sp, #0
 8020916:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 8020918:	4b07      	ldr	r3, [pc, #28]	; (8020938 <_txm_module_object_deallocate+0x28>)
 802091a:	f859 3003 	ldr.w	r3, [r9, r3]
 802091e:	681c      	ldr	r4, [r3, #0]
 8020920:	6879      	ldr	r1, [r7, #4]
 8020922:	2300      	movs	r3, #0
 8020924:	2200      	movs	r2, #0
 8020926:	2060      	movs	r0, #96	; 0x60
 8020928:	47a0      	blx	r4
 802092a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802092c:	68fb      	ldr	r3, [r7, #12]
}
 802092e:	4618      	mov	r0, r3
 8020930:	3714      	adds	r7, #20
 8020932:	46bd      	mov	sp, r7
 8020934:	bd90      	pop	{r4, r7, pc}
 8020936:	bf00      	nop
 8020938:	00000004 	.word	0x00000004

0802093c <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 802093c:	b590      	push	{r4, r7, lr}
 802093e:	b087      	sub	sp, #28
 8020940:	af00      	add	r7, sp, #0
 8020942:	60f8      	str	r0, [r7, #12]
 8020944:	60b9      	str	r1, [r7, #8]
 8020946:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020948:	4b07      	ldr	r3, [pc, #28]	; (8020968 <_txm_module_object_pointer_get+0x2c>)
 802094a:	f859 3003 	ldr.w	r3, [r9, r3]
 802094e:	681c      	ldr	r4, [r3, #0]
 8020950:	68ba      	ldr	r2, [r7, #8]
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	68f9      	ldr	r1, [r7, #12]
 8020956:	205d      	movs	r0, #93	; 0x5d
 8020958:	47a0      	blx	r4
 802095a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802095c:	697b      	ldr	r3, [r7, #20]
}
 802095e:	4618      	mov	r0, r3
 8020960:	371c      	adds	r7, #28
 8020962:	46bd      	mov	sp, r7
 8020964:	bd90      	pop	{r4, r7, pc}
 8020966:	bf00      	nop
 8020968:	00000004 	.word	0x00000004

0802096c <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 802096c:	b590      	push	{r4, r7, lr}
 802096e:	b089      	sub	sp, #36	; 0x24
 8020970:	af00      	add	r7, sp, #0
 8020972:	60f8      	str	r0, [r7, #12]
 8020974:	60b9      	str	r1, [r7, #8]
 8020976:	607a      	str	r2, [r7, #4]
 8020978:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 802097e:	683b      	ldr	r3, [r7, #0]
 8020980:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020982:	4b08      	ldr	r3, [pc, #32]	; (80209a4 <_txm_module_object_pointer_get_extended+0x38>)
 8020984:	f859 3003 	ldr.w	r3, [r9, r3]
 8020988:	681c      	ldr	r4, [r3, #0]
 802098a:	68ba      	ldr	r2, [r7, #8]
 802098c:	f107 0314 	add.w	r3, r7, #20
 8020990:	68f9      	ldr	r1, [r7, #12]
 8020992:	205e      	movs	r0, #94	; 0x5e
 8020994:	47a0      	blx	r4
 8020996:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020998:	69fb      	ldr	r3, [r7, #28]
}
 802099a:	4618      	mov	r0, r3
 802099c:	3724      	adds	r7, #36	; 0x24
 802099e:	46bd      	mov	sp, r7
 80209a0:	bd90      	pop	{r4, r7, pc}
 80209a2:	bf00      	nop
 80209a4:	00000004 	.word	0x00000004

080209a8 <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 80209a8:	b580      	push	{r7, lr}
 80209aa:	b084      	sub	sp, #16
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	6078      	str	r0, [r7, #4]
 80209b0:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 80209b2:	683b      	ldr	r3, [r7, #0]
 80209b4:	69db      	ldr	r3, [r3, #28]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d01b      	beq.n	80209f2 <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 80209ba:	683b      	ldr	r3, [r7, #0]
 80209bc:	68db      	ldr	r3, [r3, #12]
 80209be:	4618      	mov	r0, r3
 80209c0:	f000 ff2e 	bl	8021820 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 80209c4:	4b1b      	ldr	r3, [pc, #108]	; (8020a34 <_txm_module_thread_shell_entry+0x8c>)
 80209c6:	f859 3003 	ldr.w	r3, [r9, r3]
 80209ca:	683a      	ldr	r2, [r7, #0]
 80209cc:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 80209ce:	683b      	ldr	r3, [r7, #0]
 80209d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209d2:	4b19      	ldr	r3, [pc, #100]	; (8020a38 <_txm_module_thread_shell_entry+0x90>)
 80209d4:	f859 3003 	ldr.w	r3, [r9, r3]
 80209d8:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 80209da:	bf00      	nop
 80209dc:	4b16      	ldr	r3, [pc, #88]	; (8020a38 <_txm_module_thread_shell_entry+0x90>)
 80209de:	f859 3003 	ldr.w	r3, [r9, r3]
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	d0f9      	beq.n	80209dc <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 80209e8:	683b      	ldr	r3, [r7, #0]
 80209ea:	6a1b      	ldr	r3, [r3, #32]
 80209ec:	4618      	mov	r0, r3
 80209ee:	f000 fca3 	bl	8021338 <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 80209f2:	683b      	ldr	r3, [r7, #0]
 80209f4:	699b      	ldr	r3, [r3, #24]
 80209f6:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80209f8:	68fb      	ldr	r3, [r7, #12]
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d003      	beq.n	8020a06 <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80209fe:	68fb      	ldr	r3, [r7, #12]
 8020a00:	2100      	movs	r1, #0
 8020a02:	6878      	ldr	r0, [r7, #4]
 8020a04:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	691b      	ldr	r3, [r3, #16]
 8020a0a:	683a      	ldr	r2, [r7, #0]
 8020a0c:	6952      	ldr	r2, [r2, #20]
 8020a0e:	4610      	mov	r0, r2
 8020a10:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020a12:	683b      	ldr	r3, [r7, #0]
 8020a14:	699b      	ldr	r3, [r3, #24]
 8020a16:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020a18:	68fb      	ldr	r3, [r7, #12]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d003      	beq.n	8020a26 <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	2101      	movs	r1, #1
 8020a22:	6878      	ldr	r0, [r7, #4]
 8020a24:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020a26:	6878      	ldr	r0, [r7, #4]
 8020a28:	f000 f808 	bl	8020a3c <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020a2c:	bf00      	nop
 8020a2e:	3710      	adds	r7, #16
 8020a30:	46bd      	mov	sp, r7
 8020a32:	bd80      	pop	{r7, pc}
 8020a34:	00000008 	.word	0x00000008
 8020a38:	00000004 	.word	0x00000004

08020a3c <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020a3c:	b590      	push	{r4, r7, lr}
 8020a3e:	b085      	sub	sp, #20
 8020a40:	af00      	add	r7, sp, #0
 8020a42:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020a44:	4b07      	ldr	r3, [pc, #28]	; (8020a64 <_txm_module_thread_system_suspend+0x28>)
 8020a46:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a4a:	681c      	ldr	r4, [r3, #0]
 8020a4c:	6879      	ldr	r1, [r7, #4]
 8020a4e:	2300      	movs	r3, #0
 8020a50:	2200      	movs	r2, #0
 8020a52:	205c      	movs	r0, #92	; 0x5c
 8020a54:	47a0      	blx	r4
 8020a56:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020a58:	68fb      	ldr	r3, [r7, #12]
}
 8020a5a:	4618      	mov	r0, r3
 8020a5c:	3714      	adds	r7, #20
 8020a5e:	46bd      	mov	sp, r7
 8020a60:	bd90      	pop	{r4, r7, pc}
 8020a62:	bf00      	nop
 8020a64:	00000004 	.word	0x00000004

08020a68 <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020a68:	b590      	push	{r4, r7, lr}
 8020a6a:	b089      	sub	sp, #36	; 0x24
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	60f8      	str	r0, [r7, #12]
 8020a70:	60b9      	str	r1, [r7, #8]
 8020a72:	607a      	str	r2, [r7, #4]
 8020a74:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020a7e:	4b08      	ldr	r3, [pc, #32]	; (8020aa0 <_txe_mutex_create+0x38>)
 8020a80:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a84:	681c      	ldr	r4, [r3, #0]
 8020a86:	68f9      	ldr	r1, [r7, #12]
 8020a88:	68ba      	ldr	r2, [r7, #8]
 8020a8a:	f107 0314 	add.w	r3, r7, #20
 8020a8e:	201a      	movs	r0, #26
 8020a90:	47a0      	blx	r4
 8020a92:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020a94:	69fb      	ldr	r3, [r7, #28]
}
 8020a96:	4618      	mov	r0, r3
 8020a98:	3724      	adds	r7, #36	; 0x24
 8020a9a:	46bd      	mov	sp, r7
 8020a9c:	bd90      	pop	{r4, r7, pc}
 8020a9e:	bf00      	nop
 8020aa0:	00000004 	.word	0x00000004

08020aa4 <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020aa4:	b590      	push	{r4, r7, lr}
 8020aa6:	b085      	sub	sp, #20
 8020aa8:	af00      	add	r7, sp, #0
 8020aaa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020aac:	4b07      	ldr	r3, [pc, #28]	; (8020acc <_txe_mutex_delete+0x28>)
 8020aae:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ab2:	681c      	ldr	r4, [r3, #0]
 8020ab4:	6879      	ldr	r1, [r7, #4]
 8020ab6:	2300      	movs	r3, #0
 8020ab8:	2200      	movs	r2, #0
 8020aba:	201b      	movs	r0, #27
 8020abc:	47a0      	blx	r4
 8020abe:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ac0:	68fb      	ldr	r3, [r7, #12]
}
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3714      	adds	r7, #20
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd90      	pop	{r4, r7, pc}
 8020aca:	bf00      	nop
 8020acc:	00000004 	.word	0x00000004

08020ad0 <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020ad0:	b590      	push	{r4, r7, lr}
 8020ad2:	b085      	sub	sp, #20
 8020ad4:	af00      	add	r7, sp, #0
 8020ad6:	6078      	str	r0, [r7, #4]
 8020ad8:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020ada:	4b07      	ldr	r3, [pc, #28]	; (8020af8 <_txe_mutex_get+0x28>)
 8020adc:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ae0:	681c      	ldr	r4, [r3, #0]
 8020ae2:	6879      	ldr	r1, [r7, #4]
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	683a      	ldr	r2, [r7, #0]
 8020ae8:	201c      	movs	r0, #28
 8020aea:	47a0      	blx	r4
 8020aec:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020aee:	68fb      	ldr	r3, [r7, #12]
}
 8020af0:	4618      	mov	r0, r3
 8020af2:	3714      	adds	r7, #20
 8020af4:	46bd      	mov	sp, r7
 8020af6:	bd90      	pop	{r4, r7, pc}
 8020af8:	00000004 	.word	0x00000004

08020afc <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020afc:	b590      	push	{r4, r7, lr}
 8020afe:	b08b      	sub	sp, #44	; 0x2c
 8020b00:	af00      	add	r7, sp, #0
 8020b02:	60f8      	str	r0, [r7, #12]
 8020b04:	60b9      	str	r1, [r7, #8]
 8020b06:	607a      	str	r2, [r7, #4]
 8020b08:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020b0e:	683b      	ldr	r3, [r7, #0]
 8020b10:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b14:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b18:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b1c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020b1e:	4b08      	ldr	r3, [pc, #32]	; (8020b40 <_txe_mutex_info_get+0x44>)
 8020b20:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b24:	681c      	ldr	r4, [r3, #0]
 8020b26:	68f9      	ldr	r1, [r7, #12]
 8020b28:	68ba      	ldr	r2, [r7, #8]
 8020b2a:	f107 0310 	add.w	r3, r7, #16
 8020b2e:	201d      	movs	r0, #29
 8020b30:	47a0      	blx	r4
 8020b32:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020b36:	4618      	mov	r0, r3
 8020b38:	372c      	adds	r7, #44	; 0x2c
 8020b3a:	46bd      	mov	sp, r7
 8020b3c:	bd90      	pop	{r4, r7, pc}
 8020b3e:	bf00      	nop
 8020b40:	00000004 	.word	0x00000004

08020b44 <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020b44:	b590      	push	{r4, r7, lr}
 8020b46:	b08b      	sub	sp, #44	; 0x2c
 8020b48:	af00      	add	r7, sp, #0
 8020b4a:	60f8      	str	r0, [r7, #12]
 8020b4c:	60b9      	str	r1, [r7, #8]
 8020b4e:	607a      	str	r2, [r7, #4]
 8020b50:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020b56:	683b      	ldr	r3, [r7, #0]
 8020b58:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b5c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b60:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b64:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020b66:	4b08      	ldr	r3, [pc, #32]	; (8020b88 <_tx_mutex_performance_info_get+0x44>)
 8020b68:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b6c:	681c      	ldr	r4, [r3, #0]
 8020b6e:	68f9      	ldr	r1, [r7, #12]
 8020b70:	68ba      	ldr	r2, [r7, #8]
 8020b72:	f107 0310 	add.w	r3, r7, #16
 8020b76:	201e      	movs	r0, #30
 8020b78:	47a0      	blx	r4
 8020b7a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020b7e:	4618      	mov	r0, r3
 8020b80:	372c      	adds	r7, #44	; 0x2c
 8020b82:	46bd      	mov	sp, r7
 8020b84:	bd90      	pop	{r4, r7, pc}
 8020b86:	bf00      	nop
 8020b88:	00000004 	.word	0x00000004

08020b8c <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020b8c:	b590      	push	{r4, r7, lr}
 8020b8e:	b08b      	sub	sp, #44	; 0x2c
 8020b90:	af00      	add	r7, sp, #0
 8020b92:	60f8      	str	r0, [r7, #12]
 8020b94:	60b9      	str	r1, [r7, #8]
 8020b96:	607a      	str	r2, [r7, #4]
 8020b98:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020b9e:	683b      	ldr	r3, [r7, #0]
 8020ba0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ba4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020ba8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020baa:	4b08      	ldr	r3, [pc, #32]	; (8020bcc <_tx_mutex_performance_system_info_get+0x40>)
 8020bac:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bb0:	681c      	ldr	r4, [r3, #0]
 8020bb2:	68f9      	ldr	r1, [r7, #12]
 8020bb4:	68ba      	ldr	r2, [r7, #8]
 8020bb6:	f107 0314 	add.w	r3, r7, #20
 8020bba:	201f      	movs	r0, #31
 8020bbc:	47a0      	blx	r4
 8020bbe:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020bc2:	4618      	mov	r0, r3
 8020bc4:	372c      	adds	r7, #44	; 0x2c
 8020bc6:	46bd      	mov	sp, r7
 8020bc8:	bd90      	pop	{r4, r7, pc}
 8020bca:	bf00      	nop
 8020bcc:	00000004 	.word	0x00000004

08020bd0 <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020bd0:	b590      	push	{r4, r7, lr}
 8020bd2:	b085      	sub	sp, #20
 8020bd4:	af00      	add	r7, sp, #0
 8020bd6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020bd8:	4b07      	ldr	r3, [pc, #28]	; (8020bf8 <_txe_mutex_prioritize+0x28>)
 8020bda:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bde:	681c      	ldr	r4, [r3, #0]
 8020be0:	6879      	ldr	r1, [r7, #4]
 8020be2:	2300      	movs	r3, #0
 8020be4:	2200      	movs	r2, #0
 8020be6:	2020      	movs	r0, #32
 8020be8:	47a0      	blx	r4
 8020bea:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020bec:	68fb      	ldr	r3, [r7, #12]
}
 8020bee:	4618      	mov	r0, r3
 8020bf0:	3714      	adds	r7, #20
 8020bf2:	46bd      	mov	sp, r7
 8020bf4:	bd90      	pop	{r4, r7, pc}
 8020bf6:	bf00      	nop
 8020bf8:	00000004 	.word	0x00000004

08020bfc <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020bfc:	b590      	push	{r4, r7, lr}
 8020bfe:	b085      	sub	sp, #20
 8020c00:	af00      	add	r7, sp, #0
 8020c02:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020c04:	4b07      	ldr	r3, [pc, #28]	; (8020c24 <_txe_mutex_put+0x28>)
 8020c06:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c0a:	681c      	ldr	r4, [r3, #0]
 8020c0c:	6879      	ldr	r1, [r7, #4]
 8020c0e:	2300      	movs	r3, #0
 8020c10:	2200      	movs	r2, #0
 8020c12:	2021      	movs	r0, #33	; 0x21
 8020c14:	47a0      	blx	r4
 8020c16:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c18:	68fb      	ldr	r3, [r7, #12]
}
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	3714      	adds	r7, #20
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	bd90      	pop	{r4, r7, pc}
 8020c22:	bf00      	nop
 8020c24:	00000004 	.word	0x00000004

08020c28 <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020c28:	b590      	push	{r4, r7, lr}
 8020c2a:	b08b      	sub	sp, #44	; 0x2c
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	60f8      	str	r0, [r7, #12]
 8020c30:	60b9      	str	r1, [r7, #8]
 8020c32:	607a      	str	r2, [r7, #4]
 8020c34:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020c3a:	683b      	ldr	r3, [r7, #0]
 8020c3c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c40:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c44:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020c46:	4b08      	ldr	r3, [pc, #32]	; (8020c68 <_txe_queue_create+0x40>)
 8020c48:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c4c:	681c      	ldr	r4, [r3, #0]
 8020c4e:	68f9      	ldr	r1, [r7, #12]
 8020c50:	68ba      	ldr	r2, [r7, #8]
 8020c52:	f107 0314 	add.w	r3, r7, #20
 8020c56:	2022      	movs	r0, #34	; 0x22
 8020c58:	47a0      	blx	r4
 8020c5a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020c5e:	4618      	mov	r0, r3
 8020c60:	372c      	adds	r7, #44	; 0x2c
 8020c62:	46bd      	mov	sp, r7
 8020c64:	bd90      	pop	{r4, r7, pc}
 8020c66:	bf00      	nop
 8020c68:	00000004 	.word	0x00000004

08020c6c <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020c6c:	b590      	push	{r4, r7, lr}
 8020c6e:	b085      	sub	sp, #20
 8020c70:	af00      	add	r7, sp, #0
 8020c72:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020c74:	4b07      	ldr	r3, [pc, #28]	; (8020c94 <_txe_queue_delete+0x28>)
 8020c76:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c7a:	681c      	ldr	r4, [r3, #0]
 8020c7c:	6879      	ldr	r1, [r7, #4]
 8020c7e:	2300      	movs	r3, #0
 8020c80:	2200      	movs	r2, #0
 8020c82:	2023      	movs	r0, #35	; 0x23
 8020c84:	47a0      	blx	r4
 8020c86:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c88:	68fb      	ldr	r3, [r7, #12]
}
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	3714      	adds	r7, #20
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	bd90      	pop	{r4, r7, pc}
 8020c92:	bf00      	nop
 8020c94:	00000004 	.word	0x00000004

08020c98 <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020c98:	b590      	push	{r4, r7, lr}
 8020c9a:	b085      	sub	sp, #20
 8020c9c:	af00      	add	r7, sp, #0
 8020c9e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020ca0:	4b07      	ldr	r3, [pc, #28]	; (8020cc0 <_txe_queue_flush+0x28>)
 8020ca2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ca6:	681c      	ldr	r4, [r3, #0]
 8020ca8:	6879      	ldr	r1, [r7, #4]
 8020caa:	2300      	movs	r3, #0
 8020cac:	2200      	movs	r2, #0
 8020cae:	2024      	movs	r0, #36	; 0x24
 8020cb0:	47a0      	blx	r4
 8020cb2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020cb4:	68fb      	ldr	r3, [r7, #12]
}
 8020cb6:	4618      	mov	r0, r3
 8020cb8:	3714      	adds	r7, #20
 8020cba:	46bd      	mov	sp, r7
 8020cbc:	bd90      	pop	{r4, r7, pc}
 8020cbe:	bf00      	nop
 8020cc0:	00000004 	.word	0x00000004

08020cc4 <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020cc4:	b590      	push	{r4, r7, lr}
 8020cc6:	b087      	sub	sp, #28
 8020cc8:	af00      	add	r7, sp, #0
 8020cca:	60f8      	str	r0, [r7, #12]
 8020ccc:	60b9      	str	r1, [r7, #8]
 8020cce:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020cd0:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_txe_queue_front_send+0x2c>)
 8020cd2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cd6:	681c      	ldr	r4, [r3, #0]
 8020cd8:	68f9      	ldr	r1, [r7, #12]
 8020cda:	68ba      	ldr	r2, [r7, #8]
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	2025      	movs	r0, #37	; 0x25
 8020ce0:	47a0      	blx	r4
 8020ce2:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020ce4:	697b      	ldr	r3, [r7, #20]
}
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	371c      	adds	r7, #28
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd90      	pop	{r4, r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	00000004 	.word	0x00000004

08020cf4 <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020cf4:	b590      	push	{r4, r7, lr}
 8020cf6:	b08b      	sub	sp, #44	; 0x2c
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	60f8      	str	r0, [r7, #12]
 8020cfc:	60b9      	str	r1, [r7, #8]
 8020cfe:	607a      	str	r2, [r7, #4]
 8020d00:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020d02:	687b      	ldr	r3, [r7, #4]
 8020d04:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020d06:	683b      	ldr	r3, [r7, #0]
 8020d08:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d0c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d10:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d14:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d16:	4b08      	ldr	r3, [pc, #32]	; (8020d38 <_txe_queue_info_get+0x44>)
 8020d18:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d1c:	681c      	ldr	r4, [r3, #0]
 8020d1e:	68f9      	ldr	r1, [r7, #12]
 8020d20:	68ba      	ldr	r2, [r7, #8]
 8020d22:	f107 0310 	add.w	r3, r7, #16
 8020d26:	2026      	movs	r0, #38	; 0x26
 8020d28:	47a0      	blx	r4
 8020d2a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d2e:	4618      	mov	r0, r3
 8020d30:	372c      	adds	r7, #44	; 0x2c
 8020d32:	46bd      	mov	sp, r7
 8020d34:	bd90      	pop	{r4, r7, pc}
 8020d36:	bf00      	nop
 8020d38:	00000004 	.word	0x00000004

08020d3c <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020d3c:	b590      	push	{r4, r7, lr}
 8020d3e:	b08b      	sub	sp, #44	; 0x2c
 8020d40:	af00      	add	r7, sp, #0
 8020d42:	60f8      	str	r0, [r7, #12]
 8020d44:	60b9      	str	r1, [r7, #8]
 8020d46:	607a      	str	r2, [r7, #4]
 8020d48:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020d4e:	683b      	ldr	r3, [r7, #0]
 8020d50:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d54:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d58:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d5c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020d5e:	4b08      	ldr	r3, [pc, #32]	; (8020d80 <_tx_queue_performance_info_get+0x44>)
 8020d60:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d64:	681c      	ldr	r4, [r3, #0]
 8020d66:	68f9      	ldr	r1, [r7, #12]
 8020d68:	68ba      	ldr	r2, [r7, #8]
 8020d6a:	f107 0310 	add.w	r3, r7, #16
 8020d6e:	2027      	movs	r0, #39	; 0x27
 8020d70:	47a0      	blx	r4
 8020d72:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d76:	4618      	mov	r0, r3
 8020d78:	372c      	adds	r7, #44	; 0x2c
 8020d7a:	46bd      	mov	sp, r7
 8020d7c:	bd90      	pop	{r4, r7, pc}
 8020d7e:	bf00      	nop
 8020d80:	00000004 	.word	0x00000004

08020d84 <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020d84:	b590      	push	{r4, r7, lr}
 8020d86:	b08b      	sub	sp, #44	; 0x2c
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	60f8      	str	r0, [r7, #12]
 8020d8c:	60b9      	str	r1, [r7, #8]
 8020d8e:	607a      	str	r2, [r7, #4]
 8020d90:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d9c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020da0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_tx_queue_performance_system_info_get+0x40>)
 8020da4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020da8:	681c      	ldr	r4, [r3, #0]
 8020daa:	68f9      	ldr	r1, [r7, #12]
 8020dac:	68ba      	ldr	r2, [r7, #8]
 8020dae:	f107 0314 	add.w	r3, r7, #20
 8020db2:	2028      	movs	r0, #40	; 0x28
 8020db4:	47a0      	blx	r4
 8020db6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020dba:	4618      	mov	r0, r3
 8020dbc:	372c      	adds	r7, #44	; 0x2c
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd90      	pop	{r4, r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	00000004 	.word	0x00000004

08020dc8 <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020dc8:	b590      	push	{r4, r7, lr}
 8020dca:	b085      	sub	sp, #20
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020dd0:	4b07      	ldr	r3, [pc, #28]	; (8020df0 <_txe_queue_prioritize+0x28>)
 8020dd2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dd6:	681c      	ldr	r4, [r3, #0]
 8020dd8:	6879      	ldr	r1, [r7, #4]
 8020dda:	2300      	movs	r3, #0
 8020ddc:	2200      	movs	r2, #0
 8020dde:	2029      	movs	r0, #41	; 0x29
 8020de0:	47a0      	blx	r4
 8020de2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020de4:	68fb      	ldr	r3, [r7, #12]
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	3714      	adds	r7, #20
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd90      	pop	{r4, r7, pc}
 8020dee:	bf00      	nop
 8020df0:	00000004 	.word	0x00000004

08020df4 <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8020df4:	b590      	push	{r4, r7, lr}
 8020df6:	b087      	sub	sp, #28
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	60f8      	str	r0, [r7, #12]
 8020dfc:	60b9      	str	r1, [r7, #8]
 8020dfe:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8020e00:	4b07      	ldr	r3, [pc, #28]	; (8020e20 <_txe_queue_receive+0x2c>)
 8020e02:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e06:	681c      	ldr	r4, [r3, #0]
 8020e08:	68f9      	ldr	r1, [r7, #12]
 8020e0a:	68ba      	ldr	r2, [r7, #8]
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	202a      	movs	r0, #42	; 0x2a
 8020e10:	47a0      	blx	r4
 8020e12:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020e14:	697b      	ldr	r3, [r7, #20]
}
 8020e16:	4618      	mov	r0, r3
 8020e18:	371c      	adds	r7, #28
 8020e1a:	46bd      	mov	sp, r7
 8020e1c:	bd90      	pop	{r4, r7, pc}
 8020e1e:	bf00      	nop
 8020e20:	00000004 	.word	0x00000004

08020e24 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020e24:	b590      	push	{r4, r7, lr}
 8020e26:	b087      	sub	sp, #28
 8020e28:	af00      	add	r7, sp, #0
 8020e2a:	60f8      	str	r0, [r7, #12]
 8020e2c:	60b9      	str	r1, [r7, #8]
 8020e2e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020e30:	4b07      	ldr	r3, [pc, #28]	; (8020e50 <_txe_queue_send+0x2c>)
 8020e32:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e36:	681c      	ldr	r4, [r3, #0]
 8020e38:	68f9      	ldr	r1, [r7, #12]
 8020e3a:	68ba      	ldr	r2, [r7, #8]
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	202b      	movs	r0, #43	; 0x2b
 8020e40:	47a0      	blx	r4
 8020e42:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020e44:	697b      	ldr	r3, [r7, #20]
}
 8020e46:	4618      	mov	r0, r3
 8020e48:	371c      	adds	r7, #28
 8020e4a:	46bd      	mov	sp, r7
 8020e4c:	bd90      	pop	{r4, r7, pc}
 8020e4e:	bf00      	nop
 8020e50:	00000004 	.word	0x00000004

08020e54 <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8020e54:	b590      	push	{r4, r7, lr}
 8020e56:	b085      	sub	sp, #20
 8020e58:	af00      	add	r7, sp, #0
 8020e5a:	6078      	str	r0, [r7, #4]
 8020e5c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 8020e5e:	4b07      	ldr	r3, [pc, #28]	; (8020e7c <_txe_queue_send_notify+0x28>)
 8020e60:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e64:	681c      	ldr	r4, [r3, #0]
 8020e66:	6879      	ldr	r1, [r7, #4]
 8020e68:	683a      	ldr	r2, [r7, #0]
 8020e6a:	2300      	movs	r3, #0
 8020e6c:	202c      	movs	r0, #44	; 0x2c
 8020e6e:	47a0      	blx	r4
 8020e70:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e72:	68fb      	ldr	r3, [r7, #12]
}
 8020e74:	4618      	mov	r0, r3
 8020e76:	3714      	adds	r7, #20
 8020e78:	46bd      	mov	sp, r7
 8020e7a:	bd90      	pop	{r4, r7, pc}
 8020e7c:	00000004 	.word	0x00000004

08020e80 <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8020e80:	b590      	push	{r4, r7, lr}
 8020e82:	b085      	sub	sp, #20
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
 8020e88:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 8020e8a:	4b07      	ldr	r3, [pc, #28]	; (8020ea8 <_txe_semaphore_ceiling_put+0x28>)
 8020e8c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e90:	681c      	ldr	r4, [r3, #0]
 8020e92:	6879      	ldr	r1, [r7, #4]
 8020e94:	2300      	movs	r3, #0
 8020e96:	683a      	ldr	r2, [r7, #0]
 8020e98:	202d      	movs	r0, #45	; 0x2d
 8020e9a:	47a0      	blx	r4
 8020e9c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e9e:	68fb      	ldr	r3, [r7, #12]
}
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	3714      	adds	r7, #20
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	bd90      	pop	{r4, r7, pc}
 8020ea8:	00000004 	.word	0x00000004

08020eac <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8020eac:	b590      	push	{r4, r7, lr}
 8020eae:	b089      	sub	sp, #36	; 0x24
 8020eb0:	af00      	add	r7, sp, #0
 8020eb2:	60f8      	str	r0, [r7, #12]
 8020eb4:	60b9      	str	r1, [r7, #8]
 8020eb6:	607a      	str	r2, [r7, #4]
 8020eb8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 8020ebe:	683b      	ldr	r3, [r7, #0]
 8020ec0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020ec2:	4b08      	ldr	r3, [pc, #32]	; (8020ee4 <_txe_semaphore_create+0x38>)
 8020ec4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ec8:	681c      	ldr	r4, [r3, #0]
 8020eca:	68f9      	ldr	r1, [r7, #12]
 8020ecc:	68ba      	ldr	r2, [r7, #8]
 8020ece:	f107 0314 	add.w	r3, r7, #20
 8020ed2:	202e      	movs	r0, #46	; 0x2e
 8020ed4:	47a0      	blx	r4
 8020ed6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020ed8:	69fb      	ldr	r3, [r7, #28]
}
 8020eda:	4618      	mov	r0, r3
 8020edc:	3724      	adds	r7, #36	; 0x24
 8020ede:	46bd      	mov	sp, r7
 8020ee0:	bd90      	pop	{r4, r7, pc}
 8020ee2:	bf00      	nop
 8020ee4:	00000004 	.word	0x00000004

08020ee8 <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8020ee8:	b590      	push	{r4, r7, lr}
 8020eea:	b085      	sub	sp, #20
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8020ef0:	4b07      	ldr	r3, [pc, #28]	; (8020f10 <_txe_semaphore_delete+0x28>)
 8020ef2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ef6:	681c      	ldr	r4, [r3, #0]
 8020ef8:	6879      	ldr	r1, [r7, #4]
 8020efa:	2300      	movs	r3, #0
 8020efc:	2200      	movs	r2, #0
 8020efe:	202f      	movs	r0, #47	; 0x2f
 8020f00:	47a0      	blx	r4
 8020f02:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020f04:	68fb      	ldr	r3, [r7, #12]
}
 8020f06:	4618      	mov	r0, r3
 8020f08:	3714      	adds	r7, #20
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd90      	pop	{r4, r7, pc}
 8020f0e:	bf00      	nop
 8020f10:	00000004 	.word	0x00000004

08020f14 <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8020f14:	b590      	push	{r4, r7, lr}
 8020f16:	b085      	sub	sp, #20
 8020f18:	af00      	add	r7, sp, #0
 8020f1a:	6078      	str	r0, [r7, #4]
 8020f1c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 8020f1e:	4b07      	ldr	r3, [pc, #28]	; (8020f3c <_txe_semaphore_get+0x28>)
 8020f20:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f24:	681c      	ldr	r4, [r3, #0]
 8020f26:	6879      	ldr	r1, [r7, #4]
 8020f28:	2300      	movs	r3, #0
 8020f2a:	683a      	ldr	r2, [r7, #0]
 8020f2c:	2030      	movs	r0, #48	; 0x30
 8020f2e:	47a0      	blx	r4
 8020f30:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020f32:	68fb      	ldr	r3, [r7, #12]
}
 8020f34:	4618      	mov	r0, r3
 8020f36:	3714      	adds	r7, #20
 8020f38:	46bd      	mov	sp, r7
 8020f3a:	bd90      	pop	{r4, r7, pc}
 8020f3c:	00000004 	.word	0x00000004

08020f40 <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 8020f40:	b590      	push	{r4, r7, lr}
 8020f42:	b08b      	sub	sp, #44	; 0x2c
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	60f8      	str	r0, [r7, #12]
 8020f48:	60b9      	str	r1, [r7, #8]
 8020f4a:	607a      	str	r2, [r7, #4]
 8020f4c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8020f52:	683b      	ldr	r3, [r7, #0]
 8020f54:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8020f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f58:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 8020f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f5c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f5e:	4b08      	ldr	r3, [pc, #32]	; (8020f80 <_txe_semaphore_info_get+0x40>)
 8020f60:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f64:	681c      	ldr	r4, [r3, #0]
 8020f66:	68f9      	ldr	r1, [r7, #12]
 8020f68:	68ba      	ldr	r2, [r7, #8]
 8020f6a:	f107 0314 	add.w	r3, r7, #20
 8020f6e:	2031      	movs	r0, #49	; 0x31
 8020f70:	47a0      	blx	r4
 8020f72:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f76:	4618      	mov	r0, r3
 8020f78:	372c      	adds	r7, #44	; 0x2c
 8020f7a:	46bd      	mov	sp, r7
 8020f7c:	bd90      	pop	{r4, r7, pc}
 8020f7e:	bf00      	nop
 8020f80:	00000004 	.word	0x00000004

08020f84 <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020f84:	b590      	push	{r4, r7, lr}
 8020f86:	b089      	sub	sp, #36	; 0x24
 8020f88:	af00      	add	r7, sp, #0
 8020f8a:	60f8      	str	r0, [r7, #12]
 8020f8c:	60b9      	str	r1, [r7, #8]
 8020f8e:	607a      	str	r2, [r7, #4]
 8020f90:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020f92:	687b      	ldr	r3, [r7, #4]
 8020f94:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020f96:	683b      	ldr	r3, [r7, #0]
 8020f98:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f9c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020f9e:	4b08      	ldr	r3, [pc, #32]	; (8020fc0 <_tx_semaphore_performance_info_get+0x3c>)
 8020fa0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fa4:	681c      	ldr	r4, [r3, #0]
 8020fa6:	68f9      	ldr	r1, [r7, #12]
 8020fa8:	68ba      	ldr	r2, [r7, #8]
 8020faa:	f107 0310 	add.w	r3, r7, #16
 8020fae:	2032      	movs	r0, #50	; 0x32
 8020fb0:	47a0      	blx	r4
 8020fb2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020fb4:	69fb      	ldr	r3, [r7, #28]
}
 8020fb6:	4618      	mov	r0, r3
 8020fb8:	3724      	adds	r7, #36	; 0x24
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	bd90      	pop	{r4, r7, pc}
 8020fbe:	bf00      	nop
 8020fc0:	00000004 	.word	0x00000004

08020fc4 <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020fc4:	b590      	push	{r4, r7, lr}
 8020fc6:	b089      	sub	sp, #36	; 0x24
 8020fc8:	af00      	add	r7, sp, #0
 8020fca:	60f8      	str	r0, [r7, #12]
 8020fcc:	60b9      	str	r1, [r7, #8]
 8020fce:	607a      	str	r2, [r7, #4]
 8020fd0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020fd6:	683b      	ldr	r3, [r7, #0]
 8020fd8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020fda:	4b08      	ldr	r3, [pc, #32]	; (8020ffc <_tx_semaphore_performance_system_info_get+0x38>)
 8020fdc:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fe0:	681c      	ldr	r4, [r3, #0]
 8020fe2:	68f9      	ldr	r1, [r7, #12]
 8020fe4:	68ba      	ldr	r2, [r7, #8]
 8020fe6:	f107 0314 	add.w	r3, r7, #20
 8020fea:	2033      	movs	r0, #51	; 0x33
 8020fec:	47a0      	blx	r4
 8020fee:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020ff0:	69fb      	ldr	r3, [r7, #28]
}
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	3724      	adds	r7, #36	; 0x24
 8020ff6:	46bd      	mov	sp, r7
 8020ff8:	bd90      	pop	{r4, r7, pc}
 8020ffa:	bf00      	nop
 8020ffc:	00000004 	.word	0x00000004

08021000 <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8021000:	b590      	push	{r4, r7, lr}
 8021002:	b085      	sub	sp, #20
 8021004:	af00      	add	r7, sp, #0
 8021006:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021008:	4b07      	ldr	r3, [pc, #28]	; (8021028 <_txe_semaphore_prioritize+0x28>)
 802100a:	f859 3003 	ldr.w	r3, [r9, r3]
 802100e:	681c      	ldr	r4, [r3, #0]
 8021010:	6879      	ldr	r1, [r7, #4]
 8021012:	2300      	movs	r3, #0
 8021014:	2200      	movs	r2, #0
 8021016:	2034      	movs	r0, #52	; 0x34
 8021018:	47a0      	blx	r4
 802101a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802101c:	68fb      	ldr	r3, [r7, #12]
}
 802101e:	4618      	mov	r0, r3
 8021020:	3714      	adds	r7, #20
 8021022:	46bd      	mov	sp, r7
 8021024:	bd90      	pop	{r4, r7, pc}
 8021026:	bf00      	nop
 8021028:	00000004 	.word	0x00000004

0802102c <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 802102c:	b590      	push	{r4, r7, lr}
 802102e:	b085      	sub	sp, #20
 8021030:	af00      	add	r7, sp, #0
 8021032:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021034:	4b07      	ldr	r3, [pc, #28]	; (8021054 <_txe_semaphore_put+0x28>)
 8021036:	f859 3003 	ldr.w	r3, [r9, r3]
 802103a:	681c      	ldr	r4, [r3, #0]
 802103c:	6879      	ldr	r1, [r7, #4]
 802103e:	2300      	movs	r3, #0
 8021040:	2200      	movs	r2, #0
 8021042:	2035      	movs	r0, #53	; 0x35
 8021044:	47a0      	blx	r4
 8021046:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021048:	68fb      	ldr	r3, [r7, #12]
}
 802104a:	4618      	mov	r0, r3
 802104c:	3714      	adds	r7, #20
 802104e:	46bd      	mov	sp, r7
 8021050:	bd90      	pop	{r4, r7, pc}
 8021052:	bf00      	nop
 8021054:	00000004 	.word	0x00000004

08021058 <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8021058:	b590      	push	{r4, r7, lr}
 802105a:	b085      	sub	sp, #20
 802105c:	af00      	add	r7, sp, #0
 802105e:	6078      	str	r0, [r7, #4]
 8021060:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 8021062:	4b07      	ldr	r3, [pc, #28]	; (8021080 <_txe_semaphore_put_notify+0x28>)
 8021064:	f859 3003 	ldr.w	r3, [r9, r3]
 8021068:	681c      	ldr	r4, [r3, #0]
 802106a:	6879      	ldr	r1, [r7, #4]
 802106c:	683a      	ldr	r2, [r7, #0]
 802106e:	2300      	movs	r3, #0
 8021070:	2036      	movs	r0, #54	; 0x36
 8021072:	47a0      	blx	r4
 8021074:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021076:	68fb      	ldr	r3, [r7, #12]
}
 8021078:	4618      	mov	r0, r3
 802107a:	3714      	adds	r7, #20
 802107c:	46bd      	mov	sp, r7
 802107e:	bd90      	pop	{r4, r7, pc}
 8021080:	00000004 	.word	0x00000004

08021084 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8021084:	b590      	push	{r4, r7, lr}
 8021086:	b08f      	sub	sp, #60	; 0x3c
 8021088:	af00      	add	r7, sp, #0
 802108a:	60f8      	str	r0, [r7, #12]
 802108c:	60b9      	str	r1, [r7, #8]
 802108e:	607a      	str	r2, [r7, #4]
 8021090:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 8021096:	683b      	ldr	r3, [r7, #0]
 8021098:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 802109a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802109c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 802109e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80210a0:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 80210a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80210a4:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 80210a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80210a8:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 80210aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80210ac:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80210ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80210b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80210b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80210b4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210b6:	4b08      	ldr	r3, [pc, #32]	; (80210d8 <_txe_thread_create+0x54>)
 80210b8:	f859 3003 	ldr.w	r3, [r9, r3]
 80210bc:	681c      	ldr	r4, [r3, #0]
 80210be:	68f9      	ldr	r1, [r7, #12]
 80210c0:	68ba      	ldr	r2, [r7, #8]
 80210c2:	f107 0310 	add.w	r3, r7, #16
 80210c6:	2037      	movs	r0, #55	; 0x37
 80210c8:	47a0      	blx	r4
 80210ca:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80210cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80210ce:	4618      	mov	r0, r3
 80210d0:	373c      	adds	r7, #60	; 0x3c
 80210d2:	46bd      	mov	sp, r7
 80210d4:	bd90      	pop	{r4, r7, pc}
 80210d6:	bf00      	nop
 80210d8:	00000004 	.word	0x00000004

080210dc <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80210dc:	b590      	push	{r4, r7, lr}
 80210de:	b085      	sub	sp, #20
 80210e0:	af00      	add	r7, sp, #0
 80210e2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80210e4:	4b07      	ldr	r3, [pc, #28]	; (8021104 <_txe_thread_delete+0x28>)
 80210e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80210ea:	681c      	ldr	r4, [r3, #0]
 80210ec:	6879      	ldr	r1, [r7, #4]
 80210ee:	2300      	movs	r3, #0
 80210f0:	2200      	movs	r2, #0
 80210f2:	2038      	movs	r0, #56	; 0x38
 80210f4:	47a0      	blx	r4
 80210f6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210f8:	68fb      	ldr	r3, [r7, #12]
}
 80210fa:	4618      	mov	r0, r3
 80210fc:	3714      	adds	r7, #20
 80210fe:	46bd      	mov	sp, r7
 8021100:	bd90      	pop	{r4, r7, pc}
 8021102:	bf00      	nop
 8021104:	00000004 	.word	0x00000004

08021108 <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 8021108:	b590      	push	{r4, r7, lr}
 802110a:	b085      	sub	sp, #20
 802110c:	af00      	add	r7, sp, #0
 802110e:	6078      	str	r0, [r7, #4]
 8021110:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 8021112:	4b07      	ldr	r3, [pc, #28]	; (8021130 <_txe_thread_entry_exit_notify+0x28>)
 8021114:	f859 3003 	ldr.w	r3, [r9, r3]
 8021118:	681c      	ldr	r4, [r3, #0]
 802111a:	6879      	ldr	r1, [r7, #4]
 802111c:	683a      	ldr	r2, [r7, #0]
 802111e:	2300      	movs	r3, #0
 8021120:	2039      	movs	r0, #57	; 0x39
 8021122:	47a0      	blx	r4
 8021124:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021126:	68fb      	ldr	r3, [r7, #12]
}
 8021128:	4618      	mov	r0, r3
 802112a:	3714      	adds	r7, #20
 802112c:	46bd      	mov	sp, r7
 802112e:	bd90      	pop	{r4, r7, pc}
 8021130:	00000004 	.word	0x00000004

08021134 <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 8021134:	b590      	push	{r4, r7, lr}
 8021136:	b083      	sub	sp, #12
 8021138:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 802113a:	4b08      	ldr	r3, [pc, #32]	; (802115c <_tx_thread_identify+0x28>)
 802113c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021140:	681c      	ldr	r4, [r3, #0]
 8021142:	2300      	movs	r3, #0
 8021144:	2200      	movs	r2, #0
 8021146:	2100      	movs	r1, #0
 8021148:	203a      	movs	r0, #58	; 0x3a
 802114a:	47a0      	blx	r4
 802114c:	4603      	mov	r3, r0
 802114e:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 8021150:	687b      	ldr	r3, [r7, #4]
}
 8021152:	4618      	mov	r0, r3
 8021154:	370c      	adds	r7, #12
 8021156:	46bd      	mov	sp, r7
 8021158:	bd90      	pop	{r4, r7, pc}
 802115a:	bf00      	nop
 802115c:	00000004 	.word	0x00000004

08021160 <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8021160:	b590      	push	{r4, r7, lr}
 8021162:	b08d      	sub	sp, #52	; 0x34
 8021164:	af00      	add	r7, sp, #0
 8021166:	60f8      	str	r0, [r7, #12]
 8021168:	60b9      	str	r1, [r7, #8]
 802116a:	607a      	str	r2, [r7, #4]
 802116c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 802116e:	687b      	ldr	r3, [r7, #4]
 8021170:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 8021172:	683b      	ldr	r3, [r7, #0]
 8021174:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 8021176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021178:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 802117a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802117c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 802117e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021180:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 8021182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021184:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 8021186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021188:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802118a:	4b08      	ldr	r3, [pc, #32]	; (80211ac <_txe_thread_info_get+0x4c>)
 802118c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021190:	681c      	ldr	r4, [r3, #0]
 8021192:	68f9      	ldr	r1, [r7, #12]
 8021194:	68ba      	ldr	r2, [r7, #8]
 8021196:	f107 0310 	add.w	r3, r7, #16
 802119a:	203b      	movs	r0, #59	; 0x3b
 802119c:	47a0      	blx	r4
 802119e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80211a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80211a2:	4618      	mov	r0, r3
 80211a4:	3734      	adds	r7, #52	; 0x34
 80211a6:	46bd      	mov	sp, r7
 80211a8:	bd90      	pop	{r4, r7, pc}
 80211aa:	bf00      	nop
 80211ac:	00000004 	.word	0x00000004

080211b0 <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 80211b0:	b590      	push	{r4, r7, lr}
 80211b2:	b085      	sub	sp, #20
 80211b4:	af00      	add	r7, sp, #0
 80211b6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80211b8:	4b07      	ldr	r3, [pc, #28]	; (80211d8 <_tx_thread_interrupt_control+0x28>)
 80211ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80211be:	681c      	ldr	r4, [r3, #0]
 80211c0:	2300      	movs	r3, #0
 80211c2:	2200      	movs	r2, #0
 80211c4:	6879      	ldr	r1, [r7, #4]
 80211c6:	2019      	movs	r0, #25
 80211c8:	47a0      	blx	r4
 80211ca:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80211cc:	68fb      	ldr	r3, [r7, #12]
}
 80211ce:	4618      	mov	r0, r3
 80211d0:	3714      	adds	r7, #20
 80211d2:	46bd      	mov	sp, r7
 80211d4:	bd90      	pop	{r4, r7, pc}
 80211d6:	bf00      	nop
 80211d8:	00000004 	.word	0x00000004

080211dc <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 80211dc:	b590      	push	{r4, r7, lr}
 80211de:	b08f      	sub	sp, #60	; 0x3c
 80211e0:	af00      	add	r7, sp, #0
 80211e2:	60f8      	str	r0, [r7, #12]
 80211e4:	60b9      	str	r1, [r7, #8]
 80211e6:	607a      	str	r2, [r7, #4]
 80211e8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 80211f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80211f4:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 80211f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80211f8:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 80211fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211fc:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 80211fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021200:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 8021202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021204:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 8021206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021208:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 802120a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802120c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 802120e:	4b08      	ldr	r3, [pc, #32]	; (8021230 <_tx_thread_performance_info_get+0x54>)
 8021210:	f859 3003 	ldr.w	r3, [r9, r3]
 8021214:	681c      	ldr	r4, [r3, #0]
 8021216:	68f9      	ldr	r1, [r7, #12]
 8021218:	68ba      	ldr	r2, [r7, #8]
 802121a:	f107 0310 	add.w	r3, r7, #16
 802121e:	203c      	movs	r0, #60	; 0x3c
 8021220:	47a0      	blx	r4
 8021222:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021226:	4618      	mov	r0, r3
 8021228:	373c      	adds	r7, #60	; 0x3c
 802122a:	46bd      	mov	sp, r7
 802122c:	bd90      	pop	{r4, r7, pc}
 802122e:	bf00      	nop
 8021230:	00000004 	.word	0x00000004

08021234 <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 8021234:	b590      	push	{r4, r7, lr}
 8021236:	b08f      	sub	sp, #60	; 0x3c
 8021238:	af00      	add	r7, sp, #0
 802123a:	60f8      	str	r0, [r7, #12]
 802123c:	60b9      	str	r1, [r7, #8]
 802123e:	607a      	str	r2, [r7, #4]
 8021240:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 8021246:	683b      	ldr	r3, [r7, #0]
 8021248:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 802124a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802124c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 802124e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021250:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 8021252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021254:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8021256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021258:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 802125a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802125c:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 802125e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021260:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 8021262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021264:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 8021266:	4b08      	ldr	r3, [pc, #32]	; (8021288 <_tx_thread_performance_system_info_get+0x54>)
 8021268:	f859 3003 	ldr.w	r3, [r9, r3]
 802126c:	681c      	ldr	r4, [r3, #0]
 802126e:	68f9      	ldr	r1, [r7, #12]
 8021270:	68ba      	ldr	r2, [r7, #8]
 8021272:	f107 0310 	add.w	r3, r7, #16
 8021276:	203d      	movs	r0, #61	; 0x3d
 8021278:	47a0      	blx	r4
 802127a:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 802127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802127e:	4618      	mov	r0, r3
 8021280:	373c      	adds	r7, #60	; 0x3c
 8021282:	46bd      	mov	sp, r7
 8021284:	bd90      	pop	{r4, r7, pc}
 8021286:	bf00      	nop
 8021288:	00000004 	.word	0x00000004

0802128c <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 802128c:	b590      	push	{r4, r7, lr}
 802128e:	b087      	sub	sp, #28
 8021290:	af00      	add	r7, sp, #0
 8021292:	60f8      	str	r0, [r7, #12]
 8021294:	60b9      	str	r1, [r7, #8]
 8021296:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 8021298:	4b07      	ldr	r3, [pc, #28]	; (80212b8 <_txe_thread_preemption_change+0x2c>)
 802129a:	f859 3003 	ldr.w	r3, [r9, r3]
 802129e:	681c      	ldr	r4, [r3, #0]
 80212a0:	68f9      	ldr	r1, [r7, #12]
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	68ba      	ldr	r2, [r7, #8]
 80212a6:	203e      	movs	r0, #62	; 0x3e
 80212a8:	47a0      	blx	r4
 80212aa:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80212ac:	697b      	ldr	r3, [r7, #20]
}
 80212ae:	4618      	mov	r0, r3
 80212b0:	371c      	adds	r7, #28
 80212b2:	46bd      	mov	sp, r7
 80212b4:	bd90      	pop	{r4, r7, pc}
 80212b6:	bf00      	nop
 80212b8:	00000004 	.word	0x00000004

080212bc <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80212bc:	b590      	push	{r4, r7, lr}
 80212be:	b087      	sub	sp, #28
 80212c0:	af00      	add	r7, sp, #0
 80212c2:	60f8      	str	r0, [r7, #12]
 80212c4:	60b9      	str	r1, [r7, #8]
 80212c6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80212c8:	4b07      	ldr	r3, [pc, #28]	; (80212e8 <_txe_thread_priority_change+0x2c>)
 80212ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80212ce:	681c      	ldr	r4, [r3, #0]
 80212d0:	68f9      	ldr	r1, [r7, #12]
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	68ba      	ldr	r2, [r7, #8]
 80212d6:	203f      	movs	r0, #63	; 0x3f
 80212d8:	47a0      	blx	r4
 80212da:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80212dc:	697b      	ldr	r3, [r7, #20]
}
 80212de:	4618      	mov	r0, r3
 80212e0:	371c      	adds	r7, #28
 80212e2:	46bd      	mov	sp, r7
 80212e4:	bd90      	pop	{r4, r7, pc}
 80212e6:	bf00      	nop
 80212e8:	00000004 	.word	0x00000004

080212ec <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 80212ec:	b598      	push	{r3, r4, r7, lr}
 80212ee:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 80212f0:	4b05      	ldr	r3, [pc, #20]	; (8021308 <_txe_thread_relinquish+0x1c>)
 80212f2:	f859 3003 	ldr.w	r3, [r9, r3]
 80212f6:	681c      	ldr	r4, [r3, #0]
 80212f8:	2300      	movs	r3, #0
 80212fa:	2200      	movs	r2, #0
 80212fc:	2100      	movs	r1, #0
 80212fe:	2040      	movs	r0, #64	; 0x40
 8021300:	47a0      	blx	r4
}
 8021302:	bf00      	nop
 8021304:	bd98      	pop	{r3, r4, r7, pc}
 8021306:	bf00      	nop
 8021308:	00000004 	.word	0x00000004

0802130c <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 802130c:	b590      	push	{r4, r7, lr}
 802130e:	b085      	sub	sp, #20
 8021310:	af00      	add	r7, sp, #0
 8021312:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021314:	4b07      	ldr	r3, [pc, #28]	; (8021334 <_txe_thread_reset+0x28>)
 8021316:	f859 3003 	ldr.w	r3, [r9, r3]
 802131a:	681c      	ldr	r4, [r3, #0]
 802131c:	6879      	ldr	r1, [r7, #4]
 802131e:	2300      	movs	r3, #0
 8021320:	2200      	movs	r2, #0
 8021322:	2041      	movs	r0, #65	; 0x41
 8021324:	47a0      	blx	r4
 8021326:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021328:	68fb      	ldr	r3, [r7, #12]
}
 802132a:	4618      	mov	r0, r3
 802132c:	3714      	adds	r7, #20
 802132e:	46bd      	mov	sp, r7
 8021330:	bd90      	pop	{r4, r7, pc}
 8021332:	bf00      	nop
 8021334:	00000004 	.word	0x00000004

08021338 <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8021338:	b590      	push	{r4, r7, lr}
 802133a:	b085      	sub	sp, #20
 802133c:	af00      	add	r7, sp, #0
 802133e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021340:	4b07      	ldr	r3, [pc, #28]	; (8021360 <_txe_thread_resume+0x28>)
 8021342:	f859 3003 	ldr.w	r3, [r9, r3]
 8021346:	681c      	ldr	r4, [r3, #0]
 8021348:	6879      	ldr	r1, [r7, #4]
 802134a:	2300      	movs	r3, #0
 802134c:	2200      	movs	r2, #0
 802134e:	2042      	movs	r0, #66	; 0x42
 8021350:	47a0      	blx	r4
 8021352:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021354:	68fb      	ldr	r3, [r7, #12]
}
 8021356:	4618      	mov	r0, r3
 8021358:	3714      	adds	r7, #20
 802135a:	46bd      	mov	sp, r7
 802135c:	bd90      	pop	{r4, r7, pc}
 802135e:	bf00      	nop
 8021360:	00000004 	.word	0x00000004

08021364 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8021364:	b590      	push	{r4, r7, lr}
 8021366:	b085      	sub	sp, #20
 8021368:	af00      	add	r7, sp, #0
 802136a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 802136c:	4b07      	ldr	r3, [pc, #28]	; (802138c <_tx_thread_sleep+0x28>)
 802136e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021372:	681c      	ldr	r4, [r3, #0]
 8021374:	2300      	movs	r3, #0
 8021376:	2200      	movs	r2, #0
 8021378:	6879      	ldr	r1, [r7, #4]
 802137a:	2043      	movs	r0, #67	; 0x43
 802137c:	47a0      	blx	r4
 802137e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021380:	68fb      	ldr	r3, [r7, #12]
}
 8021382:	4618      	mov	r0, r3
 8021384:	3714      	adds	r7, #20
 8021386:	46bd      	mov	sp, r7
 8021388:	bd90      	pop	{r4, r7, pc}
 802138a:	bf00      	nop
 802138c:	00000004 	.word	0x00000004

08021390 <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 8021390:	b590      	push	{r4, r7, lr}
 8021392:	b085      	sub	sp, #20
 8021394:	af00      	add	r7, sp, #0
 8021396:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 8021398:	4b07      	ldr	r3, [pc, #28]	; (80213b8 <_tx_thread_stack_error_notify+0x28>)
 802139a:	f859 3003 	ldr.w	r3, [r9, r3]
 802139e:	681c      	ldr	r4, [r3, #0]
 80213a0:	6879      	ldr	r1, [r7, #4]
 80213a2:	2300      	movs	r3, #0
 80213a4:	2200      	movs	r2, #0
 80213a6:	2044      	movs	r0, #68	; 0x44
 80213a8:	47a0      	blx	r4
 80213aa:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213ac:	68fb      	ldr	r3, [r7, #12]
}
 80213ae:	4618      	mov	r0, r3
 80213b0:	3714      	adds	r7, #20
 80213b2:	46bd      	mov	sp, r7
 80213b4:	bd90      	pop	{r4, r7, pc}
 80213b6:	bf00      	nop
 80213b8:	00000004 	.word	0x00000004

080213bc <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80213bc:	b590      	push	{r4, r7, lr}
 80213be:	b085      	sub	sp, #20
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80213c4:	4b07      	ldr	r3, [pc, #28]	; (80213e4 <_txe_thread_suspend+0x28>)
 80213c6:	f859 3003 	ldr.w	r3, [r9, r3]
 80213ca:	681c      	ldr	r4, [r3, #0]
 80213cc:	6879      	ldr	r1, [r7, #4]
 80213ce:	2300      	movs	r3, #0
 80213d0:	2200      	movs	r2, #0
 80213d2:	2045      	movs	r0, #69	; 0x45
 80213d4:	47a0      	blx	r4
 80213d6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213d8:	68fb      	ldr	r3, [r7, #12]
}
 80213da:	4618      	mov	r0, r3
 80213dc:	3714      	adds	r7, #20
 80213de:	46bd      	mov	sp, r7
 80213e0:	bd90      	pop	{r4, r7, pc}
 80213e2:	bf00      	nop
 80213e4:	00000004 	.word	0x00000004

080213e8 <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 80213e8:	b590      	push	{r4, r7, lr}
 80213ea:	b085      	sub	sp, #20
 80213ec:	af00      	add	r7, sp, #0
 80213ee:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80213f0:	4b07      	ldr	r3, [pc, #28]	; (8021410 <_txe_thread_terminate+0x28>)
 80213f2:	f859 3003 	ldr.w	r3, [r9, r3]
 80213f6:	681c      	ldr	r4, [r3, #0]
 80213f8:	6879      	ldr	r1, [r7, #4]
 80213fa:	2300      	movs	r3, #0
 80213fc:	2200      	movs	r2, #0
 80213fe:	2046      	movs	r0, #70	; 0x46
 8021400:	47a0      	blx	r4
 8021402:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021404:	68fb      	ldr	r3, [r7, #12]
}
 8021406:	4618      	mov	r0, r3
 8021408:	3714      	adds	r7, #20
 802140a:	46bd      	mov	sp, r7
 802140c:	bd90      	pop	{r4, r7, pc}
 802140e:	bf00      	nop
 8021410:	00000004 	.word	0x00000004

08021414 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8021414:	b590      	push	{r4, r7, lr}
 8021416:	b087      	sub	sp, #28
 8021418:	af00      	add	r7, sp, #0
 802141a:	60f8      	str	r0, [r7, #12]
 802141c:	60b9      	str	r1, [r7, #8]
 802141e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 8021420:	4b07      	ldr	r3, [pc, #28]	; (8021440 <_txe_thread_time_slice_change+0x2c>)
 8021422:	f859 3003 	ldr.w	r3, [r9, r3]
 8021426:	681c      	ldr	r4, [r3, #0]
 8021428:	68f9      	ldr	r1, [r7, #12]
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	68ba      	ldr	r2, [r7, #8]
 802142e:	2047      	movs	r0, #71	; 0x47
 8021430:	47a0      	blx	r4
 8021432:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021434:	697b      	ldr	r3, [r7, #20]
}
 8021436:	4618      	mov	r0, r3
 8021438:	371c      	adds	r7, #28
 802143a:	46bd      	mov	sp, r7
 802143c:	bd90      	pop	{r4, r7, pc}
 802143e:	bf00      	nop
 8021440:	00000004 	.word	0x00000004

08021444 <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 8021444:	b590      	push	{r4, r7, lr}
 8021446:	b085      	sub	sp, #20
 8021448:	af00      	add	r7, sp, #0
 802144a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 802144c:	4b07      	ldr	r3, [pc, #28]	; (802146c <_txe_thread_wait_abort+0x28>)
 802144e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021452:	681c      	ldr	r4, [r3, #0]
 8021454:	6879      	ldr	r1, [r7, #4]
 8021456:	2300      	movs	r3, #0
 8021458:	2200      	movs	r2, #0
 802145a:	2048      	movs	r0, #72	; 0x48
 802145c:	47a0      	blx	r4
 802145e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021460:	68fb      	ldr	r3, [r7, #12]
}
 8021462:	4618      	mov	r0, r3
 8021464:	3714      	adds	r7, #20
 8021466:	46bd      	mov	sp, r7
 8021468:	bd90      	pop	{r4, r7, pc}
 802146a:	bf00      	nop
 802146c:	00000004 	.word	0x00000004

08021470 <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 8021470:	b590      	push	{r4, r7, lr}
 8021472:	b083      	sub	sp, #12
 8021474:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 8021476:	4b07      	ldr	r3, [pc, #28]	; (8021494 <_tx_time_get+0x24>)
 8021478:	f859 3003 	ldr.w	r3, [r9, r3]
 802147c:	681c      	ldr	r4, [r3, #0]
 802147e:	2300      	movs	r3, #0
 8021480:	2200      	movs	r2, #0
 8021482:	2100      	movs	r1, #0
 8021484:	2049      	movs	r0, #73	; 0x49
 8021486:	47a0      	blx	r4
 8021488:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 802148a:	687b      	ldr	r3, [r7, #4]
}
 802148c:	4618      	mov	r0, r3
 802148e:	370c      	adds	r7, #12
 8021490:	46bd      	mov	sp, r7
 8021492:	bd90      	pop	{r4, r7, pc}
 8021494:	00000004 	.word	0x00000004

08021498 <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 8021498:	b590      	push	{r4, r7, lr}
 802149a:	b083      	sub	sp, #12
 802149c:	af00      	add	r7, sp, #0
 802149e:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 80214a0:	4b06      	ldr	r3, [pc, #24]	; (80214bc <_tx_time_set+0x24>)
 80214a2:	f859 3003 	ldr.w	r3, [r9, r3]
 80214a6:	681c      	ldr	r4, [r3, #0]
 80214a8:	2300      	movs	r3, #0
 80214aa:	2200      	movs	r2, #0
 80214ac:	6879      	ldr	r1, [r7, #4]
 80214ae:	204a      	movs	r0, #74	; 0x4a
 80214b0:	47a0      	blx	r4
}
 80214b2:	bf00      	nop
 80214b4:	370c      	adds	r7, #12
 80214b6:	46bd      	mov	sp, r7
 80214b8:	bd90      	pop	{r4, r7, pc}
 80214ba:	bf00      	nop
 80214bc:	00000004 	.word	0x00000004

080214c0 <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80214c0:	b590      	push	{r4, r7, lr}
 80214c2:	b085      	sub	sp, #20
 80214c4:	af00      	add	r7, sp, #0
 80214c6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80214c8:	4b07      	ldr	r3, [pc, #28]	; (80214e8 <_txe_timer_activate+0x28>)
 80214ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80214ce:	681c      	ldr	r4, [r3, #0]
 80214d0:	6879      	ldr	r1, [r7, #4]
 80214d2:	2300      	movs	r3, #0
 80214d4:	2200      	movs	r2, #0
 80214d6:	204b      	movs	r0, #75	; 0x4b
 80214d8:	47a0      	blx	r4
 80214da:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80214dc:	68fb      	ldr	r3, [r7, #12]
}
 80214de:	4618      	mov	r0, r3
 80214e0:	3714      	adds	r7, #20
 80214e2:	46bd      	mov	sp, r7
 80214e4:	bd90      	pop	{r4, r7, pc}
 80214e6:	bf00      	nop
 80214e8:	00000004 	.word	0x00000004

080214ec <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 80214ec:	b590      	push	{r4, r7, lr}
 80214ee:	b087      	sub	sp, #28
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	60f8      	str	r0, [r7, #12]
 80214f4:	60b9      	str	r1, [r7, #8]
 80214f6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 80214f8:	4b07      	ldr	r3, [pc, #28]	; (8021518 <_txe_timer_change+0x2c>)
 80214fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80214fe:	681c      	ldr	r4, [r3, #0]
 8021500:	68f9      	ldr	r1, [r7, #12]
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	68ba      	ldr	r2, [r7, #8]
 8021506:	204c      	movs	r0, #76	; 0x4c
 8021508:	47a0      	blx	r4
 802150a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802150c:	697b      	ldr	r3, [r7, #20]
}
 802150e:	4618      	mov	r0, r3
 8021510:	371c      	adds	r7, #28
 8021512:	46bd      	mov	sp, r7
 8021514:	bd90      	pop	{r4, r7, pc}
 8021516:	bf00      	nop
 8021518:	00000004 	.word	0x00000004

0802151c <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 802151c:	b590      	push	{r4, r7, lr}
 802151e:	b08d      	sub	sp, #52	; 0x34
 8021520:	af00      	add	r7, sp, #0
 8021522:	60f8      	str	r0, [r7, #12]
 8021524:	60b9      	str	r1, [r7, #8]
 8021526:	607a      	str	r2, [r7, #4]
 8021528:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 802152a:	687b      	ldr	r3, [r7, #4]
 802152c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 802152e:	683b      	ldr	r3, [r7, #0]
 8021530:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 8021532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021534:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 8021536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021538:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 802153a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802153c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 802153e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021540:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8021542:	4b08      	ldr	r3, [pc, #32]	; (8021564 <_txe_timer_create+0x48>)
 8021544:	f859 3003 	ldr.w	r3, [r9, r3]
 8021548:	681c      	ldr	r4, [r3, #0]
 802154a:	68f9      	ldr	r1, [r7, #12]
 802154c:	68ba      	ldr	r2, [r7, #8]
 802154e:	f107 0314 	add.w	r3, r7, #20
 8021552:	204d      	movs	r0, #77	; 0x4d
 8021554:	47a0      	blx	r4
 8021556:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8021558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802155a:	4618      	mov	r0, r3
 802155c:	3734      	adds	r7, #52	; 0x34
 802155e:	46bd      	mov	sp, r7
 8021560:	bd90      	pop	{r4, r7, pc}
 8021562:	bf00      	nop
 8021564:	00000004 	.word	0x00000004

08021568 <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8021568:	b590      	push	{r4, r7, lr}
 802156a:	b085      	sub	sp, #20
 802156c:	af00      	add	r7, sp, #0
 802156e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 8021570:	4b07      	ldr	r3, [pc, #28]	; (8021590 <_txe_timer_deactivate+0x28>)
 8021572:	f859 3003 	ldr.w	r3, [r9, r3]
 8021576:	681c      	ldr	r4, [r3, #0]
 8021578:	6879      	ldr	r1, [r7, #4]
 802157a:	2300      	movs	r3, #0
 802157c:	2200      	movs	r2, #0
 802157e:	204e      	movs	r0, #78	; 0x4e
 8021580:	47a0      	blx	r4
 8021582:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021584:	68fb      	ldr	r3, [r7, #12]
}
 8021586:	4618      	mov	r0, r3
 8021588:	3714      	adds	r7, #20
 802158a:	46bd      	mov	sp, r7
 802158c:	bd90      	pop	{r4, r7, pc}
 802158e:	bf00      	nop
 8021590:	00000004 	.word	0x00000004

08021594 <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 8021594:	b590      	push	{r4, r7, lr}
 8021596:	b085      	sub	sp, #20
 8021598:	af00      	add	r7, sp, #0
 802159a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 802159c:	4b07      	ldr	r3, [pc, #28]	; (80215bc <_txe_timer_delete+0x28>)
 802159e:	f859 3003 	ldr.w	r3, [r9, r3]
 80215a2:	681c      	ldr	r4, [r3, #0]
 80215a4:	6879      	ldr	r1, [r7, #4]
 80215a6:	2300      	movs	r3, #0
 80215a8:	2200      	movs	r2, #0
 80215aa:	204f      	movs	r0, #79	; 0x4f
 80215ac:	47a0      	blx	r4
 80215ae:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215b0:	68fb      	ldr	r3, [r7, #12]
}
 80215b2:	4618      	mov	r0, r3
 80215b4:	3714      	adds	r7, #20
 80215b6:	46bd      	mov	sp, r7
 80215b8:	bd90      	pop	{r4, r7, pc}
 80215ba:	bf00      	nop
 80215bc:	00000004 	.word	0x00000004

080215c0 <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80215c0:	b590      	push	{r4, r7, lr}
 80215c2:	b08b      	sub	sp, #44	; 0x2c
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	60f8      	str	r0, [r7, #12]
 80215c8:	60b9      	str	r1, [r7, #8]
 80215ca:	607a      	str	r2, [r7, #4]
 80215cc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 80215d2:	683b      	ldr	r3, [r7, #0]
 80215d4:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 80215d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80215d8:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 80215da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80215dc:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80215de:	4b08      	ldr	r3, [pc, #32]	; (8021600 <_txe_timer_info_get+0x40>)
 80215e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80215e4:	681c      	ldr	r4, [r3, #0]
 80215e6:	68f9      	ldr	r1, [r7, #12]
 80215e8:	68ba      	ldr	r2, [r7, #8]
 80215ea:	f107 0314 	add.w	r3, r7, #20
 80215ee:	2050      	movs	r0, #80	; 0x50
 80215f0:	47a0      	blx	r4
 80215f2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80215f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80215f6:	4618      	mov	r0, r3
 80215f8:	372c      	adds	r7, #44	; 0x2c
 80215fa:	46bd      	mov	sp, r7
 80215fc:	bd90      	pop	{r4, r7, pc}
 80215fe:	bf00      	nop
 8021600:	00000004 	.word	0x00000004

08021604 <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021604:	b590      	push	{r4, r7, lr}
 8021606:	b08b      	sub	sp, #44	; 0x2c
 8021608:	af00      	add	r7, sp, #0
 802160a:	60f8      	str	r0, [r7, #12]
 802160c:	60b9      	str	r1, [r7, #8]
 802160e:	607a      	str	r2, [r7, #4]
 8021610:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 8021616:	683b      	ldr	r3, [r7, #0]
 8021618:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 802161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802161c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 802161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021620:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 8021622:	4b08      	ldr	r3, [pc, #32]	; (8021644 <_tx_timer_performance_info_get+0x40>)
 8021624:	f859 3003 	ldr.w	r3, [r9, r3]
 8021628:	681c      	ldr	r4, [r3, #0]
 802162a:	68f9      	ldr	r1, [r7, #12]
 802162c:	68ba      	ldr	r2, [r7, #8]
 802162e:	f107 0314 	add.w	r3, r7, #20
 8021632:	2051      	movs	r0, #81	; 0x51
 8021634:	47a0      	blx	r4
 8021636:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802163a:	4618      	mov	r0, r3
 802163c:	372c      	adds	r7, #44	; 0x2c
 802163e:	46bd      	mov	sp, r7
 8021640:	bd90      	pop	{r4, r7, pc}
 8021642:	bf00      	nop
 8021644:	00000004 	.word	0x00000004

08021648 <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021648:	b590      	push	{r4, r7, lr}
 802164a:	b089      	sub	sp, #36	; 0x24
 802164c:	af00      	add	r7, sp, #0
 802164e:	60f8      	str	r0, [r7, #12]
 8021650:	60b9      	str	r1, [r7, #8]
 8021652:	607a      	str	r2, [r7, #4]
 8021654:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 802165a:	683b      	ldr	r3, [r7, #0]
 802165c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 802165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021660:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 8021662:	4b08      	ldr	r3, [pc, #32]	; (8021684 <_tx_timer_performance_system_info_get+0x3c>)
 8021664:	f859 3003 	ldr.w	r3, [r9, r3]
 8021668:	681c      	ldr	r4, [r3, #0]
 802166a:	68f9      	ldr	r1, [r7, #12]
 802166c:	68ba      	ldr	r2, [r7, #8]
 802166e:	f107 0310 	add.w	r3, r7, #16
 8021672:	2052      	movs	r0, #82	; 0x52
 8021674:	47a0      	blx	r4
 8021676:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021678:	69fb      	ldr	r3, [r7, #28]
}
 802167a:	4618      	mov	r0, r3
 802167c:	3724      	adds	r7, #36	; 0x24
 802167e:	46bd      	mov	sp, r7
 8021680:	bd90      	pop	{r4, r7, pc}
 8021682:	bf00      	nop
 8021684:	00000004 	.word	0x00000004

08021688 <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 8021688:	b590      	push	{r4, r7, lr}
 802168a:	b085      	sub	sp, #20
 802168c:	af00      	add	r7, sp, #0
 802168e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 8021690:	4b07      	ldr	r3, [pc, #28]	; (80216b0 <_tx_trace_buffer_full_notify+0x28>)
 8021692:	f859 3003 	ldr.w	r3, [r9, r3]
 8021696:	681c      	ldr	r4, [r3, #0]
 8021698:	6879      	ldr	r1, [r7, #4]
 802169a:	2300      	movs	r3, #0
 802169c:	2200      	movs	r2, #0
 802169e:	205a      	movs	r0, #90	; 0x5a
 80216a0:	47a0      	blx	r4
 80216a2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80216a4:	68fb      	ldr	r3, [r7, #12]
}
 80216a6:	4618      	mov	r0, r3
 80216a8:	3714      	adds	r7, #20
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	00000004 	.word	0x00000004

080216b4 <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80216b4:	b590      	push	{r4, r7, lr}
 80216b6:	b083      	sub	sp, #12
 80216b8:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80216ba:	4b07      	ldr	r3, [pc, #28]	; (80216d8 <_tx_trace_disable+0x24>)
 80216bc:	f859 3003 	ldr.w	r3, [r9, r3]
 80216c0:	681c      	ldr	r4, [r3, #0]
 80216c2:	2300      	movs	r3, #0
 80216c4:	2200      	movs	r2, #0
 80216c6:	2100      	movs	r1, #0
 80216c8:	2056      	movs	r0, #86	; 0x56
 80216ca:	47a0      	blx	r4
 80216cc:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216ce:	687b      	ldr	r3, [r7, #4]
}
 80216d0:	4618      	mov	r0, r3
 80216d2:	370c      	adds	r7, #12
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd90      	pop	{r4, r7, pc}
 80216d8:	00000004 	.word	0x00000004

080216dc <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 80216dc:	b590      	push	{r4, r7, lr}
 80216de:	b087      	sub	sp, #28
 80216e0:	af00      	add	r7, sp, #0
 80216e2:	60f8      	str	r0, [r7, #12]
 80216e4:	60b9      	str	r1, [r7, #8]
 80216e6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 80216e8:	4b07      	ldr	r3, [pc, #28]	; (8021708 <_tx_trace_enable+0x2c>)
 80216ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80216ee:	681c      	ldr	r4, [r3, #0]
 80216f0:	68f9      	ldr	r1, [r7, #12]
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	68ba      	ldr	r2, [r7, #8]
 80216f6:	2053      	movs	r0, #83	; 0x53
 80216f8:	47a0      	blx	r4
 80216fa:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80216fc:	697b      	ldr	r3, [r7, #20]
}
 80216fe:	4618      	mov	r0, r3
 8021700:	371c      	adds	r7, #28
 8021702:	46bd      	mov	sp, r7
 8021704:	bd90      	pop	{r4, r7, pc}
 8021706:	bf00      	nop
 8021708:	00000004 	.word	0x00000004

0802170c <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 802170c:	b590      	push	{r4, r7, lr}
 802170e:	b085      	sub	sp, #20
 8021710:	af00      	add	r7, sp, #0
 8021712:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 8021714:	4b07      	ldr	r3, [pc, #28]	; (8021734 <_tx_trace_event_filter+0x28>)
 8021716:	f859 3003 	ldr.w	r3, [r9, r3]
 802171a:	681c      	ldr	r4, [r3, #0]
 802171c:	2300      	movs	r3, #0
 802171e:	2200      	movs	r2, #0
 8021720:	6879      	ldr	r1, [r7, #4]
 8021722:	2054      	movs	r0, #84	; 0x54
 8021724:	47a0      	blx	r4
 8021726:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021728:	68fb      	ldr	r3, [r7, #12]
}
 802172a:	4618      	mov	r0, r3
 802172c:	3714      	adds	r7, #20
 802172e:	46bd      	mov	sp, r7
 8021730:	bd90      	pop	{r4, r7, pc}
 8021732:	bf00      	nop
 8021734:	00000004 	.word	0x00000004

08021738 <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 8021738:	b590      	push	{r4, r7, lr}
 802173a:	b085      	sub	sp, #20
 802173c:	af00      	add	r7, sp, #0
 802173e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 8021740:	4b07      	ldr	r3, [pc, #28]	; (8021760 <_tx_trace_event_unfilter+0x28>)
 8021742:	f859 3003 	ldr.w	r3, [r9, r3]
 8021746:	681c      	ldr	r4, [r3, #0]
 8021748:	2300      	movs	r3, #0
 802174a:	2200      	movs	r2, #0
 802174c:	6879      	ldr	r1, [r7, #4]
 802174e:	2055      	movs	r0, #85	; 0x55
 8021750:	47a0      	blx	r4
 8021752:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021754:	68fb      	ldr	r3, [r7, #12]
}
 8021756:	4618      	mov	r0, r3
 8021758:	3714      	adds	r7, #20
 802175a:	46bd      	mov	sp, r7
 802175c:	bd90      	pop	{r4, r7, pc}
 802175e:	bf00      	nop
 8021760:	00000004 	.word	0x00000004

08021764 <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 8021764:	b590      	push	{r4, r7, lr}
 8021766:	b085      	sub	sp, #20
 8021768:	af00      	add	r7, sp, #0
 802176a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 802176c:	4b07      	ldr	r3, [pc, #28]	; (802178c <_tx_trace_interrupt_control+0x28>)
 802176e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021772:	681c      	ldr	r4, [r3, #0]
 8021774:	2300      	movs	r3, #0
 8021776:	2200      	movs	r2, #0
 8021778:	6879      	ldr	r1, [r7, #4]
 802177a:	2057      	movs	r0, #87	; 0x57
 802177c:	47a0      	blx	r4
 802177e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021780:	68fb      	ldr	r3, [r7, #12]
}
 8021782:	4618      	mov	r0, r3
 8021784:	3714      	adds	r7, #20
 8021786:	46bd      	mov	sp, r7
 8021788:	bd90      	pop	{r4, r7, pc}
 802178a:	bf00      	nop
 802178c:	00000004 	.word	0x00000004

08021790 <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 8021790:	b590      	push	{r4, r7, lr}
 8021792:	b083      	sub	sp, #12
 8021794:	af00      	add	r7, sp, #0
 8021796:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 8021798:	4b06      	ldr	r3, [pc, #24]	; (80217b4 <_tx_trace_isr_enter_insert+0x24>)
 802179a:	f859 3003 	ldr.w	r3, [r9, r3]
 802179e:	681c      	ldr	r4, [r3, #0]
 80217a0:	2300      	movs	r3, #0
 80217a2:	2200      	movs	r2, #0
 80217a4:	6879      	ldr	r1, [r7, #4]
 80217a6:	2058      	movs	r0, #88	; 0x58
 80217a8:	47a0      	blx	r4
}
 80217aa:	bf00      	nop
 80217ac:	370c      	adds	r7, #12
 80217ae:	46bd      	mov	sp, r7
 80217b0:	bd90      	pop	{r4, r7, pc}
 80217b2:	bf00      	nop
 80217b4:	00000004 	.word	0x00000004

080217b8 <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80217b8:	b590      	push	{r4, r7, lr}
 80217ba:	b083      	sub	sp, #12
 80217bc:	af00      	add	r7, sp, #0
 80217be:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80217c0:	4b06      	ldr	r3, [pc, #24]	; (80217dc <_tx_trace_isr_exit_insert+0x24>)
 80217c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80217c6:	681c      	ldr	r4, [r3, #0]
 80217c8:	2300      	movs	r3, #0
 80217ca:	2200      	movs	r2, #0
 80217cc:	6879      	ldr	r1, [r7, #4]
 80217ce:	2059      	movs	r0, #89	; 0x59
 80217d0:	47a0      	blx	r4
}
 80217d2:	bf00      	nop
 80217d4:	370c      	adds	r7, #12
 80217d6:	46bd      	mov	sp, r7
 80217d8:	bd90      	pop	{r4, r7, pc}
 80217da:	bf00      	nop
 80217dc:	00000004 	.word	0x00000004

080217e0 <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 80217e0:	b590      	push	{r4, r7, lr}
 80217e2:	b089      	sub	sp, #36	; 0x24
 80217e4:	af00      	add	r7, sp, #0
 80217e6:	60f8      	str	r0, [r7, #12]
 80217e8:	60b9      	str	r1, [r7, #8]
 80217ea:	607a      	str	r2, [r7, #4]
 80217ec:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 80217ee:	687b      	ldr	r3, [r7, #4]
 80217f0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 80217f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217f8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 80217fa:	4b08      	ldr	r3, [pc, #32]	; (802181c <_tx_trace_user_event_insert+0x3c>)
 80217fc:	f859 3003 	ldr.w	r3, [r9, r3]
 8021800:	681c      	ldr	r4, [r3, #0]
 8021802:	f107 0310 	add.w	r3, r7, #16
 8021806:	68ba      	ldr	r2, [r7, #8]
 8021808:	68f9      	ldr	r1, [r7, #12]
 802180a:	205b      	movs	r0, #91	; 0x5b
 802180c:	47a0      	blx	r4
 802180e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021810:	69fb      	ldr	r3, [r7, #28]
}
 8021812:	4618      	mov	r0, r3
 8021814:	3724      	adds	r7, #36	; 0x24
 8021816:	46bd      	mov	sp, r7
 8021818:	bd90      	pop	{r4, r7, pc}
 802181a:	bf00      	nop
 802181c:	00000004 	.word	0x00000004

08021820 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 8021820:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 8021824:	4b2e      	ldr	r3, [pc, #184]	; (80218e0 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 8021826:	4c2f      	ldr	r4, [pc, #188]	; (80218e4 <memory_set_done+0x6>)
    mov     r5,r0
 8021828:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 802182a:	482f      	ldr	r0, [pc, #188]	; (80218e8 <memory_set_done+0xa>)
    sub     r0,r0,r3
 802182c:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8021830:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 8021832:	492e      	ldr	r1, [pc, #184]	; (80218ec <memory_set_done+0xe>)
    sub     r1,r1, r4
 8021834:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021838:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 802183a:	4a2d      	ldr	r2, [pc, #180]	; (80218f0 <memory_set_done+0x12>)
    sub     r2,r2,r4
 802183c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8021840:	444a      	add	r2, r9

08021842 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 8021842:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 8021844:	d011      	beq.n	802186a <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 8021846:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 8021848:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 802184a:	d008      	beq.n	802185e <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 802184c:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 802184e:	db03      	blt.n	8021858 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 8021850:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 8021854:	444e      	add	r6, r9
    b       address_built   // Finished building address
 8021856:	e002      	b.n	802185e <address_built>

08021858 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 8021858:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 802185c:	442e      	add	r6, r5

0802185e <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 802185e:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 8021860:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 8021864:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 8021868:	e7eb      	b.n	8021842 <new_got_setup>

0802186a <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 802186a:	4822      	ldr	r0, [pc, #136]	; (80218f4 <memory_set_done+0x16>)
    sub     r0,r0,r3
 802186c:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8021870:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8021872:	4921      	ldr	r1, [pc, #132]	; (80218f8 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8021874:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021878:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802187a:	4a20      	ldr	r2, [pc, #128]	; (80218fc <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802187c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8021880:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8021882:	f000 f815 	bl	80218b0 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8021886:	481e      	ldr	r0, [pc, #120]	; (8021900 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8021888:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802188c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802188e:	491d      	ldr	r1, [pc, #116]	; (8021904 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8021890:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021894:	4449      	add	r1, r9
    mov     r2, #0
 8021896:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802189a:	f000 f81a 	bl	80218d2 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802189e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 80218a2:	4770      	bx	lr
 80218a4:	f3af 8000 	nop.w
 80218a8:	f3af 8000 	nop.w
 80218ac:	f3af 8000 	nop.w

080218b0 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 80218b0:	4288      	cmp	r0, r1
    beq     memory_copy_done
 80218b2:	d00d      	beq.n	80218d0 <memory_copy_done>
    cmp     r2, r1
 80218b4:	428a      	cmp	r2, r1
    beq     memory_copy_done
 80218b6:	d00b      	beq.n	80218d0 <memory_copy_done>
    sub     r2, r2, r1
 80218b8:	eba2 0201 	sub.w	r2, r2, r1

080218bc <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 80218bc:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 80218be:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 80218c2:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 80218c4:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 80218c8:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 80218cc:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 80218ce:	d1f5      	bne.n	80218bc <memory_copy_loop>

080218d0 <memory_copy_done>:
memory_copy_done:
    bx      lr
 80218d0:	4770      	bx	lr

080218d2 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 80218d2:	4288      	cmp	r0, r1
    beq     memory_set_done
 80218d4:	d003      	beq.n	80218de <memory_set_done>
    strb    r2, [r0]
 80218d6:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 80218d8:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 80218dc:	e7f9      	b.n	80218d2 <crt0_memory_set>

080218de <memory_set_done>:
memory_set_done:
    bx      lr
 80218de:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 80218e0:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 80218e4:	2001c000 	.word	0x2001c000
    ldr     r0, =__got_load_start__
 80218e8:	08021908 	.word	0x08021908
    ldr     r1, =__new_got_start__
 80218ec:	2001c000 	.word	0x2001c000
    ldr     r2, =__new_got_end__
 80218f0:	2001c02c 	.word	0x2001c02c
    ldr     r0, =__data_load_start__
 80218f4:	08021978 	.word	0x08021978
    ldr     r1, =__data_start__
 80218f8:	2001c02c 	.word	0x2001c02c
    ldr     r2, =__data_end__
 80218fc:	2001c02c 	.word	0x2001c02c
    ldr     r0, =__bss_start__
 8021900:	2001c02c 	.word	0x2001c02c
    ldr     r1, =__bss_end__
 8021904:	2001c858 	.word	0x2001c858
