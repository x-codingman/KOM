
qemu_stm32l475_m4_write_before_exploit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c508  080001c0  080001c0  000101c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800c6c8  0800c6c8  0001c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf4  0800caf4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800caf4  0800caf4  0001caf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cafc  0800cafc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb00  0800cb00  0001cb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800cb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f7d0  20000068  0800cb6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f838  0800cb6c  0002f838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003e1de  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000334  00000000  00000000  0005e2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00040a61  00000000  00000000  0005e5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000aae9  00000000  00000000  0009f04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001bd0  00000000  00000000  000a9b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ecab  00000000  00000000  000ab708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000139f  00000000  00000000  001ca3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003512e  00000000  00000000  001cb752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006044  00000000  00000000  00200880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c6b0 	.word	0x0800c6b0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	0800c6b0 	.word	0x0800c6b0

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4918      	ldr	r1, [pc, #96]	; (8000268 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4817      	ldr	r0, [pc, #92]	; (800026c <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4916      	ldr	r1, [pc, #88]	; (8000268 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4816      	ldr	r0, [pc, #88]	; (8000270 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4914      	ldr	r1, [pc, #80]	; (8000274 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490e      	ldr	r1, [pc, #56]	; (8000278 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800024c:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800024e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000252:	4770      	bx	lr

08000254 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000254:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000256:	f000 f813 	bl	8000280 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800025e:	4770      	bx	lr

08000260 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000260:	f7ff bffe 	b.w	8000260 <__tx_NMIHandler>

08000264 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000268:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800026c:	2000ef88 	.word	0x2000ef88
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000270:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000274:	00124f7f 	.word	0x00124f7f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000278:	40ff0000 	.word	0x40ff0000
 800027c:	00000000 	.word	0x00000000

08000280 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000280:	4922      	ldr	r1, [pc, #136]	; (800030c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000282:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000284:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000288:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800028c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800028e:	b13a      	cbz	r2, 80002a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000290:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000294:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000296:	b91a      	cbnz	r2, 80002a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800029a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800029e:	6018      	str	r0, [r3, #0]

080002a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80002a0:	491d      	ldr	r1, [pc, #116]	; (8000318 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80002a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80002a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80002a6:	b122      	cbz	r2, 80002b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80002aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80002ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80002b0:	e008      	b.n	80002c4 <__tx_timer_done>

080002b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80002b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80002b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80002ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80002bc:	d101      	bne.n	80002c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80002be:	4b19      	ldr	r3, [pc, #100]	; (8000324 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80002c0:	6818      	ldr	r0, [r3, #0]

080002c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80002c2:	6008      	str	r0, [r1, #0]

080002c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80002c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80002c8:	b912      	cbnz	r2, 80002d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80002ca:	4914      	ldr	r1, [pc, #80]	; (800031c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80002cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80002ce:	b1d0      	cbz	r0, 8000306 <__tx_timer_nothing_expired>

080002d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80002d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80002d4:	4911      	ldr	r1, [pc, #68]	; (800031c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80002d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80002d8:	b108      	cbz	r0, 80002de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80002da:	f006 fd4b 	bl	8006d74 <_tx_timer_expiration_process>

080002de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80002e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80002e2:	b172      	cbz	r2, 8000302 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80002e4:	f006 fbd8 	bl	8006a98 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002e8:	480f      	ldr	r0, [pc, #60]	; (8000328 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80002ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80002ec:	b949      	cbnz	r1, 8000302 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ee:	480f      	ldr	r0, [pc, #60]	; (800032c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80002f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80002f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80002f6:	480f      	ldr	r0, [pc, #60]	; (8000334 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80002f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80002fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80002fe:	d000      	beq.n	8000302 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000300:	6002      	str	r2, [r0, #0]

08000302 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000306 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000306:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800030a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800030c:	2000f034 	.word	0x2000f034
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000310:	2000f5cc 	.word	0x2000f5cc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000314:	2000f038 	.word	0x2000f038
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000318:	2000f0c4 	.word	0x2000f0c4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800031c:	2000f0c8 	.word	0x2000f0c8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000320:	2000f0c0 	.word	0x2000f0c0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000324:	2000f0bc 	.word	0x2000f0bc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	2000f028 	.word	0x2000f028
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800032c:	2000ef8c 	.word	0x2000ef8c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000330:	2000ef90 	.word	0x2000ef90
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000334:	e000ed04 	.word	0xe000ed04
	...

08000340 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000340:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000344:	4ac5      	ldr	r2, [pc, #788]	; (800065c <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000346:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000348:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800034c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000350:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable memory fault registers.  */
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 8000354:	48c2      	ldr	r0, [pc, #776]	; (8000660 <tx_thread_fpu_disable+0x6>)
    LDR     r1, =0x70000                            // Enable Usage, Bus, and MemManage faults
 8000356:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    STR     r1, [r0]                                //
 800035a:	6001      	str	r1, [r0, #0]

    /* Enable interrupts */
    CPSIE   i
 800035c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800035e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000362:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000366:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800036a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800036e:	f3bf 8f6f 	isb	sy

08000372 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000372:	e7fe      	b.n	8000372 <__tx_wait_here>

08000374 <BusFault_Handler>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000374:	b672      	cpsid	i
#endif  /* TX_PORT_USE_BASEPRI */

    /* Now pickup and store all the fault related information.  */

    LDR     r12,=_txm_module_manager_memory_fault_info  // Pickup fault info struct
 8000376:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8000664 <tx_thread_fpu_disable+0xa>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800037a:	48bb      	ldr	r0, [pc, #748]	; (8000668 <tx_thread_fpu_disable+0xe>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800037c:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #0]                           // Save current thread pointer in fault info structure
 800037e:	f8cc 1000 	str.w	r1, [ip]
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 8000382:	48b7      	ldr	r0, [pc, #732]	; (8000660 <tx_thread_fpu_disable+0x6>)
    LDR     r1, [r0]                                // Pickup SHCSR
 8000384:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #8]                           // Save SHCSR
 8000386:	f8cc 1008 	str.w	r1, [ip, #8]
    LDR     r0, =0xE000ED28                         // Build CFSR address
 800038a:	48b8      	ldr	r0, [pc, #736]	; (800066c <tx_thread_fpu_disable+0x12>)
    LDR     r1, [r0]                                // Pickup CFSR
 800038c:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #12]                          // Save CFSR
 800038e:	f8cc 100c 	str.w	r1, [ip, #12]
    LDR     r0, =0xE000ED34                         // Build MMFAR address
 8000392:	48b7      	ldr	r0, [pc, #732]	; (8000670 <tx_thread_fpu_disable+0x16>)
    LDR     r1, [r0]                                // Pickup MMFAR
 8000394:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #16]                          // Save MMFAR
 8000396:	f8cc 1010 	str.w	r1, [ip, #16]
    LDR     r0, =0xE000ED38                         // Build BFAR address
 800039a:	48b6      	ldr	r0, [pc, #728]	; (8000674 <tx_thread_fpu_disable+0x1a>)
    LDR     r1, [r0]                                // Pickup BFAR
 800039c:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #20]                          // Save BFAR
 800039e:	f8cc 1014 	str.w	r1, [ip, #20]
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80003a2:	f3ef 8014 	mrs	r0, CONTROL
    STR     r0, [r12, #24]                          // Save CONTROL
 80003a6:	f8cc 0018 	str.w	r0, [ip, #24]
    MRS     r1, PSP                                 // Pickup thread stack pointer
 80003aa:	f3ef 8109 	mrs	r1, PSP
    STR     r1, [r12, #28]                          // Save thread stack pointer
 80003ae:	f8cc 101c 	str.w	r1, [ip, #28]
    LDR     r0, [r1]                                // Pickup saved r0
 80003b2:	6808      	ldr	r0, [r1, #0]
    STR     r0, [r12, #32]                          // Save r0
 80003b4:	f8cc 0020 	str.w	r0, [ip, #32]
    LDR     r0, [r1, #4]                            // Pickup saved r1
 80003b8:	6848      	ldr	r0, [r1, #4]
    STR     r0, [r12, #36]                          // Save r1
 80003ba:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
    STR     r2, [r12, #40]                          // Save r2
 80003be:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    STR     r3, [r12, #44]                          // Save r3
 80003c2:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    STR     r4, [r12, #48]                          // Save r4
 80003c6:	f8cc 4030 	str.w	r4, [ip, #48]	; 0x30
    STR     r5, [r12, #52]                          // Save r5
 80003ca:	f8cc 5034 	str.w	r5, [ip, #52]	; 0x34
    STR     r6, [r12, #56]                          // Save r6
 80003ce:	f8cc 6038 	str.w	r6, [ip, #56]	; 0x38
    STR     r7, [r12, #60]                          // Save r7
 80003d2:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
    STR     r8, [r12, #64]                          // Save r8
 80003d6:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
    STR     r9, [r12, #68]                          // Save r9
 80003da:	f8cc 9044 	str.w	r9, [ip, #68]	; 0x44
    STR     r10,[r12, #72]                          // Save r10
 80003de:	f8cc a048 	str.w	sl, [ip, #72]	; 0x48
    STR     r11,[r12, #76]                          // Save r11
 80003e2:	f8cc b04c 	str.w	fp, [ip, #76]	; 0x4c
    LDR     r0, [r1, #16]                           // Pickup saved r12
 80003e6:	6908      	ldr	r0, [r1, #16]
    STR     r0, [r12, #80]                          // Save r12
 80003e8:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
    LDR     r0, [r1, #20]                           // Pickup saved lr
 80003ec:	6948      	ldr	r0, [r1, #20]
    STR     r0, [r12, #84]                          // Save lr
 80003ee:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    LDR     r0, [r1, #24]                           // Pickup instruction address at point of fault
 80003f2:	6988      	ldr	r0, [r1, #24]
    STR     r0, [r12, #4]                           // Save point of fault
 80003f4:	f8cc 0004 	str.w	r0, [ip, #4]
    LDR     r0, [r1, #28]                           // Pickup xPSR
 80003f8:	69c8      	ldr	r0, [r1, #28]
    STR     r0, [r12, #88]                          // Save xPSR
 80003fa:	f8cc 0058 	str.w	r0, [ip, #88]	; 0x58

    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80003fe:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #1                              // Clear the UNPRIV bit
 8000402:	f020 0001 	bic.w	r0, r0, #1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000406:	f380 8814 	msr	CONTROL, r0

    LDR     r0, =0xE000ED28                         // Build the Memory Management Fault Status Register (MMFSR)
 800040a:	4898      	ldr	r0, [pc, #608]	; (800066c <tx_thread_fpu_disable+0x12>)
    LDRB    r1, [r0]                                // Pickup the MMFSR, with the following bit definitions:
 800040c:	7801      	ldrb	r1, [r0, #0]
                                                    //     Bit 0 = 1 -> Instruction address violation
                                                    //     Bit 1 = 1 -> Load/store address violation
                                                    //     Bit 7 = 1 -> MMFAR is valid
    STRB    r1, [r0]                                // Clear the MMFSR
 800040e:	7001      	strb	r1, [r0, #0]

#ifdef __ARM_FP
    LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
 8000410:	4899      	ldr	r0, [pc, #612]	; (8000678 <tx_thread_fpu_disable+0x1e>)
    LDR     r1, [r0]                                // Load FPCCR
 8000412:	6801      	ldr	r1, [r0, #0]
    BIC     r1, r1, #1                              // Clear the lazy preservation active bit
 8000414:	f021 0101 	bic.w	r1, r1, #1
    STR     r1, [r0]                                // Save FPCCR
 8000418:	6001      	str	r1, [r0, #0]
#endif

    BL      _txm_module_manager_memory_fault_handler    // Call memory manager fault handler
 800041a:	f009 fbb1 	bl	8009b80 <_txm_module_manager_memory_fault_handler>
    CPSID   i                                       // Disable interrupts
    BL      _tx_execution_thread_exit               // Call the thread exit function
    CPSIE   i                                       // Enable interrupts
#endif

    MOV     r1, #0                                  // Build NULL value
 800041e:	f04f 0100 	mov.w	r1, #0
    LDR     r0, =_tx_thread_current_ptr             // Pickup address of current thread pointer
 8000422:	4891      	ldr	r0, [pc, #580]	; (8000668 <tx_thread_fpu_disable+0xe>)
    STR     r1, [r0]                                // Clear current thread pointer
 8000424:	6001      	str	r1, [r0, #0]

    // Return from MemManage_Handler exception
    LDR     r0, =0xE000ED04                         // Load ICSR
 8000426:	4895      	ldr	r0, [pc, #596]	; (800067c <tx_thread_fpu_disable+0x22>)
    LDR     r1, =0x10000000                         // Set PENDSVSET bit
 8000428:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     r1, [r0]                                // Store ICSR
 800042c:	6001      	str	r1, [r0, #0]
    DSB                                             // Wait for memory access to complete
 800042e:	f3bf 8f4f 	dsb	sy
#ifdef TX_PORT_USE_BASEPRI
    MOV     r0, 0                                   // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r0
#else
    CPSIE   i                                       // Enable interrupts
 8000432:	b662      	cpsie	i
#endif
    MOV     lr, #0xFFFFFFFD                         // Load exception return code
 8000434:	f06f 0e02 	mvn.w	lr, #2
    BX      lr                                      // Return from exception
 8000438:	4770      	bx	lr

0800043a <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800043a:	488b      	ldr	r0, [pc, #556]	; (8000668 <tx_thread_fpu_disable+0xe>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800043c:	4a90      	ldr	r2, [pc, #576]	; (8000680 <tx_thread_fpu_disable+0x26>)
    MOV     r3, #0                                  // Build NULL value
 800043e:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000442:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000444:	b191      	cbz	r1, 800046c <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000446:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000448:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800044c:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000450:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000454:	d101      	bne.n	800045a <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000456:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800045a <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800045a:	4c8a      	ldr	r4, [pc, #552]	; (8000684 <tx_thread_fpu_disable+0x2a>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800045c:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000460:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000462:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000466:	b10d      	cbz	r5, 800046c <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000468:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800046a:	6023      	str	r3, [r4, #0]

0800046c <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800046c:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800046e:	6811      	ldr	r1, [r2, #0]
    CBNZ    r1, __tx_ts_restore                     // Yes, schedule it
 8000470:	b951      	cbnz	r1, 8000488 <__tx_ts_restore>

08000472 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000472:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000474:	6811      	ldr	r1, [r2, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000476:	b909      	cbnz	r1, 800047c <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000478:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800047a:	e7fa      	b.n	8000472 <__tx_ts_wait>

0800047c <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800047c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000480:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000484:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

08000488 <__tx_ts_restore>:
__tx_ts_restore:

    /* A thread is ready, make the current thread the new thread
       and enable interrupts.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000488:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800048a:	b662      	cpsie	i
#endif

    /* Increment the thread run count.  */

    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800048c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800048e:	4c7d      	ldr	r4, [pc, #500]	; (8000684 <tx_thread_fpu_disable+0x2a>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000490:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000492:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000496:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000498:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800049a:	f8d1 c008 	ldr.w	ip, [r1, #8]

    MRS     r5, CONTROL                             // Pickup current CONTROL register
 800049e:	f3ef 8514 	mrs	r5, CONTROL
    LDR     r4, [r1, #0x98]                         // Pickup current user mode flag
 80004a2:	f8d1 4098 	ldr.w	r4, [r1, #152]	; 0x98
    BIC     r5, r5, #1                              // Clear the UNPRIV bit
 80004a6:	f025 0501 	bic.w	r5, r5, #1
    ORR     r4, r4, r5                              // Build new CONTROL register
 80004aa:	ea44 0405 	orr.w	r4, r4, r5
    MSR     CONTROL, r4                             // Setup new CONTROL register
 80004ae:	f384 8814 	msr	CONTROL, r4

    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 80004b2:	4875      	ldr	r0, [pc, #468]	; (8000688 <tx_thread_fpu_disable+0x2e>)
    MOV     r3, #0                                  // Build disable value
 80004b4:	f04f 0300 	mov.w	r3, #0
    CPSID   i                                       // Disable interrupts
 80004b8:	b672      	cpsid	i
    STR     r3, [r0]                                // Disable MPU
 80004ba:	6003      	str	r3, [r0, #0]
    LDR     r0, [r1, #0x90]                         // Pickup the module instance pointer
 80004bc:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
#ifdef TXM_MODULE_MPU_DEFAULT
    CBZ     r0, default_mpu                         // Is this thread owned by a module? No, default MPU setup
#else
    CBZ     r0, skip_mpu_setup                      // Is this thread owned by a module? No, skip MPU setup
 80004c0:	b188      	cbz	r0, 80004e6 <skip_mpu_setup>
#endif

    LDR     r2, [r0, #0x8C]                         // Pickup MPU region 5 address
 80004c2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
#ifdef TXM_MODULE_MPU_DEFAULT
    CBZ     r2, default_mpu                         // Is protection required for this module? No, default MPU setup
#else
    CBZ     r2, skip_mpu_setup                      // Is protection required for this module? No, skip MPU setup
 80004c6:	b172      	cbz	r2, 80004e6 <skip_mpu_setup>
#endif
    LDR     r1, =0xE000ED9C                         // MPU_RBAR register address
 80004c8:	4970      	ldr	r1, [pc, #448]	; (800068c <tx_thread_fpu_disable+0x32>)

    // Use alias registers to quickly load MPU
    ADD     r0, r0, #100                            // Build address of MPU register start in thread control block
 80004ca:	f100 0064 	add.w	r0, r0, #100	; 0x64

080004ce <config_mpu>:
default_mpu:
    LDR     r0, =txm_module_default_mpu_registers   // default MPU configuration
#endif

config_mpu:
    LDM     r0!,{r2-r9}                             // Load MPU regions 0-3
 80004ce:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store MPU regions 0-3
 80004d2:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
    LDM     r0!,{r2-r9}                             // Load MPU regions 4-7
 80004d6:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store MPU regions 4-7
 80004da:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}

080004de <_tx_enable_mpu>:
    LDM     r0,{r2-r9}                              // Load MPU regions 12-15
    STM     r1,{r2-r9}                              // Store MPU regions 12-15
#endif

_tx_enable_mpu:
    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 80004de:	486a      	ldr	r0, [pc, #424]	; (8000688 <tx_thread_fpu_disable+0x2e>)
    MOV     r1, #5                                  // Build enable value with background region enabled
 80004e0:	f04f 0105 	mov.w	r1, #5
    STR     r1, [r0]                                // Enable MPU
 80004e4:	6001      	str	r1, [r0, #0]

080004e6 <skip_mpu_setup>:
skip_mpu_setup:
    CPSIE   i                                       // Enable interrupts
 80004e6:	b662      	cpsie	i
    LDMIA   r12!, {LR}                              // Pickup LR
 80004e8:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80004ec:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80004f0:	d101      	bne.n	80004f6 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80004f2:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080004f6 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80004f6:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80004fa:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80004fe:	4770      	bx	lr

08000500 <SVC_Handler>:
    .thumb_func
SVC_Handler:
    .thumb_func
__tx_SVCallHandler:

    MRS     r0, PSP                                 // Pickup the PSP stack
 8000500:	f3ef 8009 	mrs	r0, PSP
    LDR     r1, [r0, #24]                           // Pickup the point of interrupt
 8000504:	6981      	ldr	r1, [r0, #24]
    LDRB    r2, [r1, #-2]                           // Pickup the SVC parameter
 8000506:	f811 2c02 	ldrb.w	r2, [r1, #-2]

    /* Determine which SVC trap we are processing */

    CMP     r2, #1                                  // Is it the entry into ThreadX?
 800050a:	2a01      	cmp	r2, #1
    BNE     _tx_thread_user_return                  // No, return to user mode
 800050c:	d143      	bne.n	8000596 <_tx_thread_user_return>

    /* At this point we have an SVC 1, which means we are entering
       the kernel from a module thread with user mode selected. */

    LDR     r2, =_txm_module_priv                   // Load address of where we should have come from
 800050e:	4a60      	ldr	r2, [pc, #384]	; (8000690 <tx_thread_fpu_disable+0x36>)
    CMP     r1, r2                                  // Did we come from user_mode_entry?
 8000510:	4291      	cmp	r1, r2
    IT      NE                                      // If no (not equal), then...
 8000512:	bf18      	it	ne
    BXNE    lr                                      // return from where we came.
 8000514:	4770      	bxne	lr

    LDR     r3, [r0, #20]                           // This is the saved LR
 8000516:	6943      	ldr	r3, [r0, #20]
    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 8000518:	4953      	ldr	r1, [pc, #332]	; (8000668 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 800051a:	680a      	ldr	r2, [r1, #0]
    MOV     r1, #0                                  // Build clear value
 800051c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r2, #0x98]                         // Clear the current user mode selection for thread
 8000520:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    STR     r3, [r2, #0xA0]                         // Save the original LR in thread control block
 8000524:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /* If there is memory protection, use kernel stack */
    LDR     r0, [r2, #0x90]                         // Load the module instance ptr
 8000528:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    LDR     r0, [r0, #0x0C]                         // Load the module property flags
 800052c:	68c0      	ldr	r0, [r0, #12]
    TST     r0, #2                                  // Check if memory protected
 800052e:	f010 0f02 	tst.w	r0, #2
    BEQ     _tx_skip_kernel_stack_enter
 8000532:	d029      	beq.n	8000588 <_tx_skip_kernel_stack_enter>

    /* Switch to the module thread's kernel stack */
    LDR     r0, [r2, #0xA8]                         // Load the module kernel stack end
 8000534:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
#ifndef TXM_MODULE_KERNEL_STACK_MAINTENANCE_DISABLE
    LDR     r1, [r2, #0xA4]                         // Load the module kernel stack start
 8000538:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    LDR     r3, [r2, #0xAC]                         // Load the module kernel stack size
 800053c:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    STR     r1, [r2, #12]                           // Set stack start
 8000540:	60d1      	str	r1, [r2, #12]
    STR     r0, [r2, #16]                           // Set stack end
 8000542:	6110      	str	r0, [r2, #16]
    STR     r3, [r2, #20]                           // Set stack size
 8000544:	6153      	str	r3, [r2, #20]
#endif

    MRS     r3, PSP                                 // Pickup thread stack pointer
 8000546:	f3ef 8309 	mrs	r3, PSP
#ifdef __ARM_FP
    TST     lr, #0x10                               // Test for extended module stack
 800054a:	f01e 0f10 	tst.w	lr, #16
    ITT     EQ
 800054e:	bf04      	itt	eq
    ORREQ   r3, r3, #1                              // If so, set LSB in thread stack pointer to indicate extended frame
 8000550:	f043 0301 	orreq.w	r3, r3, #1
    ORREQ   lr, lr, #0x10                           // Set bit, return with standard frame
 8000554:	f04e 0e10 	orreq.w	lr, lr, #16
#endif
    STR     r3, [r2, #0xB0]                         // Save thread stack pointer
 8000558:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
#ifdef __ARM_FP
    BIC     r3, #1                                  // Clear possibly OR'd bit
 800055c:	f023 0301 	bic.w	r3, r3, #1
#endif

    /* Build kernel stack by copying thread stack two registers at a time */
    ADD     r3, r3, #32                             // Start at bottom of hardware stack
 8000560:	f103 0320 	add.w	r3, r3, #32
    LDMDB   r3!, {r1-r2}
 8000564:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 8000568:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 800056c:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 8000570:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 8000574:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 8000578:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 800057c:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 8000580:	e920 0006 	stmdb	r0!, {r1, r2}

    MSR     PSP, r0                                 // Set kernel stack pointer
 8000584:	f380 8809 	msr	PSP, r0

08000588 <_tx_skip_kernel_stack_enter>:

_tx_skip_kernel_stack_enter:
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000588:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #1                              // Clear the UNPRIV bit
 800058c:	f020 0001 	bic.w	r0, r0, #1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000590:	f380 8814 	msr	CONTROL, r0
    BX      lr                                      // Return to thread
 8000594:	4770      	bx	lr

08000596 <_tx_thread_user_return>:

_tx_thread_user_return:
    LDR     r2, =_txm_module_user_mode_exit         // Load address of where we should have come from
 8000596:	4a3f      	ldr	r2, [pc, #252]	; (8000694 <tx_thread_fpu_disable+0x3a>)
    CMP     r1, r2                                  // Did we come from user_mode_exit?
 8000598:	4291      	cmp	r1, r2
    IT      NE                                      // If no (not equal), then...
 800059a:	bf18      	it	ne
    BXNE    lr                                      // return from where we came
 800059c:	4770      	bxne	lr

    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 800059e:	4932      	ldr	r1, [pc, #200]	; (8000668 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 80005a0:	680a      	ldr	r2, [r1, #0]
    LDR     r1, [r2, #0x9C]                         // Pick up user mode
 80005a2:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
    STR     r1, [r2, #0x98]                         // Set the current user mode selection for thread
 80005a6:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98

    /* If there is memory protection, use kernel stack */
    LDR     r0, [r2, #0x90]                         // Load the module instance ptr
 80005aa:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    LDR     r0, [r0, #0x0C]                         // Load the module property flags
 80005ae:	68c0      	ldr	r0, [r0, #12]
    TST     r0, #2                                  // Check if memory protected
 80005b0:	f010 0f02 	tst.w	r0, #2
    BEQ     _tx_skip_kernel_stack_exit
 80005b4:	d038      	beq.n	8000628 <_tx_skip_kernel_stack_exit>

#ifndef TXM_MODULE_KERNEL_STACK_MAINTENANCE_DISABLE
    LDR     r0, [r2, #0xB4]                         // Load the module thread stack start
 80005b6:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    LDR     r1, [r2, #0xB8]                         // Load the module thread stack end
 80005ba:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
    LDR     r3, [r2, #0xBC]                         // Load the module thread stack size
 80005be:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
    STR     r0, [r2, #12]                           // Set stack start
 80005c2:	60d0      	str	r0, [r2, #12]
    STR     r1, [r2, #16]                           // Set stack end
 80005c4:	6111      	str	r1, [r2, #16]
    STR     r3, [r2, #20]                           // Set stack size
 80005c6:	6153      	str	r3, [r2, #20]

#ifdef __ARM_FP
    /* If lazy stacking is pending, check if it can be cleared.
       if(LSPACT && tx_thread_module_stack_start < FPCAR && FPCAR < tx_thread_module_stack_end)
       then clear LSPACT. */
    LDR     r3, =0xE000EF34                         // Address of FPCCR
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <tx_thread_fpu_disable+0x1e>)
    LDR     r3, [r3]                                // Load FPCCR
 80005ca:	681b      	ldr	r3, [r3, #0]
    TST     r3, #1                                  // Check if LSPACT is set
 80005cc:	f013 0f01 	tst.w	r3, #1
    BEQ     _tx_no_lazy_clear                       // if clear, move on
 80005d0:	d00d      	beq.n	80005ee <_tx_no_lazy_clear>
    LDR     r1, =0xE000EF38                         // Address of FPCAR
 80005d2:	4931      	ldr	r1, [pc, #196]	; (8000698 <tx_thread_fpu_disable+0x3e>)
    LDR     r1, [r1]                                // Load FPCAR
 80005d4:	6809      	ldr	r1, [r1, #0]
    LDR     r0, [r2, #0xA4]                         // Load kernel stack start
 80005d6:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
    CMP     r1, r0                                  // If FPCAR < start, move on
 80005da:	4281      	cmp	r1, r0
    BLO     _tx_no_lazy_clear
 80005dc:	d307      	bcc.n	80005ee <_tx_no_lazy_clear>
    LDR     r0, [r2, #0xA8]                         // Load kernel stack end
 80005de:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    CMP     r0, r1                                  // If end < FPCAR, move on
 80005e2:	4288      	cmp	r0, r1
    BLO     _tx_no_lazy_clear
 80005e4:	d303      	bcc.n	80005ee <_tx_no_lazy_clear>
    BIC     r3, #1                                  // Clear LSPACT
 80005e6:	f023 0301 	bic.w	r3, r3, #1
    LDR     r1, =0xE000EF34                         // Address of FPCCR
 80005ea:	4923      	ldr	r1, [pc, #140]	; (8000678 <tx_thread_fpu_disable+0x1e>)
    STR     r3, [r1]                                // Save updated FPCCR
 80005ec:	600b      	str	r3, [r1, #0]

080005ee <_tx_no_lazy_clear>:
_tx_no_lazy_clear:
#endif

    LDR     r0, [r2, #0xB0]                         // Load the module thread stack pointer
 80005ee:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
    MRS     r3, PSP                                 // Pickup kernel stack pointer
 80005f2:	f3ef 8309 	mrs	r3, PSP
#ifdef __ARM_FP
    TST     r0, #1                                  // Is module stack extended?
 80005f6:	f010 0f01 	tst.w	r0, #1
    ITTE    NE                                      // If so...
 80005fa:	bf1a      	itte	ne
    BICNE   lr, #0x10                               // Clear bit, return with extended frame
 80005fc:	f02e 0e10 	bicne.w	lr, lr, #16
    BICNE   r0, #1                                  // Clear bit that indicates extended module frame
 8000600:	f020 0001 	bicne.w	r0, r0, #1
    ORREQ   lr, lr, #0x10                           // Else set bit, return with standard frame
 8000604:	f04e 0e10 	orreq.w	lr, lr, #16
#endif

    /* Copy kernel hardware stack to module thread stack. */
    LDM     r3!, {r1-r2}                            // Get r0, r1 from kernel stack
 8000608:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}                            // Insert r0, r1 into thread stack
 800060a:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}                            // Get r2, r3 from kernel stack
 800060c:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}                            // Insert r2, r3 into thread stack
 800060e:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}                            // Get r12, lr from kernel stack
 8000610:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}                            // Insert r12, lr into thread stack
 8000612:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}                            // Get pc, xpsr from kernel stack
 8000614:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}                            // Insert pc, xpsr into thread stack
 8000616:	c006      	stmia	r0!, {r1, r2}
    SUB     r0, r0, #32                             // Subtract 32 to get back to top of stack
 8000618:	f1a0 0020 	sub.w	r0, r0, #32
    MSR     PSP, r0                                 // Set thread stack pointer
 800061c:	f380 8809 	msr	PSP, r0

    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 8000620:	4911      	ldr	r1, [pc, #68]	; (8000668 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 8000622:	680a      	ldr	r2, [r1, #0]
    LDR     r1, [r2, #0x9C]                         // Pick up user mode
 8000624:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c

08000628 <_tx_skip_kernel_stack_exit>:

_tx_skip_kernel_stack_exit:
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000628:	f3ef 8014 	mrs	r0, CONTROL
    ORR     r0, r0, r1                              // OR in the user mode bit
 800062c:	ea40 0001 	orr.w	r0, r0, r1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000630:	f380 8814 	msr	CONTROL, r0
    BX      lr                                      // Return to thread
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	f3af 8000 	nop.w
 800063c:	f3af 8000 	nop.w

08000640 <_txm_module_manager_user_mode_entry>:
// VOID   _txm_module_manager_user_mode_entry(VOID)
// {
    .global  _txm_module_manager_user_mode_entry
    .thumb_func
_txm_module_manager_user_mode_entry:
    SVC     1                                       // Enter kernel
 8000640:	df01      	svc	1

08000642 <_txm_module_priv>:
_txm_module_priv:
    /* At this point, we are out of user mode. The original LR has been saved in the
       thread control block. Simply call the kernel dispatch function. */
    BL      _txm_module_manager_kernel_dispatch
 8000642:	f009 f95d 	bl	8009900 <_txm_module_manager_kernel_dispatch>

    /* Pickup the original LR value while still in privileged mode */
    LDR     r2, =_tx_thread_current_ptr             // Build current thread pointer address
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <tx_thread_fpu_disable+0xe>)
    LDR     r3, [r2]                                // Pickup current thread pointer
 8000648:	6813      	ldr	r3, [r2, #0]
    LDR     lr, [r3, #0xA0]                         // Pickup saved LR from original call
 800064a:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0

    SVC     2                                       // Exit kernel and return to user mode
 800064e:	df02      	svc	2

08000650 <_txm_module_user_mode_exit>:
_txm_module_user_mode_exit:
    BX      lr                                      // Return to the caller
 8000650:	4770      	bx	lr
    NOP
 8000652:	bf00      	nop
    NOP
 8000654:	bf00      	nop
    NOP
 8000656:	bf00      	nop
    NOP
 8000658:	bf00      	nop

0800065a <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800065a:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800065c:	2000f028 	.word	0x2000f028
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 8000660:	e000ed24 	.word	0xe000ed24
    LDR     r12,=_txm_module_manager_memory_fault_info  // Pickup fault info struct
 8000664:	2000f690 	.word	0x2000f690
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000668:	2000ef8c 	.word	0x2000ef8c
    LDR     r0, =0xE000ED28                         // Build CFSR address
 800066c:	e000ed28 	.word	0xe000ed28
    LDR     r0, =0xE000ED34                         // Build MMFAR address
 8000670:	e000ed34 	.word	0xe000ed34
    LDR     r0, =0xE000ED38                         // Build BFAR address
 8000674:	e000ed38 	.word	0xe000ed38
    LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
 8000678:	e000ef34 	.word	0xe000ef34
    LDR     r0, =0xE000ED04                         // Load ICSR
 800067c:	e000ed04 	.word	0xe000ed04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000680:	2000ef90 	.word	0x2000ef90
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000684:	2000f5cc 	.word	0x2000f5cc
    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 8000688:	e000ed94 	.word	0xe000ed94
    LDR     r1, =0xE000ED9C                         // MPU_RBAR register address
 800068c:	e000ed9c 	.word	0xe000ed9c
    LDR     r2, =_txm_module_priv                   // Load address of where we should have come from
 8000690:	08000642 	.word	0x08000642
    LDR     r2, =_txm_module_user_mode_exit         // Load address of where we should have come from
 8000694:	08000650 	.word	0x08000650
    LDR     r1, =0xE000EF38                         // Address of FPCAR
 8000698:	e000ef38 	.word	0xe000ef38
 800069c:	00000000 	.word	0x00000000

080006a0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80006a0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80006a2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80006a6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 80006aa:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 80006ae:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80006b0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80006b4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80006b6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80006b8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80006ba:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80006bc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80006be:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80006c0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80006c2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80006c6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80006c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80006cc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80006d2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80006d4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80006d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80006da:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80006dc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80006de:	4770      	bx	lr

080006e0 <_txm_module_manager_thread_stack_build>:
                    pc          Initial value for pc
                    xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                       // Pickup end of stack area
 80006e0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                        // Align frame
 80006e2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                         // Subtract frame size
 80006e6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                     // Build initial LR value
 80006ea:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                        // Save on the stack
 80006ee:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                              // Build initial register value
 80006f0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                        // Store initial r4
 80006f4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                        // Store initial r5
 80006f6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                       // Store initial r6
 80006f8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                       // Store initial r7
 80006fa:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                       // Store initial r8
 80006fc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #28]                       // Store initial r10
 80006fe:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                       // Store initial r11
 8000700:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r0, [r2, #36]                       // Store initial r0, which is the thread control block
 8000702:	6250      	str	r0, [r2, #36]	; 0x24

    LDR     r3, [r0, #8]                        // Pickup thread entry info pointer,which is in the stack pointer position of the thread control block.
 8000704:	6883      	ldr	r3, [r0, #8]
                                                //   It was setup in the txm_module_manager_thread_create function. It will be overwritten later in this
                                                //   function with the actual, initial stack pointer.
    STR     r3, [r2, #40]                       // Store initial r1, which is the module entry information.
 8000706:	6293      	str	r3, [r2, #40]	; 0x28
    LDR     r3, [r3, #8]                        // Pickup data base register from the module information
 8000708:	689b      	ldr	r3, [r3, #8]
    STR     r3, [r2, #24]                       // Store initial r9 (data base register)
 800070a:	6193      	str	r3, [r2, #24]
    MOV     r3, #0                              // Clear r3 again
 800070c:	f04f 0300 	mov.w	r3, #0

    STR     r3, [r2, #44]                       // Store initial r2
 8000710:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                       // Store initial r3
 8000712:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                       // Store initial r12
 8000714:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                     // Poison EXC_RETURN value
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                       // Store initial lr
 800071a:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                       // Store initial pc
 800071c:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                     // Only T-bit need be set
 800071e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                       // Store initial xPSR
 8000722:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                        // Save stack pointer in thread's control block
 8000724:	6082      	str	r2, [r0, #8]
    BX      lr                                  // Return to caller
 8000726:	4770      	bx	lr
	...

08000730 <memchr>:
 8000730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000734:	2a10      	cmp	r2, #16
 8000736:	db2b      	blt.n	8000790 <memchr+0x60>
 8000738:	f010 0f07 	tst.w	r0, #7
 800073c:	d008      	beq.n	8000750 <memchr+0x20>
 800073e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000742:	3a01      	subs	r2, #1
 8000744:	428b      	cmp	r3, r1
 8000746:	d02d      	beq.n	80007a4 <memchr+0x74>
 8000748:	f010 0f07 	tst.w	r0, #7
 800074c:	b342      	cbz	r2, 80007a0 <memchr+0x70>
 800074e:	d1f6      	bne.n	800073e <memchr+0xe>
 8000750:	b4f0      	push	{r4, r5, r6, r7}
 8000752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800075a:	f022 0407 	bic.w	r4, r2, #7
 800075e:	f07f 0700 	mvns.w	r7, #0
 8000762:	2300      	movs	r3, #0
 8000764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000768:	3c08      	subs	r4, #8
 800076a:	ea85 0501 	eor.w	r5, r5, r1
 800076e:	ea86 0601 	eor.w	r6, r6, r1
 8000772:	fa85 f547 	uadd8	r5, r5, r7
 8000776:	faa3 f587 	sel	r5, r3, r7
 800077a:	fa86 f647 	uadd8	r6, r6, r7
 800077e:	faa5 f687 	sel	r6, r5, r7
 8000782:	b98e      	cbnz	r6, 80007a8 <memchr+0x78>
 8000784:	d1ee      	bne.n	8000764 <memchr+0x34>
 8000786:	bcf0      	pop	{r4, r5, r6, r7}
 8000788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800078c:	f002 0207 	and.w	r2, r2, #7
 8000790:	b132      	cbz	r2, 80007a0 <memchr+0x70>
 8000792:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000796:	3a01      	subs	r2, #1
 8000798:	ea83 0301 	eor.w	r3, r3, r1
 800079c:	b113      	cbz	r3, 80007a4 <memchr+0x74>
 800079e:	d1f8      	bne.n	8000792 <memchr+0x62>
 80007a0:	2000      	movs	r0, #0
 80007a2:	4770      	bx	lr
 80007a4:	3801      	subs	r0, #1
 80007a6:	4770      	bx	lr
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	bf06      	itte	eq
 80007ac:	4635      	moveq	r5, r6
 80007ae:	3803      	subeq	r0, #3
 80007b0:	3807      	subne	r0, #7
 80007b2:	f015 0f01 	tst.w	r5, #1
 80007b6:	d107      	bne.n	80007c8 <memchr+0x98>
 80007b8:	3001      	adds	r0, #1
 80007ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80007be:	bf02      	ittt	eq
 80007c0:	3001      	addeq	r0, #1
 80007c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80007c6:	3001      	addeq	r0, #1
 80007c8:	bcf0      	pop	{r4, r5, r6, r7}
 80007ca:	3801      	subs	r0, #1
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <__aeabi_uldivmod>:
 80007d0:	b953      	cbnz	r3, 80007e8 <__aeabi_uldivmod+0x18>
 80007d2:	b94a      	cbnz	r2, 80007e8 <__aeabi_uldivmod+0x18>
 80007d4:	2900      	cmp	r1, #0
 80007d6:	bf08      	it	eq
 80007d8:	2800      	cmpeq	r0, #0
 80007da:	bf1c      	itt	ne
 80007dc:	f04f 31ff 	movne.w	r1, #4294967295
 80007e0:	f04f 30ff 	movne.w	r0, #4294967295
 80007e4:	f000 b970 	b.w	8000ac8 <__aeabi_idiv0>
 80007e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f0:	f000 f806 	bl	8000800 <__udivmoddi4>
 80007f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007fc:	b004      	add	sp, #16
 80007fe:	4770      	bx	lr

08000800 <__udivmoddi4>:
 8000800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000804:	9e08      	ldr	r6, [sp, #32]
 8000806:	460d      	mov	r5, r1
 8000808:	4604      	mov	r4, r0
 800080a:	460f      	mov	r7, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14a      	bne.n	80008a6 <__udivmoddi4+0xa6>
 8000810:	428a      	cmp	r2, r1
 8000812:	4694      	mov	ip, r2
 8000814:	d965      	bls.n	80008e2 <__udivmoddi4+0xe2>
 8000816:	fab2 f382 	clz	r3, r2
 800081a:	b143      	cbz	r3, 800082e <__udivmoddi4+0x2e>
 800081c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000820:	f1c3 0220 	rsb	r2, r3, #32
 8000824:	409f      	lsls	r7, r3
 8000826:	fa20 f202 	lsr.w	r2, r0, r2
 800082a:	4317      	orrs	r7, r2
 800082c:	409c      	lsls	r4, r3
 800082e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000832:	fa1f f58c 	uxth.w	r5, ip
 8000836:	fbb7 f1fe 	udiv	r1, r7, lr
 800083a:	0c22      	lsrs	r2, r4, #16
 800083c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000840:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000844:	fb01 f005 	mul.w	r0, r1, r5
 8000848:	4290      	cmp	r0, r2
 800084a:	d90a      	bls.n	8000862 <__udivmoddi4+0x62>
 800084c:	eb1c 0202 	adds.w	r2, ip, r2
 8000850:	f101 37ff 	add.w	r7, r1, #4294967295
 8000854:	f080 811c 	bcs.w	8000a90 <__udivmoddi4+0x290>
 8000858:	4290      	cmp	r0, r2
 800085a:	f240 8119 	bls.w	8000a90 <__udivmoddi4+0x290>
 800085e:	3902      	subs	r1, #2
 8000860:	4462      	add	r2, ip
 8000862:	1a12      	subs	r2, r2, r0
 8000864:	b2a4      	uxth	r4, r4
 8000866:	fbb2 f0fe 	udiv	r0, r2, lr
 800086a:	fb0e 2210 	mls	r2, lr, r0, r2
 800086e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000872:	fb00 f505 	mul.w	r5, r0, r5
 8000876:	42a5      	cmp	r5, r4
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x90>
 800087a:	eb1c 0404 	adds.w	r4, ip, r4
 800087e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000882:	f080 8107 	bcs.w	8000a94 <__udivmoddi4+0x294>
 8000886:	42a5      	cmp	r5, r4
 8000888:	f240 8104 	bls.w	8000a94 <__udivmoddi4+0x294>
 800088c:	4464      	add	r4, ip
 800088e:	3802      	subs	r0, #2
 8000890:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000894:	1b64      	subs	r4, r4, r5
 8000896:	2100      	movs	r1, #0
 8000898:	b11e      	cbz	r6, 80008a2 <__udivmoddi4+0xa2>
 800089a:	40dc      	lsrs	r4, r3
 800089c:	2300      	movs	r3, #0
 800089e:	e9c6 4300 	strd	r4, r3, [r6]
 80008a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d908      	bls.n	80008bc <__udivmoddi4+0xbc>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	f000 80ed 	beq.w	8000a8a <__udivmoddi4+0x28a>
 80008b0:	2100      	movs	r1, #0
 80008b2:	e9c6 0500 	strd	r0, r5, [r6]
 80008b6:	4608      	mov	r0, r1
 80008b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008bc:	fab3 f183 	clz	r1, r3
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d149      	bne.n	8000958 <__udivmoddi4+0x158>
 80008c4:	42ab      	cmp	r3, r5
 80008c6:	d302      	bcc.n	80008ce <__udivmoddi4+0xce>
 80008c8:	4282      	cmp	r2, r0
 80008ca:	f200 80f8 	bhi.w	8000abe <__udivmoddi4+0x2be>
 80008ce:	1a84      	subs	r4, r0, r2
 80008d0:	eb65 0203 	sbc.w	r2, r5, r3
 80008d4:	2001      	movs	r0, #1
 80008d6:	4617      	mov	r7, r2
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d0e2      	beq.n	80008a2 <__udivmoddi4+0xa2>
 80008dc:	e9c6 4700 	strd	r4, r7, [r6]
 80008e0:	e7df      	b.n	80008a2 <__udivmoddi4+0xa2>
 80008e2:	b902      	cbnz	r2, 80008e6 <__udivmoddi4+0xe6>
 80008e4:	deff      	udf	#255	; 0xff
 80008e6:	fab2 f382 	clz	r3, r2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 8090 	bne.w	8000a10 <__udivmoddi4+0x210>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2101      	movs	r1, #1
 80008fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000900:	fb07 2015 	mls	r0, r7, r5, r2
 8000904:	0c22      	lsrs	r2, r4, #16
 8000906:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800090a:	fb0e f005 	mul.w	r0, lr, r5
 800090e:	4290      	cmp	r0, r2
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x124>
 8000912:	eb1c 0202 	adds.w	r2, ip, r2
 8000916:	f105 38ff 	add.w	r8, r5, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x122>
 800091c:	4290      	cmp	r0, r2
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2b8>
 8000922:	4645      	mov	r5, r8
 8000924:	1a12      	subs	r2, r2, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb2 f0f7 	udiv	r0, r2, r7
 800092c:	fb07 2210 	mls	r2, r7, r0, r2
 8000930:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x14e>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 32ff 	add.w	r2, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x14c>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2c2>
 800094c:	4610      	mov	r0, r2
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000956:	e79f      	b.n	8000898 <__udivmoddi4+0x98>
 8000958:	f1c1 0720 	rsb	r7, r1, #32
 800095c:	408b      	lsls	r3, r1
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa05 f401 	lsl.w	r4, r5, r1
 800096a:	fa20 f307 	lsr.w	r3, r0, r7
 800096e:	40fd      	lsrs	r5, r7
 8000970:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000974:	4323      	orrs	r3, r4
 8000976:	fbb5 f8f9 	udiv	r8, r5, r9
 800097a:	fa1f fe8c 	uxth.w	lr, ip
 800097e:	fb09 5518 	mls	r5, r9, r8, r5
 8000982:	0c1c      	lsrs	r4, r3, #16
 8000984:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000988:	fb08 f50e 	mul.w	r5, r8, lr
 800098c:	42a5      	cmp	r5, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	fa00 f001 	lsl.w	r0, r0, r1
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b0>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2b4>
 80009a4:	42a5      	cmp	r5, r4
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2b4>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4464      	add	r4, ip
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	b29d      	uxth	r5, r3
 80009b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b8:	fb09 4413 	mls	r4, r9, r3, r4
 80009bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1da>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2ac>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2ac>
 80009d6:	3b02      	subs	r3, #2
 80009d8:	4464      	add	r4, ip
 80009da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009de:	fba3 9502 	umull	r9, r5, r3, r2
 80009e2:	eba4 040e 	sub.w	r4, r4, lr
 80009e6:	42ac      	cmp	r4, r5
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46ae      	mov	lr, r5
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x29c>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x298>
 80009f0:	b156      	cbz	r6, 8000a08 <__udivmoddi4+0x208>
 80009f2:	ebb0 0208 	subs.w	r2, r0, r8
 80009f6:	eb64 040e 	sbc.w	r4, r4, lr
 80009fa:	fa04 f707 	lsl.w	r7, r4, r7
 80009fe:	40ca      	lsrs	r2, r1
 8000a00:	40cc      	lsrs	r4, r1
 8000a02:	4317      	orrs	r7, r2
 8000a04:	e9c6 7400 	strd	r7, r4, [r6]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a10:	f1c3 0120 	rsb	r1, r3, #32
 8000a14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a18:	fa20 f201 	lsr.w	r2, r0, r1
 8000a1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000a20:	409d      	lsls	r5, r3
 8000a22:	432a      	orrs	r2, r5
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1510 	mls	r5, r7, r0, r1
 8000a34:	0c11      	lsrs	r1, r2, #16
 8000a36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000a3e:	428d      	cmp	r5, r1
 8000a40:	fa04 f403 	lsl.w	r4, r4, r3
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x258>
 8000a46:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b0>
 8000a50:	428d      	cmp	r5, r1
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b0>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4461      	add	r1, ip
 8000a58:	1b49      	subs	r1, r1, r5
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a60:	fb07 1115 	mls	r1, r7, r5, r1
 8000a64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a68:	fb05 f10e 	mul.w	r1, r5, lr
 8000a6c:	4291      	cmp	r1, r2
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x282>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2a8>
 8000a7a:	4291      	cmp	r1, r2
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2a8>
 8000a7e:	3d02      	subs	r5, #2
 8000a80:	4462      	add	r2, ip
 8000a82:	1a52      	subs	r2, r2, r1
 8000a84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0xfc>
 8000a8a:	4631      	mov	r1, r6
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	e708      	b.n	80008a2 <__udivmoddi4+0xa2>
 8000a90:	4639      	mov	r1, r7
 8000a92:	e6e6      	b.n	8000862 <__udivmoddi4+0x62>
 8000a94:	4610      	mov	r0, r2
 8000a96:	e6fb      	b.n	8000890 <__udivmoddi4+0x90>
 8000a98:	4548      	cmp	r0, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f0>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f0>
 8000aa8:	4645      	mov	r5, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x282>
 8000aac:	462b      	mov	r3, r5
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1da>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x258>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b0>
 8000ab8:	3d02      	subs	r5, #2
 8000aba:	4462      	add	r2, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x124>
 8000abe:	4608      	mov	r0, r1
 8000ac0:	e70a      	b.n	80008d8 <__udivmoddi4+0xd8>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x14e>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad0:	f000 fc96 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ad4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ad6:	e003      	b.n	8000ae0 <LoopCopyDataInit>

08000ad8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ada:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000adc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ade:	3104      	adds	r1, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ae4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ae6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ae8:	d3f6      	bcc.n	8000ad8 <CopyDataInit>
	ldr	r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aec:	e002      	b.n	8000af4 <LoopFillZerobss>

08000aee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000af0:	f842 3b04 	str.w	r3, [r2], #4

08000af4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <LoopForever+0x16>)
	cmp	r2, r3
 8000af6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000af8:	d3f9      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f00b f895 	bl	800bc28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afe:	f000 fa09 	bl	8000f14 <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	20014000 	.word	0x20014000
	ldr	r3, =_sidata
 8000b08:	0800cb04 	.word	0x0800cb04
	ldr	r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b10:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000b14:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000b18:	2000f838 	.word	0x2000f838

08000b1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_IRQHandler>
	...

08000b20 <tx_application_define>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval none
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af08      	add	r7, sp, #32
 8000b26:	6078      	str	r0, [r7, #4]
  CHAR *pointer;

  if (tx_byte_pool_create(&ModuleManagerBytePool, "Module Manager Byte Pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000b28:	2334      	movs	r3, #52	; 0x34
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <tx_application_define+0xb4>)
 8000b32:	4929      	ldr	r1, [pc, #164]	; (8000bd8 <tx_application_define+0xb8>)
 8000b34:	4829      	ldr	r0, [pc, #164]	; (8000bdc <tx_application_define+0xbc>)
 8000b36:	f006 fbc7 	bl	80072c8 <_txe_byte_pool_create>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 8000b40:	f000 f9f4 	bl	8000f2c <Error_Handler>
                        pointer, 16 * sizeof(ULONG)) != TX_SUCCESS)
    {
      Error_Handler();
    }
  }
}
 8000b44:	e041      	b.n	8000bca <tx_application_define+0xaa>
    if (tx_byte_allocate(&ModuleManagerBytePool, (VOID **) &pointer,
 8000b46:	f107 010c 	add.w	r1, r7, #12
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b50:	4822      	ldr	r0, [pc, #136]	; (8000bdc <tx_application_define+0xbc>)
 8000b52:	f006 fb45 	bl	80071e0 <_txe_byte_allocate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <tx_application_define+0x40>
      Error_Handler();
 8000b5c:	f000 f9e6 	bl	8000f2c <Error_Handler>
    if (tx_thread_create(&ModuleManager, "Module Manager Thread", module_manager_entry, 0,
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	22e8      	movs	r2, #232	; 0xe8
 8000b64:	9206      	str	r2, [sp, #24]
 8000b66:	2201      	movs	r2, #1
 8000b68:	9205      	str	r2, [sp, #20]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	9204      	str	r2, [sp, #16]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	9203      	str	r2, [sp, #12]
 8000b72:	2204      	movs	r2, #4
 8000b74:	9202      	str	r2, [sp, #8]
 8000b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7a:	9201      	str	r2, [sp, #4]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <tx_application_define+0xc0>)
 8000b82:	4918      	ldr	r1, [pc, #96]	; (8000be4 <tx_application_define+0xc4>)
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <tx_application_define+0xc8>)
 8000b86:	f006 fe17 	bl	80077b8 <_txe_thread_create>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <tx_application_define+0x74>
      Error_Handler();
 8000b90:	f000 f9cc 	bl	8000f2c <Error_Handler>
    if (tx_byte_allocate(&ModuleManagerBytePool, (VOID **) &pointer,
 8000b94:	f107 010c 	add.w	r1, r7, #12
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <tx_application_define+0xbc>)
 8000b9e:	f006 fb1f 	bl	80071e0 <_txe_byte_allocate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <tx_application_define+0x8c>
      Error_Handler();
 8000ba8:	f000 f9c0 	bl	8000f2c <Error_Handler>
    if (tx_queue_create(&ResidentQueue, "Resident Queue", TX_1_ULONG,
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2244      	movs	r2, #68	; 0x44
 8000bb0:	9201      	str	r2, [sp, #4]
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <tx_application_define+0xcc>)
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <tx_application_define+0xd0>)
 8000bbc:	f006 fcb8 	bl	8007530 <_txe_queue_create>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <tx_application_define+0xaa>
      Error_Handler();
 8000bc6:	f000 f9b1 	bl	8000f2c <Error_Handler>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000c63c 	.word	0x2000c63c
 8000bd8:	0800c6c8 	.word	0x0800c6c8
 8000bdc:	2000ee3c 	.word	0x2000ee3c
 8000be0:	08000c01 	.word	0x08000c01
 8000be4:	0800c6e4 	.word	0x0800c6e4
 8000be8:	20000084 	.word	0x20000084
 8000bec:	0800c6fc 	.word	0x0800c6fc
 8000bf0:	200005f4 	.word	0x200005f4

08000bf4 <MX_AZURE_RTOS_Init>:
   * @brief  MX_AZURE_RTOS_Init
   * @param  None
   * @retval None
   */
void MX_AZURE_RTOS_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000bf8:	f003 fc28 	bl	800444c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <module_manager_entry>:
  * @brief  Module Manager main thread.
  * @param  thread_input: thread id
  * @retval none
  */
VOID module_manager_entry(ULONG thread_input)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b096      	sub	sp, #88	; 0x58
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  UINT   status;
  CHAR   p_msg[64];
  ULONG  r_msg = PROCESSING_NOT_STARTED;
 8000c08:	2363      	movs	r3, #99	; 0x63
 8000c0a:	613b      	str	r3, [r7, #16]
  ULONG  module_properties;

  /* Initialize the module manager. */
  status = txm_module_manager_initialize((VOID *) module_data_area, MODULE_DATA_SIZE);
 8000c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c10:	486f      	ldr	r0, [pc, #444]	; (8000dd0 <module_manager_entry+0x1d0>)
 8000c12:	f007 fb6f 	bl	80082f4 <_txm_module_manager_initialize>
 8000c16:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <module_manager_entry+0x22>
  {
    Error_Handler();
 8000c1e:	f000 f985 	bl	8000f2c <Error_Handler>
  }

  /* Create a pool for module objects. */
  status = txm_module_manager_object_pool_create(object_memory, OBJECT_MEM_SIZE);
 8000c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c26:	486b      	ldr	r0, [pc, #428]	; (8000dd4 <module_manager_entry+0x1d4>)
 8000c28:	f009 fc54 	bl	800a4d4 <_txm_module_manager_object_pool_create>
 8000c2c:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <module_manager_entry+0x38>
  {
    Error_Handler();
 8000c34:	f000 f97a 	bl	8000f2c <Error_Handler>
  }

  /* Register a fault handler. */
  status = txm_module_manager_memory_fault_notify(module_fault_handler);
 8000c38:	4867      	ldr	r0, [pc, #412]	; (8000dd8 <module_manager_entry+0x1d8>)
 8000c3a:	f008 ffc7 	bl	8009bcc <_txm_module_manager_memory_fault_notify>
 8000c3e:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <module_manager_entry+0x4a>
  {
    Error_Handler();
 8000c46:	f000 f971 	bl	8000f2c <Error_Handler>
  }

  /* Load the module from the specified address */
  status = txm_module_manager_in_place_load(&my_module, "my module", (VOID *) MODULE_FLASH_ADDRESS);
 8000c4a:	4a64      	ldr	r2, [pc, #400]	; (8000ddc <module_manager_entry+0x1dc>)
 8000c4c:	4964      	ldr	r1, [pc, #400]	; (8000de0 <module_manager_entry+0x1e0>)
 8000c4e:	4865      	ldr	r0, [pc, #404]	; (8000de4 <module_manager_entry+0x1e4>)
 8000c50:	f007 fb10 	bl	8008274 <_txm_module_manager_in_place_load>
 8000c54:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <module_manager_entry+0x60>
  {
    Error_Handler();
 8000c5c:	f000 f966 	bl	8000f2c <Error_Handler>
  }

  /* Enable shared memory region for module with read-only access permission. */
  status = txm_module_manager_external_memory_enable(&my_module, (void*)READONLY_REGION, SHARED_MEM_SIZE, 0);
 8000c60:	2300      	movs	r3, #0
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	4960      	ldr	r1, [pc, #384]	; (8000de8 <module_manager_entry+0x1e8>)
 8000c66:	485f      	ldr	r0, [pc, #380]	; (8000de4 <module_manager_entry+0x1e4>)
 8000c68:	f007 fa7a 	bl	8008160 <_txm_module_manager_external_memory_enable>
 8000c6c:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <module_manager_entry+0x78>
  {
    Error_Handler();
 8000c74:	f000 f95a 	bl	8000f2c <Error_Handler>
  }

  /* Enable shared memory region for module with read and write access permission. */
  status = txm_module_manager_external_memory_enable(&my_module, (void*)READWRITE_REGION, SHARED_MEM_SIZE, TXM_MODULE_MANAGER_SHARED_ATTRIBUTE_WRITE);
 8000c78:	2301      	movs	r3, #1
 8000c7a:	22ff      	movs	r2, #255	; 0xff
 8000c7c:	495b      	ldr	r1, [pc, #364]	; (8000dec <module_manager_entry+0x1ec>)
 8000c7e:	4859      	ldr	r0, [pc, #356]	; (8000de4 <module_manager_entry+0x1e4>)
 8000c80:	f007 fa6e 	bl	8008160 <_txm_module_manager_external_memory_enable>
 8000c84:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <module_manager_entry+0x90>
  {
    Error_Handler();
 8000c8c:	f000 f94e 	bl	8000f2c <Error_Handler>
  }


  /* Get module properties. */
  status = txm_module_manager_properties_get(&my_module, &module_properties);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4853      	ldr	r0, [pc, #332]	; (8000de4 <module_manager_entry+0x1e4>)
 8000c98:	f009 fc36 	bl	800a508 <_txm_module_manager_properties_get>
 8000c9c:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <module_manager_entry+0xa8>
  {
    Error_Handler();
 8000ca4:	f000 f942 	bl	8000f2c <Error_Handler>
  }

  /* Print loaded module info */
  printf("Module <%s> is loaded from address 0x%08X\n", my_module.txm_module_instance_name, MODULE_FLASH_ADDRESS);
 8000ca8:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <module_manager_entry+0x1e4>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a4b      	ldr	r2, [pc, #300]	; (8000ddc <module_manager_entry+0x1dc>)
 8000cae:	4619      	mov	r1, r3
 8000cb0:	484f      	ldr	r0, [pc, #316]	; (8000df0 <module_manager_entry+0x1f0>)
 8000cb2:	f00a fe1f 	bl	800b8f4 <iprintf>
  printf("Module code section size: %i bytes, data section size: %i\n", (int)my_module.txm_module_instance_code_size, (int)my_module.txm_module_instance_data_size);
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <module_manager_entry+0x1e4>)
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <module_manager_entry+0x1e4>)
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	484c      	ldr	r0, [pc, #304]	; (8000df4 <module_manager_entry+0x1f4>)
 8000cc4:	f00a fe16 	bl	800b8f4 <iprintf>
  printf("Module Attributes:\n");
 8000cc8:	484b      	ldr	r0, [pc, #300]	; (8000df8 <module_manager_entry+0x1f8>)
 8000cca:	f00a fe79 	bl	800b9c0 <puts>
  printf("  - Compiled for %s compiler\n", ((module_properties >> 25) == 1)? "CubeIDE (GNU)" : ((module_properties >> 24) == 1)? "ARM KEIL" : "IAR EW");
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	0e5b      	lsrs	r3, r3, #25
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d007      	beq.n	8000ce6 <module_manager_entry+0xe6>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <module_manager_entry+0xe2>
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <module_manager_entry+0x1fc>)
 8000ce0:	e002      	b.n	8000ce8 <module_manager_entry+0xe8>
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <module_manager_entry+0x200>)
 8000ce4:	e000      	b.n	8000ce8 <module_manager_entry+0xe8>
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <module_manager_entry+0x204>)
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4847      	ldr	r0, [pc, #284]	; (8000e08 <module_manager_entry+0x208>)
 8000cec:	f00a fe02 	bl	800b8f4 <iprintf>
  printf("  - Shared/external memory access is %s\n", ((module_properties & 0x04) == 0)? "Disabled" : "Enabled");
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <module_manager_entry+0xfe>
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <module_manager_entry+0x20c>)
 8000cfc:	e000      	b.n	8000d00 <module_manager_entry+0x100>
 8000cfe:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <module_manager_entry+0x210>)
 8000d00:	4619      	mov	r1, r3
 8000d02:	4844      	ldr	r0, [pc, #272]	; (8000e14 <module_manager_entry+0x214>)
 8000d04:	f00a fdf6 	bl	800b8f4 <iprintf>
  printf("  - MPU protection is %s\n", ((module_properties & 0x02) == 0)? "Disabled" : "Enabled");
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <module_manager_entry+0x116>
 8000d12:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <module_manager_entry+0x20c>)
 8000d14:	e000      	b.n	8000d18 <module_manager_entry+0x118>
 8000d16:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <module_manager_entry+0x210>)
 8000d18:	4619      	mov	r1, r3
 8000d1a:	483f      	ldr	r0, [pc, #252]	; (8000e18 <module_manager_entry+0x218>)
 8000d1c:	f00a fdea 	bl	800b8f4 <iprintf>
  printf("  - %s mode execution is enabled for the module\n\n", ((module_properties & 0x01) == 0)? "Privileged" : "User");
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <module_manager_entry+0x12e>
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <module_manager_entry+0x21c>)
 8000d2c:	e000      	b.n	8000d30 <module_manager_entry+0x130>
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <module_manager_entry+0x220>)
 8000d30:	4619      	mov	r1, r3
 8000d32:	483c      	ldr	r0, [pc, #240]	; (8000e24 <module_manager_entry+0x224>)
 8000d34:	f00a fdde 	bl	800b8f4 <iprintf>

  /* Start the modules. */
  status = txm_module_manager_start(&my_module);
 8000d38:	482a      	ldr	r0, [pc, #168]	; (8000de4 <module_manager_entry+0x1e4>)
 8000d3a:	f009 fcc5 	bl	800a6c8 <_txm_module_manager_start>
 8000d3e:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <module_manager_entry+0x14a>
  {
    Error_Handler();
 8000d46:	f000 f8f1 	bl	8000f2c <Error_Handler>
  }

  printf("Module execution is started\n");
 8000d4a:	4837      	ldr	r0, [pc, #220]	; (8000e28 <module_manager_entry+0x228>)
 8000d4c:	f00a fe38 	bl	800b9c0 <puts>

  /* Get Module's progress messages */
  while(r_msg != PROCESSING_FINISHED)
 8000d50:	e021      	b.n	8000d96 <module_manager_entry+0x196>
  {
    if(tx_queue_receive(&ResidentQueue, &r_msg, TX_TIMER_TICKS_PER_SECOND) == TX_SUCCESS)
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2264      	movs	r2, #100	; 0x64
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <module_manager_entry+0x22c>)
 8000d5c:	f006 fc98 	bl	8007690 <_txe_queue_receive>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d117      	bne.n	8000d96 <module_manager_entry+0x196>
    {
      /* Convert the message to a user friendly string */
      pretty_msg(p_msg, r_msg);
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f878 	bl	8000e64 <pretty_msg>

      printf("Module is executing: %s\n", p_msg);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482d      	ldr	r0, [pc, #180]	; (8000e30 <module_manager_entry+0x230>)
 8000d7c:	f00a fdba 	bl	800b8f4 <iprintf>

      /* Check if the last executed operation resulted in memory violation */
      if(memory_faults)
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <module_manager_entry+0x234>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <module_manager_entry+0x196>
      {
        /* A memory access fault just occurred */
        printf("A memory fault occurred while module executed: %s\n", p_msg);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482a      	ldr	r0, [pc, #168]	; (8000e38 <module_manager_entry+0x238>)
 8000d90:	f00a fdb0 	bl	800b8f4 <iprintf>
        break;
 8000d94:	e002      	b.n	8000d9c <module_manager_entry+0x19c>
  while(r_msg != PROCESSING_FINISHED)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b2c      	cmp	r3, #44	; 0x2c
 8000d9a:	d1da      	bne.n	8000d52 <module_manager_entry+0x152>
      }
    }
  }

  /* Stop the modules. */
  status = txm_module_manager_stop(&my_module);
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <module_manager_entry+0x1e4>)
 8000d9e:	f009 fd81 	bl	800a8a4 <_txm_module_manager_stop>
 8000da2:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <module_manager_entry+0x1ae>
  {
    Error_Handler();
 8000daa:	f000 f8bf 	bl	8000f2c <Error_Handler>
  }

  /* Unload the modules. */
  status = txm_module_manager_unload(&my_module);
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <module_manager_entry+0x1e4>)
 8000db0:	f00a fb7e 	bl	800b4b0 <_txm_module_manager_unload>
 8000db4:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <module_manager_entry+0x1c0>
  {
    Error_Handler();
 8000dbc:	f000 f8b6 	bl	8000f2c <Error_Handler>
  }

  /* Toggle green LED to indicated success of operations */
  while(1) {
	/* Toggle GREEN LED*/
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	481e      	ldr	r0, [pc, #120]	; (8000e3c <module_manager_entry+0x23c>)
 8000dc4:	f000 fe36 	bl	8001a34 <HAL_GPIO_TogglePin>
    tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f005 f979 	bl	80060c0 <_tx_thread_sleep>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000dce:	e7f7      	b.n	8000dc0 <module_manager_entry+0x1c0>
 8000dd0:	20000638 	.word	0x20000638
 8000dd4:	20008638 	.word	0x20008638
 8000dd8:	08000e41 	.word	0x08000e41
 8000ddc:	08020000 	.word	0x08020000
 8000de0:	0800c70c 	.word	0x0800c70c
 8000de4:	2000016c 	.word	0x2000016c
 8000de8:	20010000 	.word	0x20010000
 8000dec:	20010100 	.word	0x20010100
 8000df0:	0800c718 	.word	0x0800c718
 8000df4:	0800c744 	.word	0x0800c744
 8000df8:	0800c780 	.word	0x0800c780
 8000dfc:	0800c794 	.word	0x0800c794
 8000e00:	0800c7a0 	.word	0x0800c7a0
 8000e04:	0800c7a8 	.word	0x0800c7a8
 8000e08:	0800c7b8 	.word	0x0800c7b8
 8000e0c:	0800c7d8 	.word	0x0800c7d8
 8000e10:	0800c7e4 	.word	0x0800c7e4
 8000e14:	0800c7ec 	.word	0x0800c7ec
 8000e18:	0800c818 	.word	0x0800c818
 8000e1c:	0800c834 	.word	0x0800c834
 8000e20:	0800c840 	.word	0x0800c840
 8000e24:	0800c848 	.word	0x0800c848
 8000e28:	0800c87c 	.word	0x0800c87c
 8000e2c:	200005f4 	.word	0x200005f4
 8000e30:	0800c898 	.word	0x0800c898
 8000e34:	2000c638 	.word	0x2000c638
 8000e38:	0800c8b4 	.word	0x0800c8b4
 8000e3c:	48000800 	.word	0x48000800

08000e40 <module_fault_handler>:
  }
}

VOID module_fault_handler(TX_THREAD *thread, TXM_MODULE_INSTANCE *module)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
    /* Just increment the fault counter.   */
    memory_faults++;
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <module_fault_handler+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <module_fault_handler+0x20>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	2000c638 	.word	0x2000c638

08000e64 <pretty_msg>:

VOID pretty_msg(char *p_msg, ULONG r_msg)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  memset(p_msg, 0, 64);
 8000e6e:	2240      	movs	r2, #64	; 0x40
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f00a fe84 	bl	800bb80 <memset>

  switch(r_msg)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b58      	cmp	r3, #88	; 0x58
 8000e7c:	d015      	beq.n	8000eaa <pretty_msg+0x46>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b58      	cmp	r3, #88	; 0x58
 8000e82:	d830      	bhi.n	8000ee6 <pretty_msg+0x82>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b4d      	cmp	r3, #77	; 0x4d
 8000e88:	d015      	beq.n	8000eb6 <pretty_msg+0x52>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b4d      	cmp	r3, #77	; 0x4d
 8000e8e:	d82a      	bhi.n	8000ee6 <pretty_msg+0x82>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b42      	cmp	r3, #66	; 0x42
 8000e94:	d015      	beq.n	8000ec2 <pretty_msg+0x5e>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b42      	cmp	r3, #66	; 0x42
 8000e9a:	d824      	bhi.n	8000ee6 <pretty_msg+0x82>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b2c      	cmp	r3, #44	; 0x2c
 8000ea0:	d01b      	beq.n	8000eda <pretty_msg+0x76>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b37      	cmp	r3, #55	; 0x37
 8000ea6:	d012      	beq.n	8000ece <pretty_msg+0x6a>
 8000ea8:	e01d      	b.n	8000ee6 <pretty_msg+0x82>
  {
  case WRITING_TO_READWRITE:
    memcpy(p_msg, "Writing to ReadWrite Region", 27);
 8000eaa:	221b      	movs	r2, #27
 8000eac:	4913      	ldr	r1, [pc, #76]	; (8000efc <pretty_msg+0x98>)
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f00a fee1 	bl	800bc76 <memcpy>
    break;
 8000eb4:	e01d      	b.n	8000ef2 <pretty_msg+0x8e>
  case WRITING_TO_READONLY:
    memcpy(p_msg, "Writing to ReadOnly Region", 26);
 8000eb6:	221a      	movs	r2, #26
 8000eb8:	4911      	ldr	r1, [pc, #68]	; (8000f00 <pretty_msg+0x9c>)
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f00a fedb 	bl	800bc76 <memcpy>
    break;
 8000ec0:	e017      	b.n	8000ef2 <pretty_msg+0x8e>
  case READING_FROM_READWRITE:
    memcpy(p_msg, "Reading from ReadWrite Region", 29);
 8000ec2:	221d      	movs	r2, #29
 8000ec4:	490f      	ldr	r1, [pc, #60]	; (8000f04 <pretty_msg+0xa0>)
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f00a fed5 	bl	800bc76 <memcpy>
    break;
 8000ecc:	e011      	b.n	8000ef2 <pretty_msg+0x8e>
  case READING_FROM_READONLY:
    memcpy(p_msg, "Reading from ReadOnly Region", 28);
 8000ece:	221c      	movs	r2, #28
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <pretty_msg+0xa4>)
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f00a fecf 	bl	800bc76 <memcpy>
    break;
 8000ed8:	e00b      	b.n	8000ef2 <pretty_msg+0x8e>
  case PROCESSING_FINISHED:
    memcpy(p_msg, "All operations were done", 24);
 8000eda:	2218      	movs	r2, #24
 8000edc:	490b      	ldr	r1, [pc, #44]	; (8000f0c <pretty_msg+0xa8>)
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f00a fec9 	bl	800bc76 <memcpy>
    break;
 8000ee4:	e005      	b.n	8000ef2 <pretty_msg+0x8e>
  default:
    memcpy(p_msg, "Invalid option", 14);
 8000ee6:	220e      	movs	r2, #14
 8000ee8:	4909      	ldr	r1, [pc, #36]	; (8000f10 <pretty_msg+0xac>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f00a fec3 	bl	800bc76 <memcpy>
    break;
 8000ef0:	bf00      	nop
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0800c8e8 	.word	0x0800c8e8
 8000f00:	0800c904 	.word	0x0800c904
 8000f04:	0800c920 	.word	0x0800c920
 8000f08:	0800c940 	.word	0x0800c940
 8000f0c:	0800c960 	.word	0x0800c960
 8000f10:	0800c97c 	.word	0x0800c97c

08000f14 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* STM32L4xx HAL library initialization */
  HAL_Init();
 8000f18:	f000 faa4 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Configure USART */
  GPIO_Init();
 8000f1c:	f000 f866 	bl	8000fec <GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f20:	f000 f818 	bl	8000f54 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call ThreadX entry function */
  MX_AZURE_RTOS_Init();
 8000f24:	f7ff fe66 	bl	8000bf4 <MX_AZURE_RTOS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x14>
	...

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <Error_Handler+0x20>)
 8000f36:	f000 fd65 	bl	8001a04 <HAL_GPIO_WritePin>
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <Error_Handler+0x24>)
 8000f40:	f000 fd78 	bl	8001a34 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000f44:	20c8      	movs	r0, #200	; 0xc8
 8000f46:	f000 fac5 	bl	80014d4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f4a:	e7f6      	b.n	8000f3a <Error_Handler+0xe>
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000400 	.word	0x48000400

08000f54 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f5a:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <MX_LPUART1_UART_Init+0x94>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f9e:	f001 fe53 	bl	8002c48 <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fa8:	f7ff ffc0 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000fb0:	f002 fb84 	bl	80036bc <HAL_UARTEx_SetTxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fba:	f7ff ffb7 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000fc2:	f002 fbb9 	bl	8003738 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f7ff ffae 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000fd2:	f002 fb3a 	bl	800364a <HAL_UARTEx_DisableFifoMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f7ff ffa6 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000ee70 	.word	0x2000ee70
 8000fe8:	40008000 	.word	0x40008000

08000fec <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef  GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <GPIO_Init+0xb4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <GPIO_Init+0xb4>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <GPIO_Init+0xb4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <GPIO_Init+0xb4>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <GPIO_Init+0xb4>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <GPIO_Init+0xb4>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <GPIO_Init+0xb4>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <GPIO_Init+0xb4>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <GPIO_Init+0xb4>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <GPIO_Init+0xb4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <GPIO_Init+0xb4>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <GPIO_Init+0xb4>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* Configure the GREEN_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <GPIO_Init+0xb8>)
 800106a:	f000 fb39 	bl	80016e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <GPIO_Init+0xb8>)
 8001074:	f000 fcc6 	bl	8001a04 <HAL_GPIO_WritePin>

  /* Configure the RED_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800107c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <GPIO_Init+0xbc>)
 8001086:	f000 fb2b 	bl	80016e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <GPIO_Init+0xbc>)
 8001092:	f000 fcb7 	bl	8001a04 <HAL_GPIO_WritePin>
}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000400 	.word	0x48000400

080010ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010bc:	d101      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010be:	f000 f9e9 	bl	8001494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_MspInit+0x44>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_MspInit+0x44>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x44>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6593      	str	r3, [r2, #88]	; 0x58
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x44>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ae      	sub	sp, #184	; 0xb8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2294      	movs	r2, #148	; 0x94
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00a fd23 	bl	800bb80 <memset>
  if(uartHandle->Instance==LPUART1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <HAL_UART_MspInit+0xb4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13d      	bne.n	80011c0 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001144:	2320      	movs	r3, #32
 8001146:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fd8f 	bl	8001c74 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f7ff fee6 	bl	8000f2c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_UART_MspInit+0xb8>)
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_UART_MspInit+0xb8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_UART_MspInit+0xb8>)
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_MspInit+0xb8>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_UART_MspInit+0xb8>)
 800117e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_UART_MspInit+0xb8>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001190:	f000 fc6a 	bl	8001a68 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001194:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011ae:	2308      	movs	r3, #8
 80011b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_UART_MspInit+0xbc>)
 80011bc:	f000 fa90 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37b8      	adds	r7, #184	; 0xb8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40008000 	.word	0x40008000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48001800 	.word	0x48001800

080011d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	201c      	movs	r0, #28
 80011ea:	f000 fa4f 	bl	800168c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ee:	201c      	movs	r0, #28
 80011f0:	f000 fa68 	bl	80016c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_InitTick+0xa0>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <HAL_InitTick+0xa0>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_InitTick+0xa0>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 0210 	add.w	r2, r7, #16
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fcfa 	bl	8001c10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800121c:	f000 fccc 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8001220:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_InitTick+0xa4>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3b01      	subs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM2;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0xa8>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001236:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_InitTick+0xa8>)
 800123a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_InitTick+0xa8>)
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_InitTick+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_InitTick+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001252:	480a      	ldr	r0, [pc, #40]	; (800127c <HAL_InitTick+0xa8>)
 8001254:	f001 fa26 	bl	80026a4 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <HAL_InitTick+0xa8>)
 8001260:	f001 fa82 	bl	8002768 <HAL_TIM_Base_Start_IT>
 8001264:	4603      	mov	r3, r0
 8001266:	e000      	b.n	800126a <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	3730      	adds	r7, #48	; 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	431bde83 	.word	0x431bde83
 800127c:	2000ef00 	.word	0x2000ef00

08001280 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <TIM2_IRQHandler+0x10>)
 80012aa:	f001 facd 	bl	8002848 <HAL_TIM_IRQHandler>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000ef00 	.word	0x2000ef00

080012b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
	}

return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf1      	blt.n	8001304 <_write+0x12>
	}
	return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f00a fc2a 	bl	800bc1c <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20014000 	.word	0x20014000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	2000ef4c 	.word	0x2000ef4c
 80013fc:	2000f838 	.word	0x2000f838

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <SystemInit+0x5c>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a14      	ldr	r2, [pc, #80]	; (800145c <SystemInit+0x5c>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <SystemInit+0x60>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <SystemInit+0x60>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <SystemInit+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <SystemInit+0x60>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <SystemInit+0x60>)
 800142c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001430:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001434:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <SystemInit+0x60>)
 8001438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800143c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <SystemInit+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <SystemInit+0x60>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SystemInit+0x60>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f901 	bl	8001676 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001474:	200f      	movs	r0, #15
 8001476:	f7ff fead 	bl	80011d4 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	e001      	b.n	800148a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001486:	f7ff fe21 	bl	80010cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148a:	79fb      	ldrb	r3, [r7, #7]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000004 	.word	0x20000004
 80014b8:	2000ef50 	.word	0x2000ef50

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000ef50 	.word	0x2000ef50

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000004 	.word	0x20000004

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff4c 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169e:	f7ff ff61 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	6978      	ldr	r0, [r7, #20]
 80016aa:	f7ff ffb1 	bl	8001610 <NVIC_EncodePriority>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff80 	bl	80015bc <__NVIC_SetPriority>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff54 	bl	8001580 <__NVIC_EnableIRQ>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e166      	b.n	80019be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8158 	beq.w	80019b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_GPIO_Init+0x40>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b03      	cmp	r3, #3
 800178c:	d017      	beq.n	80017be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	6939      	ldr	r1, [r7, #16]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80b2 	beq.w	80019b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	4a60      	ldr	r2, [pc, #384]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6613      	str	r3, [r2, #96]	; 0x60
 8001860:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a5c      	ldr	r2, [pc, #368]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d02b      	beq.n	80018f0 <HAL_GPIO_Init+0x210>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d025      	beq.n	80018ec <HAL_GPIO_Init+0x20c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x308>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d01f      	beq.n	80018e8 <HAL_GPIO_Init+0x208>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_GPIO_Init+0x30c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d019      	beq.n	80018e4 <HAL_GPIO_Init+0x204>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_GPIO_Init+0x310>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_GPIO_Init+0x200>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <HAL_GPIO_Init+0x314>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <HAL_GPIO_Init+0x1fc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x318>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x1f8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x31c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_GPIO_Init+0x1f4>
 80018d0:	2307      	movs	r3, #7
 80018d2:	e00e      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018d4:	2308      	movs	r3, #8
 80018d6:	e00c      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018d8:	2306      	movs	r3, #6
 80018da:	e00a      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018dc:	2305      	movs	r3, #5
 80018de:	e008      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018f0:	2300      	movs	r3, #0
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001902:	4937      	ldr	r1, [pc, #220]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001934:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800193a:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_GPIO_Init+0x320>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x320>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <HAL_GPIO_Init+0x320>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f ae91 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	48001000 	.word	0x48001000
 80019f4:	48001400 	.word	0x48001400
 80019f8:	48001800 	.word	0x48001800
 80019fc:	48001c00 	.word	0x48001c00
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43d9      	mvns	r1, r3
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	400b      	ands	r3, r1
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a76:	6053      	str	r3, [r2, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a96:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x34>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d121      	bne.n	8001afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d11e      	bne.n	8001afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001abc:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e005      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ae4:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10d      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d102      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	e004      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d134      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d003      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0xac>
 8001b2c:	e005      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b30:	617b      	str	r3, [r7, #20]
      break;
 8001b32:	e005      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b36:	617b      	str	r3, [r7, #20]
      break;
 8001b38:	e002      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	617b      	str	r3, [r7, #20]
      break;
 8001b3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	fb03 f202 	mul.w	r2, r3, r2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	0e5b      	lsrs	r3, r3, #25
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	3301      	adds	r3, #1
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b80:	69bb      	ldr	r3, [r7, #24]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	0800ca68 	.word	0x0800ca68
 8001b98:	00f42400 	.word	0x00f42400
 8001b9c:	007a1200 	.word	0x007a1200

08001ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4904      	ldr	r1, [pc, #16]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	0800ca60 	.word	0x0800ca60

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001be8:	f7ff ffda 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0adb      	lsrs	r3, r3, #11
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4904      	ldr	r1, [pc, #16]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	0800ca60 	.word	0x0800ca60

08001c10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCC_GetClockConfig+0x60>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 020f 	and.w	r2, r3, #15
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40022000 	.word	0x40022000

08001c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c80:	2300      	movs	r3, #0
 8001c82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d040      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c94:	2b80      	cmp	r3, #128	; 0x80
 8001c96:	d02a      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d825      	bhi.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001c9c:	2b60      	cmp	r3, #96	; 0x60
 8001c9e:	d026      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ca0:	2b60      	cmp	r3, #96	; 0x60
 8001ca2:	d821      	bhi.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d006      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	d81d      	bhi.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d010      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001cb4:	e018      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cb6:	4b89      	ldr	r3, [pc, #548]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4a88      	ldr	r2, [pc, #544]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb02 	bl	80022d4 <RCCEx_PLLSAI1_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd4:	e00c      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3320      	adds	r3, #32
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fbed 	bl	80024bc <RCCEx_PLLSAI2_Config>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	74fb      	strb	r3, [r7, #19]
      break;
 8001cec:	e000      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8001cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cf0:	7cfb      	ldrb	r3, [r7, #19]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cfc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d04:	4975      	ldr	r1, [pc, #468]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8001d0c:	e001      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
 8001d10:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d047      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d030      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2c:	d82a      	bhi.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d32:	d02a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d38:	d824      	bhi.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d44:	d81e      	bhi.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d4e:	d010      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001d50:	e018      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a61      	ldr	r2, [pc, #388]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d5e:	e015      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fab4 	bl	80022d4 <RCCEx_PLLSAI1_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d70:	e00c      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3320      	adds	r3, #32
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fb9f 	bl	80024bc <RCCEx_PLLSAI2_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d82:	e003      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	74fb      	strb	r3, [r7, #19]
      break;
 8001d88:	e000      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8001d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10b      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	494e      	ldr	r1, [pc, #312]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8001da8:	e001      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 809f 	beq.w	8001efa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a40      	ldr	r2, [pc, #256]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dfe:	f7ff fb5d 	bl	80014bc <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e04:	e009      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fb59 	bl	80014bc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d902      	bls.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	74fb      	strb	r3, [r7, #19]
        break;
 8001e18:	e005      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ef      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d15b      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01f      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d019      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e76:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d016      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fb18 	bl	80014bc <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff fb14 	bl	80014bc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d902      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	74fb      	strb	r3, [r7, #19]
            break;
 8001ea6:	e006      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ec      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ed6:	7cfb      	ldrb	r3, [r7, #19]
 8001ed8:	74bb      	strb	r3, [r7, #18]
 8001eda:	e005      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee8:	7c7b      	ldrb	r3, [r7, #17]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d105      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4ba0      	ldr	r3, [pc, #640]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a9f      	ldr	r2, [pc, #636]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f06:	4b9a      	ldr	r3, [pc, #616]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0c:	f023 0203 	bic.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	4996      	ldr	r1, [pc, #600]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f28:	4b91      	ldr	r3, [pc, #580]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f023 020c 	bic.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	498e      	ldr	r1, [pc, #568]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	4985      	ldr	r1, [pc, #532]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f6c:	4b80      	ldr	r3, [pc, #512]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7a:	497d      	ldr	r1, [pc, #500]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f8e:	4b78      	ldr	r3, [pc, #480]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	4974      	ldr	r1, [pc, #464]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	496c      	ldr	r1, [pc, #432]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe0:	4963      	ldr	r1, [pc, #396]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ff4:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002002:	495b      	ldr	r1, [pc, #364]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002016:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	4952      	ldr	r1, [pc, #328]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	494a      	ldr	r1, [pc, #296]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205a:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	4941      	ldr	r1, [pc, #260]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	4939      	ldr	r1, [pc, #228]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d028      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ac:	4930      	ldr	r1, [pc, #192]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020bc:	d106      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80020c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020c8:	60d3      	str	r3, [r2, #12]
 80020ca:	e011      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	2101      	movs	r1, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f8f9 	bl	80022d4 <RCCEx_PLLSAI1_Config>
 80020e2:	4603      	mov	r3, r0
 80020e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d04d      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002104:	d108      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800210c:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002112:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002116:	e012      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800211a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002124:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002146:	d106      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002152:	60d3      	str	r3, [r2, #12]
 8002154:	e020      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800215a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215e:	d109      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a02      	ldr	r2, [pc, #8]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	60d3      	str	r3, [r2, #12]
 800216c:	e014      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800217c:	d10c      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f8a5 	bl	80022d4 <RCCEx_PLLSAI1_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d028      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b2:	4947      	ldr	r1, [pc, #284]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
 80021d0:	e011      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021da:	d10c      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f876 	bl	80022d4 <RCCEx_PLLSAI1_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01e      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002212:	492f      	ldr	r1, [pc, #188]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002224:	d10c      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	2102      	movs	r1, #2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f851 	bl	80022d4 <RCCEx_PLLSAI1_Config>
 8002232:	4603      	mov	r3, r0
 8002234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002252:	f023 0204 	bic.w	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225c:	491c      	ldr	r1, [pc, #112]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002276:	f023 0218 	bic.w	r2, r3, #24
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	4913      	ldr	r1, [pc, #76]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a4:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b6:	d105      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000

080022d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022e2:	4b72      	ldr	r3, [pc, #456]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00e      	beq.n	800230c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022ee:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0203 	and.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d103      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
       ||
 8002302:	2b00      	cmp	r3, #0
 8002304:	d142      	bne.n	800238c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e03f      	b.n	800238c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d018      	beq.n	8002346 <RCCEx_PLLSAI1_Config+0x72>
 8002314:	2b03      	cmp	r3, #3
 8002316:	d825      	bhi.n	8002364 <RCCEx_PLLSAI1_Config+0x90>
 8002318:	2b01      	cmp	r3, #1
 800231a:	d002      	beq.n	8002322 <RCCEx_PLLSAI1_Config+0x4e>
 800231c:	2b02      	cmp	r3, #2
 800231e:	d009      	beq.n	8002334 <RCCEx_PLLSAI1_Config+0x60>
 8002320:	e020      	b.n	8002364 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002322:	4b62      	ldr	r3, [pc, #392]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11d      	bne.n	800236a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002332:	e01a      	b.n	800236a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d116      	bne.n	800236e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002344:	e013      	b.n	800236e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002346:	4b59      	ldr	r3, [pc, #356]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002362:	e006      	b.n	8002372 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e004      	b.n	8002374 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800236a:	bf00      	nop
 800236c:	e002      	b.n	8002374 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800236e:	bf00      	nop
 8002370:	e000      	b.n	8002374 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002372:	bf00      	nop
    }

    if(status == HAL_OK)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4949      	ldr	r1, [pc, #292]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8086 	bne.w	80024a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a44      	ldr	r2, [pc, #272]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800239a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800239e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a0:	f7ff f88c 	bl	80014bc <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a6:	e009      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a8:	f7ff f888 	bl	80014bc <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d902      	bls.n	80023bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	73fb      	strb	r3, [r7, #15]
        break;
 80023ba:	e005      	b.n	80023c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ef      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d168      	bne.n	80024a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d113      	bne.n	80023fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6892      	ldr	r2, [r2, #8]
 80023e0:	0211      	lsls	r1, r2, #8
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	06d2      	lsls	r2, r2, #27
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6852      	ldr	r2, [r2, #4]
 80023ee:	3a01      	subs	r2, #1
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	430a      	orrs	r2, r1
 80023f4:	492d      	ldr	r1, [pc, #180]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	610b      	str	r3, [r1, #16]
 80023fa:	e02d      	b.n	8002458 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d115      	bne.n	800242e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6892      	ldr	r2, [r2, #8]
 800240e:	0211      	lsls	r1, r2, #8
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6912      	ldr	r2, [r2, #16]
 8002414:	0852      	lsrs	r2, r2, #1
 8002416:	3a01      	subs	r2, #1
 8002418:	0552      	lsls	r2, r2, #21
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6852      	ldr	r2, [r2, #4]
 8002420:	3a01      	subs	r2, #1
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	430a      	orrs	r2, r1
 8002426:	4921      	ldr	r1, [pc, #132]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002428:	4313      	orrs	r3, r2
 800242a:	610b      	str	r3, [r1, #16]
 800242c:	e014      	b.n	8002458 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6892      	ldr	r2, [r2, #8]
 800243a:	0211      	lsls	r1, r2, #8
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6952      	ldr	r2, [r2, #20]
 8002440:	0852      	lsrs	r2, r2, #1
 8002442:	3a01      	subs	r2, #1
 8002444:	0652      	lsls	r2, r2, #25
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6852      	ldr	r2, [r2, #4]
 800244c:	3a01      	subs	r2, #1
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	430a      	orrs	r2, r1
 8002452:	4916      	ldr	r1, [pc, #88]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800245e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002462:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff f82a 	bl	80014bc <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800246a:	e009      	b.n	8002480 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800246c:	f7ff f826 	bl	80014bc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d902      	bls.n	8002480 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	73fb      	strb	r3, [r7, #15]
          break;
 800247e:	e005      	b.n	800248c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800249c:	4313      	orrs	r3, r2
 800249e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	07ff800f 	.word	0x07ff800f
 80024b4:	ff9f800f 	.word	0xff9f800f
 80024b8:	f9ff800f 	.word	0xf9ff800f

080024bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ca:	4b72      	ldr	r3, [pc, #456]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00e      	beq.n	80024f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024d6:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d103      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d142      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e03f      	b.n	8002574 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d018      	beq.n	800252e <RCCEx_PLLSAI2_Config+0x72>
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d825      	bhi.n	800254c <RCCEx_PLLSAI2_Config+0x90>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <RCCEx_PLLSAI2_Config+0x4e>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d009      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x60>
 8002508:	e020      	b.n	800254c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11d      	bne.n	8002552 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251a:	e01a      	b.n	8002552 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800251c:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e013      	b.n	8002556 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800252e:	4b59      	ldr	r3, [pc, #356]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254a:	e006      	b.n	800255a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      break;
 8002550:	e004      	b.n	800255c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800255a:	bf00      	nop
    }

    if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4949      	ldr	r1, [pc, #292]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 8086 	bne.w	8002688 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a44      	ldr	r2, [pc, #272]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe ff98 	bl	80014bc <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002590:	f7fe ff94 	bl	80014bc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d168      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d113      	bne.n	80025e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025bc:	4b35      	ldr	r3, [pc, #212]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	4b35      	ldr	r3, [pc, #212]	; (8002698 <RCCEx_PLLSAI2_Config+0x1dc>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6892      	ldr	r2, [r2, #8]
 80025c8:	0211      	lsls	r1, r2, #8
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68d2      	ldr	r2, [r2, #12]
 80025ce:	06d2      	lsls	r2, r2, #27
 80025d0:	4311      	orrs	r1, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6852      	ldr	r2, [r2, #4]
 80025d6:	3a01      	subs	r2, #1
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	430a      	orrs	r2, r1
 80025dc:	492d      	ldr	r1, [pc, #180]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	614b      	str	r3, [r1, #20]
 80025e2:	e02d      	b.n	8002640 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d115      	bne.n	8002616 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <RCCEx_PLLSAI2_Config+0x1e0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0211      	lsls	r1, r2, #8
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6912      	ldr	r2, [r2, #16]
 80025fc:	0852      	lsrs	r2, r2, #1
 80025fe:	3a01      	subs	r2, #1
 8002600:	0552      	lsls	r2, r2, #21
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6852      	ldr	r2, [r2, #4]
 8002608:	3a01      	subs	r2, #1
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	430a      	orrs	r2, r1
 800260e:	4921      	ldr	r1, [pc, #132]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002610:	4313      	orrs	r3, r2
 8002612:	614b      	str	r3, [r1, #20]
 8002614:	e014      	b.n	8002640 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	0211      	lsls	r1, r2, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6952      	ldr	r2, [r2, #20]
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0652      	lsls	r2, r2, #25
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6852      	ldr	r2, [r2, #4]
 8002634:	3a01      	subs	r2, #1
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	430a      	orrs	r2, r1
 800263a:	4916      	ldr	r1, [pc, #88]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe ff36 	bl	80014bc <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002652:	e009      	b.n	8002668 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002654:	f7fe ff32 	bl	80014bc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	73fb      	strb	r3, [r7, #15]
          break;
 8002666:	e005      	b.n	8002674 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4904      	ldr	r1, [pc, #16]	; (8002694 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	07ff800f 	.word	0x07ff800f
 800269c:	ff9f800f 	.word	0xff9f800f
 80026a0:	f9ff800f 	.word	0xf9ff800f

080026a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e049      	b.n	800274a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f841 	bl	8002752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f000 f9f8 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e04f      	b.n	8002820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_TIM_Base_Start_IT+0xc4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01d      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d018      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_TIM_Base_Start_IT+0xc8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_TIM_Base_Start_IT+0xcc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <HAL_TIM_Base_Start_IT+0xd0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_TIM_Base_Start_IT+0xd4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a19      	ldr	r2, [pc, #100]	; (8002840 <HAL_TIM_Base_Start_IT+0xd8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d115      	bne.n	800280a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_TIM_Base_Start_IT+0xdc>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d015      	beq.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d011      	beq.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e008      	b.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e000      	b.n	800281e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40013400 	.word	0x40013400
 8002840:	40014000 	.word	0x40014000
 8002844:	00010007 	.word	0x00010007

08002848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0202 	mvn.w	r2, #2
 8002874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f905 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8f7 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f908 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d122      	bne.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0204 	mvn.w	r2, #4
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8db 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8cd 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f8de 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b08      	cmp	r3, #8
 8002904:	d122      	bne.n	800294c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d11b      	bne.n	800294c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0208 	mvn.w	r2, #8
 800291c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8b1 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 8002938:	e005      	b.n	8002946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8a3 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8b4 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b10      	cmp	r3, #16
 8002958:	d122      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b10      	cmp	r3, #16
 8002966:	d11b      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0210 	mvn.w	r2, #16
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2208      	movs	r2, #8
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f887 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f879 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f88a 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0201 	mvn.w	r2, #1
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fb70 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d107      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f914 	bl	8002c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a06:	d10e      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d107      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f907 	bl	8002c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d10e      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f838 	bl	8002ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d10e      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0220 	mvn.w	r2, #32
 8002a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8c7 	bl	8002c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a40      	ldr	r2, [pc, #256]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d00f      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <TIM_Base_SetConfig+0x118>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3c      	ldr	r2, [pc, #240]	; (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <TIM_Base_SetConfig+0x120>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <TIM_Base_SetConfig+0x124>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d01b      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <TIM_Base_SetConfig+0x118>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d017      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <TIM_Base_SetConfig+0x120>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00f      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <TIM_Base_SetConfig+0x124>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <TIM_Base_SetConfig+0x128>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <TIM_Base_SetConfig+0x12c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d003      	beq.n	8002b72 <TIM_Base_SetConfig+0x9a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <TIM_Base_SetConfig+0x130>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d108      	bne.n	8002b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00f      	beq.n	8002bd0 <TIM_Base_SetConfig+0xf8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <TIM_Base_SetConfig+0x124>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0xf8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <TIM_Base_SetConfig+0x128>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0xf8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <TIM_Base_SetConfig+0x12c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0xf8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <TIM_Base_SetConfig+0x130>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d103      	bne.n	8002bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40000c00 	.word	0x40000c00
 8002bfc:	40013400 	.word	0x40013400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800

08002c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe fa51 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2224      	movs	r2, #36	; 0x24
 8002c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f82c 	bl	8002ce8 <UART_SetConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fb1c 	bl	80032e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fba3 	bl	8003424 <UART_CheckIdleState>
 8002cde:	4603      	mov	r3, r0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b08c      	sub	sp, #48	; 0x30
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4baa      	ldr	r3, [pc, #680]	; (8002fc0 <UART_SetConfig+0x2d8>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a9f      	ldr	r2, [pc, #636]	; (8002fc4 <UART_SetConfig+0x2dc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d50:	4313      	orrs	r3, r2
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f023 010f 	bic.w	r1, r3, #15
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a90      	ldr	r2, [pc, #576]	; (8002fc8 <UART_SetConfig+0x2e0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d125      	bne.n	8002dd8 <UART_SetConfig+0xf0>
 8002d8c:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <UART_SetConfig+0x2e4>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d81a      	bhi.n	8002dd0 <UART_SetConfig+0xe8>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0xb8>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dc1 	.word	0x08002dc1
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dc9 	.word	0x08002dc9
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002db6:	e116      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dbe:	e112      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc6:	e10e      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dce:	e10a      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd6:	e106      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <UART_SetConfig+0x2e8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d138      	bne.n	8002e54 <UART_SetConfig+0x16c>
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <UART_SetConfig+0x2e4>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d82d      	bhi.n	8002e4c <UART_SetConfig+0x164>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <UART_SetConfig+0x110>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002e4d 	.word	0x08002e4d
 8002e00:	08002e4d 	.word	0x08002e4d
 8002e04:	08002e4d 	.word	0x08002e4d
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e4d 	.word	0x08002e4d
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e35 	.word	0x08002e35
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e4d 	.word	0x08002e4d
 8002e24:	08002e4d 	.word	0x08002e4d
 8002e28:	08002e45 	.word	0x08002e45
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e32:	e0d8      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e3a:	e0d4      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e42:	e0d0      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e44:	2308      	movs	r3, #8
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e4a:	e0cc      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e52:	e0c8      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <UART_SetConfig+0x2ec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d125      	bne.n	8002eaa <UART_SetConfig+0x1c2>
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <UART_SetConfig+0x2e4>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e68:	2b30      	cmp	r3, #48	; 0x30
 8002e6a:	d016      	beq.n	8002e9a <UART_SetConfig+0x1b2>
 8002e6c:	2b30      	cmp	r3, #48	; 0x30
 8002e6e:	d818      	bhi.n	8002ea2 <UART_SetConfig+0x1ba>
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d00a      	beq.n	8002e8a <UART_SetConfig+0x1a2>
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d814      	bhi.n	8002ea2 <UART_SetConfig+0x1ba>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <UART_SetConfig+0x19a>
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d008      	beq.n	8002e92 <UART_SetConfig+0x1aa>
 8002e80:	e00f      	b.n	8002ea2 <UART_SetConfig+0x1ba>
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e88:	e0ad      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e90:	e0a9      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e92:	2304      	movs	r3, #4
 8002e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e98:	e0a5      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea0:	e0a1      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea8:	e09d      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <UART_SetConfig+0x2f0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d125      	bne.n	8002f00 <UART_SetConfig+0x218>
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <UART_SetConfig+0x2e4>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8002ec0:	d016      	beq.n	8002ef0 <UART_SetConfig+0x208>
 8002ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ec4:	d818      	bhi.n	8002ef8 <UART_SetConfig+0x210>
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d00a      	beq.n	8002ee0 <UART_SetConfig+0x1f8>
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d814      	bhi.n	8002ef8 <UART_SetConfig+0x210>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <UART_SetConfig+0x1f0>
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d008      	beq.n	8002ee8 <UART_SetConfig+0x200>
 8002ed6:	e00f      	b.n	8002ef8 <UART_SetConfig+0x210>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ede:	e082      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ee6:	e07e      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eee:	e07a      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ef6:	e076      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efe:	e072      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a35      	ldr	r2, [pc, #212]	; (8002fdc <UART_SetConfig+0x2f4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12a      	bne.n	8002f60 <UART_SetConfig+0x278>
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <UART_SetConfig+0x2e4>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f18:	d01a      	beq.n	8002f50 <UART_SetConfig+0x268>
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d81b      	bhi.n	8002f58 <UART_SetConfig+0x270>
 8002f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f24:	d00c      	beq.n	8002f40 <UART_SetConfig+0x258>
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d815      	bhi.n	8002f58 <UART_SetConfig+0x270>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <UART_SetConfig+0x250>
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	d008      	beq.n	8002f48 <UART_SetConfig+0x260>
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x270>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f3e:	e052      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f46:	e04e      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f4e:	e04a      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002f50:	2308      	movs	r3, #8
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f56:	e046      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f5e:	e042      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <UART_SetConfig+0x2dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d13a      	bne.n	8002fe0 <UART_SetConfig+0x2f8>
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <UART_SetConfig+0x2e4>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f78:	d01a      	beq.n	8002fb0 <UART_SetConfig+0x2c8>
 8002f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7e:	d81b      	bhi.n	8002fb8 <UART_SetConfig+0x2d0>
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f84:	d00c      	beq.n	8002fa0 <UART_SetConfig+0x2b8>
 8002f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8a:	d815      	bhi.n	8002fb8 <UART_SetConfig+0x2d0>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <UART_SetConfig+0x2b0>
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f94:	d008      	beq.n	8002fa8 <UART_SetConfig+0x2c0>
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x2d0>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9e:	e022      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fa6:	e01e      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fae:	e01a      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb6:	e016      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fbe:	e012      	b.n	8002fe6 <UART_SetConfig+0x2fe>
 8002fc0:	cfff69f3 	.word	0xcfff69f3
 8002fc4:	40008000 	.word	0x40008000
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40004400 	.word	0x40004400
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	40004c00 	.word	0x40004c00
 8002fdc:	40005000 	.word	0x40005000
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4aae      	ldr	r2, [pc, #696]	; (80032a4 <UART_SetConfig+0x5bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	f040 8097 	bne.w	8003120 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d823      	bhi.n	8003042 <UART_SetConfig+0x35a>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <UART_SetConfig+0x318>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003025 	.word	0x08003025
 8003004:	08003043 	.word	0x08003043
 8003008:	0800302d 	.word	0x0800302d
 800300c:	08003043 	.word	0x08003043
 8003010:	08003033 	.word	0x08003033
 8003014:	08003043 	.word	0x08003043
 8003018:	08003043 	.word	0x08003043
 800301c:	08003043 	.word	0x08003043
 8003020:	0800303b 	.word	0x0800303b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7fe fdc8 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800302a:	e010      	b.n	800304e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800302c:	4b9e      	ldr	r3, [pc, #632]	; (80032a8 <UART_SetConfig+0x5c0>)
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003030:	e00d      	b.n	800304e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003032:	f7fe fd29 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003038:	e009      	b.n	800304e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003040:	e005      	b.n	800304e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800304c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8130 	beq.w	80032b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	4a94      	ldr	r2, [pc, #592]	; (80032ac <UART_SetConfig+0x5c4>)
 800305c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003060:	461a      	mov	r2, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	fbb3 f3f2 	udiv	r3, r3, r2
 8003068:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	429a      	cmp	r2, r3
 8003078:	d305      	bcc.n	8003086 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	429a      	cmp	r2, r3
 8003084:	d903      	bls.n	800308e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800308c:	e113      	b.n	80032b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	2200      	movs	r2, #0
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	60fa      	str	r2, [r7, #12]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	4a84      	ldr	r2, [pc, #528]	; (80032ac <UART_SetConfig+0x5c4>)
 800309c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2200      	movs	r2, #0
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b0:	f7fd fb8e 	bl	80007d0 <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	020b      	lsls	r3, r1, #8
 80030c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030ca:	0202      	lsls	r2, r0, #8
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	6849      	ldr	r1, [r1, #4]
 80030d0:	0849      	lsrs	r1, r1, #1
 80030d2:	2000      	movs	r0, #0
 80030d4:	460c      	mov	r4, r1
 80030d6:	4605      	mov	r5, r0
 80030d8:	eb12 0804 	adds.w	r8, r2, r4
 80030dc:	eb43 0905 	adc.w	r9, r3, r5
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	469a      	mov	sl, r3
 80030e8:	4693      	mov	fp, r2
 80030ea:	4652      	mov	r2, sl
 80030ec:	465b      	mov	r3, fp
 80030ee:	4640      	mov	r0, r8
 80030f0:	4649      	mov	r1, r9
 80030f2:	f7fd fb6d 	bl	80007d0 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4613      	mov	r3, r2
 80030fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d308      	bcc.n	8003118 <UART_SetConfig+0x430>
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310c:	d204      	bcs.n	8003118 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	e0ce      	b.n	80032b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800311e:	e0ca      	b.n	80032b6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003128:	d166      	bne.n	80031f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800312a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800312e:	2b08      	cmp	r3, #8
 8003130:	d827      	bhi.n	8003182 <UART_SetConfig+0x49a>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x450>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003165 	.word	0x08003165
 8003140:	0800316d 	.word	0x0800316d
 8003144:	08003183 	.word	0x08003183
 8003148:	08003173 	.word	0x08003173
 800314c:	08003183 	.word	0x08003183
 8003150:	08003183 	.word	0x08003183
 8003154:	08003183 	.word	0x08003183
 8003158:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7fe fd2c 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003162:	e014      	b.n	800318e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7fe fd3e 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800316a:	e010      	b.n	800318e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <UART_SetConfig+0x5c0>)
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003170:	e00d      	b.n	800318e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7fe fc89 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8003176:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003178:	e009      	b.n	800318e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003180:	e005      	b.n	800318e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800318c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8090 	beq.w	80032b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	4a44      	ldr	r2, [pc, #272]	; (80032ac <UART_SetConfig+0x5c4>)
 800319c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a0:	461a      	mov	r2, r3
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a8:	005a      	lsls	r2, r3, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	441a      	add	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	d916      	bls.n	80031f0 <UART_SetConfig+0x508>
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d212      	bcs.n	80031f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f023 030f 	bic.w	r3, r3, #15
 80031d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	b29a      	uxth	r2, r3
 80031e0:	8bfb      	ldrh	r3, [r7, #30]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	8bfa      	ldrh	r2, [r7, #30]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	e062      	b.n	80032b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031f6:	e05e      	b.n	80032b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d828      	bhi.n	8003252 <UART_SetConfig+0x56a>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <UART_SetConfig+0x520>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800322d 	.word	0x0800322d
 800320c:	08003235 	.word	0x08003235
 8003210:	0800323d 	.word	0x0800323d
 8003214:	08003253 	.word	0x08003253
 8003218:	08003243 	.word	0x08003243
 800321c:	08003253 	.word	0x08003253
 8003220:	08003253 	.word	0x08003253
 8003224:	08003253 	.word	0x08003253
 8003228:	0800324b 	.word	0x0800324b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7fe fcc4 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8003230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003232:	e014      	b.n	800325e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003234:	f7fe fcd6 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8003238:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800323a:	e010      	b.n	800325e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <UART_SetConfig+0x5c0>)
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003240:	e00d      	b.n	800325e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7fe fc21 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8003246:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003248:	e009      	b.n	800325e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003250:	e005      	b.n	800325e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800325c:	bf00      	nop
    }

    if (pclk != 0U)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d028      	beq.n	80032b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <UART_SetConfig+0x5c4>)
 800326a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800326e:	461a      	mov	r2, r3
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	fbb3 f2f2 	udiv	r2, r3, r2
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	441a      	add	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d910      	bls.n	80032b0 <UART_SetConfig+0x5c8>
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d20c      	bcs.n	80032b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	b29a      	uxth	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	e009      	b.n	80032b6 <UART_SetConfig+0x5ce>
 80032a2:	bf00      	nop
 80032a4:	40008000 	.word	0x40008000
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	0800ca98 	.word	0x0800ca98
      }
      else
      {
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80032d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3730      	adds	r7, #48	; 0x30
 80032da:	46bd      	mov	sp, r7
 80032dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01a      	beq.n	80033f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033de:	d10a      	bne.n	80033f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003434:	f7fe f842 	bl	80014bc <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d10e      	bne.n	8003466 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f82f 	bl	80034ba <UART_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e025      	b.n	80034b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d10e      	bne.n	8003492 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f819 	bl	80034ba <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b09c      	sub	sp, #112	; 0x70
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ca:	e0a9      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	f000 80a5 	beq.w	8003620 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fd fff1 	bl	80014bc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <UART_WaitOnFlagUntilTimeout+0x32>
 80034e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d140      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003500:	667b      	str	r3, [r7, #100]	; 0x64
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800350c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e6      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	663b      	str	r3, [r7, #96]	; 0x60
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800353e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e069      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d051      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d149      	bne.n	8003620 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
 80035b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e6      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3308      	adds	r3, #8
 80035ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	613b      	str	r3, [r7, #16]
   return(result);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035e8:	623a      	str	r2, [r7, #32]
 80035ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	69f9      	ldr	r1, [r7, #28]
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e010      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	f43f af46 	beq.w	80034cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3770      	adds	r7, #112	; 0x70
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UARTEx_DisableFifoMode+0x16>
 800365c:	2302      	movs	r3, #2
 800365e:	e027      	b.n	80036b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800368e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e02d      	b.n	8003730 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f84f 	bl	80037b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e02d      	b.n	80037ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f811 	bl	80037b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037d4:	e031      	b.n	800383a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037d6:	2308      	movs	r3, #8
 80037d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037da:	2308      	movs	r3, #8
 80037dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	0e5b      	lsrs	r3, r3, #25
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	0f5b      	lsrs	r3, r3, #29
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	7b3a      	ldrb	r2, [r7, #12]
 8003802:	4911      	ldr	r1, [pc, #68]	; (8003848 <UARTEx_SetNbDataToProcess+0x94>)
 8003804:	5c8a      	ldrb	r2, [r1, r2]
 8003806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800380a:	7b3a      	ldrb	r2, [r7, #12]
 800380c:	490f      	ldr	r1, [pc, #60]	; (800384c <UARTEx_SetNbDataToProcess+0x98>)
 800380e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003810:	fb93 f3f2 	sdiv	r3, r3, r2
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	7b7a      	ldrb	r2, [r7, #13]
 8003820:	4909      	ldr	r1, [pc, #36]	; (8003848 <UARTEx_SetNbDataToProcess+0x94>)
 8003822:	5c8a      	ldrb	r2, [r1, r2]
 8003824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003828:	7b7a      	ldrb	r2, [r7, #13]
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <UARTEx_SetNbDataToProcess+0x98>)
 800382c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800382e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	0800cab0 	.word	0x0800cab0
 800384c:	0800cab8 	.word	0x0800cab8

08003850 <_tx_block_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b092      	sub	sp, #72	; 0x48
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003858:	f3ef 8310 	mrs	r3, PRIMASK
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
    return(posture);
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8003862:	b672      	cpsid	i
#endif
    return(int_posture);
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_BLOCK_POOL   *next_pool;
TX_BLOCK_POOL   *previous_pool;


    /* Disable interrupts to remove the block pool from the created list.  */
    TX_DISABLE
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, unregister this object.  */
    TX_TRACE_OBJECT_UNREGISTER(pool_ptr)

    /* Clear the block pool ID to make it invalid.  */
    pool_ptr -> tx_block_pool_id =  TX_CLEAR_ID;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of block pools.  */
    _tx_block_pool_created_count--;
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <_tx_block_pool_delete+0x114>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <_tx_block_pool_delete+0x114>)
 8003876:	6013      	str	r3, [r2, #0]

    /* See if the block pool is the only one on the list.  */
    if (_tx_block_pool_created_count == TX_EMPTY)
 8003878:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <_tx_block_pool_delete+0x114>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <_tx_block_pool_delete+0x38>
    {

        /* Only created block pool, just set the created list to NULL.  */
        _tx_block_pool_created_ptr =  TX_NULL;
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <_tx_block_pool_delete+0x118>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e013      	b.n	80038b0 <_tx_block_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                    pool_ptr -> tx_block_pool_created_next;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_pool =                                pool_ptr -> tx_block_pool_created_previous;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
        next_pool -> tx_block_pool_created_previous =  previous_pool;
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
        previous_pool -> tx_block_pool_created_next =  next_pool;
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389e:	629a      	str	r2, [r3, #40]	; 0x28

        /* See if we have to update the created list head pointer.  */
        if (_tx_block_pool_created_ptr == pool_ptr)
 80038a0:	4b31      	ldr	r3, [pc, #196]	; (8003968 <_tx_block_pool_delete+0x118>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d102      	bne.n	80038b0 <_tx_block_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_block_pool_created_ptr =  next_pool;
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <_tx_block_pool_delete+0x118>)
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <_tx_block_pool_delete+0x11c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a2d      	ldr	r2, [pc, #180]	; (800396c <_tx_block_pool_delete+0x11c>)
 80038b8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                 pool_ptr -> tx_block_pool_suspension_list;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	647b      	str	r3, [r7, #68]	; 0x44
    pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
    suspended_count =                            pool_ptr -> tx_block_pool_suspended_count;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
    pool_ptr -> tx_block_pool_suspended_count =  TX_NO_SUSPENSIONS;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the block pool suspension list to resume any and all threads suspended
       on this block pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80038de:	e024      	b.n	800392a <_tx_block_pool_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80038e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e2:	3b01      	subs	r3, #1
 80038e4:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	61fb      	str	r3, [r7, #28]
    return(posture);
 80038ec:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80038ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80038f0:	b672      	cpsid	i
    return(int_posture);
 80038f2:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80038f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f8:	2200      	movs	r2, #0
 80038fa:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80038fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fe:	2201      	movs	r2, #1
 8003900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <_tx_block_pool_delete+0x11c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a16      	ldr	r2, [pc, #88]	; (800396c <_tx_block_pool_delete+0x11c>)
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003920:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003922:	f002 fc87 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800392a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1d7      	bne.n	80038e0 <_tx_block_pool_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003930:	f3ef 8310 	mrs	r3, PRIMASK
 8003934:	613b      	str	r3, [r7, #16]
    return(posture);
 8003936:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8003938:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800393a:	b672      	cpsid	i
    return(int_posture);
 800393c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BLOCK_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <_tx_block_pool_delete+0x11c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3b01      	subs	r3, #1
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <_tx_block_pool_delete+0x11c>)
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8003956:	f002 fc33 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3748      	adds	r7, #72	; 0x48
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	2000ef78 	.word	0x2000ef78
 8003968:	2000ef74 	.word	0x2000ef74
 800396c:	2000f028 	.word	0x2000f028

08003970 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b096      	sub	sp, #88	; 0x58
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3303      	adds	r3, #3
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003988:	f3ef 8310 	mrs	r3, PRIMASK
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8003992:	b672      	cpsid	i
    return(int_posture);
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8003996:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003998:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <_tx_byte_allocate+0x180>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a6:	621a      	str	r2, [r3, #32]
 80039a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f383 8810 	msr	PRIMASK, r3
}
 80039b2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fa42 	bl	8003e40 <_tx_byte_pool_search>
 80039bc:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80039be:	f3ef 8310 	mrs	r3, PRIMASK
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80039c8:	b672      	cpsid	i
    return(int_posture);
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80039cc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80039ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d8:	e006      	b.n	80039e8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d101      	bne.n	80039e8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0d9      	beq.n	80039a2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <_tx_byte_allocate+0x9c>
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8003a06:	2300      	movs	r3, #0
 8003a08:	653b      	str	r3, [r7, #80]	; 0x50
 8003a0a:	e06c      	b.n	8003ae6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d061      	beq.n	8003ad6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <_tx_byte_allocate+0x184>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a20:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f383 8810 	msr	PRIMASK, r3
}
 8003a28:	e05d      	b.n	8003ae6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2c:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <_tx_byte_allocate+0x188>)
 8003a2e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8003a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8003a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a70:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a76:	675a      	str	r2, [r3, #116]	; 0x74
 8003a78:	e011      	b.n	8003a9e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8003a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a84:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a90:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a96:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa0:	2209      	movs	r2, #9
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <_tx_byte_allocate+0x184>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <_tx_byte_allocate+0x184>)
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003ac6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ac8:	f002 fcc8 	bl	800645c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8003acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad4:	e007      	b.n	8003ae6 <_tx_byte_allocate+0x176>
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8003ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3758      	adds	r7, #88	; 0x58
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2000ef8c 	.word	0x2000ef8c
 8003af4:	2000f028 	.word	0x2000f028
 8003af8:	08003afd 	.word	0x08003afd

08003afc <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b06:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0a:	623b      	str	r3, [r7, #32]
    return(posture);
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003b0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b10:	b672      	cpsid	i
    return(int_posture);
 8003b12:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1a:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <_tx_byte_pool_cleanup+0xec>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d158      	bne.n	8003bd2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d152      	bne.n	8003bd2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d04c      	beq.n	8003bd2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <_tx_byte_pool_cleanup+0xf0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d147      	bne.n	8003bd2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d043      	beq.n	8003bd2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6c:	e013      	b.n	8003b96 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b84:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d102      	bne.n	8003b96 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	d119      	bne.n	8003bd2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <_tx_byte_pool_cleanup+0xf4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <_tx_byte_pool_cleanup+0xf4>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f002 fb39 	bl	8006234 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003bca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003bcc:	b672      	cpsid	i
    return(int_posture);
 8003bce:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003bde:	bf00      	nop
 8003be0:	3738      	adds	r7, #56	; 0x38
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	08003afd 	.word	0x08003afd
 8003bec:	42595445 	.word	0x42595445
 8003bf0:	2000f028 	.word	0x2000f028

08003bf4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8003c02:	2234      	movs	r2, #52	; 0x34
 8003c04:	2100      	movs	r1, #0
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f007 ffba 	bl	800bb80 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1a3 0208 	sub.w	r2, r3, #8
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8003c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	3b04      	subs	r3, #4
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c60:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	3b04      	subs	r3, #4
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	3304      	adds	r3, #4
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <_tx_byte_pool_create+0x11c>)
 8003c92:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003ca2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003ca4:	b672      	cpsid	i
    return(int_posture);
 8003ca6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <_tx_byte_pool_create+0x120>)
 8003cae:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <_tx_byte_pool_create+0x124>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <_tx_byte_pool_create+0x128>)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003cca:	e011      	b.n	8003cf0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8003ccc:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <_tx_byte_pool_create+0x128>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <_tx_byte_pool_create+0x124>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <_tx_byte_pool_create+0x124>)
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3738      	adds	r7, #56	; 0x38
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	ffffeeee 	.word	0xffffeeee
 8003d14:	42595445 	.word	0x42595445
 8003d18:	2000ef80 	.word	0x2000ef80
 8003d1c:	2000ef7c 	.word	0x2000ef7c

08003d20 <_tx_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b092      	sub	sp, #72	; 0x48
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003d28:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003d32:	b672      	cpsid	i
    return(int_posture);
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_BYTE_POOL    *next_pool;
TX_BYTE_POOL    *previous_pool;


    /* Disable interrupts to remove the byte pool from the created list.  */
    TX_DISABLE
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_BYTE_POOL_DELETE_INSERT

    /* Clear the byte pool ID to make it invalid.  */
    pool_ptr -> tx_byte_pool_id =  TX_CLEAR_ID;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of byte pools created.  */
    _tx_byte_pool_created_count--;
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <_tx_byte_pool_delete+0x114>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <_tx_byte_pool_delete+0x114>)
 8003d46:	6013      	str	r3, [r2, #0]

    /* See if the byte pool is the only one on the list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003d48:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <_tx_byte_pool_delete+0x114>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <_tx_byte_pool_delete+0x38>
    {

        /* Only created byte pool, just set the created list to NULL.  */
        _tx_byte_pool_created_ptr =  TX_NULL;
 8003d50:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <_tx_byte_pool_delete+0x118>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e013      	b.n	8003d80 <_tx_byte_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                   pool_ptr -> tx_byte_pool_created_next;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_pool =                               pool_ptr -> tx_byte_pool_created_previous;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
        next_pool -> tx_byte_pool_created_previous =  previous_pool;
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  next_pool;
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* See if we have to update the created list head pointer.  */
        if (_tx_byte_pool_created_ptr == pool_ptr)
 8003d70:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <_tx_byte_pool_delete+0x118>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d102      	bne.n	8003d80 <_tx_byte_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_byte_pool_created_ptr =  next_pool;
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <_tx_byte_pool_delete+0x118>)
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003d80:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <_tx_byte_pool_delete+0x11c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	4a2d      	ldr	r2, [pc, #180]	; (8003e3c <_tx_byte_pool_delete+0x11c>)
 8003d88:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                pool_ptr -> tx_byte_pool_suspension_list;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	647b      	str	r3, [r7, #68]	; 0x44
    pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24
    suspended_count =                           pool_ptr -> tx_byte_pool_suspended_count;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	643b      	str	r3, [r7, #64]	; 0x40
    pool_ptr -> tx_byte_pool_suspended_count =  TX_NO_SUSPENSIONS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the byte pool list to resume any and all threads suspended
       on this byte pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8003dae:	e024      	b.n	8003dfa <_tx_byte_pool_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	3b01      	subs	r3, #1
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003db6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dba:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003dbe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003dc0:	b672      	cpsid	i
    return(int_posture);
 8003dc2:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	2200      	movs	r2, #0
 8003dca:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8003dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <_tx_byte_pool_delete+0x11c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <_tx_byte_pool_delete+0x11c>)
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003df0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003df2:	f002 fa1f 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1d7      	bne.n	8003db0 <_tx_byte_pool_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e00:	f3ef 8310 	mrs	r3, PRIMASK
 8003e04:	613b      	str	r3, [r7, #16]
    return(posture);
 8003e06:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8003e08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e0a:	b672      	cpsid	i
    return(int_posture);
 8003e0c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BYTE_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <_tx_byte_pool_delete+0x11c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <_tx_byte_pool_delete+0x11c>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8003e26:	f002 f9cb 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3748      	adds	r7, #72	; 0x48
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	2000ef80 	.word	0x2000ef80
 8003e38:	2000ef7c 	.word	0x2000ef7c
 8003e3c:	2000f028 	.word	0x2000f028

08003e40 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b097      	sub	sp, #92	; 0x5c
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8003e56:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e58:	b672      	cpsid	i
    return(int_posture);
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8003e5c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	3b02      	subs	r3, #2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d308      	bcc.n	8003e88 <_tx_byte_pool_search+0x48>
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	653b      	str	r3, [r7, #80]	; 0x50
 8003e86:	e0dd      	b.n	8004044 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8003e88:	4b72      	ldr	r3, [pc, #456]	; (8004054 <_tx_byte_pool_search+0x214>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e92:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a68      	ldr	r2, [pc, #416]	; (8004058 <_tx_byte_pool_search+0x218>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d143      	bne.n	8003f42 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8003eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ec4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8003ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	3b08      	subs	r3, #8
 8003ee0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8003ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d257      	bcs.n	8003f9a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8003eea:	2300      	movs	r3, #0
 8003eec:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a56      	ldr	r2, [pc, #344]	; (8004058 <_tx_byte_pool_search+0x218>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d113      	bne.n	8003f2a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d114      	bne.n	8003f4c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f26:	615a      	str	r2, [r3, #20]
 8003f28:	e010      	b.n	8003f4c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f40:	e004      	b.n	8003f4c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	3b01      	subs	r3, #1
 8003f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f383 8810 	msr	PRIMASK, r3
}
 8003f62:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f64:	f3ef 8310 	mrs	r3, PRIMASK
 8003f68:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003f6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f6e:	b672      	cpsid	i
    return(int_posture);
 8003f70:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8003f72:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d009      	beq.n	8003f92 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f90:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d186      	bne.n	8003ea6 <_tx_byte_pool_search+0x66>
 8003f98:	e000      	b.n	8003f9c <_tx_byte_pool_search+0x15c>
                    break;
 8003f9a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d048      	beq.n	8004034 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8003fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b13      	cmp	r3, #19
 8003faa:	d91e      	bls.n	8003fea <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fb2:	4413      	add	r3, r2
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8003fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	3304      	adds	r3, #4
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	4a21      	ldr	r2, [pc, #132]	; (8004058 <_tx_byte_pool_search+0x218>)
 8003fd4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8003fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fec:	3304      	adds	r3, #4
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f1a3 0208 	sub.w	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004010:	429a      	cmp	r2, r3
 8004012:	d105      	bne.n	8004020 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	615a      	str	r2, [r3, #20]
 8004020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004022:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	3308      	adds	r3, #8
 8004030:	653b      	str	r3, [r7, #80]	; 0x50
 8004032:	e007      	b.n	8004044 <_tx_byte_pool_search+0x204>
 8004034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004036:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8004044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8004046:	4618      	mov	r0, r3
 8004048:	375c      	adds	r7, #92	; 0x5c
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000ef8c 	.word	0x2000ef8c
 8004058:	ffffeeee 	.word	0xffffeeee

0800405c <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b09e      	sub	sp, #120	; 0x78
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 8004064:	2300      	movs	r3, #0
 8004066:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800406c:	f3ef 8310 	mrs	r3, PRIMASK
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004076:	b672      	cpsid	i
    return(int_posture);
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Lockout interrupts.  */
    TX_DISABLE
 800407a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (work_ptr != TX_NULL)
 8004080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004082:	2b00      	cmp	r3, #0
 8004084:	d027      	beq.n	80040d6 <_tx_byte_release+0x7a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8004086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004088:	3b08      	subs	r3, #8
 800408a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800408c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800408e:	3304      	adds	r3, #4
 8004090:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8004092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 8004096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a7e      	ldr	r2, [pc, #504]	; (8004294 <_tx_byte_release+0x238>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d017      	beq.n	80040d0 <_tx_byte_release+0x74>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80040a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a2:	3304      	adds	r3, #4
 80040a4:	667b      	str	r3, [r7, #100]	; 0x64
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 80040a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
            pool_ptr =  *byte_pool_ptr;
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <_tx_byte_release+0x60>
            {

                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 80040b6:	2303      	movs	r3, #3
 80040b8:	673b      	str	r3, [r7, #112]	; 0x70
 80040ba:	e00e      	b.n	80040da <_tx_byte_release+0x7e>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a75      	ldr	r2, [pc, #468]	; (8004298 <_tx_byte_release+0x23c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <_tx_byte_release+0x7e>
                {

                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 80040c6:	2303      	movs	r3, #3
 80040c8:	673b      	str	r3, [r7, #112]	; 0x70

                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ce:	e004      	b.n	80040da <_tx_byte_release+0x7e>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 80040d0:	2303      	movs	r3, #3
 80040d2:	673b      	str	r3, [r7, #112]	; 0x70
 80040d4:	e001      	b.n	80040da <_tx_byte_release+0x7e>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 80040d6:	2303      	movs	r3, #3
 80040d8:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <_tx_byte_release+0x90>
 80040e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	e0cd      	b.n	8004288 <_tx_byte_release+0x22c>
    {

        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80040ec:	4b6b      	ldr	r3, [pc, #428]	; (800429c <_tx_byte_release+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f6:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80040f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040fa:	3304      	adds	r3, #4
 80040fc:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 80040fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004100:	663b      	str	r3, [r7, #96]	; 0x60
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 8004102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004104:	4a63      	ldr	r2, [pc, #396]	; (8004294 <_tx_byte_release+0x238>)
 8004106:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8004108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800410a:	657b      	str	r3, [r7, #84]	; 0x54
        next_block_ptr =  *block_link_ptr;
 800410c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	653b      	str	r3, [r7, #80]	; 0x50
        pool_ptr -> tx_byte_pool_available =
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004118:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800411a:	1a8a      	subs	r2, r1, r2
 800411c:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004128:	429a      	cmp	r2, r3
 800412a:	d202      	bcs.n	8004132 <_tx_byte_release+0xd6>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004130:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a0 	beq.w	800427c <_tx_byte_release+0x220>
        {

            /* Now examine the suspension list to find threads waiting for
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800413c:	e08e      	b.n	800425c <_tx_byte_release+0x200>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 800413e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f383 8810 	msr	PRIMASK, r3
}
 8004154:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8004156:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004158:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800415a:	f7ff fe71 	bl	8003e40 <_tx_byte_pool_search>
 800415e:	66b8      	str	r0, [r7, #104]	; 0x68
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004160:	f3ef 8310 	mrs	r3, PRIMASK
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800416a:	b672      	cpsid	i
    return(int_posture);
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 800416e:	677b      	str	r3, [r7, #116]	; 0x74

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004174:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 8004176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004178:	2b00      	cmp	r3, #0
 800417a:	d075      	beq.n	8004268 <_tx_byte_release+0x20c>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004182:	429a      	cmp	r2, r3
 8004184:	d147      	bne.n	8004216 <_tx_byte_release+0x1ba>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418c:	429a      	cmp	r2, r3
 800418e:	d142      	bne.n	8004216 <_tx_byte_release+0x1ba>
                    {

                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	1e5a      	subs	r2, r3, #1
 8004196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004198:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	647b      	str	r3, [r7, #68]	; 0x44

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80041a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <_tx_byte_release+0x152>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	2200      	movs	r2, #0
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
 80041ac:	e00e      	b.n	80041cc <_tx_byte_release+0x170>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80041c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041c4:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ca:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80041cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ce:	2200      	movs	r2, #0
 80041d0:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
                        *suspend_info_ptr =  work_ptr;
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041dc:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 80041ea:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <_tx_byte_release+0x244>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <_tx_byte_release+0x244>)
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f383 8810 	msr	PRIMASK, r3
}
 80041fe:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 8004200:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004202:	f002 f817 	bl	8006234 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800420c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800420e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004210:	b672      	cpsid	i
    return(int_posture);
 8004212:	69bb      	ldr	r3, [r7, #24]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 8004214:	677b      	str	r3, [r7, #116]	; 0x74
                    }
                }

                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 8004216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01f      	beq.n	800425c <_tx_byte_release+0x200>

                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800421c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421e:	3b08      	subs	r3, #8
 8004220:	66bb      	str	r3, [r7, #104]	; 0x68
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8004222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004224:	3304      	adds	r3, #4
 8004226:	667b      	str	r3, [r7, #100]	; 0x64
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8004228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422a:	663b      	str	r3, [r7, #96]	; 0x60
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 800422c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <_tx_byte_release+0x238>)
 8004230:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8004232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004234:	657b      	str	r3, [r7, #84]	; 0x54
                    next_block_ptr =  *block_link_ptr;
 8004236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
                    pool_ptr -> tx_byte_pool_available =
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004242:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004244:	1a8a      	subs	r2, r1, r2
 8004246:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004252:	429a      	cmp	r2, r3
 8004254:	d202      	bcs.n	800425c <_tx_byte_release+0x200>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800425a:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	f47f af6c 	bne.w	800413e <_tx_byte_release+0xe2>
 8004266:	e000      	b.n	800426a <_tx_byte_release+0x20e>
                    break;
 8004268:	bf00      	nop
 800426a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 8004276:	f001 ffa3 	bl	80061c0 <_tx_thread_system_preempt_check>
 800427a:	e005      	b.n	8004288 <_tx_byte_release+0x22c>
 800427c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f383 8810 	msr	PRIMASK, r3
}
 8004286:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8004288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800428a:	4618      	mov	r0, r3
 800428c:	3778      	adds	r7, #120	; 0x78
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	ffffeeee 	.word	0xffffeeee
 8004298:	42595445 	.word	0x42595445
 800429c:	2000ef8c 	.word	0x2000ef8c
 80042a0:	2000f028 	.word	0x2000f028

080042a4 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b092      	sub	sp, #72	; 0x48
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80042ac:	f3ef 8310 	mrs	r3, PRIMASK
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80042b6:	b672      	cpsid	i
    return(int_posture);
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <_tx_event_flags_delete+0x114>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <_tx_event_flags_delete+0x114>)
 80042ca:	6013      	str	r3, [r2, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <_tx_event_flags_delete+0x114>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <_tx_event_flags_delete+0x38>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <_tx_event_flags_delete+0x118>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e013      	b.n	8004304 <_tx_event_flags_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ec:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f2:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 80042f4:	4b31      	ldr	r3, [pc, #196]	; (80043bc <_tx_event_flags_delete+0x118>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d102      	bne.n	8004304 <_tx_event_flags_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 80042fe:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <_tx_event_flags_delete+0x118>)
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <_tx_event_flags_delete+0x11c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <_tx_event_flags_delete+0x11c>)
 800430c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	647b      	str	r3, [r7, #68]	; 0x44
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	643b      	str	r3, [r7, #64]	; 0x40
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	615a      	str	r2, [r3, #20]
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8004332:	e024      	b.n	800437e <_tx_event_flags_delete+0xda>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	3b01      	subs	r3, #1
 8004338:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800433a:	f3ef 8310 	mrs	r3, PRIMASK
 800433e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004340:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8004342:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004344:	b672      	cpsid	i
    return(int_posture);
 8004346:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800434a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434c:	2200      	movs	r2, #0
 800434e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	2201      	movs	r2, #1
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800435e:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <_tx_event_flags_delete+0x11c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <_tx_event_flags_delete+0x11c>)
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004374:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004376:	f001 ff5d 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1d7      	bne.n	8004334 <_tx_event_flags_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004384:	f3ef 8310 	mrs	r3, PRIMASK
 8004388:	613b      	str	r3, [r7, #16]
    return(posture);
 800438a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800438c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800438e:	b672      	cpsid	i
    return(int_posture);
 8004390:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <_tx_event_flags_delete+0x11c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <_tx_event_flags_delete+0x11c>)
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80043aa:	f001 ff09 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3748      	adds	r7, #72	; 0x48
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	2000ef68 	.word	0x2000ef68
 80043bc:	2000ef64 	.word	0x2000ef64
 80043c0:	2000f028 	.word	0x2000f028

080043c4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80043c8:	f001 fd6a 	bl	8005ea0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80043cc:	f002 fcf4 	bl	8006db8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <_tx_initialize_high_level+0x58>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <_tx_initialize_high_level+0x5c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <_tx_initialize_high_level+0x60>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <_tx_initialize_high_level+0x64>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80043e8:	4b10      	ldr	r3, [pc, #64]	; (800442c <_tx_initialize_high_level+0x68>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <_tx_initialize_high_level+0x6c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <_tx_initialize_high_level+0x70>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <_tx_initialize_high_level+0x74>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <_tx_initialize_high_level+0x78>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <_tx_initialize_high_level+0x7c>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <_tx_initialize_high_level+0x80>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <_tx_initialize_high_level+0x84>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
#endif
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	2000ef54 	.word	0x2000ef54
 8004420:	2000ef58 	.word	0x2000ef58
 8004424:	2000ef5c 	.word	0x2000ef5c
 8004428:	2000ef60 	.word	0x2000ef60
 800442c:	2000ef64 	.word	0x2000ef64
 8004430:	2000ef68 	.word	0x2000ef68
 8004434:	2000ef74 	.word	0x2000ef74
 8004438:	2000ef78 	.word	0x2000ef78
 800443c:	2000ef7c 	.word	0x2000ef7c
 8004440:	2000ef80 	.word	0x2000ef80
 8004444:	2000ef6c 	.word	0x2000ef6c
 8004448:	2000ef70 	.word	0x2000ef70

0800444c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <_tx_initialize_kernel_enter+0x48>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004458:	d00c      	beq.n	8004474 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <_tx_initialize_kernel_enter+0x48>)
 800445c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004460:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004462:	f7fb fecd 	bl	8000200 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8004466:	f7ff ffad 	bl	80043c4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <_tx_initialize_kernel_enter+0x4c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	4a09      	ldr	r2, [pc, #36]	; (8004498 <_tx_initialize_kernel_enter+0x4c>)
 8004472:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <_tx_initialize_kernel_enter+0x48>)
 8004476:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800447a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <_tx_initialize_kernel_enter+0x50>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc fb4d 	bl	8000b20 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8004486:	4b03      	ldr	r3, [pc, #12]	; (8004494 <_tx_initialize_kernel_enter+0x48>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800448c:	f7fb ff58 	bl	8000340 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000008 	.word	0x20000008
 8004498:	2000f028 	.word	0x2000f028
 800449c:	2000ef84 	.word	0x2000ef84

080044a0 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	; 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80044aa:	f3ef 8310 	mrs	r3, PRIMASK
 80044ae:	623b      	str	r3, [r7, #32]
    return(posture);
 80044b0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80044b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80044b4:	b672      	cpsid	i
    return(int_posture);
 80044b6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044be:	4a33      	ldr	r2, [pc, #204]	; (800458c <_tx_mutex_cleanup+0xec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d158      	bne.n	8004576 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d152      	bne.n	8004576 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d04c      	beq.n	8004576 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	; (8004590 <_tx_mutex_cleanup+0xf0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d147      	bne.n	8004576 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d043      	beq.n	8004576 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	1e5a      	subs	r2, r3, #1
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2200      	movs	r2, #0
 800450e:	619a      	str	r2, [r3, #24]
 8004510:	e013      	b.n	800453a <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004522:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004528:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d102      	bne.n	800453a <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004538:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	2b0d      	cmp	r3, #13
 8004540:	d119      	bne.n	8004576 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	221d      	movs	r2, #29
 8004546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <_tx_mutex_cleanup+0xf4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	4a10      	ldr	r2, [pc, #64]	; (8004594 <_tx_mutex_cleanup+0xf4>)
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004556:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fe67 	bl	8006234 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004566:	f3ef 8310 	mrs	r3, PRIMASK
 800456a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800456c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800456e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004570:	b672      	cpsid	i
    return(int_posture);
 8004572:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004578:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004582:	bf00      	nop
 8004584:	3738      	adds	r7, #56	; 0x38
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	080044a1 	.word	0x080044a1
 8004590:	4d555445 	.word	0x4d555445
 8004594:	2000f028 	.word	0x2000f028

08004598 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045a0:	f3ef 8310 	mrs	r3, PRIMASK
 80045a4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80045a6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80045a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80045aa:	b672      	cpsid	i
    return(int_posture);
 80045ac:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <_tx_mutex_thread_release+0x84>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	4a19      	ldr	r2, [pc, #100]	; (800461c <_tx_mutex_thread_release+0x84>)
 80045b8:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045c0:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2201      	movs	r2, #1
 80045cc:	609a      	str	r2, [r3, #8]
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80045da:	6a38      	ldr	r0, [r7, #32]
 80045dc:	f000 fbaa 	bl	8004d34 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045e0:	f3ef 8310 	mrs	r3, PRIMASK
 80045e4:	617b      	str	r3, [r7, #20]
    return(posture);
 80045e6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80045e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80045ea:	b672      	cpsid	i
    return(int_posture);
 80045ec:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045f6:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1dd      	bne.n	80045ba <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <_tx_mutex_thread_release+0x84>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3b01      	subs	r3, #1
 8004604:	4a05      	ldr	r2, [pc, #20]	; (800461c <_tx_mutex_thread_release+0x84>)
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8004614:	bf00      	nop
 8004616:	3728      	adds	r7, #40	; 0x28
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	2000f028 	.word	0x2000f028

08004620 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800462c:	2234      	movs	r2, #52	; 0x34
 800462e:	2100      	movs	r1, #0
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f007 faa5 	bl	800bb80 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004642:	f3ef 8310 	mrs	r3, PRIMASK
 8004646:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004648:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800464a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800464c:	b672      	cpsid	i
    return(int_posture);
 800464e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8004650:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <_tx_mutex_create+0xa0>)
 8004656:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <_tx_mutex_create+0xa4>)
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <_tx_mutex_create+0xa8>)
 800465c:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <_tx_mutex_create+0xac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <_tx_mutex_create+0xb0>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24
 8004678:	e011      	b.n	800469e <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <_tx_mutex_create+0xb0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a3a      	ldr	r2, [r7, #32]
 800469c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <_tx_mutex_create+0xac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <_tx_mutex_create+0xac>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	4d555445 	.word	0x4d555445
 80046c4:	2000f02c 	.word	0x2000f02c
 80046c8:	08004599 	.word	0x08004599
 80046cc:	2000ef70 	.word	0x2000ef70
 80046d0:	2000ef6c 	.word	0x2000ef6c

080046d4 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b096      	sub	sp, #88	; 0x58
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80046e6:	b672      	cpsid	i
    return(int_posture);
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 80046ea:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 80046f2:	4b4a      	ldr	r3, [pc, #296]	; (800481c <_tx_mutex_delete+0x148>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	4a48      	ldr	r2, [pc, #288]	; (800481c <_tx_mutex_delete+0x148>)
 80046fa:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80046fc:	4b47      	ldr	r3, [pc, #284]	; (800481c <_tx_mutex_delete+0x148>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8004704:	4b46      	ldr	r3, [pc, #280]	; (8004820 <_tx_mutex_delete+0x14c>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e013      	b.n	8004734 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8004718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800471e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004722:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8004724:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <_tx_mutex_delete+0x14c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	429a      	cmp	r2, r3
 800472c:	d102      	bne.n	8004734 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800472e:	4a3c      	ldr	r2, [pc, #240]	; (8004820 <_tx_mutex_delete+0x14c>)
 8004730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004732:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <_tx_mutex_delete+0x150>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <_tx_mutex_delete+0x150>)
 800473c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800475c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d013      	beq.n	800478a <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fadd 	bl	8004d34 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800477a:	f3ef 8310 	mrs	r3, PRIMASK
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004784:	b672      	cpsid	i
    return(int_posture);
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8004796:	e024      	b.n	80047e2 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	3b01      	subs	r3, #1
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800479e:	f3ef 8310 	mrs	r3, PRIMASK
 80047a2:	61fb      	str	r3, [r7, #28]
    return(posture);
 80047a4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80047a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80047a8:	b672      	cpsid	i
    return(int_posture);
 80047aa:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80047ac:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b0:	2200      	movs	r2, #0
 80047b2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80047b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b6:	2201      	movs	r2, #1
 80047b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80047bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80047c2:	4b18      	ldr	r3, [pc, #96]	; (8004824 <_tx_mutex_delete+0x150>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	4a16      	ldr	r2, [pc, #88]	; (8004824 <_tx_mutex_delete+0x150>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f383 8810 	msr	PRIMASK, r3
}
 80047d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80047d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80047da:	f001 fd2b 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1d7      	bne.n	8004798 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	613b      	str	r3, [r7, #16]
    return(posture);
 80047ee:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80047f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80047f2:	b672      	cpsid	i
    return(int_posture);
 80047f4:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80047f6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <_tx_mutex_delete+0x150>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <_tx_mutex_delete+0x150>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f383 8810 	msr	PRIMASK, r3
}
 800480c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800480e:	f001 fcd7 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3758      	adds	r7, #88	; 0x58
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	2000ef70 	.word	0x2000ef70
 8004820:	2000ef6c 	.word	0x2000ef6c
 8004824:	2000f028 	.word	0x2000f028

08004828 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b092      	sub	sp, #72	; 0x48
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800483a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800483c:	b672      	cpsid	i
    return(int_posture);
 800483e:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8004840:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004842:	4b7a      	ldr	r3, [pc, #488]	; (8004a2c <_tx_mutex_get+0x204>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d144      	bne.n	80048da <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800485a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d032      	beq.n	80048c8 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d106      	bne.n	8004878 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00f      	beq.n	80048a6 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80048a4:	e009      	b.n	80048ba <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80048c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80048d4:	2300      	movs	r3, #0
 80048d6:	647b      	str	r3, [r7, #68]	; 0x44
 80048d8:	e0a2      	b.n	8004a20 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10d      	bne.n	8004900 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f383 8810 	msr	PRIMASK, r3
}
 80048f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80048fa:	2300      	movs	r3, #0
 80048fc:	647b      	str	r3, [r7, #68]	; 0x44
 80048fe:	e08f      	b.n	8004a20 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8084 	beq.w	8004a10 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8004908:	4b49      	ldr	r3, [pc, #292]	; (8004a30 <_tx_mutex_get+0x208>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <_tx_mutex_get+0xfa>
 8004910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004912:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800491c:	231d      	movs	r3, #29
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
 8004920:	e07e      	b.n	8004a20 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8004928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492a:	4a42      	ldr	r2, [pc, #264]	; (8004a34 <_tx_mutex_get+0x20c>)
 800492c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800494e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004954:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800495a:	675a      	str	r2, [r3, #116]	; 0x74
 800495c:	e011      	b.n	8004982 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004968:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004974:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800497a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004980:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800498c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498e:	220d      	movs	r2, #13
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	2201      	movs	r2, #1
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <_tx_mutex_get+0x208>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <_tx_mutex_get+0x208>)
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d121      	bne.n	8004a00 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80049d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80049da:	429a      	cmp	r2, r3
 80049dc:	d204      	bcs.n	80049e8 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d905      	bls.n	8004a00 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80049f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	4619      	mov	r1, r3
 80049fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049fc:	f000 f8ce 	bl	8004b9c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8004a00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a02:	f001 fd2b 	bl	800645c <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8004a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0e:	e007      	b.n	8004a20 <_tx_mutex_get+0x1f8>
 8004a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8004a1c:	231d      	movs	r3, #29
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3748      	adds	r7, #72	; 0x48
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000ef8c 	.word	0x2000ef8c
 8004a30:	2000f028 	.word	0x2000f028
 8004a34:	080044a1 	.word	0x080044a1

08004a38 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b092      	sub	sp, #72	; 0x48
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a40:	f3ef 8310 	mrs	r3, PRIMASK
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8004a48:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a4a:	b672      	cpsid	i
    return(int_posture);
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8004a4e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8004a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d805      	bhi.n	8004a68 <_tx_mutex_prioritize+0x30>
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	e092      	b.n	8004b8e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d114      	bne.n	8004a98 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d202      	bcs.n	8004a8c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8a:	619a      	str	r2, [r3, #24]
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	e07a      	b.n	8004b8e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <_tx_mutex_prioritize+0x160>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	4a3a      	ldr	r2, [pc, #232]	; (8004b98 <_tx_mutex_prioritize+0x160>)
 8004ab0:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d201      	bcs.n	8004ac6 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8004ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad6:	617b      	str	r3, [r7, #20]
    return(posture);
 8004ad8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004ada:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004adc:	b672      	cpsid	i
    return(int_posture);
 8004ade:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d002      	beq.n	8004af2 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
 8004af0:	e006      	b.n	8004b00 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b0c:	e00c      	b.n	8004b28 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8004b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d1c2      	bne.n	8004ab6 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <_tx_mutex_prioritize+0x160>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <_tx_mutex_prioritize+0x160>)
 8004b38:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8004b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d01d      	beq.n	8004b7e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b52:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b58:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b64:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8004b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b70:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b76:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b7c:	619a      	str	r2, [r3, #24]
 8004b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b80:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004b8a:	f001 fb19 	bl	80061c0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8004b8e:	2300      	movs	r3, #0
#endif
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3748      	adds	r7, #72	; 0x48
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	2000f028 	.word	0x2000f028

08004b9c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b092      	sub	sp, #72	; 0x48
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bb0:	b672      	cpsid	i
    return(int_posture);
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d017      	beq.n	8004bee <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d905      	bls.n	8004bdc <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bda:	e002      	b.n	8004be2 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	e096      	b.n	8004d1c <_tx_mutex_priority_change+0x180>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8004bee:	4b4d      	ldr	r3, [pc, #308]	; (8004d24 <_tx_mutex_priority_change+0x188>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8004bfa:	4b4b      	ldr	r3, [pc, #300]	; (8004d28 <_tx_mutex_priority_change+0x18c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3302      	adds	r3, #2
 8004c00:	4a49      	ldr	r2, [pc, #292]	; (8004d28 <_tx_mutex_priority_change+0x18c>)
 8004c02:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	220e      	movs	r2, #14
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c18:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 fc1a 	bl	800645c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8004c30:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c32:	b672      	cpsid	i
    return(int_posture);
 8004c34:	6a3b      	ldr	r3, [r7, #32]

        /* Disable interrupts.  */
        TX_DISABLE
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d905      	bls.n	8004c56 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c54:	e002      	b.n	8004c5c <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 fae3 	bl	8006234 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c72:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004c74:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004c76:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c78:	b672      	cpsid	i
    return(int_posture);
 8004c7a:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <_tx_mutex_priority_change+0x188>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d041      	beq.n	8004d10 <_tx_mutex_priority_change+0x174>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d13d      	bne.n	8004d10 <_tx_mutex_priority_change+0x174>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d811      	bhi.n	8004cc4 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d133      	bne.n	8004d10 <_tx_mutex_priority_change+0x174>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <_tx_mutex_priority_change+0x188>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8004cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d22c      	bcs.n	8004d10 <_tx_mutex_priority_change+0x174>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	491c      	ldr	r1, [pc, #112]	; (8004d2c <_tx_mutex_priority_change+0x190>)
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cc2:	e025      	b.n	8004d10 <_tx_mutex_priority_change+0x174>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d21f      	bcs.n	8004d10 <_tx_mutex_priority_change+0x174>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d80d      	bhi.n	8004cf8 <_tx_mutex_priority_change+0x15c>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004cdc:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <_tx_mutex_priority_change+0x188>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8004ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d212      	bcs.n	8004d10 <_tx_mutex_priority_change+0x174>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	490f      	ldr	r1, [pc, #60]	; (8004d2c <_tx_mutex_priority_change+0x190>)
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cf6:	e00b      	b.n	8004d10 <_tx_mutex_priority_change+0x174>
                            TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                            _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                            /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                            TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <_tx_mutex_priority_change+0x194>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <_tx_mutex_priority_change+0x194>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f383 8810 	msr	PRIMASK, r3
}
 8004d1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004d1c:	bf00      	nop
 8004d1e:	3748      	adds	r7, #72	; 0x48
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	2000ef90 	.word	0x2000ef90
 8004d28:	2000f028 	.word	0x2000f028
 8004d2c:	2000efa8 	.word	0x2000efa8
 8004d30:	2000efa0 	.word	0x2000efa0

08004d34 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b0a6      	sub	sp, #152	; 0x98
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d42:	f3ef 8310 	mrs	r3, PRIMASK
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8004d4a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d4c:	b672      	cpsid	i
    return(int_posture);
 8004d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8004d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 81ff 	beq.w	800515c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004d64:	4ba3      	ldr	r3, [pc, #652]	; (8004ff4 <_tx_mutex_put+0x2c0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d00d      	beq.n	8004d90 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8004d74:	4ba0      	ldr	r3, [pc, #640]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <_tx_mutex_put+0x5c>
 8004d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d80:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d84:	f383 8810 	msr	PRIMASK, r3
}
 8004d88:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8004d8a:	231e      	movs	r3, #30
 8004d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8004d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	f040 81eb 	bne.w	8005170 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <_tx_mutex_put+0x8e>
 8004dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004db0:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db4:	f383 8810 	msr	PRIMASK, r3
}
 8004db8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dc0:	e1d6      	b.n	8005170 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8004dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <_tx_mutex_put+0xaa>
 8004dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd0:	f383 8810 	msr	PRIMASK, r3
}
 8004dd4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ddc:	e1c8      	b.n	8005170 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8004dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004de4:	1e5a      	subs	r2, r3, #1
 8004de6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8004dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8004df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004dfe:	e019      	b.n	8004e34 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8004e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8004e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8004e1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d104      	bne.n	8004e34 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8004e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e30:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d110      	bne.n	8004e5e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10c      	bne.n	8004e5e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e52:	f383 8810 	msr	PRIMASK, r3
}
 8004e56:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8004e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	f040 8184 	bne.w	8005170 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8004e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e70:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d155      	bne.n	8004f2c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004e80:	4b5d      	ldr	r3, [pc, #372]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	4a5c      	ldr	r2, [pc, #368]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8004e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8004ea8:	e01f      	b.n	8004eea <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8004eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10b      	bne.n	8004ecc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8004eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d904      	bls.n	8004ecc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8004ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8004ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8004ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004edc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d102      	bne.n	8004eea <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8004eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1db      	bne.n	8004eaa <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004efc:	b672      	cpsid	i
    return(int_posture);
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8004f00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8004f04:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f0c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8004f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f14:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8004f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d203      	bcs.n	8004f2c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8004f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d920      	bls.n	8004f76 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d11c      	bne.n	8004f76 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8004f3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f383 8810 	msr	PRIMASK, r3
}
 8004f52:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fd6f 	bl	8004a38 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8004f64:	b672      	cpsid	i
    return(int_posture);
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8004f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f74:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d13e      	bne.n	8004ffc <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d006      	beq.n	8004fb8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fdf2 	bl	8004b9c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8004fc0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004fc2:	b672      	cpsid	i
    return(int_posture);
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8004fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <_tx_mutex_put+0x2c4>)
 8004fd2:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8004fe8:	f001 f8ea 	bl	80061c0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ff2:	e0bd      	b.n	8005170 <_tx_mutex_put+0x43c>
 8004ff4:	2000ef8c 	.word	0x2000ef8c
 8004ff8:	2000f028 	.word	0x2000f028
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10a      	bne.n	8005020 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8005012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8005020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005022:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005026:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8005028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800502e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
 8005042:	e016      	b.n	8005072 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8005044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800504a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800504e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8005056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800505e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005070:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8005072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005078:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005086:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	619a      	str	r2, [r3, #24]
 80050a4:	e00e      	b.n	80050c4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80050a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050b0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80050b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b6:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80050b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050bc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80050be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050c2:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80050c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c6:	2200      	movs	r2, #0
 80050c8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80050ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80050d2:	4b2a      	ldr	r3, [pc, #168]	; (800517c <_tx_mutex_put+0x448>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	4a28      	ldr	r2, [pc, #160]	; (800517c <_tx_mutex_put+0x448>)
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f383 8810 	msr	PRIMASK, r3
}
 80050e8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d12d      	bne.n	800514e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01c      	beq.n	8005134 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fc9c 	bl	8004a38 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005100:	f3ef 8310 	mrs	r3, PRIMASK
 8005104:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005106:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005108:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800510a:	b672      	cpsid	i
    return(int_posture);
 800510c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800510e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8005118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800511e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
 8005126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800512a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f383 8810 	msr	PRIMASK, r3
}
 8005132:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8005134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800513e:	429a      	cmp	r2, r3
 8005140:	d005      	beq.n	800514e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8005142:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005146:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800514a:	f7ff fd27 	bl	8004b9c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800514e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005150:	f001 f870 	bl	8006234 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800515a:	e009      	b.n	8005170 <_tx_mutex_put+0x43c>
 800515c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005160:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f383 8810 	msr	PRIMASK, r3
}
 8005168:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800516a:	231e      	movs	r3, #30
 800516c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8005170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8005174:	4618      	mov	r0, r3
 8005176:	3798      	adds	r7, #152	; 0x98
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	2000f028 	.word	0x2000f028

08005180 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08e      	sub	sp, #56	; 0x38
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800518a:	f3ef 8310 	mrs	r3, PRIMASK
 800518e:	623b      	str	r3, [r7, #32]
    return(posture);
 8005190:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005192:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005194:	b672      	cpsid	i
    return(int_posture);
 8005196:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8005198:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519e:	4a37      	ldr	r2, [pc, #220]	; (800527c <_tx_queue_cleanup+0xfc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d161      	bne.n	8005268 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d15b      	bne.n	8005268 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d055      	beq.n	8005268 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <_tx_queue_cleanup+0x100>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d150      	bne.n	8005268 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d04c      	beq.n	8005268 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2200      	movs	r2, #0
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
 80051f0:	e013      	b.n	800521a <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005202:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005208:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d102      	bne.n	800521a <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	2b05      	cmp	r3, #5
 8005220:	d122      	bne.n	8005268 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	220b      	movs	r2, #11
 800522e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005232:	e003      	b.n	800523c <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	220a      	movs	r2, #10
 8005238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <_tx_queue_cleanup+0x104>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <_tx_queue_cleanup+0x104>)
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 ffee 	bl	8006234 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005258:	f3ef 8310 	mrs	r3, PRIMASK
 800525c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800525e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005260:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005262:	b672      	cpsid	i
    return(int_posture);
 8005264:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005274:	bf00      	nop
 8005276:	3738      	adds	r7, #56	; 0x38
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08005181 	.word	0x08005181
 8005280:	51554555 	.word	0x51554555
 8005284:	2000f028 	.word	0x2000f028

08005288 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	; 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8005296:	2244      	movs	r2, #68	; 0x44
 8005298:	2100      	movs	r1, #0
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f006 fc70 	bl	800bb80 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e6:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ec:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80052f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80052f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80052f8:	b672      	cpsid	i
    return(int_posture);
 80052fa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <_tx_queue_create+0xdc>)
 8005302:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8005304:	4b18      	ldr	r3, [pc, #96]	; (8005368 <_tx_queue_create+0xe0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <_tx_queue_create+0xe4>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	635a      	str	r2, [r3, #52]	; 0x34
 800531e:	e011      	b.n	8005344 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <_tx_queue_create+0xe4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <_tx_queue_create+0xe0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <_tx_queue_create+0xe0>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f383 8810 	msr	PRIMASK, r3
}
 8005358:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3730      	adds	r7, #48	; 0x30
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	51554555 	.word	0x51554555
 8005368:	2000ef60 	.word	0x2000ef60
 800536c:	2000ef5c 	.word	0x2000ef5c

08005370 <_tx_queue_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_delete(TX_QUEUE *queue_ptr)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b092      	sub	sp, #72	; 0x48
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005378:	f3ef 8310 	mrs	r3, PRIMASK
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005382:	b672      	cpsid	i
    return(int_posture);
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Disable interrupts to remove the queue from the created list.  */
    TX_DISABLE
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_DELETE_INSERT

    /* Clear the queue ID to make it invalid.  */
    queue_ptr -> tx_queue_id =  TX_CLEAR_ID;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created queues.  */
    _tx_queue_created_count--;
 800538e:	4b3d      	ldr	r3, [pc, #244]	; (8005484 <_tx_queue_delete+0x114>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3b01      	subs	r3, #1
 8005394:	4a3b      	ldr	r2, [pc, #236]	; (8005484 <_tx_queue_delete+0x114>)
 8005396:	6013      	str	r3, [r2, #0]

    /* See if the queue is the only one on the list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8005398:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <_tx_queue_delete+0x114>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <_tx_queue_delete+0x38>
    {

        /* Only created queue, just set the created list to NULL.  */
        _tx_queue_created_ptr =  TX_NULL;
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <_tx_queue_delete+0x118>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e013      	b.n	80053d0 <_tx_queue_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_queue =                               queue_ptr -> tx_queue_created_next;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_queue =                           queue_ptr -> tx_queue_created_previous;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
        next_queue -> tx_queue_created_previous =  previous_queue;
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  next_queue;
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053be:	631a      	str	r2, [r3, #48]	; 0x30

        /* See if we have to update the created list head pointer.  */
        if (_tx_queue_created_ptr == queue_ptr)
 80053c0:	4b31      	ldr	r3, [pc, #196]	; (8005488 <_tx_queue_delete+0x118>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d102      	bne.n	80053d0 <_tx_queue_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_queue_created_ptr =  next_queue;
 80053ca:	4a2f      	ldr	r2, [pc, #188]	; (8005488 <_tx_queue_delete+0x118>)
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <_tx_queue_delete+0x11c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a2d      	ldr	r2, [pc, #180]	; (800548c <_tx_queue_delete+0x11c>)
 80053d8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             queue_ptr -> tx_queue_suspension_list;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	647b      	str	r3, [r7, #68]	; 0x44
    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
    suspended_count =                        queue_ptr -> tx_queue_suspended_count;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
    queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	f383 8810 	msr	PRIMASK, r3
}
 80053fc:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80053fe:	e024      	b.n	800544a <_tx_queue_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8005400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005402:	3b01      	subs	r3, #1
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800540c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800540e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005410:	b672      	cpsid	i
    return(int_posture);
 8005412:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005418:	2200      	movs	r2, #0
 800541a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800541c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541e:	2201      	movs	r2, #1
 8005420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <_tx_queue_delete+0x11c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3301      	adds	r3, #1
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <_tx_queue_delete+0x11c>)
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005436:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f383 8810 	msr	PRIMASK, r3
}
 800543e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005440:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005442:	f000 fef7 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1d7      	bne.n	8005400 <_tx_queue_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005450:	f3ef 8310 	mrs	r3, PRIMASK
 8005454:	613b      	str	r3, [r7, #16]
    return(posture);
 8005456:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8005458:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800545a:	b672      	cpsid	i
    return(int_posture);
 800545c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_QUEUE_DELETE_PORT_COMPLETION(queue_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <_tx_queue_delete+0x11c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <_tx_queue_delete+0x11c>)
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8005476:	f000 fea3 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3748      	adds	r7, #72	; 0x48
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	2000ef60 	.word	0x2000ef60
 8005488:	2000ef5c 	.word	0x2000ef5c
 800548c:	2000f028 	.word	0x2000f028

08005490 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b096      	sub	sp, #88	; 0x58
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800549c:	2300      	movs	r3, #0
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054a0:	f3ef 8310 	mrs	r3, PRIMASK
 80054a4:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80054aa:	b672      	cpsid	i
    return(int_posture);
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80054ae:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8136 	beq.w	800572c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d13c      	bne.n	8005540 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80054d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054d8:	1d13      	adds	r3, r2, #4
 80054da:	657b      	str	r3, [r7, #84]	; 0x54
 80054dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054de:	1d19      	adds	r1, r3, #4
 80054e0:	6539      	str	r1, [r7, #80]	; 0x50
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d90e      	bls.n	800550a <_tx_queue_receive+0x7a>
 80054ec:	e007      	b.n	80054fe <_tx_queue_receive+0x6e>
 80054ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054f0:	1d13      	adds	r3, r2, #4
 80054f2:	657b      	str	r3, [r7, #84]	; 0x54
 80054f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f6:	1d19      	adds	r1, r3, #4
 80054f8:	6539      	str	r1, [r7, #80]	; 0x50
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	3b01      	subs	r3, #1
 8005502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f1      	bne.n	80054ee <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005510:	429a      	cmp	r2, r3
 8005512:	d102      	bne.n	800551a <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800551e:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	1e5a      	subs	r2, r3, #1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	611a      	str	r2, [r3, #16]
 8005534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	e163      	b.n	8005808 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	2b01      	cmp	r3, #1
 800554e:	d153      	bne.n	80055f8 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8005550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8005560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005562:	1d13      	adds	r3, r2, #4
 8005564:	657b      	str	r3, [r7, #84]	; 0x54
 8005566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005568:	1d19      	adds	r1, r3, #4
 800556a:	6539      	str	r1, [r7, #80]	; 0x50
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d90e      	bls.n	8005594 <_tx_queue_receive+0x104>
 8005576:	e007      	b.n	8005588 <_tx_queue_receive+0xf8>
 8005578:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800557a:	1d13      	adds	r3, r2, #4
 800557c:	657b      	str	r3, [r7, #84]	; 0x54
 800557e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005580:	1d19      	adds	r1, r3, #4
 8005582:	6539      	str	r1, [r7, #80]	; 0x50
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	3b01      	subs	r3, #1
 800558c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f1      	bne.n	8005578 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	3b01      	subs	r3, #1
 8005598:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800559a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28
 80055a6:	e00e      	b.n	80055c6 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80055a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055be:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80055c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c4:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	2200      	movs	r2, #0
 80055d0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80055da:	4b8e      	ldr	r3, [pc, #568]	; (8005814 <_tx_queue_receive+0x384>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3301      	adds	r3, #1
 80055e0:	4a8c      	ldr	r2, [pc, #560]	; (8005814 <_tx_queue_receive+0x384>)
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80055f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80055f2:	f000 fe1f 	bl	8006234 <_tx_thread_system_resume>
 80055f6:	e107      	b.n	8005808 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8005608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800560a:	1d13      	adds	r3, r2, #4
 800560c:	657b      	str	r3, [r7, #84]	; 0x54
 800560e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005610:	1d19      	adds	r1, r3, #4
 8005612:	6539      	str	r1, [r7, #80]	; 0x50
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d90e      	bls.n	800563c <_tx_queue_receive+0x1ac>
 800561e:	e007      	b.n	8005630 <_tx_queue_receive+0x1a0>
 8005620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005622:	1d13      	adds	r3, r2, #4
 8005624:	657b      	str	r3, [r7, #84]	; 0x54
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	1d19      	adds	r1, r3, #4
 800562a:	6539      	str	r1, [r7, #80]	; 0x50
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005632:	3b01      	subs	r3, #1
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f1      	bne.n	8005620 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005642:	429a      	cmp	r2, r3
 8005644:	d102      	bne.n	800564c <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005650:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8005652:	4b70      	ldr	r3, [pc, #448]	; (8005814 <_tx_queue_receive+0x384>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a6e      	ldr	r2, [pc, #440]	; (8005814 <_tx_queue_receive+0x384>)
 800565a:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800565c:	4b6d      	ldr	r3, [pc, #436]	; (8005814 <_tx_queue_receive+0x384>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	4a6c      	ldr	r2, [pc, #432]	; (8005814 <_tx_queue_receive+0x384>)
 8005664:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800566a:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8005678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800567a:	1d13      	adds	r3, r2, #4
 800567c:	657b      	str	r3, [r7, #84]	; 0x54
 800567e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	6539      	str	r1, [r7, #80]	; 0x50
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d90e      	bls.n	80056ac <_tx_queue_receive+0x21c>
 800568e:	e007      	b.n	80056a0 <_tx_queue_receive+0x210>
 8005690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005692:	1d13      	adds	r3, r2, #4
 8005694:	657b      	str	r3, [r7, #84]	; 0x54
 8005696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005698:	1d19      	adds	r1, r3, #4
 800569a:	6539      	str	r1, [r7, #80]	; 0x50
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a2:	3b01      	subs	r3, #1
 80056a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f1      	bne.n	8005690 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d102      	bne.n	80056bc <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80056c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ca:	3b01      	subs	r3, #1
 80056cc:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80056ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
 80056da:	e00e      	b.n	80056fa <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f8:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	2200      	movs	r2, #0
 8005704:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	2200      	movs	r2, #0
 800570a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800570e:	4b41      	ldr	r3, [pc, #260]	; (8005814 <_tx_queue_receive+0x384>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <_tx_queue_receive+0x384>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	f383 8810 	msr	PRIMASK, r3
}
 8005722:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8005724:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005726:	f000 fd85 	bl	8006234 <_tx_thread_system_resume>
 800572a:	e06d      	b.n	8005808 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d062      	beq.n	80057f8 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <_tx_queue_receive+0x384>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <_tx_queue_receive+0x2bc>
 800573a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8005746:	230a      	movs	r3, #10
 8005748:	64bb      	str	r3, [r7, #72]	; 0x48
 800574a:	e05d      	b.n	8005808 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800574c:	4b32      	ldr	r3, [pc, #200]	; (8005818 <_tx_queue_receive+0x388>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	4a31      	ldr	r2, [pc, #196]	; (800581c <_tx_queue_receive+0x38c>)
 8005756:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800576c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800577a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005784:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800578a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005790:	675a      	str	r2, [r3, #116]	; 0x74
 8005792:	e011      	b.n	80057b8 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800579e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057aa:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b0:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80057b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	2205      	movs	r2, #5
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80057c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c8:	2201      	movs	r2, #1
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <_tx_queue_receive+0x384>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <_tx_queue_receive+0x384>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057de:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f383 8810 	msr	PRIMASK, r3
}
 80057e6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80057e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057ea:	f000 fe37 	bl	800645c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f6:	e007      	b.n	8005808 <_tx_queue_receive+0x378>
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f383 8810 	msr	PRIMASK, r3
}
 8005802:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8005804:	230a      	movs	r3, #10
 8005806:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8005808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800580a:	4618      	mov	r0, r3
 800580c:	3758      	adds	r7, #88	; 0x58
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2000f028 	.word	0x2000f028
 8005818:	2000ef8c 	.word	0x2000ef8c
 800581c:	08005181 	.word	0x08005181

08005820 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b096      	sub	sp, #88	; 0x58
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800582c:	2300      	movs	r3, #0
 800582e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800583a:	b672      	cpsid	i
    return(int_posture);
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800583e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80af 	beq.w	80059ae <_tx_queue_send+0x18e>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d147      	bne.n	80058e6 <_tx_queue_send+0xc6>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  queue_ptr -> tx_queue_write;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800587a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800587c:	1d13      	adds	r3, r2, #4
 800587e:	657b      	str	r3, [r7, #84]	; 0x54
 8005880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005882:	1d19      	adds	r1, r3, #4
 8005884:	6539      	str	r1, [r7, #80]	; 0x50
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d90e      	bls.n	80058ae <_tx_queue_send+0x8e>
 8005890:	e007      	b.n	80058a2 <_tx_queue_send+0x82>
 8005892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005894:	1d13      	adds	r3, r2, #4
 8005896:	657b      	str	r3, [r7, #84]	; 0x54
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	1d19      	adds	r1, r3, #4
 800589c:	6539      	str	r1, [r7, #80]	; 0x50
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a4:	3b01      	subs	r3, #1
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f1      	bne.n	8005892 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d102      	bne.n	80058be <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
 80058ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	f383 8810 	msr	PRIMASK, r3
}
 80058d4:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80e4 	beq.w	8005aa6 <_tx_queue_send+0x286>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	4798      	blx	r3
 80058e4:	e0df      	b.n	8005aa6 <_tx_queue_send+0x286>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80058ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ee:	3b01      	subs	r3, #1
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <_tx_queue_send+0xe0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
 80058fe:	e012      	b.n	8005926 <_tx_queue_send+0x106>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8005908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005912:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800591e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005924:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	2200      	movs	r2, #0
 8005930:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8005936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593a:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8005942:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005944:	1d13      	adds	r3, r2, #4
 8005946:	657b      	str	r3, [r7, #84]	; 0x54
 8005948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594a:	1d19      	adds	r1, r3, #4
 800594c:	6539      	str	r1, [r7, #80]	; 0x50
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d90e      	bls.n	8005976 <_tx_queue_send+0x156>
 8005958:	e007      	b.n	800596a <_tx_queue_send+0x14a>
 800595a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800595c:	1d13      	adds	r3, r2, #4
 800595e:	657b      	str	r3, [r7, #84]	; 0x54
 8005960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	6539      	str	r1, [r7, #80]	; 0x50
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596c:	3b01      	subs	r3, #1
 800596e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f1      	bne.n	800595a <_tx_queue_send+0x13a>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8005984:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <_tx_queue_send+0x290>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	4a49      	ldr	r2, [pc, #292]	; (8005ab0 <_tx_queue_send+0x290>)
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005990:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f383 8810 	msr	PRIMASK, r3
}
 8005998:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800599a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800599c:	f000 fc4a 	bl	8006234 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d07f      	beq.n	8005aa6 <_tx_queue_send+0x286>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	4798      	blx	r3
 80059ac:	e07b      	b.n	8005aa6 <_tx_queue_send+0x286>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d070      	beq.n	8005a96 <_tx_queue_send+0x276>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80059b4:	4b3e      	ldr	r3, [pc, #248]	; (8005ab0 <_tx_queue_send+0x290>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <_tx_queue_send+0x1ae>
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f383 8810 	msr	PRIMASK, r3
}
 80059c6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80059c8:	230b      	movs	r3, #11
 80059ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80059cc:	e06b      	b.n	8005aa6 <_tx_queue_send+0x286>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80059ce:	4b39      	ldr	r3, [pc, #228]	; (8005ab4 <_tx_queue_send+0x294>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80059d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d6:	4a38      	ldr	r2, [pc, #224]	; (8005ab8 <_tx_queue_send+0x298>)
 80059d8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80059ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80059fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <_tx_queue_send+0x1f6>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a0c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8005a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a12:	675a      	str	r2, [r3, #116]	; 0x74
 8005a14:	e011      	b.n	8005a3a <_tx_queue_send+0x21a>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a20:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8005a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a32:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a38:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	2205      	movs	r2, #5
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	633b      	str	r3, [r7, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	2201      	movs	r2, #1
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <_tx_queue_send+0x290>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <_tx_queue_send+0x290>)
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a66:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f383 8810 	msr	PRIMASK, r3
}
 8005a6e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8005a70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a72:	f000 fcf3 	bl	800645c <_tx_thread_system_suspend>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 8005a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <_tx_queue_send+0x26c>
            {

                /* Determine if there is a notify callback.  */
                if (queue_send_notify != TX_NULL)
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <_tx_queue_send+0x26c>
                {

                    /* Call application queue send notification.  */
                    (queue_send_notify)(queue_ptr);
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	4798      	blx	r3
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a94:	e007      	b.n	8005aa6 <_tx_queue_send+0x286>
 8005a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a98:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f383 8810 	msr	PRIMASK, r3
}
 8005aa0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8005aa2:	230b      	movs	r3, #11
 8005aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3758      	adds	r7, #88	; 0x58
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	2000f028 	.word	0x2000f028
 8005ab4:	2000ef8c 	.word	0x2000ef8c
 8005ab8:	08005181 	.word	0x08005181

08005abc <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b092      	sub	sp, #72	; 0x48
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ace:	b672      	cpsid	i
    return(int_posture);
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8005ada:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <_tx_semaphore_delete+0x114>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <_tx_semaphore_delete+0x114>)
 8005ae2:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8005ae4:	4b3a      	ldr	r3, [pc, #232]	; (8005bd0 <_tx_semaphore_delete+0x114>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8005aec:	4b39      	ldr	r3, [pc, #228]	; (8005bd4 <_tx_semaphore_delete+0x118>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e013      	b.n	8005b1c <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b04:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b0a:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <_tx_semaphore_delete+0x118>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d102      	bne.n	8005b1c <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8005b16:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <_tx_semaphore_delete+0x118>)
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005b1c:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <_tx_semaphore_delete+0x11c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	4a2d      	ldr	r2, [pc, #180]	; (8005bd8 <_tx_semaphore_delete+0x11c>)
 8005b24:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8005b4a:	e024      	b.n	8005b96 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8005b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b52:	f3ef 8310 	mrs	r3, PRIMASK
 8005b56:	61fb      	str	r3, [r7, #28]
    return(posture);
 8005b58:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8005b5a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b5c:	b672      	cpsid	i
    return(int_posture);
 8005b5e:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b64:	2200      	movs	r2, #0
 8005b66:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8005b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8005b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <_tx_semaphore_delete+0x11c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <_tx_semaphore_delete+0x11c>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b82:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005b8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b8e:	f000 fb51 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1d7      	bne.n	8005b4c <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba0:	613b      	str	r3, [r7, #16]
    return(posture);
 8005ba2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8005ba4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ba6:	b672      	cpsid	i
    return(int_posture);
 8005ba8:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <_tx_semaphore_delete+0x11c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <_tx_semaphore_delete+0x11c>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8005bc2:	f000 fafd 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3748      	adds	r7, #72	; 0x48
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	2000ef58 	.word	0x2000ef58
 8005bd4:	2000ef54 	.word	0x2000ef54
 8005bd8:	2000f028 	.word	0x2000f028

08005bdc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b092      	sub	sp, #72	; 0x48
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8005bea:	2300      	movs	r3, #0
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8005bee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bf0:	21ef      	movs	r1, #239	; 0xef
 8005bf2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005bf4:	f005 ffc4 	bl	800bb80 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8005bf8:	22e8      	movs	r2, #232	; 0xe8
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f005 ffbf 	bl	800bb80 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c18:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c1e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c32:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c38:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8005c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c4c:	4413      	add	r3, r2
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c54:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c60:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2203      	movs	r2, #3
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a48      	ldr	r2, [pc, #288]	; (8005d90 <_tx_thread_create+0x1b4>)
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005c76:	4947      	ldr	r1, [pc, #284]	; (8005d94 <_tx_thread_create+0x1b8>)
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7fa fd11 	bl	80006a0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005c88:	b672      	cpsid	i
    return(int_posture);
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8005c8c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a41      	ldr	r2, [pc, #260]	; (8005d98 <_tx_thread_create+0x1bc>)
 8005c92:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8005c94:	4b41      	ldr	r3, [pc, #260]	; (8005d9c <_tx_thread_create+0x1c0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8005c9c:	4a40      	ldr	r2, [pc, #256]	; (8005da0 <_tx_thread_create+0x1c4>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005cb2:	e016      	b.n	8005ce2 <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8005cb4:	4b3a      	ldr	r3, [pc, #232]	; (8005da0 <_tx_thread_create+0x1c4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <_tx_thread_create+0x1c0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <_tx_thread_create+0x1c0>)
 8005cea:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005cec:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <_tx_thread_create+0x1c8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <_tx_thread_create+0x1c8>)
 8005cf4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8005cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d129      	bne.n	8005d50 <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005cfc:	f3ef 8305 	mrs	r3, IPSR
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <_tx_thread_create+0x1cc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005d0e:	d30d      	bcc.n	8005d2c <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8005d10:	4b26      	ldr	r3, [pc, #152]	; (8005dac <_tx_thread_create+0x1d0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8005d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8005d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d2a:	e001      	b.n	8005d30 <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f383 8810 	msr	PRIMASK, r3
}
 8005d3a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fa79 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8005d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01e      	beq.n	8005d86 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8005d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d4e:	e01a      	b.n	8005d86 <_tx_thread_create+0x1aa>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f383 8810 	msr	PRIMASK, r3
}
 8005d5a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d60:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005d62:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005d64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d66:	b672      	cpsid	i
    return(int_posture);
 8005d68:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <_tx_thread_create+0x1c8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <_tx_thread_create+0x1c8>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005d82:	f000 fa1d 	bl	80061c0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3748      	adds	r7, #72	; 0x48
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	08006ba5 	.word	0x08006ba5
 8005d94:	08005fe1 	.word	0x08005fe1
 8005d98:	54485244 	.word	0x54485244
 8005d9c:	2000ef98 	.word	0x2000ef98
 8005da0:	2000ef94 	.word	0x2000ef94
 8005da4:	2000f028 	.word	0x2000f028
 8005da8:	20000008 	.word	0x20000008
 8005dac:	2000ef90 	.word	0x2000ef90

08005db0 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b08b      	sub	sp, #44	; 0x2c
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005db8:	2300      	movs	r3, #0
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc0:	617b      	str	r3, [r7, #20]
    return(posture);
 8005dc2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005dc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005dc6:	b672      	cpsid	i
    return(int_posture);
 8005dc8:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8005dca:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d00b      	beq.n	8005dec <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d007      	beq.n	8005dec <_tx_thread_delete+0x3c>
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8005de8:	2311      	movs	r3, #17
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d12d      	bne.n	8005e4e <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <_tx_thread_delete+0xac>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <_tx_thread_delete+0xac>)
 8005e00:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8005e02:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <_tx_thread_delete+0xac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <_tx_thread_delete+0xb0>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e017      	b.n	8005e42 <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e20:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8005e32:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <_tx_thread_delete+0xb0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d102      	bne.n	8005e42 <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8005e3c:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <_tx_thread_delete+0xb0>)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	372c      	adds	r7, #44	; 0x2c
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	2000ef98 	.word	0x2000ef98
 8005e60:	2000ef94 	.word	0x2000ef94

08005e64 <_tx_thread_entry_exit_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT id))
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e72:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005e74:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8005e76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e78:	b672      	cpsid	i
    return(int_posture);
 8005e7a:	68bb      	ldr	r3, [r7, #8]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005e7c:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_THREAD_ENTRY_EXIT_NOTIFY_INSERT

    /* Setup thread entry/exit notification callback function.  */
    thread_ptr -> tx_thread_entry_exit_notify =  thread_entry_exit_notify;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8005e92:	2300      	movs	r3, #0
#endif
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <_tx_thread_initialize+0x54>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8005eaa:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <_tx_thread_initialize+0x58>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	4b12      	ldr	r3, [pc, #72]	; (8005efc <_tx_thread_initialize+0x5c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <_tx_thread_initialize+0x60>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <_tx_thread_initialize+0x64>)
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4810      	ldr	r0, [pc, #64]	; (8005f08 <_tx_thread_initialize+0x68>)
 8005ec8:	f005 fe5a 	bl	800bb80 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <_tx_thread_initialize+0x6c>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <_tx_thread_initialize+0x70>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <_tx_thread_initialize+0x74>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <_tx_thread_initialize+0x78>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <_tx_thread_initialize+0x7c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 8005eec:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <_tx_thread_initialize+0x7c>)
 8005eee:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	2000ef8c 	.word	0x2000ef8c
 8005ef8:	2000ef90 	.word	0x2000ef90
 8005efc:	2000ef9c 	.word	0x2000ef9c
 8005f00:	2000efa0 	.word	0x2000efa0
 8005f04:	2000efa4 	.word	0x2000efa4
 8005f08:	2000efa8 	.word	0x2000efa8
 8005f0c:	2000ef94 	.word	0x2000ef94
 8005f10:	2000ef98 	.word	0x2000ef98
 8005f14:	2000f028 	.word	0x2000f028
 8005f18:	2000f02c 	.word	0x2000f02c
 8005f1c:	2000f030 	.word	0x2000f030

08005f20 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f30:	61fb      	str	r3, [r7, #28]
    return(posture);
 8005f32:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8005f34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f36:	b672      	cpsid	i
    return(int_posture);
 8005f38:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8005f3a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d12f      	bne.n	8005fa4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005f44:	f3ef 8305 	mrs	r3, IPSR
 8005f48:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005f4a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8005f4c:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <_tx_thread_resume+0xb4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005f56:	d30d      	bcc.n	8005f74 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8005f58:	4b1f      	ldr	r3, [pc, #124]	; (8005fd8 <_tx_thread_resume+0xb8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f72:	e001      	b.n	8005f78 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <_tx_thread_resume+0xbc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <_tx_thread_resume+0xbc>)
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f383 8810 	msr	PRIMASK, r3
}
 8005f8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f950 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e012      	b.n	8005fca <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8005fb2:	2319      	movs	r3, #25
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb6:	e001      	b.n	8005fbc <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8005fb8:	2312      	movs	r3, #18
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f383 8810 	msr	PRIMASK, r3
}
 8005fc6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3730      	adds	r7, #48	; 0x30
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000008 	.word	0x20000008
 8005fd8:	2000ef90 	.word	0x2000ef90
 8005fdc:	2000f028 	.word	0x2000f028

08005fe0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	; 0x30
 8005fe4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005fe6:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <_tx_thread_shell_entry+0xd4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005fec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff0:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005ff4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ff6:	b672      	cpsid	i
    return(int_posture);
 8005ff8:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f383 8810 	msr	PRIMASK, r3
}
 800600e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2100      	movs	r1, #0
 800601a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800601c:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006024:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006026:	4610      	mov	r0, r2
 8006028:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800602a:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <_tx_thread_shell_entry+0xd8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <_tx_thread_shell_entry+0xd8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006038:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800603a:	f3ef 8310 	mrs	r3, PRIMASK
 800603e:	607b      	str	r3, [r7, #4]
    return(posture);
 8006040:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006042:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006044:	b672      	cpsid	i
    return(int_posture);
 8006046:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2201      	movs	r2, #1
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2201      	movs	r2, #1
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2200      	movs	r2, #0
 8006062:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006064:	4b15      	ldr	r3, [pc, #84]	; (80060bc <_tx_thread_shell_entry+0xdc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	4a14      	ldr	r2, [pc, #80]	; (80060bc <_tx_thread_shell_entry+0xdc>)
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800607a:	f3ef 8314 	mrs	r3, CONTROL
 800607e:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8006080:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f383 8814 	msr	CONTROL, r3
}
 8006096:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	2101      	movs	r1, #1
 80060a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060a4:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80060a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060a8:	f000 f9d8 	bl	800645c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80060ac:	bf00      	nop
 80060ae:	3730      	adds	r7, #48	; 0x30
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	2000ef8c 	.word	0x2000ef8c
 80060b8:	2000f02c 	.word	0x2000f02c
 80060bc:	2000f028 	.word	0x2000f028

080060c0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060c8:	f3ef 8310 	mrs	r3, PRIMASK
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80060d2:	b672      	cpsid	i
    return(int_posture);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80060d8:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <_tx_thread_sleep+0xf0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <_tx_thread_sleep+0x36>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80060f0:	2313      	movs	r3, #19
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	e056      	b.n	80061a4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80060f6:	f3ef 8305 	mrs	r3, IPSR
 80060fa:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80060fc:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060fe:	4b2d      	ldr	r3, [pc, #180]	; (80061b4 <_tx_thread_sleep+0xf4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4313      	orrs	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <_tx_thread_sleep+0x5a>
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f383 8810 	msr	PRIMASK, r3
}
 8006112:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006114:	2313      	movs	r3, #19
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
 8006118:	e044      	b.n	80061a4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <_tx_thread_sleep+0xf8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <_tx_thread_sleep+0x74>
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f383 8810 	msr	PRIMASK, r3
}
 800612c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800612e:	2313      	movs	r3, #19
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
 8006132:	e037      	b.n	80061a4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d108      	bne.n	800614c <_tx_thread_sleep+0x8c>
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f383 8810 	msr	PRIMASK, r3
}
 8006144:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
 800614a:	e02b      	b.n	80061a4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <_tx_thread_sleep+0xfc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <_tx_thread_sleep+0xa6>
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f383 8810 	msr	PRIMASK, r3
}
 800615e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8006160:	2313      	movs	r3, #19
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	e01e      	b.n	80061a4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	2204      	movs	r2, #4
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2201      	movs	r2, #1
 8006170:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	2200      	movs	r2, #0
 8006176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <_tx_thread_sleep+0xfc>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3301      	adds	r3, #1
 8006186:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <_tx_thread_sleep+0xfc>)
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f383 8810 	msr	PRIMASK, r3
}
 8006194:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006198:	f000 f960 	bl	800645c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3738      	adds	r7, #56	; 0x38
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	2000ef8c 	.word	0x2000ef8c
 80061b4:	20000008 	.word	0x20000008
 80061b8:	2000f0d8 	.word	0x2000f0d8
 80061bc:	2000f028 	.word	0x2000f028

080061c0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b089      	sub	sp, #36	; 0x24
 80061c4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <_tx_thread_system_preempt_check+0x64>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d121      	bne.n	8006216 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <_tx_thread_system_preempt_check+0x68>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80061d8:	4b14      	ldr	r3, [pc, #80]	; (800622c <_tx_thread_system_preempt_check+0x6c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d017      	beq.n	8006216 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80061e6:	4b12      	ldr	r3, [pc, #72]	; (8006230 <_tx_thread_system_preempt_check+0x70>)
 80061e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80061ee:	f3ef 8305 	mrs	r3, IPSR
 80061f2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80061f4:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10c      	bne.n	8006214 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80061fa:	f3ef 8310 	mrs	r3, PRIMASK
 80061fe:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006200:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8006202:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006204:	b662      	cpsie	i
}
 8006206:	bf00      	nop
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f383 8810 	msr	PRIMASK, r3
}
 8006212:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8006214:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8006216:	bf00      	nop
 8006218:	3724      	adds	r7, #36	; 0x24
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000f028 	.word	0x2000f028
 8006228:	2000ef8c 	.word	0x2000ef8c
 800622c:	2000ef90 	.word	0x2000ef90
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b096      	sub	sp, #88	; 0x58
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800623c:	f3ef 8310 	mrs	r3, PRIMASK
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8006244:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8006246:	b672      	cpsid	i
    return(int_posture);
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800624a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	334c      	adds	r3, #76	; 0x4c
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fe8b 	bl	8006f74 <_tx_timer_system_deactivate>
 800625e:	e002      	b.n	8006266 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006266:	4b75      	ldr	r3, [pc, #468]	; (800643c <_tx_thread_system_resume+0x208>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3b01      	subs	r3, #1
 800626c:	4a73      	ldr	r2, [pc, #460]	; (800643c <_tx_thread_system_resume+0x208>)
 800626e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 8096 	bne.w	80063a6 <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80aa 	beq.w	80063d8 <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 8085 	bne.w	8006398 <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800629a:	4a69      	ldr	r2, [pc, #420]	; (8006440 <_tx_thread_system_resume+0x20c>)
 800629c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d166      	bne.n	8006378 <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80062aa:	4965      	ldr	r1, [pc, #404]	; (8006440 <_tx_thread_system_resume+0x20c>)
 80062ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80062c0:	2201      	movs	r2, #1
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80062ca:	4b5e      	ldr	r3, [pc, #376]	; (8006444 <_tx_thread_system_resume+0x210>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d0:	4313      	orrs	r3, r2
 80062d2:	4a5c      	ldr	r2, [pc, #368]	; (8006444 <_tx_thread_system_resume+0x210>)
 80062d4:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80062d6:	4b5c      	ldr	r3, [pc, #368]	; (8006448 <_tx_thread_system_resume+0x214>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062dc:	429a      	cmp	r2, r3
 80062de:	d27b      	bcs.n	80063d8 <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80062e0:	4a59      	ldr	r2, [pc, #356]	; (8006448 <_tx_thread_system_resume+0x214>)
 80062e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e4:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80062e6:	4b59      	ldr	r3, [pc, #356]	; (800644c <_tx_thread_system_resume+0x218>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80062f2:	4a56      	ldr	r2, [pc, #344]	; (800644c <_tx_thread_system_resume+0x218>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	e06e      	b.n	80063d8 <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006300:	429a      	cmp	r2, r3
 8006302:	d269      	bcs.n	80063d8 <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8006304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d00b      	beq.n	8006328 <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8006310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	2201      	movs	r2, #1
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800631c:	4b4c      	ldr	r3, [pc, #304]	; (8006450 <_tx_thread_system_resume+0x21c>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006322:	4313      	orrs	r3, r2
 8006324:	4a4a      	ldr	r2, [pc, #296]	; (8006450 <_tx_thread_system_resume+0x21c>)
 8006326:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8006328:	4a48      	ldr	r2, [pc, #288]	; (800644c <_tx_thread_system_resume+0x218>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800633a:	4b40      	ldr	r3, [pc, #256]	; (800643c <_tx_thread_system_resume+0x208>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d174      	bne.n	8006430 <_tx_thread_system_resume+0x1fc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006346:	4b43      	ldr	r3, [pc, #268]	; (8006454 <_tx_thread_system_resume+0x220>)
 8006348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10c      	bne.n	8006374 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800635a:	f3ef 8310 	mrs	r3, PRIMASK
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8006362:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006364:	b662      	cpsie	i
}
 8006366:	bf00      	nop
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f383 8810 	msr	PRIMASK, r3
}
 8006372:	bf00      	nop
}
 8006374:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8006376:	e05b      	b.n	8006430 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800637e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006394:	621a      	str	r2, [r3, #32]
 8006396:	e01f      	b.n	80063d8 <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2203      	movs	r2, #3
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
 80063a4:	e018      	b.n	80063d8 <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d014      	beq.n	80063d8 <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d010      	beq.n	80063d8 <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
 80063ca:	e005      	b.n	80063d8 <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2203      	movs	r2, #3
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80063d8:	4b1f      	ldr	r3, [pc, #124]	; (8006458 <_tx_thread_system_resume+0x224>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80063de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f383 8810 	msr	PRIMASK, r3
}
 80063e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80063ea:	4b18      	ldr	r3, [pc, #96]	; (800644c <_tx_thread_system_resume+0x218>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d020      	beq.n	8006436 <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80063f4:	4b11      	ldr	r3, [pc, #68]	; (800643c <_tx_thread_system_resume+0x208>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80063fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11a      	bne.n	8006436 <_tx_thread_system_resume+0x202>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006400:	4b14      	ldr	r3, [pc, #80]	; (8006454 <_tx_thread_system_resume+0x220>)
 8006402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006406:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006408:	f3ef 8305 	mrs	r3, IPSR
 800640c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800640e:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10f      	bne.n	8006434 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006414:	f3ef 8310 	mrs	r3, PRIMASK
 8006418:	613b      	str	r3, [r7, #16]
    return(posture);
 800641a:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800641c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800641e:	b662      	cpsie	i
}
 8006420:	bf00      	nop
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f383 8810 	msr	PRIMASK, r3
}
 800642c:	bf00      	nop
}
 800642e:	e001      	b.n	8006434 <_tx_thread_system_resume+0x200>
                                return;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <_tx_thread_system_resume+0x202>
 8006434:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8006436:	3758      	adds	r7, #88	; 0x58
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	2000f028 	.word	0x2000f028
 8006440:	2000efa8 	.word	0x2000efa8
 8006444:	2000ef9c 	.word	0x2000ef9c
 8006448:	2000efa4 	.word	0x2000efa4
 800644c:	2000ef90 	.word	0x2000ef90
 8006450:	2000efa0 	.word	0x2000efa0
 8006454:	e000ed04 	.word	0xe000ed04
 8006458:	2000ef8c 	.word	0x2000ef8c

0800645c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b0a0      	sub	sp, #128	; 0x80
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006464:	4b5a      	ldr	r3, [pc, #360]	; (80065d0 <_tx_thread_system_suspend+0x174>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800646a:	f3ef 8310 	mrs	r3, PRIMASK
 800646e:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8006472:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8006474:	b672      	cpsid	i
    return(int_posture);
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006478:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800647e:	429a      	cmp	r2, r3
 8006480:	d112      	bne.n	80064a8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006486:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d004      	beq.n	80064a0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	334c      	adds	r3, #76	; 0x4c
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fd08 	bl	8006eb0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	4a4b      	ldr	r2, [pc, #300]	; (80065d4 <_tx_thread_system_suspend+0x178>)
 80064a6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80064a8:	4b4b      	ldr	r3, [pc, #300]	; (80065d8 <_tx_thread_system_suspend+0x17c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	4a4a      	ldr	r2, [pc, #296]	; (80065d8 <_tx_thread_system_suspend+0x17c>)
 80064b0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	f040 8122 	bne.w	8006700 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80064ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d027      	beq.n	8006526 <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80064dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80064e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064e6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80064e8:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <_tx_thread_system_suspend+0x180>)
 80064ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	f040 808b 	bne.w	800660e <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80064f8:	4938      	ldr	r1, [pc, #224]	; (80065dc <_tx_thread_system_suspend+0x180>)
 80064fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006502:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <_tx_thread_system_suspend+0x184>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8081 	beq.w	800660e <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800650c:	2201      	movs	r2, #1
 800650e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006516:	4b32      	ldr	r3, [pc, #200]	; (80065e0 <_tx_thread_system_suspend+0x184>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800651c:	43db      	mvns	r3, r3
 800651e:	4013      	ands	r3, r2
 8006520:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <_tx_thread_system_suspend+0x184>)
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e073      	b.n	800660e <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <_tx_thread_system_suspend+0x180>)
 8006528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800652a:	2100      	movs	r1, #0
 800652c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8006530:	2201      	movs	r2, #1
 8006532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800653a:	4b2a      	ldr	r3, [pc, #168]	; (80065e4 <_tx_thread_system_suspend+0x188>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006540:	43db      	mvns	r3, r3
 8006542:	4013      	ands	r3, r2
 8006544:	4a27      	ldr	r2, [pc, #156]	; (80065e4 <_tx_thread_system_suspend+0x188>)
 8006546:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <_tx_thread_system_suspend+0x184>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8006550:	2201      	movs	r2, #1
 8006552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800655a:	4b21      	ldr	r3, [pc, #132]	; (80065e0 <_tx_thread_system_suspend+0x184>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006560:	43db      	mvns	r3, r3
 8006562:	4013      	ands	r3, r2
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <_tx_thread_system_suspend+0x184>)
 8006566:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8006568:	2300      	movs	r3, #0
 800656a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800656c:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <_tx_thread_system_suspend+0x188>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8006572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006574:	2b00      	cmp	r3, #0
 8006576:	d13d      	bne.n	80065f4 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006578:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <_tx_thread_system_suspend+0x18c>)
 800657a:	2220      	movs	r2, #32
 800657c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800657e:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <_tx_thread_system_suspend+0x190>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006586:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	f383 8810 	msr	PRIMASK, r3
}
 800658e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <_tx_thread_system_suspend+0x17c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8006596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006598:	2b00      	cmp	r3, #0
 800659a:	f040 80db 	bne.w	8006754 <_tx_thread_system_suspend+0x2f8>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <_tx_thread_system_suspend+0x194>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80065a6:	f3ef 8305 	mrs	r3, IPSR
 80065aa:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 80065ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80065b2:	f3ef 8310 	mrs	r3, PRIMASK
 80065b6:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 80065b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 80065bc:	b662      	cpsie	i
}
 80065be:	bf00      	nop
 80065c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	bf00      	nop
}
 80065cc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80065ce:	e0c1      	b.n	8006754 <_tx_thread_system_suspend+0x2f8>
 80065d0:	2000ef8c 	.word	0x2000ef8c
 80065d4:	2000f5cc 	.word	0x2000f5cc
 80065d8:	2000f028 	.word	0x2000f028
 80065dc:	2000efa8 	.word	0x2000efa8
 80065e0:	2000efa0 	.word	0x2000efa0
 80065e4:	2000ef9c 	.word	0x2000ef9c
 80065e8:	2000efa4 	.word	0x2000efa4
 80065ec:	2000ef90 	.word	0x2000ef90
 80065f0:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80065f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f6:	fa93 f3a3 	rbit	r3, r3
 80065fa:	663b      	str	r3, [r7, #96]	; 0x60
 80065fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065fe:	fab3 f383 	clz	r3, r3
 8006602:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8006604:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006608:	4413      	add	r3, r2
 800660a:	4a56      	ldr	r2, [pc, #344]	; (8006764 <_tx_thread_system_suspend+0x308>)
 800660c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800660e:	4b56      	ldr	r3, [pc, #344]	; (8006768 <_tx_thread_system_suspend+0x30c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d173      	bne.n	8006700 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006618:	4b52      	ldr	r3, [pc, #328]	; (8006764 <_tx_thread_system_suspend+0x308>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a53      	ldr	r2, [pc, #332]	; (800676c <_tx_thread_system_suspend+0x310>)
 800661e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006622:	4a51      	ldr	r2, [pc, #324]	; (8006768 <_tx_thread_system_suspend+0x30c>)
 8006624:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006626:	4b52      	ldr	r3, [pc, #328]	; (8006770 <_tx_thread_system_suspend+0x314>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d043      	beq.n	80066b6 <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800662e:	4b51      	ldr	r3, [pc, #324]	; (8006774 <_tx_thread_system_suspend+0x318>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	4a4f      	ldr	r2, [pc, #316]	; (8006774 <_tx_thread_system_suspend+0x318>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f383 8810 	msr	PRIMASK, r3
}
 8006642:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006644:	f3ef 8310 	mrs	r3, PRIMASK
 8006648:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800664e:	b672      	cpsid	i
    return(int_posture);
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8006652:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8006654:	4b47      	ldr	r3, [pc, #284]	; (8006774 <_tx_thread_system_suspend+0x318>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	4a46      	ldr	r2, [pc, #280]	; (8006774 <_tx_thread_system_suspend+0x318>)
 800665c:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 800665e:	2300      	movs	r3, #0
 8006660:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8006662:	4b43      	ldr	r3, [pc, #268]	; (8006770 <_tx_thread_system_suspend+0x314>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8006668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800666a:	fa93 f3a3 	rbit	r3, r3
 800666e:	663b      	str	r3, [r7, #96]	; 0x60
 8006670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006672:	fab3 f383 	clz	r3, r3
 8006676:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8006678:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800667a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800667c:	4413      	add	r3, r2
 800667e:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8006680:	4a3a      	ldr	r2, [pc, #232]	; (800676c <_tx_thread_system_suspend+0x310>)
 8006682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800668a:	4b36      	ldr	r3, [pc, #216]	; (8006764 <_tx_thread_system_suspend+0x308>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d811      	bhi.n	80066b6 <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8006692:	4a36      	ldr	r2, [pc, #216]	; (800676c <_tx_thread_system_suspend+0x310>)
 8006694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669a:	4a33      	ldr	r2, [pc, #204]	; (8006768 <_tx_thread_system_suspend+0x30c>)
 800669c:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800669e:	2201      	movs	r2, #1
 80066a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80066a8:	4b31      	ldr	r3, [pc, #196]	; (8006770 <_tx_thread_system_suspend+0x314>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ae:	43db      	mvns	r3, r3
 80066b0:	4013      	ands	r3, r2
 80066b2:	4a2f      	ldr	r2, [pc, #188]	; (8006770 <_tx_thread_system_suspend+0x314>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	f383 8810 	msr	PRIMASK, r3
}
 80066c0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80066c2:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <_tx_thread_system_suspend+0x318>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 80066c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d144      	bne.n	8006758 <_tx_thread_system_suspend+0x2fc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80066ce:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <_tx_thread_system_suspend+0x31c>)
 80066d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80066d6:	f3ef 8305 	mrs	r3, IPSR
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10c      	bne.n	80066fc <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066e2:	f3ef 8310 	mrs	r3, PRIMASK
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80066ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80066ec:	b662      	cpsie	i
}
 80066ee:	bf00      	nop
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f383 8810 	msr	PRIMASK, r3
}
 80066fa:	bf00      	nop
}
 80066fc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80066fe:	e02b      	b.n	8006758 <_tx_thread_system_suspend+0x2fc>
 8006700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006702:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f383 8810 	msr	PRIMASK, r3
}
 800670a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <_tx_thread_system_suspend+0x30c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006712:	429a      	cmp	r2, r3
 8006714:	d022      	beq.n	800675c <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006716:	4b17      	ldr	r3, [pc, #92]	; (8006774 <_tx_thread_system_suspend+0x318>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 800671c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11c      	bne.n	800675c <_tx_thread_system_suspend+0x300>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <_tx_thread_system_suspend+0x31c>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800672a:	f3ef 8305 	mrs	r3, IPSR
 800672e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006730:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10c      	bne.n	8006750 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006736:	f3ef 8310 	mrs	r3, PRIMASK
 800673a:	613b      	str	r3, [r7, #16]
    return(posture);
 800673c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800673e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006740:	b662      	cpsie	i
}
 8006742:	bf00      	nop
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f383 8810 	msr	PRIMASK, r3
}
 800674e:	bf00      	nop
}
 8006750:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8006752:	e003      	b.n	800675c <_tx_thread_system_suspend+0x300>
                return;
 8006754:	bf00      	nop
 8006756:	e002      	b.n	800675e <_tx_thread_system_suspend+0x302>
            return;
 8006758:	bf00      	nop
 800675a:	e000      	b.n	800675e <_tx_thread_system_suspend+0x302>
    return;
 800675c:	bf00      	nop
}
 800675e:	3780      	adds	r7, #128	; 0x80
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	2000efa4 	.word	0x2000efa4
 8006768:	2000ef90 	.word	0x2000ef90
 800676c:	2000efa8 	.word	0x2000efa8
 8006770:	2000efa0 	.word	0x2000efa0
 8006774:	2000f028 	.word	0x2000f028
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b0ac      	sub	sp, #176	; 0xb0
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 8006784:	2300      	movs	r3, #0
 8006786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800678a:	f3ef 8310 	mrs	r3, PRIMASK
 800678e:	67bb      	str	r3, [r7, #120]	; 0x78
    return(posture);
 8006790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    int_posture = __get_interrupt_posture();
 8006792:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("CPSID i" : : : "memory");
 8006794:	b672      	cpsid	i
    return(int_posture);
 8006796:	6f7b      	ldr	r3, [r7, #116]	; 0x74

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 8006798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	334c      	adds	r3, #76	; 0x4c
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fbe7 	bl	8006f74 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d10a      	bne.n	80067c4 <_tx_thread_terminate+0x48>
 80067ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b2:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b6:	f383 8810 	msr	PRIMASK, r3
}
 80067ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067c2:	e157      	b.n	8006a74 <_tx_thread_terminate+0x2f8>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	f000 814c 	beq.w	8006a66 <_tx_thread_terminate+0x2ea>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80067ce:	4bad      	ldr	r3, [pc, #692]	; (8006a84 <_tx_thread_terminate+0x308>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4aab      	ldr	r2, [pc, #684]	; (8006a84 <_tx_thread_terminate+0x308>)
 80067d6:	6013      	str	r3, [r2, #0]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d17b      	bne.n	80068e2 <_tx_thread_terminate+0x166>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 80067fc:	4ba1      	ldr	r3, [pc, #644]	; (8006a84 <_tx_thread_terminate+0x308>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	4aa0      	ldr	r2, [pc, #640]	; (8006a84 <_tx_thread_terminate+0x308>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680a:	66bb      	str	r3, [r7, #104]	; 0x68
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800680c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800680e:	f383 8810 	msr	PRIMASK, r3
}
 8006812:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006814:	f3ef 8305 	mrs	r3, IPSR
 8006818:	66fb      	str	r3, [r7, #108]	; 0x6c
    return(ipsr_value);
 800681a:	6efa      	ldr	r2, [r7, #108]	; 0x6c

            /* Restore interrupts.  */
            TX_RESTORE

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 800681c:	4b9a      	ldr	r3, [pc, #616]	; (8006a88 <_tx_thread_terminate+0x30c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800682a:	2b00      	cmp	r3, #0
 800682c:	d118      	bne.n	8006860 <_tx_thread_terminate+0xe4>
 800682e:	4b97      	ldr	r3, [pc, #604]	; (8006a8c <_tx_thread_terminate+0x310>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d113      	bne.n	8006860 <_tx_thread_terminate+0xe4>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8006838:	f3ef 8314 	mrs	r3, CONTROL
 800683c:	663b      	str	r3, [r7, #96]	; 0x60
    return(control_value);
 800683e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006848:	f023 0304 	bic.w	r3, r3, #4
 800684c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006854:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8006856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006858:	f383 8814 	msr	CONTROL, r3
}
 800685c:	bf00      	nop
 800685e:	e02a      	b.n	80068b6 <_tx_thread_terminate+0x13a>
 8006860:	4b8b      	ldr	r3, [pc, #556]	; (8006a90 <_tx_thread_terminate+0x314>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006878:	2b01      	cmp	r3, #1
 800687a:	d11c      	bne.n	80068b6 <_tx_thread_terminate+0x13a>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800687c:	f3ef 8314 	mrs	r3, CONTROL
 8006880:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(control_value);
 8006882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800688e:	eeb0 0a40 	vmov.f32	s0, s0
 8006892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10e      	bne.n	80068b6 <_tx_thread_terminate+0x13a>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8006898:	f3ef 8314 	mrs	r3, CONTROL
 800689c:	657b      	str	r3, [r7, #84]	; 0x54
    return(control_value);
 800689e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068a4:	f023 0304 	bic.w	r3, r3, #4
 80068a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068ac:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80068ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b0:	f383 8814 	msr	CONTROL, r3
}
 80068b4:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 80068b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <_tx_thread_terminate+0x14c>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80068be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fdc7 	bl	800645c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80068ce:	f3ef 8310 	mrs	r3, PRIMASK
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 80068d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 80068d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 80068d8:	b672      	cpsid	i
    return(int_posture);
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

            /* Disable interrupts.  */
            TX_DISABLE
 80068dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068e0:	e09d      	b.n	8006a1e <_tx_thread_terminate+0x2a2>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006904:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006908:	f383 8810 	msr	PRIMASK, r3
}
 800690c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 800690e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <_tx_thread_terminate+0x1a6>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800691a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006922:	f3ef 8310 	mrs	r3, PRIMASK
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8006928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    int_posture = __get_interrupt_posture();
 800692a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSID i" : : : "memory");
 800692c:	b672      	cpsid	i
    return(int_posture);
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8006930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
 800693a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800693e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006948:	f3ef 8305 	mrs	r3, IPSR
 800694c:	647b      	str	r3, [r7, #68]	; 0x44
    return(ipsr_value);
 800694e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 8006950:	4b4d      	ldr	r3, [pc, #308]	; (8006a88 <_tx_thread_terminate+0x30c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800695a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800695e:	2b00      	cmp	r3, #0
 8006960:	d118      	bne.n	8006994 <_tx_thread_terminate+0x218>
 8006962:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <_tx_thread_terminate+0x310>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d113      	bne.n	8006994 <_tx_thread_terminate+0x218>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800696c:	f3ef 8314 	mrs	r3, CONTROL
 8006970:	633b      	str	r3, [r7, #48]	; 0x30
    return(control_value);
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006978:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800697c:	f023 0304 	bic.w	r3, r3, #4
 8006980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	f383 8814 	msr	CONTROL, r3
}
 8006990:	bf00      	nop
 8006992:	e032      	b.n	80069fa <_tx_thread_terminate+0x27e>
 8006994:	4b3e      	ldr	r3, [pc, #248]	; (8006a90 <_tx_thread_terminate+0x314>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800699c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d124      	bne.n	80069fa <_tx_thread_terminate+0x27e>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80069b0:	f3ef 8314 	mrs	r3, CONTROL
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(control_value);
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069c8:	eeb0 0a40 	vmov.f32	s0, s0
 80069cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d112      	bne.n	80069fa <_tx_thread_terminate+0x27e>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80069d4:	f3ef 8314 	mrs	r3, CONTROL
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
    return(control_value);
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e4:	f023 0304 	bic.w	r3, r3, #4
 80069e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	f383 8814 	msr	CONTROL, r3
}
 80069f8:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 80069fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d004      	beq.n	8006a0c <_tx_thread_terminate+0x290>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8006a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a06:	2101      	movs	r1, #1
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a10:	623b      	str	r3, [r7, #32]
    return(posture);
 8006a12:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006a14:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a16:	b672      	cpsid	i
    return(int_posture);
 8006a18:	69fb      	ldr	r3, [r7, #28]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8006a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a22:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f383 8810 	msr	PRIMASK, r3
}
 8006a2a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 8006a2c:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <_tx_thread_terminate+0x318>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <_tx_thread_terminate+0x2c0>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 8006a34:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <_tx_thread_terminate+0x318>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a40:	613b      	str	r3, [r7, #16]
    return(posture);
 8006a42:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8006a44:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a46:	b672      	cpsid	i
    return(int_posture);
 8006a48:	68fb      	ldr	r3, [r7, #12]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8006a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <_tx_thread_terminate+0x308>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <_tx_thread_terminate+0x308>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a5c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f383 8810 	msr	PRIMASK, r3
}
 8006a64:	e006      	b.n	8006a74 <_tx_thread_terminate+0x2f8>
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f383 8810 	msr	PRIMASK, r3
}
 8006a72:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006a74:	f7ff fba4 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 8006a78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	37b0      	adds	r7, #176	; 0xb0
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	2000f028 	.word	0x2000f028
 8006a88:	20000008 	.word	0x20000008
 8006a8c:	2000ef8c 	.word	0x2000ef8c
 8006a90:	e000ef34 	.word	0xe000ef34
 8006a94:	2000f02c 	.word	0x2000f02c

08006a98 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006a9e:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <_tx_thread_time_slice+0x8c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006aac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006aae:	b672      	cpsid	i
    return(int_posture);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8006ab2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <_tx_thread_time_slice+0x90>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d024      	beq.n	8006b0a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d120      	bne.n	8006b0a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <_tx_thread_time_slice+0x94>)
 8006ad6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d013      	beq.n	8006b0a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d10d      	bne.n	8006b0a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	6a12      	ldr	r2, [r2, #32]
 8006af6:	490e      	ldr	r1, [pc, #56]	; (8006b30 <_tx_thread_time_slice+0x98>)
 8006af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <_tx_thread_time_slice+0x9c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0b      	ldr	r2, [pc, #44]	; (8006b30 <_tx_thread_time_slice+0x98>)
 8006b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b06:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <_tx_thread_time_slice+0xa0>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f383 8810 	msr	PRIMASK, r3
}
 8006b14:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000ef8c 	.word	0x2000ef8c
 8006b28:	2000f038 	.word	0x2000f038
 8006b2c:	2000f5cc 	.word	0x2000f5cc
 8006b30:	2000efa8 	.word	0x2000efa8
 8006b34:	2000efa4 	.word	0x2000efa4
 8006b38:	2000ef90 	.word	0x2000ef90

08006b3c <_tx_thread_time_slice_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b08b      	sub	sp, #44	; 0x2c
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b48:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4c:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006b50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b52:	b672      	cpsid	i
    return(int_posture);
 8006b54:	69bb      	ldr	r3, [r7, #24]

TX_THREAD       *current_thread;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Log this kernel call.  */
    TX_EL_THREAD_TIME_SLICE_CHANGE_INSERT

    /* Return the old time slice.  */
    *old_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]

    /* Setup the new time-slice.  */
    thread_ptr -> tx_thread_time_slice =      new_time_slice;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =  new_time_slice;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	61da      	str	r2, [r3, #28]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <_tx_thread_time_slice_change+0x60>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	623b      	str	r3, [r7, #32]

    /* Determine if this thread is the currently executing thread.  */
    if (thread_ptr == current_thread)
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d102      	bne.n	8006b80 <_tx_thread_time_slice_change+0x44>
    {

        /* Yes, update the time-slice countdown variable.  */
        _tx_timer_time_slice =  new_time_slice;
 8006b7a:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <_tx_thread_time_slice_change+0x64>)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	372c      	adds	r7, #44	; 0x2c
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	2000ef8c 	.word	0x2000ef8c
 8006ba0:	2000f5cc 	.word	0x2000f5cc

08006ba4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb4:	617b      	str	r3, [r7, #20]
    return(posture);
 8006bb6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006bb8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006bba:	b672      	cpsid	i
    return(int_posture);
 8006bbc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006bbe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d10e      	bne.n	8006be6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8006bc8:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <_tx_thread_timeout+0x74>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	4a12      	ldr	r2, [pc, #72]	; (8006c18 <_tx_thread_timeout+0x74>)
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f383 8810 	msr	PRIMASK, r3
}
 8006bdc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be0:	f7ff fb28 	bl	8006234 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8006be4:	e013      	b.n	8006c0e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bea:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f383 8810 	msr	PRIMASK, r3
}
 8006bfe:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	69b9      	ldr	r1, [r7, #24]
 8006c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c0c:	4798      	blx	r3
}
 8006c0e:	bf00      	nop
 8006c10:	3728      	adds	r7, #40	; 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	2000f028 	.word	0x2000f028

08006c1c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08a      	sub	sp, #40	; 0x28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8006c2a:	2234      	movs	r2, #52	; 0x34
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f004 ffa6 	bl	800bb80 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c44:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006c52:	f3ef 8310 	mrs	r3, PRIMASK
 8006c56:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006c58:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006c5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006c5c:	b672      	cpsid	i
    return(int_posture);
 8006c5e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8006c60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <_tx_timer_create+0xbc>)
 8006c66:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8006c68:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <_tx_timer_create+0xc0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d109      	bne.n	8006c84 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8006c70:	4a1b      	ldr	r2, [pc, #108]	; (8006ce0 <_tx_timer_create+0xc4>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	629a      	str	r2, [r3, #40]	; 0x28
 8006c82:	e011      	b.n	8006ca8 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8006c84:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <_tx_timer_create+0xc4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <_tx_timer_create+0xc0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	4a0b      	ldr	r2, [pc, #44]	; (8006cdc <_tx_timer_create+0xc0>)
 8006cb0:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d104      	bne.n	8006cc2 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f8f7 	bl	8006eb0 <_tx_timer_system_activate>
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f383 8810 	msr	PRIMASK, r3
}
 8006ccc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3728      	adds	r7, #40	; 0x28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	4154494d 	.word	0x4154494d
 8006cdc:	2000f0d0 	.word	0x2000f0d0
 8006ce0:	2000f0cc 	.word	0x2000f0cc

08006ce4 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006cec:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf0:	613b      	str	r3, [r7, #16]
    return(posture);
 8006cf2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8006cf4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006cf6:	b672      	cpsid	i
    return(int_posture);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 8006cfa:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3308      	adds	r3, #8
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f933 	bl	8006f74 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 8006d14:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <_tx_timer_delete+0x88>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <_tx_timer_delete+0x88>)
 8006d1c:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <_tx_timer_delete+0x88>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 8006d26:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <_tx_timer_delete+0x8c>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e013      	b.n	8006d56 <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <_tx_timer_delete+0x8c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d102      	bne.n	8006d56 <_tx_timer_delete+0x72>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 8006d50:	4a07      	ldr	r2, [pc, #28]	; (8006d70 <_tx_timer_delete+0x8c>)
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f383 8810 	msr	PRIMASK, r3
}
 8006d60:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	2000f0d0 	.word	0x2000f0d0
 8006d70:	2000f0cc 	.word	0x2000f0cc

08006d74 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7e:	607b      	str	r3, [r7, #4]
    return(posture);
 8006d80:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006d82:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006d84:	b672      	cpsid	i
    return(int_posture);
 8006d86:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8006d88:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <_tx_timer_expiration_process+0x3c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	4a07      	ldr	r2, [pc, #28]	; (8006db0 <_tx_timer_expiration_process+0x3c>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f383 8810 	msr	PRIMASK, r3
}
 8006d9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8006da0:	4804      	ldr	r0, [pc, #16]	; (8006db4 <_tx_timer_expiration_process+0x40>)
 8006da2:	f7ff fa47 	bl	8006234 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	2000f028 	.word	0x2000f028
 8006db4:	2000f0d8 	.word	0x2000f0d8

08006db8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b089      	sub	sp, #36	; 0x24
 8006dbc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8006dbe:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <_tx_timer_initialize+0xa8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8006dc4:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <_tx_timer_initialize+0xac>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006dca:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <_tx_timer_initialize+0xb0>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8006dd0:	4b26      	ldr	r3, [pc, #152]	; (8006e6c <_tx_timer_initialize+0xb4>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8006dd6:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <_tx_timer_initialize+0xb8>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	2100      	movs	r1, #0
 8006de0:	4824      	ldr	r0, [pc, #144]	; (8006e74 <_tx_timer_initialize+0xbc>)
 8006de2:	f004 fecd 	bl	800bb80 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <_tx_timer_initialize+0xc0>)
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <_tx_timer_initialize+0xbc>)
 8006dea:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8006dec:	4b23      	ldr	r3, [pc, #140]	; (8006e7c <_tx_timer_initialize+0xc4>)
 8006dee:	4a21      	ldr	r2, [pc, #132]	; (8006e74 <_tx_timer_initialize+0xbc>)
 8006df0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8006df2:	4b23      	ldr	r3, [pc, #140]	; (8006e80 <_tx_timer_initialize+0xc8>)
 8006df4:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <_tx_timer_initialize+0xcc>)
 8006df6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8006df8:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <_tx_timer_initialize+0xc8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <_tx_timer_initialize+0xc8>)
 8006e00:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8006e02:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <_tx_timer_initialize+0xd0>)
 8006e04:	4a21      	ldr	r2, [pc, #132]	; (8006e8c <_tx_timer_initialize+0xd4>)
 8006e06:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8006e08:	4b21      	ldr	r3, [pc, #132]	; (8006e90 <_tx_timer_initialize+0xd8>)
 8006e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8006e10:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <_tx_timer_initialize+0xdc>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <_tx_timer_initialize+0xd0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1d      	ldr	r2, [pc, #116]	; (8006e90 <_tx_timer_initialize+0xd8>)
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	491d      	ldr	r1, [pc, #116]	; (8006e94 <_tx_timer_initialize+0xdc>)
 8006e20:	6809      	ldr	r1, [r1, #0]
 8006e22:	481c      	ldr	r0, [pc, #112]	; (8006e94 <_tx_timer_initialize+0xdc>)
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	2400      	movs	r4, #0
 8006e28:	9405      	str	r4, [sp, #20]
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	9404      	str	r4, [sp, #16]
 8006e2e:	9003      	str	r0, [sp, #12]
 8006e30:	9102      	str	r1, [sp, #8]
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <_tx_timer_initialize+0xe0>)
 8006e38:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <_tx_timer_initialize+0xe4>)
 8006e3a:	4919      	ldr	r1, [pc, #100]	; (8006ea0 <_tx_timer_initialize+0xe8>)
 8006e3c:	4819      	ldr	r0, [pc, #100]	; (8006ea4 <_tx_timer_initialize+0xec>)
 8006e3e:	f7fe fecd 	bl	8005bdc <_tx_thread_create>
 8006e42:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8006e4a:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <_tx_timer_initialize+0xf0>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8006e50:	4b16      	ldr	r3, [pc, #88]	; (8006eac <_tx_timer_initialize+0xf4>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd90      	pop	{r4, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	2000f034 	.word	0x2000f034
 8006e64:	2000f5cc 	.word	0x2000f5cc
 8006e68:	2000f038 	.word	0x2000f038
 8006e6c:	2000f0c8 	.word	0x2000f0c8
 8006e70:	2000f0d4 	.word	0x2000f0d4
 8006e74:	2000f03c 	.word	0x2000f03c
 8006e78:	2000f0bc 	.word	0x2000f0bc
 8006e7c:	2000f0c4 	.word	0x2000f0c4
 8006e80:	2000f0c0 	.word	0x2000f0c0
 8006e84:	2000f0b8 	.word	0x2000f0b8
 8006e88:	2000f1c0 	.word	0x2000f1c0
 8006e8c:	2000f1cc 	.word	0x2000f1cc
 8006e90:	2000f1c4 	.word	0x2000f1c4
 8006e94:	2000f1c8 	.word	0x2000f1c8
 8006e98:	4154494d 	.word	0x4154494d
 8006e9c:	08006fe5 	.word	0x08006fe5
 8006ea0:	0800c98c 	.word	0x0800c98c
 8006ea4:	2000f0d8 	.word	0x2000f0d8
 8006ea8:	2000f0cc 	.word	0x2000f0cc
 8006eac:	2000f0d0 	.word	0x2000f0d0

08006eb0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d04a      	beq.n	8006f5a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d046      	beq.n	8006f5a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d142      	bne.n	8006f5a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d902      	bls.n	8006ee0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8006eda:	231f      	movs	r3, #31
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e002      	b.n	8006ee6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8006ee6:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <_tx_timer_system_activate+0xb8>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8006ef2:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <_tx_timer_system_activate+0xbc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d30b      	bcc.n	8006f14 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8006efc:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <_tx_timer_system_activate+0xbc>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	109b      	asrs	r3, r3, #2
 8006f06:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8006f08:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <_tx_timer_system_activate+0xc0>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e011      	b.n	8006f54 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8006f5a:	bf00      	nop
 8006f5c:	3724      	adds	r7, #36	; 0x24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	2000f0c4 	.word	0x2000f0c4
 8006f6c:	2000f0c0 	.word	0x2000f0c0
 8006f70:	2000f0bc 	.word	0x2000f0bc

08006f74 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d026      	beq.n	8006fd6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d108      	bne.n	8006fa8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d117      	bne.n	8006fd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e013      	b.n	8006fd0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d105      	bne.n	8006fd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	619a      	str	r2, [r3, #24]
    }
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b098      	sub	sp, #96	; 0x60
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8006fec:	2300      	movs	r3, #0
 8006fee:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a73      	ldr	r2, [pc, #460]	; (80071c0 <_tx_timer_thread_entry+0x1dc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	f040 80de 	bne.w	80071b6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8007000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8007002:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007004:	b672      	cpsid	i
    return(int_posture);
 8007006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007008:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800700a:	4b6e      	ldr	r3, [pc, #440]	; (80071c4 <_tx_timer_thread_entry+0x1e0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f107 020c 	add.w	r2, r7, #12
 800701e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007020:	4b68      	ldr	r3, [pc, #416]	; (80071c4 <_tx_timer_thread_entry+0x1e0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8007028:	4b66      	ldr	r3, [pc, #408]	; (80071c4 <_tx_timer_thread_entry+0x1e0>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	4a65      	ldr	r2, [pc, #404]	; (80071c4 <_tx_timer_thread_entry+0x1e0>)
 8007030:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8007032:	4b64      	ldr	r3, [pc, #400]	; (80071c4 <_tx_timer_thread_entry+0x1e0>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b64      	ldr	r3, [pc, #400]	; (80071c8 <_tx_timer_thread_entry+0x1e4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d103      	bne.n	8007046 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800703e:	4b63      	ldr	r3, [pc, #396]	; (80071cc <_tx_timer_thread_entry+0x1e8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a60      	ldr	r2, [pc, #384]	; (80071c4 <_tx_timer_thread_entry+0x1e0>)
 8007044:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8007046:	4b62      	ldr	r3, [pc, #392]	; (80071d0 <_tx_timer_thread_entry+0x1ec>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007058:	f3ef 8310 	mrs	r3, PRIMASK
 800705c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8007062:	b672      	cpsid	i
    return(int_posture);
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8007066:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8007068:	e07f      	b.n	800716a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8007078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800707a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707c:	429a      	cmp	r2, r3
 800707e:	d102      	bne.n	8007086 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e00e      	b.n	80070a4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8007086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800708c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800708e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007090:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007096:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8007098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709a:	f107 020c 	add.w	r2, r7, #12
 800709e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80070a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d911      	bls.n	80070d0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80070ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80070b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80070bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80070c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070c8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80070ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	e01a      	b.n	8007106 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80070d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80070dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80070ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ee:	f107 0208 	add.w	r2, r7, #8
 80070f2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80070f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070f8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80070fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	e002      	b.n	8007106 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007102:	2200      	movs	r2, #0
 8007104:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8007106:	4a33      	ldr	r2, [pc, #204]	; (80071d4 <_tx_timer_thread_entry+0x1f0>)
 8007108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	f383 8810 	msr	PRIMASK, r3
}
 8007116:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800711e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007120:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007122:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007124:	f3ef 8310 	mrs	r3, PRIMASK
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800712e:	b672      	cpsid	i
    return(int_posture);
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007132:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8007134:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <_tx_timer_thread_entry+0x1f0>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800713e:	429a      	cmp	r2, r3
 8007140:	d105      	bne.n	800714e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8007142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007144:	2200      	movs	r2, #0
 8007146:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8007148:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800714a:	f7ff feb1 	bl	8006eb0 <_tx_timer_system_activate>
 800714e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007150:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800715a:	f3ef 8310 	mrs	r3, PRIMASK
 800715e:	623b      	str	r3, [r7, #32]
    return(posture);
 8007160:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007162:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007164:	b672      	cpsid	i
    return(int_posture);
 8007166:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007168:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f47f af7c 	bne.w	800706a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8007172:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <_tx_timer_thread_entry+0x1ec>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d116      	bne.n	80071a8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800717a:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <_tx_timer_thread_entry+0x1f4>)
 800717c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800717e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007180:	2203      	movs	r2, #3
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007186:	2201      	movs	r2, #1
 8007188:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <_tx_timer_thread_entry+0x1f8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a12      	ldr	r2, [pc, #72]	; (80071dc <_tx_timer_thread_entry+0x1f8>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007196:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f383 8810 	msr	PRIMASK, r3
}
 800719e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80071a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80071a2:	f7ff f95b 	bl	800645c <_tx_thread_system_suspend>
 80071a6:	e728      	b.n	8006ffa <_tx_timer_thread_entry+0x16>
 80071a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f383 8810 	msr	PRIMASK, r3
}
 80071b2:	bf00      	nop
            TX_DISABLE
 80071b4:	e721      	b.n	8006ffa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80071b6:	bf00      	nop
 80071b8:	3760      	adds	r7, #96	; 0x60
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	4154494d 	.word	0x4154494d
 80071c4:	2000f0c4 	.word	0x2000f0c4
 80071c8:	2000f0c0 	.word	0x2000f0c0
 80071cc:	2000f0bc 	.word	0x2000f0bc
 80071d0:	2000f0c8 	.word	0x2000f0c8
 80071d4:	2000f0d4 	.word	0x2000f0d4
 80071d8:	2000f0d8 	.word	0x2000f0d8
 80071dc:	2000f028 	.word	0x2000f028

080071e0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80071f8:	2302      	movs	r3, #2
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
 80071fc:	e029      	b.n	8007252 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2d      	ldr	r2, [pc, #180]	; (80072b8 <_txe_byte_allocate+0xd8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d002      	beq.n	800720e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007208:	2302      	movs	r3, #2
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	e021      	b.n	8007252 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8007214:	2303      	movs	r3, #3
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
 8007218:	e01b      	b.n	8007252 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007220:	2305      	movs	r3, #5
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
 8007224:	e015      	b.n	8007252 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d902      	bls.n	8007236 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007230:	2305      	movs	r3, #5
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
 8007234:	e00d      	b.n	8007252 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800723c:	f3ef 8305 	mrs	r3, IPSR
 8007240:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007242:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007244:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <_txe_byte_allocate+0xdc>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4313      	orrs	r3, r2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800724e:	2304      	movs	r3, #4
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d108      	bne.n	800726a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007258:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <_txe_byte_allocate+0xe0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	4a18      	ldr	r2, [pc, #96]	; (80072c4 <_txe_byte_allocate+0xe4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d101      	bne.n	800726a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007266:	2313      	movs	r3, #19
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d114      	bne.n	800729a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007270:	f3ef 8305 	mrs	r3, IPSR
 8007274:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007276:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007278:	4b10      	ldr	r3, [pc, #64]	; (80072bc <_txe_byte_allocate+0xdc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4313      	orrs	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007282:	f3ef 8305 	mrs	r3, IPSR
 8007286:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007288:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <_txe_byte_allocate+0xdc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4313      	orrs	r3, r2
 8007290:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007294:	d201      	bcs.n	800729a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007296:	2313      	movs	r3, #19
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7fc fb62 	bl	8003970 <_tx_byte_allocate>
 80072ac:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3728      	adds	r7, #40	; 0x28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	42595445 	.word	0x42595445
 80072bc:	20000008 	.word	0x20000008
 80072c0:	2000ef8c 	.word	0x2000ef8c
 80072c4:	2000f0d8 	.word	0x2000f0d8

080072c8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b092      	sub	sp, #72	; 0x48
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80072d6:	2300      	movs	r3, #0
 80072d8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80072e0:	2302      	movs	r3, #2
 80072e2:	647b      	str	r3, [r7, #68]	; 0x44
 80072e4:	e075      	b.n	80073d2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80072e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e8:	2b34      	cmp	r3, #52	; 0x34
 80072ea:	d002      	beq.n	80072f2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80072ec:	2302      	movs	r3, #2
 80072ee:	647b      	str	r3, [r7, #68]	; 0x44
 80072f0:	e06f      	b.n	80073d2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80072f2:	f3ef 8310 	mrs	r3, PRIMASK
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80072fc:	b672      	cpsid	i
    return(int_posture);
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007300:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8007302:	4b3b      	ldr	r3, [pc, #236]	; (80073f0 <_txe_byte_pool_create+0x128>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	4a39      	ldr	r2, [pc, #228]	; (80073f0 <_txe_byte_pool_create+0x128>)
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f383 8810 	msr	PRIMASK, r3
}
 8007316:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8007318:	4b36      	ldr	r3, [pc, #216]	; (80073f4 <_txe_byte_pool_create+0x12c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800731e:	2300      	movs	r3, #0
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
 8007322:	e009      	b.n	8007338 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	429a      	cmp	r2, r3
 800732a:	d00b      	beq.n	8007344 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800732c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8007332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007334:	3301      	adds	r3, #1
 8007336:	643b      	str	r3, [r7, #64]	; 0x40
 8007338:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <_txe_byte_pool_create+0x130>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800733e:	429a      	cmp	r2, r3
 8007340:	d3f0      	bcc.n	8007324 <_txe_byte_pool_create+0x5c>
 8007342:	e000      	b.n	8007346 <_txe_byte_pool_create+0x7e>
                break;
 8007344:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007346:	f3ef 8310 	mrs	r3, PRIMASK
 800734a:	623b      	str	r3, [r7, #32]
    return(posture);
 800734c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800734e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007350:	b672      	cpsid	i
    return(int_posture);
 8007352:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007354:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8007356:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <_txe_byte_pool_create+0x128>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3b01      	subs	r3, #1
 800735c:	4a24      	ldr	r2, [pc, #144]	; (80073f0 <_txe_byte_pool_create+0x128>)
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800736c:	f7fe ff28 	bl	80061c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007374:	429a      	cmp	r2, r3
 8007376:	d102      	bne.n	800737e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8007378:	2302      	movs	r3, #2
 800737a:	647b      	str	r3, [r7, #68]	; 0x44
 800737c:	e029      	b.n	80073d2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8007384:	2303      	movs	r3, #3
 8007386:	647b      	str	r3, [r7, #68]	; 0x44
 8007388:	e023      	b.n	80073d2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b63      	cmp	r3, #99	; 0x63
 800738e:	d802      	bhi.n	8007396 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8007390:	2305      	movs	r3, #5
 8007392:	647b      	str	r3, [r7, #68]	; 0x44
 8007394:	e01d      	b.n	80073d2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <_txe_byte_pool_create+0x134>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739e:	4a18      	ldr	r2, [pc, #96]	; (8007400 <_txe_byte_pool_create+0x138>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d101      	bne.n	80073a8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80073a4:	2313      	movs	r3, #19
 80073a6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80073a8:	f3ef 8305 	mrs	r3, IPSR
 80073ac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80073ae:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80073b0:	4b14      	ldr	r3, [pc, #80]	; (8007404 <_txe_byte_pool_create+0x13c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80073ba:	f3ef 8305 	mrs	r3, IPSR
 80073be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80073c0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <_txe_byte_pool_create+0x13c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80073cc:	d201      	bcs.n	80073d2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80073ce:	2313      	movs	r3, #19
 80073d0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80073d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7fc fc08 	bl	8003bf4 <_tx_byte_pool_create>
 80073e4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80073e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3748      	adds	r7, #72	; 0x48
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	2000f028 	.word	0x2000f028
 80073f4:	2000ef7c 	.word	0x2000ef7c
 80073f8:	2000ef80 	.word	0x2000ef80
 80073fc:	2000ef8c 	.word	0x2000ef8c
 8007400:	2000f0d8 	.word	0x2000f0d8
 8007404:	20000008 	.word	0x20000008

08007408 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800741c:	231c      	movs	r3, #28
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	e01f      	b.n	8007462 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a21      	ldr	r2, [pc, #132]	; (80074ac <_txe_mutex_get+0xa4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d002      	beq.n	8007432 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800742c:	231c      	movs	r3, #28
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e017      	b.n	8007462 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d014      	beq.n	8007462 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007438:	f3ef 8305 	mrs	r3, IPSR
 800743c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800743e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007440:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <_txe_mutex_get+0xa8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4313      	orrs	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800744a:	2304      	movs	r3, #4
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	e008      	b.n	8007462 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8007450:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <_txe_mutex_get+0xac>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <_txe_mutex_get+0xb0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d101      	bne.n	8007462 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800745e:	2304      	movs	r3, #4
 8007460:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d114      	bne.n	8007492 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007468:	f3ef 8305 	mrs	r3, IPSR
 800746c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800746e:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007470:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <_txe_mutex_get+0xa8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4313      	orrs	r3, r2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800747a:	f3ef 8305 	mrs	r3, IPSR
 800747e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8007480:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007482:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <_txe_mutex_get+0xa8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4313      	orrs	r3, r2
 8007488:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800748c:	d201      	bcs.n	8007492 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800748e:	2313      	movs	r3, #19
 8007490:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fd f9c4 	bl	8004828 <_tx_mutex_get>
 80074a0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80074a2:	69fb      	ldr	r3, [r7, #28]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	4d555445 	.word	0x4d555445
 80074b0:	20000008 	.word	0x20000008
 80074b4:	2000ef8c 	.word	0x2000ef8c
 80074b8:	2000f0d8 	.word	0x2000f0d8

080074bc <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80074ce:	231c      	movs	r3, #28
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e01c      	b.n	800750e <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a13      	ldr	r2, [pc, #76]	; (8007528 <_txe_mutex_put+0x6c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d002      	beq.n	80074e4 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80074de:	231c      	movs	r3, #28
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e014      	b.n	800750e <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80074e4:	f3ef 8305 	mrs	r3, IPSR
 80074e8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80074ea:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <_txe_mutex_put+0x70>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80074f6:	f3ef 8305 	mrs	r3, IPSR
 80074fa:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80074fc:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80074fe:	4b0b      	ldr	r3, [pc, #44]	; (800752c <_txe_mutex_put+0x70>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007508:	d201      	bcs.n	800750e <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800750a:	2313      	movs	r3, #19
 800750c:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7fd fc0d 	bl	8004d34 <_tx_mutex_put>
 800751a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800751c:	697b      	ldr	r3, [r7, #20]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	4d555445 	.word	0x4d555445
 800752c:	20000008 	.word	0x20000008

08007530 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b094      	sub	sp, #80	; 0x50
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800753e:	2300      	movs	r3, #0
 8007540:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8007548:	2309      	movs	r3, #9
 800754a:	647b      	str	r3, [r7, #68]	; 0x44
 800754c:	e083      	b.n	8007656 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800754e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007550:	2b44      	cmp	r3, #68	; 0x44
 8007552:	d002      	beq.n	800755a <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8007554:	2309      	movs	r3, #9
 8007556:	647b      	str	r3, [r7, #68]	; 0x44
 8007558:	e07d      	b.n	8007656 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800755a:	f3ef 8310 	mrs	r3, PRIMASK
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007564:	b672      	cpsid	i
    return(int_posture);
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800756a:	4b43      	ldr	r3, [pc, #268]	; (8007678 <_txe_queue_create+0x148>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	4a41      	ldr	r2, [pc, #260]	; (8007678 <_txe_queue_create+0x148>)
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f383 8810 	msr	PRIMASK, r3
}
 800757e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8007580:	4b3e      	ldr	r3, [pc, #248]	; (800767c <_txe_queue_create+0x14c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8007586:	2300      	movs	r3, #0
 8007588:	643b      	str	r3, [r7, #64]	; 0x40
 800758a:	e009      	b.n	80075a0 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007590:	429a      	cmp	r2, r3
 8007592:	d00b      	beq.n	80075ac <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8007594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800759a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759c:	3301      	adds	r3, #1
 800759e:	643b      	str	r3, [r7, #64]	; 0x40
 80075a0:	4b37      	ldr	r3, [pc, #220]	; (8007680 <_txe_queue_create+0x150>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d3f0      	bcc.n	800758c <_txe_queue_create+0x5c>
 80075aa:	e000      	b.n	80075ae <_txe_queue_create+0x7e>
                break;
 80075ac:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80075ae:	f3ef 8310 	mrs	r3, PRIMASK
 80075b2:	623b      	str	r3, [r7, #32]
    return(posture);
 80075b4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80075b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80075b8:	b672      	cpsid	i
    return(int_posture);
 80075ba:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80075be:	4b2e      	ldr	r3, [pc, #184]	; (8007678 <_txe_queue_create+0x148>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <_txe_queue_create+0x148>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	f383 8810 	msr	PRIMASK, r3
}
 80075d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80075d4:	f7fe fdf4 	bl	80061c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d102      	bne.n	80075e6 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 80075e0:	2309      	movs	r3, #9
 80075e2:	647b      	str	r3, [r7, #68]	; 0x44
 80075e4:	e037      	b.n	8007656 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 80075ec:	2303      	movs	r3, #3
 80075ee:	647b      	str	r3, [r7, #68]	; 0x44
 80075f0:	e031      	b.n	8007656 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d102      	bne.n	80075fe <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80075f8:	2305      	movs	r3, #5
 80075fa:	647b      	str	r3, [r7, #68]	; 0x44
 80075fc:	e02b      	b.n	8007656 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b10      	cmp	r3, #16
 8007602:	d902      	bls.n	800760a <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8007604:	2305      	movs	r3, #5
 8007606:	647b      	str	r3, [r7, #68]	; 0x44
 8007608:	e025      	b.n	8007656 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800760a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760c:	089b      	lsrs	r3, r3, #2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d902      	bls.n	800761a <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8007614:	2305      	movs	r3, #5
 8007616:	647b      	str	r3, [r7, #68]	; 0x44
 8007618:	e01d      	b.n	8007656 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800761a:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <_txe_queue_create+0x154>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	4a19      	ldr	r2, [pc, #100]	; (8007688 <_txe_queue_create+0x158>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d101      	bne.n	800762c <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007628:	2313      	movs	r3, #19
 800762a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800762c:	f3ef 8305 	mrs	r3, IPSR
 8007630:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007632:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007634:	4b15      	ldr	r3, [pc, #84]	; (800768c <_txe_queue_create+0x15c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4313      	orrs	r3, r2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800763e:	f3ef 8305 	mrs	r3, IPSR
 8007642:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007644:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007646:	4b11      	ldr	r3, [pc, #68]	; (800768c <_txe_queue_create+0x15c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4313      	orrs	r3, r2
 800764c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007650:	d201      	bcs.n	8007656 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8007652:	2313      	movs	r3, #19
 8007654:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007658:	2b00      	cmp	r3, #0
 800765a:	d108      	bne.n	800766e <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800765c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7fd fe0e 	bl	8005288 <_tx_queue_create>
 800766c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007670:	4618      	mov	r0, r3
 8007672:	3748      	adds	r7, #72	; 0x48
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	2000f028 	.word	0x2000f028
 800767c:	2000ef5c 	.word	0x2000ef5c
 8007680:	2000ef60 	.word	0x2000ef60
 8007684:	2000ef8c 	.word	0x2000ef8c
 8007688:	2000f0d8 	.word	0x2000f0d8
 800768c:	20000008 	.word	0x20000008

08007690 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800769c:	2300      	movs	r3, #0
 800769e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80076a6:	2309      	movs	r3, #9
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	e025      	b.n	80076f8 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a18      	ldr	r2, [pc, #96]	; (8007714 <_txe_queue_receive+0x84>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d002      	beq.n	80076bc <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80076b6:	2309      	movs	r3, #9
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	e01d      	b.n	80076f8 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80076c2:	2303      	movs	r3, #3
 80076c4:	61fb      	str	r3, [r7, #28]
 80076c6:	e017      	b.n	80076f8 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d014      	beq.n	80076f8 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80076ce:	f3ef 8305 	mrs	r3, IPSR
 80076d2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80076d4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80076d6:	4b10      	ldr	r3, [pc, #64]	; (8007718 <_txe_queue_receive+0x88>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4313      	orrs	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80076e0:	2304      	movs	r3, #4
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e008      	b.n	80076f8 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <_txe_queue_receive+0x8c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	4a0c      	ldr	r2, [pc, #48]	; (8007720 <_txe_queue_receive+0x90>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d101      	bne.n	80076f8 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80076f4:	2304      	movs	r3, #4
 80076f6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7fd fec4 	bl	8005490 <_tx_queue_receive>
 8007708:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800770a:	69fb      	ldr	r3, [r7, #28]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	51554555 	.word	0x51554555
 8007718:	20000008 	.word	0x20000008
 800771c:	2000ef8c 	.word	0x2000ef8c
 8007720:	2000f0d8 	.word	0x2000f0d8

08007724 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800773a:	2309      	movs	r3, #9
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	e025      	b.n	800778c <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <_txe_queue_send+0x84>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d002      	beq.n	8007750 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800774a:	2309      	movs	r3, #9
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	e01d      	b.n	800778c <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8007756:	2303      	movs	r3, #3
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	e017      	b.n	800778c <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d014      	beq.n	800778c <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007762:	f3ef 8305 	mrs	r3, IPSR
 8007766:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007768:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800776a:	4b10      	ldr	r3, [pc, #64]	; (80077ac <_txe_queue_send+0x88>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4313      	orrs	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8007774:	2304      	movs	r3, #4
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	e008      	b.n	800778c <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <_txe_queue_send+0x8c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	4a0c      	ldr	r2, [pc, #48]	; (80077b4 <_txe_queue_send+0x90>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d101      	bne.n	800778c <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8007788:	2304      	movs	r3, #4
 800778a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d105      	bne.n	800779e <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7fe f842 	bl	8005820 <_tx_queue_send>
 800779c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800779e:	69fb      	ldr	r3, [r7, #28]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	51554555 	.word	0x51554555
 80077ac:	20000008 	.word	0x20000008
 80077b0:	2000ef8c 	.word	0x2000ef8c
 80077b4:	2000f0d8 	.word	0x2000f0d8

080077b8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b09a      	sub	sp, #104	; 0x68
 80077bc:	af06      	add	r7, sp, #24
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80077c6:	2300      	movs	r3, #0
 80077c8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80077d0:	230e      	movs	r3, #14
 80077d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d4:	e0bb      	b.n	800794e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80077d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d8:	2be8      	cmp	r3, #232	; 0xe8
 80077da:	d002      	beq.n	80077e2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80077dc:	230e      	movs	r3, #14
 80077de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e0:	e0b5      	b.n	800794e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80077e2:	f3ef 8310 	mrs	r3, PRIMASK
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80077ec:	b672      	cpsid	i
    return(int_posture);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80077f2:	4b64      	ldr	r3, [pc, #400]	; (8007984 <_txe_thread_create+0x1cc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a62      	ldr	r2, [pc, #392]	; (8007984 <_txe_thread_create+0x1cc>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	f383 8810 	msr	PRIMASK, r3
}
 8007806:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8007808:	2300      	movs	r3, #0
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800780c:	4b5e      	ldr	r3, [pc, #376]	; (8007988 <_txe_thread_create+0x1d0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007814:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8007816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007818:	3b01      	subs	r3, #1
 800781a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781c:	4413      	add	r3, r2
 800781e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8007824:	2300      	movs	r3, #0
 8007826:	647b      	str	r3, [r7, #68]	; 0x44
 8007828:	e02b      	b.n	8007882 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	429a      	cmp	r2, r3
 8007830:	d101      	bne.n	8007836 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8007836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007838:	2b01      	cmp	r3, #1
 800783a:	d028      	beq.n	800788e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800783c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007842:	429a      	cmp	r2, r3
 8007844:	d308      	bcc.n	8007858 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8007846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800784c:	429a      	cmp	r2, r3
 800784e:	d203      	bcs.n	8007858 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8007854:	2301      	movs	r3, #1
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8007858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800785e:	429a      	cmp	r2, r3
 8007860:	d308      	bcc.n	8007874 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8007862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007868:	429a      	cmp	r2, r3
 800786a:	d203      	bcs.n	8007874 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800786c:	2300      	movs	r3, #0
 800786e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8007874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800787c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787e:	3301      	adds	r3, #1
 8007880:	647b      	str	r3, [r7, #68]	; 0x44
 8007882:	4b42      	ldr	r3, [pc, #264]	; (800798c <_txe_thread_create+0x1d4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007888:	429a      	cmp	r2, r3
 800788a:	d3ce      	bcc.n	800782a <_txe_thread_create+0x72>
 800788c:	e000      	b.n	8007890 <_txe_thread_create+0xd8>
                break;
 800788e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007890:	f3ef 8310 	mrs	r3, PRIMASK
 8007894:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007896:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007898:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800789a:	b672      	cpsid	i
    return(int_posture);
 800789c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80078a0:	4b38      	ldr	r3, [pc, #224]	; (8007984 <_txe_thread_create+0x1cc>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	4a37      	ldr	r2, [pc, #220]	; (8007984 <_txe_thread_create+0x1cc>)
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f383 8810 	msr	PRIMASK, r3
}
 80078b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80078b6:	f7fe fc83 	bl	80061c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078be:	429a      	cmp	r2, r3
 80078c0:	d102      	bne.n	80078c8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80078c2:	230e      	movs	r3, #14
 80078c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078c6:	e042      	b.n	800794e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80078c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80078ce:	2303      	movs	r3, #3
 80078d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078d2:	e03c      	b.n	800794e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80078da:	2303      	movs	r3, #3
 80078dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078de:	e036      	b.n	800794e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80078e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e2:	2bc7      	cmp	r3, #199	; 0xc7
 80078e4:	d802      	bhi.n	80078ec <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80078e6:	2305      	movs	r3, #5
 80078e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ea:	e030      	b.n	800794e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80078ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ee:	2b1f      	cmp	r3, #31
 80078f0:	d902      	bls.n	80078f8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80078f2:	230f      	movs	r3, #15
 80078f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f6:	e02a      	b.n	800794e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80078f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d902      	bls.n	8007906 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8007900:	2318      	movs	r3, #24
 8007902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007904:	e023      	b.n	800794e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8007906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d902      	bls.n	8007912 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800790c:	2310      	movs	r3, #16
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	e01d      	b.n	800794e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8007912:	4b1f      	ldr	r3, [pc, #124]	; (8007990 <_txe_thread_create+0x1d8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <_txe_thread_create+0x1dc>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d101      	bne.n	8007924 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007920:	2313      	movs	r3, #19
 8007922:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007924:	f3ef 8305 	mrs	r3, IPSR
 8007928:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800792a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <_txe_thread_create+0x1e0>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4313      	orrs	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007936:	f3ef 8305 	mrs	r3, IPSR
 800793a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800793c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800793e:	4b16      	ldr	r3, [pc, #88]	; (8007998 <_txe_thread_create+0x1e0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4313      	orrs	r3, r2
 8007944:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007948:	d201      	bcs.n	800794e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800794a:	2313      	movs	r3, #19
 800794c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800794e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d112      	bne.n	800797a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8007954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7fe f932 	bl	8005bdc <_tx_thread_create>
 8007978:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800797a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800797c:	4618      	mov	r0, r3
 800797e:	3750      	adds	r7, #80	; 0x50
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	2000f028 	.word	0x2000f028
 8007988:	2000ef94 	.word	0x2000ef94
 800798c:	2000ef98 	.word	0x2000ef98
 8007990:	2000ef8c 	.word	0x2000ef8c
 8007994:	2000f0d8 	.word	0x2000f0d8
 8007998:	20000008 	.word	0x20000008

0800799c <_txe_thread_entry_exit_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <_txe_thread_entry_exit_notify+0x16>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80079ac:	230e      	movs	r3, #14
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e00c      	b.n	80079cc <_txe_thread_entry_exit_notify+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <_txe_thread_entry_exit_notify+0x3c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d002      	beq.n	80079c2 <_txe_thread_entry_exit_notify+0x26>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80079bc:	230e      	movs	r3, #14
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e004      	b.n	80079cc <_txe_thread_entry_exit_notify+0x30>
    }
    else
    {

        /* Call actual thread entry/exit notify function.  */
        status =  _tx_thread_entry_exit_notify(thread_ptr, thread_entry_exit_notify);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fe fa4d 	bl	8005e64 <_tx_thread_entry_exit_notify>
 80079ca:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80079cc:	68fb      	ldr	r3, [r7, #12]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	54485244 	.word	0x54485244

080079dc <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d102      	bne.n	80079f0 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80079ea:	230e      	movs	r3, #14
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e00b      	b.n	8007a08 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <_txe_thread_resume+0x38>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d002      	beq.n	8007a00 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80079fa:	230e      	movs	r3, #14
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	e003      	b.n	8007a08 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fe fa8d 	bl	8005f20 <_tx_thread_resume>
 8007a06:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	54485244 	.word	0x54485244

08007a18 <_txe_thread_time_slice_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <_txe_thread_time_slice_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8007a2a:	230e      	movs	r3, #14
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	e01f      	b.n	8007a70 <_txe_thread_time_slice_change+0x58>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <_txe_thread_time_slice_change+0x64>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d002      	beq.n	8007a40 <_txe_thread_time_slice_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8007a3a:	230e      	movs	r3, #14
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	e017      	b.n	8007a70 <_txe_thread_time_slice_change+0x58>
    }

    /* Check for a valid old time-slice pointer.  */
    else if (old_time_slice == TX_NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d102      	bne.n	8007a4c <_txe_thread_time_slice_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 8007a46:	2303      	movs	r3, #3
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	e011      	b.n	8007a70 <_txe_thread_time_slice_change+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a4c:	f3ef 8305 	mrs	r3, IPSR
 8007a50:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8007a52:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <_txe_thread_time_slice_change+0x68>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <_txe_thread_time_slice_change+0x4c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8007a5e:	2313      	movs	r3, #19
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	e005      	b.n	8007a70 <_txe_thread_time_slice_change+0x58>
    }
    else
    {

        /* Call actual change time slice function.  */
        status =  _tx_thread_time_slice_change(thread_ptr, new_time_slice, old_time_slice);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f7ff f867 	bl	8006b3c <_tx_thread_time_slice_change>
 8007a6e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8007a70:	697b      	ldr	r3, [r7, #20]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	54485244 	.word	0x54485244
 8007a80:	20000008 	.word	0x20000008

08007a84 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b096      	sub	sp, #88	; 0x58
 8007a88:	af04      	add	r7, sp, #16
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007a92:	2300      	movs	r3, #0
 8007a94:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8007a9c:	2315      	movs	r3, #21
 8007a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa0:	e059      	b.n	8007b56 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 8007aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa4:	2b34      	cmp	r3, #52	; 0x34
 8007aa6:	d002      	beq.n	8007aae <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8007aa8:	2315      	movs	r3, #21
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8007aac:	e053      	b.n	8007b56 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007aae:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ab8:	b672      	cpsid	i
    return(int_posture);
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007abc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8007abe:	4b41      	ldr	r3, [pc, #260]	; (8007bc4 <_txe_timer_create+0x140>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4a3f      	ldr	r2, [pc, #252]	; (8007bc4 <_txe_timer_create+0x140>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	f383 8810 	msr	PRIMASK, r3
}
 8007ad2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 8007ad4:	4b3c      	ldr	r3, [pc, #240]	; (8007bc8 <_txe_timer_create+0x144>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ade:	e009      	b.n	8007af4 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d00b      	beq.n	8007b00 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8007aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af0:	3301      	adds	r3, #1
 8007af2:	643b      	str	r3, [r7, #64]	; 0x40
 8007af4:	4b35      	ldr	r3, [pc, #212]	; (8007bcc <_txe_timer_create+0x148>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d3f0      	bcc.n	8007ae0 <_txe_timer_create+0x5c>
 8007afe:	e000      	b.n	8007b02 <_txe_timer_create+0x7e>
                break;
 8007b00:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b02:	f3ef 8310 	mrs	r3, PRIMASK
 8007b06:	623b      	str	r3, [r7, #32]
    return(posture);
 8007b08:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007b0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b0c:	b672      	cpsid	i
    return(int_posture);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8007b12:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <_txe_timer_create+0x140>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4a2a      	ldr	r2, [pc, #168]	; (8007bc4 <_txe_timer_create+0x140>)
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	f383 8810 	msr	PRIMASK, r3
}
 8007b26:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007b28:	f7fe fb4a 	bl	80061c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d102      	bne.n	8007b3a <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 8007b34:	2315      	movs	r3, #21
 8007b36:	647b      	str	r3, [r7, #68]	; 0x44
 8007b38:	e00d      	b.n	8007b56 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 8007b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 8007b40:	2316      	movs	r3, #22
 8007b42:	647b      	str	r3, [r7, #68]	; 0x44
 8007b44:	e007      	b.n	8007b56 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 8007b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d004      	beq.n	8007b56 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 8007b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 8007b52:	2317      	movs	r3, #23
 8007b54:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d11d      	bne.n	8007b98 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <_txe_timer_create+0x14c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	4a1b      	ldr	r2, [pc, #108]	; (8007bd4 <_txe_timer_create+0x150>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d101      	bne.n	8007b6e <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007b6a:	2313      	movs	r3, #19
 8007b6c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007b6e:	f3ef 8305 	mrs	r3, IPSR
 8007b72:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007b74:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007b76:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <_txe_timer_create+0x154>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007b80:	f3ef 8305 	mrs	r3, IPSR
 8007b84:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007b86:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007b88:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <_txe_timer_create+0x154>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007b92:	d201      	bcs.n	8007b98 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007b94:	2313      	movs	r3, #19
 8007b96:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10c      	bne.n	8007bb8 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 8007b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba0:	9302      	str	r3, [sp, #8]
 8007ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff f833 	bl	8006c1c <_tx_timer_create>
 8007bb6:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3748      	adds	r7, #72	; 0x48
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	2000f028 	.word	0x2000f028
 8007bc8:	2000f0cc 	.word	0x2000f0cc
 8007bcc:	2000f0d0 	.word	0x2000f0d0
 8007bd0:	2000ef8c 	.word	0x2000ef8c
 8007bd4:	2000f0d8 	.word	0x2000f0d8
 8007bd8:	20000008 	.word	0x20000008

08007bdc <_txm_power_of_two_block_size>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_power_of_two_block_size(ULONG size)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
    /* Check for 0 size. */
    if(size == 0)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <_txm_power_of_two_block_size+0x12>
        return 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e024      	b.n	8007c38 <_txm_power_of_two_block_size+0x5c>
    
    /* Minimum MPU block size is 32. */
    if(size <= 32)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d801      	bhi.n	8007bf8 <_txm_power_of_two_block_size+0x1c>
        return 32;
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	e01f      	b.n	8007c38 <_txm_power_of_two_block_size+0x5c>
    
    /* Bit twiddling trick to round to next high power of 2
       (if original size is power of 2, it will return original size. Perfect!) */
    size--;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	607b      	str	r3, [r7, #4]
    size |= size >> 1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	607b      	str	r3, [r7, #4]
    size |= size >> 2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	089b      	lsrs	r3, r3, #2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	607b      	str	r3, [r7, #4]
    size |= size >> 4;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	091b      	lsrs	r3, r3, #4
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	607b      	str	r3, [r7, #4]
    size |= size >> 8;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	0a1b      	lsrs	r3, r3, #8
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	607b      	str	r3, [r7, #4]
    size |= size >> 16;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	607b      	str	r3, [r7, #4]
    size++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
    
    /* Return a power of 2 size at or above the input size.  */
    return(size);
 8007c36:	687b      	ldr	r3, [r7, #4]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <_txm_module_manager_alignment_adjust>:
VOID  _txm_module_manager_alignment_adjust(TXM_MODULE_PREAMBLE *module_preamble,
                                           ULONG *code_size,
                                           ULONG *code_alignment,
                                           ULONG *data_size,
                                           ULONG *data_alignment)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	; 0x30
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
ULONG   data_block_size;
ULONG   code_size_accum;
ULONG   data_size_accum;

    /* Copy the input parameters into local variables for ease of use.  */
    local_code_size =       *code_size;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    local_code_alignment =  *code_alignment;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    local_data_size =       *data_size;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	617b      	str	r3, [r7, #20]
    local_data_alignment =  *data_alignment;
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24


    /* Test for external memory enabled in preamble.  */
    if(module_preamble -> txm_module_preamble_property_flags & TXM_MODULE_SHARED_EXTERNAL_MEMORY_ACCESS)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 809a 	beq.w	8007dac <_txm_module_manager_alignment_adjust+0x168>
    {
        /* External/shared memory enabled. TXM_MODULE_MANAGER_CODE_MPU_ENTRIES-1 code entries will be used.  */
        if (local_code_size <= (32*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	2b60      	cmp	r3, #96	; 0x60
 8007c7c:	d802      	bhi.n	8007c84 <_txm_module_manager_alignment_adjust+0x40>
        {
            /* Block size of 32 is best.   */
            code_block_size =  32;
 8007c7e:	2320      	movs	r3, #32
 8007c80:	623b      	str	r3, [r7, #32]
 8007c82:	e087      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (64*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	2bc0      	cmp	r3, #192	; 0xc0
 8007c88:	d802      	bhi.n	8007c90 <_txm_module_manager_alignment_adjust+0x4c>
        {
            /* Block size of 64 is best.   */
            code_block_size =  64;
 8007c8a:	2340      	movs	r3, #64	; 0x40
 8007c8c:	623b      	str	r3, [r7, #32]
 8007c8e:	e081      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (128*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007c96:	d802      	bhi.n	8007c9e <_txm_module_manager_alignment_adjust+0x5a>
        {
            /* Block size of 128 is best.   */
            code_block_size =  128;
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	623b      	str	r3, [r7, #32]
 8007c9c:	e07a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (256*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca4:	d803      	bhi.n	8007cae <_txm_module_manager_alignment_adjust+0x6a>
        {
            /* Block size of 256 is best.   */
            code_block_size =  256;
 8007ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	e072      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (512*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cb4:	d803      	bhi.n	8007cbe <_txm_module_manager_alignment_adjust+0x7a>
        {
            /* Block size of 512 is best.   */
            code_block_size =  512;
 8007cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cba:	623b      	str	r3, [r7, #32]
 8007cbc:	e06a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (1024*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc4:	d803      	bhi.n	8007cce <_txm_module_manager_alignment_adjust+0x8a>
        {
            /* Block size of 1024 is best.   */
            code_block_size =  1024;
 8007cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	e062      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (2048*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007cd4:	d803      	bhi.n	8007cde <_txm_module_manager_alignment_adjust+0x9a>
        {
            /* Block size of 2048 is best.   */
            code_block_size =  2048;
 8007cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cda:	623b      	str	r3, [r7, #32]
 8007cdc:	e05a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (4096*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce4:	d803      	bhi.n	8007cee <_txm_module_manager_alignment_adjust+0xaa>
        {
            /* Block size of 4096 is best.   */
            code_block_size =  4096;
 8007ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cea:	623b      	str	r3, [r7, #32]
 8007cec:	e052      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (8192*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cf4:	d803      	bhi.n	8007cfe <_txm_module_manager_alignment_adjust+0xba>
        {
            /* Block size of 8192 is best.   */
            code_block_size =  8192;
 8007cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cfa:	623b      	str	r3, [r7, #32]
 8007cfc:	e04a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (16384*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d04:	d803      	bhi.n	8007d0e <_txm_module_manager_alignment_adjust+0xca>
        {
            /* Block size of 16384 is best.   */
            code_block_size =  16384;
 8007d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d0a:	623b      	str	r3, [r7, #32]
 8007d0c:	e042      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (32768*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007d14:	d803      	bhi.n	8007d1e <_txm_module_manager_alignment_adjust+0xda>
        {
            /* Block size of 32768 is best.   */
            code_block_size =  32768;
 8007d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1a:	623b      	str	r3, [r7, #32]
 8007d1c:	e03a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (65536*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d24:	d803      	bhi.n	8007d2e <_txm_module_manager_alignment_adjust+0xea>
        {
            /* Block size of 65536 is best.   */
            code_block_size =  65536;
 8007d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d2a:	623b      	str	r3, [r7, #32]
 8007d2c:	e032      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (131072*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007d34:	d803      	bhi.n	8007d3e <_txm_module_manager_alignment_adjust+0xfa>
        {
            /* Block size of 131072 is best.   */
            code_block_size =  131072;
 8007d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d3a:	623b      	str	r3, [r7, #32]
 8007d3c:	e02a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (262144*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d44:	d803      	bhi.n	8007d4e <_txm_module_manager_alignment_adjust+0x10a>
        {
            /* Block size of 262144 is best.   */
            code_block_size =  262144;
 8007d46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d4a:	623b      	str	r3, [r7, #32]
 8007d4c:	e022      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (524288*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007d54:	d803      	bhi.n	8007d5e <_txm_module_manager_alignment_adjust+0x11a>
        {
            /* Block size of 524288 is best.   */
            code_block_size =  524288;
 8007d56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d5a:	623b      	str	r3, [r7, #32]
 8007d5c:	e01a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (1048576*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d64:	d803      	bhi.n	8007d6e <_txm_module_manager_alignment_adjust+0x12a>
        {
            /* Block size of 1048576 is best.   */
            code_block_size =  1048576;
 8007d66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d6a:	623b      	str	r3, [r7, #32]
 8007d6c:	e012      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (2097152*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d74:	d803      	bhi.n	8007d7e <_txm_module_manager_alignment_adjust+0x13a>
        {
            /* Block size of 2097152 is best.   */
            code_block_size =  2097152;
 8007d76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d7a:	623b      	str	r3, [r7, #32]
 8007d7c:	e00a      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (4194304*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d84:	d803      	bhi.n	8007d8e <_txm_module_manager_alignment_adjust+0x14a>
        {
            /* Block size of 4194304 is best.   */
            code_block_size =  4194304;
 8007d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d8a:	623b      	str	r3, [r7, #32]
 8007d8c:	e002      	b.n	8007d94 <_txm_module_manager_alignment_adjust+0x150>
        }
        else
        {
            /* Just set block size to 32MB just to create an allocation error!  */
            code_block_size =  33554432;
 8007d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d92:	623b      	str	r3, [r7, #32]
        }
        
        /* Calculate the new code size.  */
        local_code_size =  code_block_size*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1);
 8007d94:	6a3a      	ldr	r2, [r7, #32]
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        /* Determine if the code block size is greater than the current alignment. If so, use block size
           as the alignment.  */
        if (code_block_size > local_code_alignment)
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d922      	bls.n	8007dec <_txm_module_manager_alignment_adjust+0x1a8>
            local_code_alignment = code_block_size;
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007daa:	e01f      	b.n	8007dec <_txm_module_manager_alignment_adjust+0x1a8>
           will be distributed:
           1. 1/4 of the largest power of two that is greater than or equal to code size.
           2. 1/4 of the largest power of two that is greater than or equal to code size.
           3. Largest power of 2 that fits in the remaining space.
           4. Smallest power of 2 that exceeds the remaining space, minimum 32.  */
        local_code_alignment =  _txm_power_of_two_block_size(local_code_size) >> 2;
 8007dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dae:	f7ff ff15 	bl	8007bdc <_txm_power_of_two_block_size>
 8007db2:	4603      	mov	r3, r0
 8007db4:	089b      	lsrs	r3, r3, #2
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28
        code_size_accum =  local_code_alignment + local_code_alignment;
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	613b      	str	r3, [r7, #16]
        code_size_accum =  code_size_accum + (_txm_power_of_two_block_size(local_code_size - code_size_accum) >> 1);
 8007dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff ff09 	bl	8007bdc <_txm_power_of_two_block_size>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	085b      	lsrs	r3, r3, #1
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
        code_size_accum =  code_size_accum + _txm_power_of_two_block_size(local_code_size - code_size_accum);
 8007dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fefe 	bl	8007bdc <_txm_power_of_two_block_size>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	4413      	add	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]
        local_code_size =  code_size_accum;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    
    /* Determine the best data block size, which in our case is the minimal alignment.  */
    if (local_data_size <= (32*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b60      	cmp	r3, #96	; 0x60
 8007df0:	d802      	bhi.n	8007df8 <_txm_module_manager_alignment_adjust+0x1b4>
    {
        /* Block size of 32 is best.   */
        data_block_size =  32;
 8007df2:	2320      	movs	r3, #32
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	e087      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (64*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8007dfc:	d802      	bhi.n	8007e04 <_txm_module_manager_alignment_adjust+0x1c0>
    {
        /* Block size of 64 is best.   */
        data_block_size =  64;
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	e081      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (128*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007e0a:	d802      	bhi.n	8007e12 <_txm_module_manager_alignment_adjust+0x1ce>
    {
        /* Block size of 128 is best.   */
        data_block_size =  128;
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e07a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (256*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e18:	d803      	bhi.n	8007e22 <_txm_module_manager_alignment_adjust+0x1de>
    {
        /* Block size of 256 is best.   */
        data_block_size =  256;
 8007e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e072      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (512*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e28:	d803      	bhi.n	8007e32 <_txm_module_manager_alignment_adjust+0x1ee>
    {
        /* Block size of 512 is best.   */
        data_block_size =  512;
 8007e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	e06a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (1024*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e38:	d803      	bhi.n	8007e42 <_txm_module_manager_alignment_adjust+0x1fe>
    {
        /* Block size of 1024 is best.   */
        data_block_size =  1024;
 8007e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e062      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (2048*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007e48:	d803      	bhi.n	8007e52 <_txm_module_manager_alignment_adjust+0x20e>
    {
        /* Block size of 2048 is best.   */
        data_block_size =  2048;
 8007e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	e05a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (4096*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e58:	d803      	bhi.n	8007e62 <_txm_module_manager_alignment_adjust+0x21e>
    {
        /* Block size of 4096 is best.   */
        data_block_size =  4096;
 8007e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e052      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (8192*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e68:	d803      	bhi.n	8007e72 <_txm_module_manager_alignment_adjust+0x22e>
    {
        /* Block size of 8192 is best.   */
        data_block_size =  8192;
 8007e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e04a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (16384*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e78:	d803      	bhi.n	8007e82 <_txm_module_manager_alignment_adjust+0x23e>
    {
        /* Block size of 16384 is best.   */
        data_block_size =  16384;
 8007e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e042      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (32768*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007e88:	d803      	bhi.n	8007e92 <_txm_module_manager_alignment_adjust+0x24e>
    {
        /* Block size of 32768 is best.   */
        data_block_size =  32768;
 8007e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e03a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (65536*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e98:	d803      	bhi.n	8007ea2 <_txm_module_manager_alignment_adjust+0x25e>
    {
        /* Block size of 65536 is best.   */
        data_block_size =  65536;
 8007e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e032      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (131072*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007ea8:	d803      	bhi.n	8007eb2 <_txm_module_manager_alignment_adjust+0x26e>
    {
        /* Block size of 131072 is best.   */
        data_block_size =  131072;
 8007eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e02a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (262144*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007eb8:	d803      	bhi.n	8007ec2 <_txm_module_manager_alignment_adjust+0x27e>
    {
        /* Block size of 262144 is best.   */
        data_block_size =  262144;
 8007eba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	e022      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (524288*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007ec8:	d803      	bhi.n	8007ed2 <_txm_module_manager_alignment_adjust+0x28e>
    {
        /* Block size of 524288 is best.   */
        data_block_size =  524288;
 8007eca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	e01a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (1048576*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ed8:	d803      	bhi.n	8007ee2 <_txm_module_manager_alignment_adjust+0x29e>
    {
        /* Block size of 1048576 is best.   */
        data_block_size =  1048576;
 8007eda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	e012      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (2097152*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ee8:	d803      	bhi.n	8007ef2 <_txm_module_manager_alignment_adjust+0x2ae>
    {
        /* Block size of 2097152 is best.   */
        data_block_size =  2097152;
 8007eea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	e00a      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (4194304*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ef8:	d803      	bhi.n	8007f02 <_txm_module_manager_alignment_adjust+0x2be>
    {
        /* Block size of 4194304 is best.   */
        data_block_size =  4194304;
 8007efa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e002      	b.n	8007f08 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else
    {
        /* Just set data block size to 32MB just to create an allocation error!  */
        data_block_size =  33554432;
 8007f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f06:	61fb      	str	r3, [r7, #28]
    }

    /* Calculate the new data size.  */
    data_size_accum = data_block_size;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	61bb      	str	r3, [r7, #24]
    while(data_size_accum < local_data_size)
 8007f0c:	e003      	b.n	8007f16 <_txm_module_manager_alignment_adjust+0x2d2>
    {
        data_size_accum += data_block_size;
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
    while(data_size_accum < local_data_size)
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d3f7      	bcc.n	8007f0e <_txm_module_manager_alignment_adjust+0x2ca>
    }
    local_data_size = data_size_accum;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	617b      	str	r3, [r7, #20]
    
    /* Determine if the data block size is greater than the current alignment. If so, use block size
       as the alignment.  */
    if (data_block_size > local_data_alignment)
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d901      	bls.n	8007f2e <_txm_module_manager_alignment_adjust+0x2ea>
    {
        local_data_alignment =  data_block_size;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return all the information to the caller.  */
    *code_size =        local_code_size;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f32:	601a      	str	r2, [r3, #0]
    *code_alignment =   local_code_alignment;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f38:	601a      	str	r2, [r3, #0]
    *data_size =        local_data_size;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	601a      	str	r2, [r3, #0]
    *data_alignment =   local_data_alignment;
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f44:	601a      	str	r2, [r3, #0]

#endif
}
 8007f46:	bf00      	nop
 8007f48:	3730      	adds	r7, #48	; 0x30
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <_txm_module_manager_callback_request>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_callback_request(TX_QUEUE *module_callback_queue, TXM_MODULE_CALLBACK_MESSAGE  *callback_message)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08c      	sub	sp, #48	; 0x30
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007f60:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007f62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f64:	b672      	cpsid	i
    return(int_posture);
 8007f66:	697b      	ldr	r3, [r7, #20]
UINT                            found;
UINT                            status;


    /* Lockout interrupts.  */
    TX_DISABLE
 8007f68:	623b      	str	r3, [r7, #32]

    /* Determine if the queue is valid.  */
    if ((module_callback_queue) && (module_callback_queue -> tx_queue_id == TX_QUEUE_ID))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8087 	beq.w	8008080 <_txm_module_manager_callback_request+0x130>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a4a      	ldr	r2, [pc, #296]	; (80080a0 <_txm_module_manager_callback_request+0x150>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	f040 8081 	bne.w	8008080 <_txm_module_manager_callback_request+0x130>
    {

        /* Yes, the queue is valid.  */

        /* Pickup the current callback request in the queue.  */
        queued_message =  (TXM_MODULE_CALLBACK_MESSAGE *) module_callback_queue -> tx_queue_read;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup the number of items enqueued.  */
        enqueued =  module_callback_queue -> tx_queue_enqueued;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Set the found flag to false.  */
        found =  TX_FALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Loop to look for duplicates in the queue.  */
        while (enqueued != 0)
 8007f8e:	e057      	b.n	8008040 <_txm_module_manager_callback_request+0xf0>
        {

            /* Does this entry match the new callback message?  */
            if ((queued_message -> txm_module_callback_message_application_function == callback_message -> txm_module_callback_message_application_function) &&
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d143      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_1 == callback_message -> txm_module_callback_message_param_1) &&
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
            if ((queued_message -> txm_module_callback_message_application_function == callback_message -> txm_module_callback_message_application_function) &&
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d13d      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_2 == callback_message -> txm_module_callback_message_param_2) &&
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
                (queued_message -> txm_module_callback_message_param_1 == callback_message -> txm_module_callback_message_param_1) &&
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d137      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_3 == callback_message -> txm_module_callback_message_param_3) &&
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	695a      	ldr	r2, [r3, #20]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
                (queued_message -> txm_module_callback_message_param_2 == callback_message -> txm_module_callback_message_param_2) &&
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d131      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_4 == callback_message -> txm_module_callback_message_param_4) &&
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	699b      	ldr	r3, [r3, #24]
                (queued_message -> txm_module_callback_message_param_3 == callback_message -> txm_module_callback_message_param_3) &&
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d12b      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_5 == callback_message -> txm_module_callback_message_param_5) &&
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	69db      	ldr	r3, [r3, #28]
                (queued_message -> txm_module_callback_message_param_4 == callback_message -> txm_module_callback_message_param_4) &&
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d125      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_6 == callback_message -> txm_module_callback_message_param_6) &&
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
                (queued_message -> txm_module_callback_message_param_5 == callback_message -> txm_module_callback_message_param_5) &&
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d11f      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_7 == callback_message -> txm_module_callback_message_param_7) &&
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (queued_message -> txm_module_callback_message_param_6 == callback_message -> txm_module_callback_message_param_6) &&
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d119      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_param_8 == callback_message -> txm_module_callback_message_param_8) &&
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                (queued_message -> txm_module_callback_message_param_7 == callback_message -> txm_module_callback_message_param_7) &&
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d113      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_reserved1 == callback_message -> txm_module_callback_message_reserved1) &&
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                (queued_message -> txm_module_callback_message_param_8 == callback_message -> txm_module_callback_message_param_8) &&
 8008004:	429a      	cmp	r2, r3
 8008006:	d10d      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
                (queued_message -> txm_module_callback_message_reserved2 == callback_message -> txm_module_callback_message_reserved2))
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                (queued_message -> txm_module_callback_message_reserved1 == callback_message -> txm_module_callback_message_reserved1) &&
 8008010:	429a      	cmp	r2, r3
 8008012:	d107      	bne.n	8008024 <_txm_module_manager_callback_request+0xd4>
            {

                /* Update the activation count in the queued request.  */
                queued_message -> txm_module_callback_message_activation_count++;
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	605a      	str	r2, [r3, #4]

                /* Set the found flag to true.  */
                found =  TX_TRUE;
 800801e:	2301      	movs	r3, #1
 8008020:	627b      	str	r3, [r7, #36]	; 0x24

                /* Get out of the loop.  */
                break;
 8008022:	e010      	b.n	8008046 <_txm_module_manager_callback_request+0xf6>
            }

            /* Decrease the number of messages to examine.  */
            enqueued--;
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	3b01      	subs	r3, #1
 8008028:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move the callback message to the next message.  */
            queued_message++;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	3334      	adds	r3, #52	; 0x34
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for wrap?  */
            if (((ULONG *) queued_message) >= module_callback_queue -> tx_queue_end)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <_txm_module_manager_callback_request+0xf0>
            {

                /* Yes, set the queued message to the beginning of the queue.  */
                queued_message =  (TXM_MODULE_CALLBACK_MESSAGE *) module_callback_queue -> tx_queue_start;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (enqueued != 0)
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1a4      	bne.n	8007f90 <_txm_module_manager_callback_request+0x40>
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Determine if we need to send the new callback request.  */
        if (found == TX_FALSE)
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10d      	bne.n	8008074 <_txm_module_manager_callback_request+0x124>
        {

            /* Yes, send the message.  */
            status =  _tx_queue_send(module_callback_queue, (VOID *) callback_message, TX_NO_WAIT);
 8008058:	2200      	movs	r2, #0
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fd fbdf 	bl	8005820 <_tx_queue_send>
 8008062:	61f8      	str	r0, [r7, #28]

            /* Determine if an error was detected.  */
            if (status != TX_SUCCESS)
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <_txm_module_manager_callback_request+0x124>
            {

                /* Error, increment the error counter and return.  */
                _txm_module_manager_callback_error_count++;
 800806a:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <_txm_module_manager_callback_request+0x154>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3301      	adds	r3, #1
 8008070:	4a0c      	ldr	r2, [pc, #48]	; (80080a4 <_txm_module_manager_callback_request+0x154>)
 8008072:	6013      	str	r3, [r2, #0]
            }
        }

        /* Increment the total number of callbacks.  */
        _txm_module_manager_callback_total_count++;
 8008074:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <_txm_module_manager_callback_request+0x158>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	4a0b      	ldr	r2, [pc, #44]	; (80080a8 <_txm_module_manager_callback_request+0x158>)
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e00a      	b.n	8008096 <_txm_module_manager_callback_request+0x146>
    {

        /* Module instance is not valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <_txm_module_manager_callback_request+0x154>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3301      	adds	r3, #1
 8008086:	4a07      	ldr	r2, [pc, #28]	; (80080a4 <_txm_module_manager_callback_request+0x154>)
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f383 8810 	msr	PRIMASK, r3
}
 8008094:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 8008096:	bf00      	nop
 8008098:	3730      	adds	r7, #48	; 0x30
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	51554555 	.word	0x51554555
 80080a4:	2000f688 	.word	0x2000f688
 80080a8:	2000f684 	.word	0x2000f684

080080ac <_txm_module_manager_event_flags_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_event_flags_notify_trampoline(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b096      	sub	sp, #88	; 0x58
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080b4:	f3ef 8310 	mrs	r3, PRIMASK
 80080b8:	64bb      	str	r3, [r7, #72]	; 0x48
    return(posture);
 80080ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    int_posture = __get_interrupt_posture();
 80080bc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("CPSID i" : : : "memory");
 80080be:	b672      	cpsid	i
    return(int_posture);
 80080c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80080c2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) group_ptr -> tx_event_flags_group_module_instance;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80080ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d034      	beq.n	800813a <_txm_module_manager_event_flags_notify_trampoline+0x8e>
 80080d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a20      	ldr	r2, [pc, #128]	; (8008158 <_txm_module_manager_event_flags_notify_trampoline+0xac>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d12f      	bne.n	800813a <_txm_module_manager_event_flags_notify_trampoline+0x8e>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 80080da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080dc:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d12b      	bne.n	800813a <_txm_module_manager_event_flags_notify_trampoline+0x8e>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 80080e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80080e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_EVENTS_SET_CALLBACK;
 80080ea:	2301      	movs	r3, #1
 80080ec:	60bb      	str	r3, [r7, #8]
        callback_message.txm_module_callback_message_activation_count =      1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) group_ptr -> tx_event_flags_group_set_module_notify;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) group_ptr;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_2 =               0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_3 =               0;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_4 =               0;
 8008104:	2300      	movs	r3, #0
 8008106:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_5 =               0;
 8008108:	2300      	movs	r3, #0
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_6 =               0;
 800810c:	2300      	movs	r3, #0
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_7 =               0;
 8008110:	2300      	movs	r3, #0
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_8 =               0;
 8008114:	2300      	movs	r3, #0
 8008116:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_reserved1 =             0;
 8008118:	2300      	movs	r3, #0
 800811a:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved2 =             0;
 800811c:	2300      	movs	r3, #0
 800811e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008122:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008126:	f383 8810 	msr	PRIMASK, r3
}
 800812a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 800812c:	f107 0308 	add.w	r3, r7, #8
 8008130:	4619      	mov	r1, r3
 8008132:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008134:	f7ff ff0c 	bl	8007f50 <_txm_module_manager_callback_request>
 8008138:	e00a      	b.n	8008150 <_txm_module_manager_event_flags_notify_trampoline+0xa4>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <_txm_module_manager_event_flags_notify_trampoline+0xb0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	4a06      	ldr	r2, [pc, #24]	; (800815c <_txm_module_manager_event_flags_notify_trampoline+0xb0>)
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814a:	f383 8810 	msr	PRIMASK, r3
}
 800814e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 8008150:	bf00      	nop
 8008152:	3758      	adds	r7, #88	; 0x58
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	4d4f4455 	.word	0x4d4f4455
 800815c:	2000f688 	.word	0x2000f688

08008160 <_txm_module_manager_external_memory_enable>:
/**************************************************************************/
UINT  _txm_module_manager_external_memory_enable(TXM_MODULE_INSTANCE *module_instance,
                                                 VOID *start_address,
                                                 ULONG length,
                                                 UINT attributes)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]

ULONG   block_size;
ULONG   region_size;
ULONG   subregion_bits;
ULONG   address;
UINT    attributes_check = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
TXM_MODULE_PREAMBLE     *module_preamble;

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8008172:	4b3c      	ldr	r3, [pc, #240]	; (8008264 <_txm_module_manager_external_memory_enable+0x104>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d001      	beq.n	800817e <_txm_module_manager_external_memory_enable+0x1e>
    {
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 800817a:	231d      	movs	r3, #29
 800817c:	e06e      	b.n	800825c <_txm_module_manager_external_memory_enable+0xfc>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <_txm_module_manager_external_memory_enable+0x28>
    {
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8008184:	2303      	movs	r3, #3
 8008186:	e069      	b.n	800825c <_txm_module_manager_external_memory_enable+0xfc>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8008188:	f04f 31ff 	mov.w	r1, #4294967295
 800818c:	4836      	ldr	r0, [pc, #216]	; (8008268 <_txm_module_manager_external_memory_enable+0x108>)
 800818e:	f7fc fb4b 	bl	8004828 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a35      	ldr	r2, [pc, #212]	; (800826c <_txm_module_manager_external_memory_enable+0x10c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d004      	beq.n	80081a6 <_txm_module_manager_external_memory_enable+0x46>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800819c:	4832      	ldr	r0, [pc, #200]	; (8008268 <_txm_module_manager_external_memory_enable+0x108>)
 800819e:	f7fc fdc9 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 80081a2:	2303      	movs	r3, #3
 80081a4:	e05a      	b.n	800825c <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* Determine if the module instance is in the loaded state.  */
    if (module_instance -> txm_module_instance_state != TXM_MODULE_LOADED)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d004      	beq.n	80081b8 <_txm_module_manager_external_memory_enable+0x58>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80081ae:	482e      	ldr	r0, [pc, #184]	; (8008268 <_txm_module_manager_external_memory_enable+0x108>)
 80081b0:	f7fc fdc0 	bl	8004d34 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 80081b4:	2310      	movs	r3, #16
 80081b6:	e051      	b.n	800825c <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* Check if preamble shared mem and mem protection property bits are set.  */
    module_preamble = module_instance -> txm_module_instance_preamble_ptr;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081bc:	623b      	str	r3, [r7, #32]
    if((module_preamble -> txm_module_preamble_property_flags & (TXM_MODULE_MEMORY_PROTECTION | TXM_MODULE_SHARED_EXTERNAL_MEMORY_ACCESS))
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f003 0306 	and.w	r3, r3, #6
 80081c6:	2b06      	cmp	r3, #6
 80081c8:	d004      	beq.n	80081d4 <_txm_module_manager_external_memory_enable+0x74>
         != (TXM_MODULE_MEMORY_PROTECTION | TXM_MODULE_SHARED_EXTERNAL_MEMORY_ACCESS))
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80081ca:	4827      	ldr	r0, [pc, #156]	; (8008268 <_txm_module_manager_external_memory_enable+0x108>)
 80081cc:	f7fc fdb2 	bl	8004d34 <_tx_mutex_put>

        /* Return error if bit not set.  */
        return(TXM_MODULE_INVALID_PROPERTIES);
 80081d0:	23f3      	movs	r3, #243	; 0xf3
 80081d2:	e043      	b.n	800825c <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* Start address and length must adhere to Cortex-M MPU.
       The address must align with the block size.  */
    
    block_size = _txm_power_of_two_block_size(length);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fd01 	bl	8007bdc <_txm_power_of_two_block_size>
 80081da:	61f8      	str	r0, [r7, #28]
    address = (ULONG) start_address;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	61bb      	str	r3, [r7, #24]
    if(address != (address & ~(block_size - 1)))
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	425a      	negs	r2, r3
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	4013      	ands	r3, r2
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d004      	beq.n	80081f8 <_txm_module_manager_external_memory_enable+0x98>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80081ee:	481e      	ldr	r0, [pc, #120]	; (8008268 <_txm_module_manager_external_memory_enable+0x108>)
 80081f0:	f7fc fda0 	bl	8004d34 <_tx_mutex_put>
        
        /* Return alignment error.  */
        return(TXM_MODULE_ALIGNMENT_ERROR);
 80081f4:	23f0      	movs	r3, #240	; 0xf0
 80081f6:	e031      	b.n	800825c <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* At this point, we have a valid address and block size.
       Set up MPU registers.  */
    module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MANAGER_SHARED_MPU_INDEX] = address | TXM_MODULE_MANAGER_SHARED_MPU_REGION | 0x10;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f043 0214 	orr.w	r2, r3, #20
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    
    /* Calculate the region size.  */
    region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8008204:	69f8      	ldr	r0, [r7, #28]
 8008206:	f001 fcf1 	bl	8009bec <_txm_module_manager_region_size_get>
 800820a:	4603      	mov	r3, r0
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	617b      	str	r3, [r7, #20]
    /* Calculate the subregion bits.  */
    subregion_bits = _txm_module_manager_calculate_srd_bits(block_size, length);
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	69f8      	ldr	r0, [r7, #28]
 8008214:	f001 fd6b 	bl	8009cee <_txm_module_manager_calculate_srd_bits>
 8008218:	6138      	str	r0, [r7, #16]
    
    /* Check for valid attributes.  */
    if(attributes & TXM_MODULE_MANAGER_SHARED_ATTRIBUTE_WRITE)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <_txm_module_manager_external_memory_enable+0xca>
    {
        attributes_check = TXM_MODULE_MANAGER_ATTRIBUTE_WRITE_MPU_BIT;
 8008224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    /* Build register with attributes. */
    module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MANAGER_SHARED_MPU_INDEX+1] = region_size | subregion_bits | attributes_check | 0x12070001;
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	431a      	orrs	r2, r3
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	431a      	orrs	r2, r3
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <_txm_module_manager_external_memory_enable+0x110>)
 8008236:	4313      	orrs	r3, r2
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    /* Keep track of shared memory address and length in module instance.  */
    module_instance -> txm_module_instance_shared_memory_address = address;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    module_instance -> txm_module_instance_shared_memory_length = length;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    
    /* Recalculate MPU settings.  */
    _txm_module_manager_mm_register_setup(module_instance);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f001 fd88 	bl	8009d64 <_txm_module_manager_mm_register_setup>
    
    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 8008254:	4804      	ldr	r0, [pc, #16]	; (8008268 <_txm_module_manager_external_memory_enable+0x108>)
 8008256:	f7fc fd6d 	bl	8004d34 <_tx_mutex_put>
    
    /* Return success.  */
    return(TX_SUCCESS);
 800825a:	2300      	movs	r3, #0

#endif
}
 800825c:	4618      	mov	r0, r3
 800825e:	3728      	adds	r7, #40	; 0x28
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	2000f680 	.word	0x2000f680
 8008268:	2000f644 	.word	0x2000f644
 800826c:	4d4f4455 	.word	0x4d4f4455
 8008270:	12070001 	.word	0x12070001

08008274 <_txm_module_manager_in_place_load>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_in_place_load(TXM_MODULE_INSTANCE *module_instance, CHAR *module_name, VOID *module_location)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08c      	sub	sp, #48	; 0x30
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
ULONG                   code_allocation_size_ignored;
UINT                    status;


    /* Pickup the module's information.  */
    module_preamble =  (TXM_MODULE_PREAMBLE *) module_location;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the basic module sizes.  */
    code_size =  module_preamble -> txm_module_preamble_code_size;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	623b      	str	r3, [r7, #32]

    /* Check for valid sizes.  */
    if (code_size == 0)
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <_txm_module_manager_in_place_load+0x20>
    {

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 8008290:	23f2      	movs	r3, #242	; 0xf2
 8008292:	e028      	b.n	80082e6 <_txm_module_manager_in_place_load+0x72>
    }

    /* Get the amount of the bytes we need to allocate for the module's code
       as well as the required alignment. Note that because this is an in-place
       load, we only want the code alignment so we can check it.  */
    status =  _txm_module_manager_util_code_allocation_size_and_alignment_get(module_preamble, &code_alignment, &code_allocation_size_ignored);
 8008294:	f107 0210 	add.w	r2, r7, #16
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4619      	mov	r1, r3
 800829e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082a0:	f003 fa28 	bl	800b6f4 <_txm_module_manager_util_code_allocation_size_and_alignment_get>
 80082a4:	61f8      	str	r0, [r7, #28]
    if (status != TX_SUCCESS)
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <_txm_module_manager_in_place_load+0x3c>
    {

        /* Math overflow error occurred.  */
        return(status);
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	e01a      	b.n	80082e6 <_txm_module_manager_in_place_load+0x72>
    }

    /* Since this is an in-place load, check the alignment of the module's instruction area (code).  */
    TXM_MODULE_MANAGER_CHECK_CODE_ALIGNMENT(module_location, code_alignment)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <_txm_module_manager_in_place_load+0x5a>
 80082c4:	480a      	ldr	r0, [pc, #40]	; (80082f0 <_txm_module_manager_in_place_load+0x7c>)
 80082c6:	f7fc fd35 	bl	8004d34 <_tx_mutex_put>
 80082ca:	23f0      	movs	r3, #240	; 0xf0
 80082cc:	e00b      	b.n	80082e6 <_txm_module_manager_in_place_load+0x72>

    /* Now load the module in-place.  */
    status =  _txm_module_manager_internal_load(module_instance, module_name, module_location,
 80082ce:	2300      	movs	r3, #0
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f85f 	bl	80083a0 <_txm_module_manager_internal_load>
 80082e2:	61f8      	str	r0, [r7, #28]
                                                code_size, TX_NULL, 0);

    /* Return status.  */
    return(status);
 80082e4:	69fb      	ldr	r3, [r7, #28]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3728      	adds	r7, #40	; 0x28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	2000f644 	.word	0x2000f644

080082f4 <_txm_module_manager_initialize>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_initialize(VOID *module_memory_start, ULONG module_memory_size)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082fe:	f3ef 8305 	mrs	r3, IPSR
 8008302:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008304:	68fa      	ldr	r2, [r7, #12]

    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8008306:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <_txm_module_manager_initialize+0x80>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4313      	orrs	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <_txm_module_manager_initialize+0x34>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008310:	f3ef 8305 	mrs	r3, IPSR
 8008314:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8008316:	68ba      	ldr	r2, [r7, #8]
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <_txm_module_manager_initialize+0x80>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4313      	orrs	r3, r2
 800831e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008322:	d201      	bcs.n	8008328 <_txm_module_manager_initialize+0x34>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 8008324:	2313      	movs	r3, #19
 8008326:	e020      	b.n	800836a <_txm_module_manager_initialize+0x76>
        }
    }

    /* Setup the module properties supported by this module manager.  */
    _txm_module_manager_properties_supported =  TXM_MODULE_MANAGER_SUPPORTED_OPTIONS;
 8008328:	4b13      	ldr	r3, [pc, #76]	; (8008378 <_txm_module_manager_initialize+0x84>)
 800832a:	2207      	movs	r2, #7
 800832c:	601a      	str	r2, [r3, #0]

    /* Setup the module properties required by this module manager.   */
    _txm_module_manager_properties_required =   TXM_MODULE_MANAGER_REQUIRED_OPTIONS;
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <_txm_module_manager_initialize+0x88>)
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]

    /* Clear the module manager ready flag.  */
    _txm_module_manager_ready =  TX_FALSE;
 8008334:	4b12      	ldr	r3, [pc, #72]	; (8008380 <_txm_module_manager_initialize+0x8c>)
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]

    /* Initialize the empty module list.  */
    _txm_module_manager_loaded_list_ptr =  TX_NULL;
 800833a:	4b12      	ldr	r3, [pc, #72]	; (8008384 <_txm_module_manager_initialize+0x90>)
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

    /* Clear the number of loaded modules.  */
    _txm_module_manger_loaded_count =  0;
 8008340:	4b11      	ldr	r3, [pc, #68]	; (8008388 <_txm_module_manager_initialize+0x94>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]

    /* Create the module manager protection mutex.  */
    _tx_mutex_create(&_txm_module_manager_mutex, "Module Manager Protection Mutex", TX_NO_INHERIT);
 8008346:	2200      	movs	r2, #0
 8008348:	4910      	ldr	r1, [pc, #64]	; (800838c <_txm_module_manager_initialize+0x98>)
 800834a:	4811      	ldr	r0, [pc, #68]	; (8008390 <_txm_module_manager_initialize+0x9c>)
 800834c:	f7fc f968 	bl	8004620 <_tx_mutex_create>

    /* Create a byte pool for allocating RAM areas for modules.  */
    _tx_byte_pool_create(&_txm_module_manager_byte_pool, "Module Manager Byte Pool", module_memory_start, module_memory_size);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	490f      	ldr	r1, [pc, #60]	; (8008394 <_txm_module_manager_initialize+0xa0>)
 8008356:	4810      	ldr	r0, [pc, #64]	; (8008398 <_txm_module_manager_initialize+0xa4>)
 8008358:	f7fb fc4c 	bl	8003bf4 <_tx_byte_pool_create>

    /* Indicate the module manager object pool has not been created.  */
    _txm_module_manager_object_pool_created =  TX_FALSE;
 800835c:	4b0f      	ldr	r3, [pc, #60]	; (800839c <_txm_module_manager_initialize+0xa8>)
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]

    /* Mark the module manager as ready!  */
    _txm_module_manager_ready =  TX_TRUE;
 8008362:	4b07      	ldr	r3, [pc, #28]	; (8008380 <_txm_module_manager_initialize+0x8c>)
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000008 	.word	0x20000008
 8008378:	2000f5d0 	.word	0x2000f5d0
 800837c:	2000f5d4 	.word	0x2000f5d4
 8008380:	2000f680 	.word	0x2000f680
 8008384:	2000f678 	.word	0x2000f678
 8008388:	2000f67c 	.word	0x2000f67c
 800838c:	0800c9a0 	.word	0x0800c9a0
 8008390:	2000f644 	.word	0x2000f644
 8008394:	0800c9c0 	.word	0x0800c9c0
 8008398:	2000f5d8 	.word	0x2000f5d8
 800839c:	2000f640 	.word	0x2000f640

080083a0 <_txm_module_manager_internal_load>:
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_internal_load(TXM_MODULE_INSTANCE *module_instance, CHAR *module_name, VOID *module_location,
                                        ULONG code_size, VOID *code_allocation_ptr, ULONG code_allocation_size)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b09e      	sub	sp, #120	; 0x78
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80083ae:	f3ef 8305 	mrs	r3, IPSR
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
    return(ipsr_value);
 80083b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
CHAR                    *memory_ptr;
UINT                    status;


    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 80083b6:	4b7c      	ldr	r3, [pc, #496]	; (80085a8 <_txm_module_manager_internal_load+0x208>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <_txm_module_manager_internal_load+0x38>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80083c0:	f3ef 8305 	mrs	r3, IPSR
 80083c4:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80083c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80083c8:	4b77      	ldr	r3, [pc, #476]	; (80085a8 <_txm_module_manager_internal_load+0x208>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80083d2:	d201      	bcs.n	80083d8 <_txm_module_manager_internal_load+0x38>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 80083d4:	2313      	movs	r3, #19
 80083d6:	e216      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
        }
    }

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 80083d8:	4b74      	ldr	r3, [pc, #464]	; (80085ac <_txm_module_manager_internal_load+0x20c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <_txm_module_manager_internal_load+0x44>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 80083e0:	231d      	movs	r3, #29
 80083e2:	e210      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <_txm_module_manager_internal_load+0x4e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 80083ea:	2303      	movs	r3, #3
 80083ec:	e20b      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 80083ee:	f04f 31ff 	mov.w	r1, #4294967295
 80083f2:	486f      	ldr	r0, [pc, #444]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 80083f4:	f7fc fa18 	bl	8004828 <_tx_mutex_get>

    /* Determine if the module is already valid.  */
    if (module_instance -> txm_module_instance_id == TXM_MODULE_ID)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a6d      	ldr	r2, [pc, #436]	; (80085b4 <_txm_module_manager_internal_load+0x214>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d104      	bne.n	800840c <_txm_module_manager_internal_load+0x6c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8008402:	486b      	ldr	r0, [pc, #428]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 8008404:	f7fc fc96 	bl	8004d34 <_tx_mutex_put>

        /* Module already loaded.  */
        return(TXM_MODULE_ALREADY_LOADED);
 8008408:	23f1      	movs	r3, #241	; 0xf1
 800840a:	e1fc      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Pickup the module's information.  */
    module_preamble = (TXM_MODULE_PREAMBLE *) module_location;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Check to make sure there is a valid module to load.  */
    if (module_preamble -> txm_module_preamble_id != TXM_MODULE_ID)
 8008410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a67      	ldr	r2, [pc, #412]	; (80085b4 <_txm_module_manager_internal_load+0x214>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <_txm_module_manager_internal_load+0x84>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800841a:	4865      	ldr	r0, [pc, #404]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 800841c:	f7fc fc8a 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 8008420:	23f2      	movs	r3, #242	; 0xf2
 8008422:	e1f0      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Check the properties of this module.  */
    module_properties =  module_preamble -> txm_module_preamble_property_flags & TXM_MODULE_OPTIONS_MASK;
 8008424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (/* Ensure the requested properties are supported.  */
        ((module_properties & _txm_module_manager_properties_supported) != module_properties) ||
 800842c:	4b62      	ldr	r3, [pc, #392]	; (80085b8 <_txm_module_manager_internal_load+0x218>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008432:	4013      	ands	r3, r2
    if (/* Ensure the requested properties are supported.  */
 8008434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008436:	429a      	cmp	r2, r3
 8008438:	d111      	bne.n	800845e <_txm_module_manager_internal_load+0xbe>
        /* Ensure the required properties are there.  */
        ((_txm_module_manager_properties_required & module_properties) != _txm_module_manager_properties_required) ||
 800843a:	4b60      	ldr	r3, [pc, #384]	; (80085bc <_txm_module_manager_internal_load+0x21c>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008440:	401a      	ands	r2, r3
 8008442:	4b5e      	ldr	r3, [pc, #376]	; (80085bc <_txm_module_manager_internal_load+0x21c>)
 8008444:	681b      	ldr	r3, [r3, #0]
        ((module_properties & _txm_module_manager_properties_supported) != module_properties) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d109      	bne.n	800845e <_txm_module_manager_internal_load+0xbe>
        /* If memory protection is enabled, then so must user mode.  */
        ((module_properties & TXM_MODULE_MEMORY_PROTECTION) && !(module_properties & TXM_MODULE_USER_MODE))
 800844a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800844c:	f003 0302 	and.w	r3, r3, #2
        ((_txm_module_manager_properties_required & module_properties) != _txm_module_manager_properties_required) ||
 8008450:	2b00      	cmp	r3, #0
 8008452:	d009      	beq.n	8008468 <_txm_module_manager_internal_load+0xc8>
        ((module_properties & TXM_MODULE_MEMORY_PROTECTION) && !(module_properties & TXM_MODULE_USER_MODE))
 8008454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <_txm_module_manager_internal_load+0xc8>
        )
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800845e:	4854      	ldr	r0, [pc, #336]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 8008460:	f7fc fc68 	bl	8004d34 <_tx_mutex_put>

        /* Invalid properties. Return error.  */
        return(TXM_MODULE_INVALID_PROPERTIES);
 8008464:	23f3      	movs	r3, #243	; 0xf3
 8008466:	e1ce      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Check for valid module entry offsets.  */
    if ((module_preamble -> txm_module_preamble_shell_entry_function == 0) ||
 8008468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <_txm_module_manager_internal_load+0xd8>
        (module_preamble -> txm_module_preamble_start_function == 0))
 8008470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008472:	69db      	ldr	r3, [r3, #28]
    if ((module_preamble -> txm_module_preamble_shell_entry_function == 0) ||
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <_txm_module_manager_internal_load+0xe2>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8008478:	484d      	ldr	r0, [pc, #308]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 800847a:	f7fc fc5b 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 800847e:	23f2      	movs	r3, #242	; 0xf2
 8008480:	e1c1      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Check for valid sizes.  */
    if ((module_preamble -> txm_module_preamble_code_size == 0) ||
 8008482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_data_size == 0) ||
 800848a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if ((module_preamble -> txm_module_preamble_code_size == 0) ||
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_start_stop_stack_size == 0) ||
 8008492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        (module_preamble -> txm_module_preamble_data_size == 0) ||
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_callback_stack_size == 0))
 800849a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        (module_preamble -> txm_module_preamble_start_stop_stack_size == 0) ||
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <_txm_module_manager_internal_load+0x10c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80084a2:	4843      	ldr	r0, [pc, #268]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 80084a4:	f7fc fc46 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 80084a8:	23f2      	movs	r3, #242	; 0xf2
 80084aa:	e1ac      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
    }

    /* Initialize module control block to all zeros.  */
    TX_MEMSET(module_instance, 0, sizeof(TXM_MODULE_INSTANCE));
 80084ac:	f44f 6291 	mov.w	r2, #1160	; 0x488
 80084b0:	2100      	movs	r1, #0
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f003 fb64 	bl	800bb80 <memset>

    /* Pickup the basic module sizes.  */
    data_size =              module_preamble -> txm_module_preamble_data_size;
 80084b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084bc:	61bb      	str	r3, [r7, #24]
    start_stop_stack_size =  module_preamble -> txm_module_preamble_start_stop_stack_size;
 80084be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	657b      	str	r3, [r7, #84]	; 0x54
    callback_stack_size =    module_preamble -> txm_module_preamble_callback_stack_size;
 80084c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c8:	653b      	str	r3, [r7, #80]	; 0x50
    /* Adjust the size of the module elements to be aligned to the default alignment. We do this
       so that when we partition the allocated memory, we can simply place these regions right beside
       each other without having to align their pointers. Note this only works when they all have
       the same alignment.  */

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, TXM_MODULE_DATA_ALIGNMENT, data_size);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f113 0f05 	cmn.w	r3, #5
 80084d0:	d901      	bls.n	80084d6 <_txm_module_manager_internal_load+0x136>
 80084d2:	23f8      	movs	r3, #248	; 0xf8
 80084d4:	e197      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	3304      	adds	r3, #4
 80084da:	61bb      	str	r3, [r7, #24]
    data_size =              ((data_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	3b01      	subs	r3, #1
 80084e0:	f023 0303 	bic.w	r3, r3, #3
 80084e4:	61bb      	str	r3, [r7, #24]

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(start_stop_stack_size, TXM_MODULE_DATA_ALIGNMENT, start_stop_stack_size);
 80084e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084e8:	f113 0f05 	cmn.w	r3, #5
 80084ec:	d901      	bls.n	80084f2 <_txm_module_manager_internal_load+0x152>
 80084ee:	23f8      	movs	r3, #248	; 0xf8
 80084f0:	e189      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 80084f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f4:	3304      	adds	r3, #4
 80084f6:	657b      	str	r3, [r7, #84]	; 0x54
    start_stop_stack_size =  ((start_stop_stack_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 80084f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f023 0303 	bic.w	r3, r3, #3
 8008500:	657b      	str	r3, [r7, #84]	; 0x54

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(callback_stack_size, TXM_MODULE_DATA_ALIGNMENT, callback_stack_size);
 8008502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008504:	f113 0f05 	cmn.w	r3, #5
 8008508:	d901      	bls.n	800850e <_txm_module_manager_internal_load+0x16e>
 800850a:	23f8      	movs	r3, #248	; 0xf8
 800850c:	e17b      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 800850e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008510:	3304      	adds	r3, #4
 8008512:	653b      	str	r3, [r7, #80]	; 0x50
    callback_stack_size =    ((callback_stack_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8008514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008516:	3b01      	subs	r3, #1
 8008518:	f023 0303 	bic.w	r3, r3, #3
 800851c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Update the data size to account for the default thread stacks.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, start_stop_stack_size, data_size);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	43db      	mvns	r3, r3
 8008522:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008524:	429a      	cmp	r2, r3
 8008526:	d901      	bls.n	800852c <_txm_module_manager_internal_load+0x18c>
 8008528:	23f8      	movs	r3, #248	; 0xf8
 800852a:	e16c      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008530:	4413      	add	r3, r2
 8008532:	61bb      	str	r3, [r7, #24]
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, callback_stack_size, data_size);
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	43db      	mvns	r3, r3
 8008538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800853a:	429a      	cmp	r2, r3
 800853c:	d901      	bls.n	8008542 <_txm_module_manager_internal_load+0x1a2>
 800853e:	23f8      	movs	r3, #248	; 0xf8
 8008540:	e161      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008546:	4413      	add	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]

    /* Setup the default code and data alignments.  */
    data_alignment =  (ULONG) TXM_MODULE_DATA_ALIGNMENT;
 800854a:	2304      	movs	r3, #4
 800854c:	617b      	str	r3, [r7, #20]

    /* Get the port-specific alignment for the data size. Note we only want data
       so we pass values of 1 for code (to avoid any possible div by 0 errors).  */
    code_size_ignored = 1;
 800854e:	2301      	movs	r3, #1
 8008550:	623b      	str	r3, [r7, #32]
    code_alignment_ignored = 1;
 8008552:	2301      	movs	r3, #1
 8008554:	61fb      	str	r3, [r7, #28]
    TXM_MODULE_MANAGER_ALIGNMENT_ADJUST(module_preamble, code_size_ignored, code_alignment_ignored, data_size, data_alignment)
 8008556:	f107 0018 	add.w	r0, r7, #24
 800855a:	f107 021c 	add.w	r2, r7, #28
 800855e:	f107 0120 	add.w	r1, r7, #32
 8008562:	f107 0314 	add.w	r3, r7, #20
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	4603      	mov	r3, r0
 800856a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800856c:	f7ff fb6a 	bl	8007c44 <_txm_module_manager_alignment_adjust>
                            ...
                            End of Module's Data Area
    Highest Address:    */

    /* Add an extra alignment increment so we can align the pointer after allocation.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, data_alignment, data_allocation_size);
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	43da      	mvns	r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	429a      	cmp	r2, r3
 8008578:	d201      	bcs.n	800857e <_txm_module_manager_internal_load+0x1de>
 800857a:	23f8      	movs	r3, #248	; 0xf8
 800857c:	e143      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	4413      	add	r3, r2
 8008584:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Allocate memory for the module.  */
    status =  _tx_byte_allocate(&_txm_module_manager_byte_pool, (VOID **) &memory_ptr, data_allocation_size, TX_NO_WAIT);
 8008586:	f107 0110 	add.w	r1, r7, #16
 800858a:	2300      	movs	r3, #0
 800858c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800858e:	480c      	ldr	r0, [pc, #48]	; (80085c0 <_txm_module_manager_internal_load+0x220>)
 8008590:	f7fb f9ee 	bl	8003970 <_tx_byte_allocate>
 8008594:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Determine if the module memory allocation was successful.  */
    if (status)
 8008596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008598:	2b00      	cmp	r3, #0
 800859a:	d013      	beq.n	80085c4 <_txm_module_manager_internal_load+0x224>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800859c:	4804      	ldr	r0, [pc, #16]	; (80085b0 <_txm_module_manager_internal_load+0x210>)
 800859e:	f7fc fbc9 	bl	8004d34 <_tx_mutex_put>

        /* No memory, return an error.  */
        return(TX_NO_MEMORY);
 80085a2:	2310      	movs	r3, #16
 80085a4:	e12f      	b.n	8008806 <_txm_module_manager_internal_load+0x466>
 80085a6:	bf00      	nop
 80085a8:	20000008 	.word	0x20000008
 80085ac:	2000f680 	.word	0x2000f680
 80085b0:	2000f644 	.word	0x2000f644
 80085b4:	4d4f4455 	.word	0x4d4f4455
 80085b8:	2000f5d0 	.word	0x2000f5d0
 80085bc:	2000f5d4 	.word	0x2000f5d4
 80085c0:	2000f5d8 	.word	0x2000f5d8
    }

    /* Clear the allocated memory.  */
    TX_MEMSET(memory_ptr, ((UCHAR) 0), data_allocation_size);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085c8:	2100      	movs	r1, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f003 fad8 	bl	800bb80 <memset>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085d0:	f3ef 8310 	mrs	r3, PRIMASK
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80085da:	b672      	cpsid	i
    return(int_posture);
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts.  */
    TX_DISABLE
 80085de:	647b      	str	r3, [r7, #68]	; 0x44

    /* Setup the module instance structure.  */
    module_instance -> txm_module_instance_id = TXM_MODULE_ID;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4a8b      	ldr	r2, [pc, #556]	; (8008810 <_txm_module_manager_internal_load+0x470>)
 80085e4:	601a      	str	r2, [r3, #0]

    /* Save the module name.  */
    module_instance -> txm_module_instance_name =  module_name;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	605a      	str	r2, [r3, #4]

    /* Save the module properties.  */
    module_instance -> txm_module_instance_property_flags =  module_preamble -> txm_module_preamble_property_flags;
 80085ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ee:	695a      	ldr	r2, [r3, #20]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	60da      	str	r2, [r3, #12]

    /* Set the module data memory allocation. This is the address released
       when the module is unloaded.  */
    module_instance -> txm_module_instance_data_allocation_ptr =  (VOID *) memory_ptr;
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Save the data allocation size.  */
    module_instance -> txm_module_instance_data_allocation_size =   data_allocation_size;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the actual start of the data area. This needs to be adjusted based on the alignment.  */
    data_start =  (ALIGN_TYPE) memory_ptr;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	643b      	str	r3, [r7, #64]	; 0x40
    data_start =  (data_start + (((ALIGN_TYPE)data_alignment) - 1)) & ~(((ALIGN_TYPE)data_alignment) - 1);
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	4413      	add	r3, r2
 800860a:	1e5a      	subs	r2, r3, #1
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	425b      	negs	r3, r3
 8008610:	4013      	ands	r3, r2
 8008612:	643b      	str	r3, [r7, #64]	; 0x40
    memory_ptr =  (CHAR *) data_start;
 8008614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008616:	613b      	str	r3, [r7, #16]
    module_instance -> txm_module_instance_data_start =  (VOID *) memory_ptr;
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Compute the end of the data memory allocation.  */
    module_instance -> txm_module_instance_data_end =  (VOID *) (memory_ptr + (data_size - 1));
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	3b01      	subs	r3, #1
 8008624:	441a      	add	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the size of the data area.  */
    module_instance -> txm_module_instance_data_size =  data_size;
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Set the module code memory allocation. This is the address released
       when the module is unloaded.  */
    module_instance -> txm_module_instance_code_allocation_ptr =  (VOID *) code_allocation_ptr;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008634:	611a      	str	r2, [r3, #16]

    /* Save the code allocation size.  */
    module_instance -> txm_module_instance_code_allocation_size =   code_allocation_size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800863a:	615a      	str	r2, [r3, #20]

    /* Setup the code pointers.  Since the code was loaded in-place, this is effectively just the values supplied in the API call.  */
    module_instance -> txm_module_instance_code_start =     (VOID *) module_location;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	619a      	str	r2, [r3, #24]
    module_instance -> txm_module_instance_code_end =       (VOID *) (((CHAR *) module_location) + (code_size - 1));
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	3b01      	subs	r3, #1
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	441a      	add	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	61da      	str	r2, [r3, #28]

    /* Setup the code size.  */
    module_instance -> txm_module_instance_code_size =      code_size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	621a      	str	r2, [r3, #32]

    /* Save the module's total memory usage.  */
    module_instance -> txm_module_instance_total_ram_usage =  data_allocation_size + code_allocation_size;
 8008654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the module state to started.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_LOADED;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	609a      	str	r2, [r3, #8]

    /* Save the preamble pointer.  */
    module_instance -> txm_module_instance_preamble_ptr =  module_preamble;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Save the module application ID in the module instance.  */
    module_instance -> txm_module_instance_application_module_id =  module_preamble -> txm_module_preamble_application_module_id;
 800866a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470

    /* Setup the module's start/stop thread stack area.  */
    module_instance -> txm_module_instance_start_stop_stack_start_address =  (VOID *) (memory_ptr);
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	641a      	str	r2, [r3, #64]	; 0x40
    module_instance -> txm_module_instance_start_stop_stack_size =           start_stop_stack_size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800867e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
    module_instance -> txm_module_instance_start_stop_stack_end_address =    (VOID *) (memory_ptr + (start_stop_stack_size - 1));
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008686:	3b01      	subs	r3, #1
 8008688:	441a      	add	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Move the memory pointer forward.  */
    memory_ptr =  memory_ptr + start_stop_stack_size;
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008692:	4413      	add	r3, r2
 8008694:	613b      	str	r3, [r7, #16]

    /* Save the start/stop thread priority.  */
    module_instance -> txm_module_instance_start_stop_priority =     module_preamble -> txm_module_preamble_start_stop_priority;
 8008696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

    /* Setup the module's callback thread stack area.  */
    module_instance -> txm_module_instance_callback_stack_start_address =  (VOID *) (memory_ptr);
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	649a      	str	r2, [r3, #72]	; 0x48
    module_instance -> txm_module_instance_callback_stack_size =           callback_stack_size;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086aa:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
    module_instance -> txm_module_instance_callback_stack_end_address =    (VOID *) (memory_ptr + (callback_stack_size - 1));
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b2:	3b01      	subs	r3, #1
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Move the memory pointer forward.  */
    memory_ptr =  memory_ptr + callback_stack_size;
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086be:	4413      	add	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]

    /* Save the callback thread priority.  */
    module_instance -> txm_module_instance_callback_priority =  module_preamble -> txm_module_preamble_callback_priority;
 80086c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

    /* Setup the start of the module data section.  */
    module_instance -> txm_module_instance_module_data_base_address =  (VOID *) (memory_ptr);
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Calculate the function adjustments based on the specific implementation of the module manager/module.  */
    TXM_MODULE_MANAGER_CALCULATE_ADJUSTMENTS(module_preamble -> txm_module_preamble_property_flags, shell_function_adjust, start_function_adjust, stop_function_adjust, callback_function_adjust)
 80086d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d108      	bne.n	80086f0 <_txm_module_manager_internal_load+0x350>
 80086de:	2318      	movs	r3, #24
 80086e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086e2:	231c      	movs	r3, #28
 80086e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80086e6:	2320      	movs	r3, #32
 80086e8:	667b      	str	r3, [r7, #100]	; 0x64
 80086ea:	232c      	movs	r3, #44	; 0x2c
 80086ec:	663b      	str	r3, [r7, #96]	; 0x60
 80086ee:	e017      	b.n	8008720 <_txm_module_manager_internal_load+0x380>
 80086f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086fc:	d108      	bne.n	8008710 <_txm_module_manager_internal_load+0x370>
 80086fe:	2300      	movs	r3, #0
 8008700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008702:	2300      	movs	r3, #0
 8008704:	66bb      	str	r3, [r7, #104]	; 0x68
 8008706:	2300      	movs	r3, #0
 8008708:	667b      	str	r3, [r7, #100]	; 0x64
 800870a:	2300      	movs	r3, #0
 800870c:	663b      	str	r3, [r7, #96]	; 0x60
 800870e:	e007      	b.n	8008720 <_txm_module_manager_internal_load+0x380>
 8008710:	2318      	movs	r3, #24
 8008712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008714:	231c      	movs	r3, #28
 8008716:	66bb      	str	r3, [r7, #104]	; 0x68
 8008718:	2320      	movs	r3, #32
 800871a:	667b      	str	r3, [r7, #100]	; 0x64
 800871c:	232c      	movs	r3, #44	; 0x2c
 800871e:	663b      	str	r3, [r7, #96]	; 0x60

    /* Build actual addresses based on load...  Setup all the function pointers. Any adjustments needed to shell entry, start function, and callback function are defined in the
       module preamble. */
    module_instance -> txm_module_instance_shell_entry_function  =          (VOID (*)(TX_THREAD *, TXM_MODULE_INSTANCE *)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	4619      	mov	r1, r3
                                                                                                                                      (module_preamble -> txm_module_preamble_shell_entry_function) +
 8008726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872c:	4413      	add	r3, r2
    module_instance -> txm_module_instance_shell_entry_function  =          (VOID (*)(TX_THREAD *, TXM_MODULE_INSTANCE *)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800872e:	18ca      	adds	r2, r1, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                                                                      (shell_function_adjust));
    module_instance -> txm_module_instance_start_thread_entry =             (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_start_function) +
 8008738:	4619      	mov	r1, r3
 800873a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800873c:	69da      	ldr	r2, [r3, #28]
 800873e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008740:	4413      	add	r3, r2
    module_instance -> txm_module_instance_start_thread_entry =             (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008742:	18ca      	adds	r2, r1, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	659a      	str	r2, [r3, #88]	; 0x58
                                                                                                                                      (start_function_adjust));
    module_instance -> txm_module_instance_callback_request_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_callback_function) +
 800874c:	4619      	mov	r1, r3
 800874e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008754:	4413      	add	r3, r2
    module_instance -> txm_module_instance_callback_request_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008756:	18ca      	adds	r2, r1, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	661a      	str	r2, [r3, #96]	; 0x60
                                                                                                                                      (callback_function_adjust));
    /* Determine if there is a stop function for this module.  */
    if (module_preamble -> txm_module_preamble_stop_function)
 800875c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00a      	beq.n	800877a <_txm_module_manager_internal_load+0x3da>
    {

        /* Yes, there is a stop function, build the address.  */
        module_instance -> txm_module_instance_stop_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_stop_function) +
 8008768:	4619      	mov	r1, r3
 800876a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800876c:	6a1a      	ldr	r2, [r3, #32]
 800876e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008770:	4413      	add	r3, r2
        module_instance -> txm_module_instance_stop_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 8008772:	18ca      	adds	r2, r1, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	65da      	str	r2, [r3, #92]	; 0x5c
 8008778:	e002      	b.n	8008780 <_txm_module_manager_internal_load+0x3e0>
    }
    else
    {

        /* No, there is no stop function. Just set the pointer to NULL.  */
        module_instance -> txm_module_instance_stop_thread_entry =  TX_NULL;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Load the module control block with port-specific information. */
    TXM_MODULE_MANAGER_MODULE_SETUP(module_instance);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <_txm_module_manager_internal_load+0x3fe>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <_txm_module_manager_internal_load+0x3fe>
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f001 fae3 	bl	8009d64 <_txm_module_manager_mm_register_setup>

    /* Now add the module to the linked list of created modules.  */
    if (_txm_module_manger_loaded_count++ == 0)
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <_txm_module_manager_internal_load+0x474>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	491b      	ldr	r1, [pc, #108]	; (8008814 <_txm_module_manager_internal_load+0x474>)
 80087a6:	600a      	str	r2, [r1, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <_txm_module_manager_internal_load+0x424>
    {

        /* The loaded module list is empty.  Add module to empty list.  */
        _txm_module_manager_loaded_list_ptr =                     module_instance;
 80087ac:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <_txm_module_manager_internal_load+0x478>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6013      	str	r3, [r2, #0]
        module_instance -> txm_module_instance_loaded_next =      module_instance;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
        module_instance -> txm_module_instance_loaded_previous =  module_instance;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 80087c2:	e016      	b.n	80087f2 <_txm_module_manager_internal_load+0x452>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_module =      _txm_module_manager_loaded_list_ptr;
 80087c4:	4b14      	ldr	r3, [pc, #80]	; (8008818 <_txm_module_manager_internal_load+0x478>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        previous_module =  next_module -> txm_module_instance_loaded_previous;
 80087ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087cc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Place the new module in the list.  */
        next_module -> txm_module_instance_loaded_previous =  module_instance;
 80087d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
        previous_module -> txm_module_instance_loaded_next =  module_instance;
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

        /* Setup this module's created links.  */
        module_instance -> txm_module_instance_loaded_previous =  previous_module;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087e6:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
        module_instance -> txm_module_instance_loaded_next =      next_module;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087ee:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 80087f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	f383 8810 	msr	PRIMASK, r3
}
 80087fc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 80087fe:	4807      	ldr	r0, [pc, #28]	; (800881c <_txm_module_manager_internal_load+0x47c>)
 8008800:	f7fc fa98 	bl	8004d34 <_tx_mutex_put>

    /* Return success.  */
    return(TX_SUCCESS);
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3770      	adds	r7, #112	; 0x70
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	4d4f4455 	.word	0x4d4f4455
 8008814:	2000f67c 	.word	0x2000f67c
 8008818:	2000f678 	.word	0x2000f678
 800881c:	2000f644 	.word	0x2000f644

08008820 <_txm_module_manager_tx_byte_allocate_dispatch>:
    VOID **memory_ptr, -> param_1
    ULONG memory_size, -> extra_parameters[0]
    ULONG wait_option -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8088 	beq.w	800894c <_txm_module_manager_tx_byte_allocate_dispatch+0x12c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8008842:	d81f      	bhi.n	8008884 <_txm_module_manager_tx_byte_allocate_dispatch+0x64>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	461a      	mov	r2, r3
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	4293      	cmp	r3, r2
 800884e:	d307      	bcc.n	8008860 <_txm_module_manager_tx_byte_allocate_dispatch+0x40>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	3301      	adds	r3, #1
 800885c:	429a      	cmp	r2, r3
 800885e:	d923      	bls.n	80088a8 <_txm_module_manager_tx_byte_allocate_dispatch+0x88>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	d30b      	bcc.n	8008884 <_txm_module_manager_tx_byte_allocate_dispatch+0x64>
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800887e:	440b      	add	r3, r1
 8008880:	429a      	cmp	r2, r3
 8008882:	d911      	bls.n	80088a8 <_txm_module_manager_tx_byte_allocate_dispatch+0x88>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800888a:	d812      	bhi.n	80088b2 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	461a      	mov	r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4293      	cmp	r3, r2
 8008896:	d30c      	bcc.n	80088b2 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	3301      	adds	r3, #1
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d804      	bhi.n	80088b2 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 80088ae:	23f4      	movs	r3, #244	; 0xf4
 80088b0:	e057      	b.n	8008962 <_txm_module_manager_tx_byte_allocate_dispatch+0x142>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(VOID *)))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f113 0f05 	cmn.w	r3, #5
 80088b8:	d81d      	bhi.n	80088f6 <_txm_module_manager_tx_byte_allocate_dispatch+0xd6>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d306      	bcc.n	80088d4 <_txm_module_manager_tx_byte_allocate_dispatch+0xb4>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	3301      	adds	r3, #1
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d915      	bls.n	8008900 <_txm_module_manager_tx_byte_allocate_dispatch+0xe0>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d30a      	bcc.n	80088f6 <_txm_module_manager_tx_byte_allocate_dispatch+0xd6>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088f0:	440b      	add	r3, r1
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d904      	bls.n	8008900 <_txm_module_manager_tx_byte_allocate_dispatch+0xe0>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <_txm_module_manager_tx_byte_allocate_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 80088fc:	23f4      	movs	r3, #244	; 0xf4
 80088fe:	e030      	b.n	8008962 <_txm_module_manager_tx_byte_allocate_dispatch+0x142>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	f113 0f09 	cmn.w	r3, #9
 8008906:	d81f      	bhi.n	8008948 <_txm_module_manager_tx_byte_allocate_dispatch+0x128>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	461a      	mov	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d807      	bhi.n	8008924 <_txm_module_manager_tx_byte_allocate_dispatch+0x104>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	f103 0208 	add.w	r2, r3, #8
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	3301      	adds	r3, #1
 8008920:	429a      	cmp	r2, r3
 8008922:	d913      	bls.n	800894c <_txm_module_manager_tx_byte_allocate_dispatch+0x12c>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d80b      	bhi.n	8008948 <_txm_module_manager_tx_byte_allocate_dispatch+0x128>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	f103 0208 	add.w	r2, r3, #8
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008942:	440b      	add	r3, r1
 8008944:	429a      	cmp	r2, r3
 8008946:	d901      	bls.n	800894c <_txm_module_manager_tx_byte_allocate_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 8008948:	23f4      	movs	r3, #244	; 0xf4
 800894a:	e00a      	b.n	8008962 <_txm_module_manager_tx_byte_allocate_dispatch+0x142>
    }

    return_value = (ALIGN_TYPE) _txe_byte_allocate(
 800894c:	68b8      	ldr	r0, [r7, #8]
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
        (TX_BYTE_POOL *) param_0,
        (VOID **) param_1,
        (ULONG) extra_parameters[0],
        (ULONG) extra_parameters[1]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_byte_allocate(
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f7fe fc41 	bl	80071e0 <_txe_byte_allocate>
 800895e:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8008960:	697b      	ldr	r3, [r7, #20]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <_txm_module_manager_tx_byte_pool_create_dispatch>:
    VOID *pool_start, -> extra_parameters[0]
    ULONG pool_size, -> extra_parameters[1]
    UINT pool_control_block_size -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b089      	sub	sp, #36	; 0x24
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80b8 	beq.w	8008af8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 8008988:	4b66      	ldr	r3, [pc, #408]	; (8008b24 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b8>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d119      	bne.n	80089c4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8008996:	d815      	bhi.n	80089c4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 8008998:	4b63      	ldr	r3, [pc, #396]	; (8008b28 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1bc>)
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	3310      	adds	r3, #16
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d30f      	bcc.n	80089c4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	3334      	adds	r3, #52	; 0x34
 80089a8:	4a5f      	ldr	r2, [pc, #380]	; (8008b28 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1bc>)
 80089aa:	6991      	ldr	r1, [r2, #24]
 80089ac:	4a5e      	ldr	r2, [pc, #376]	; (8008b28 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1bc>)
 80089ae:	69d2      	ldr	r2, [r2, #28]
 80089b0:	440a      	add	r2, r1
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d806      	bhi.n	80089c4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 80089b6:	2134      	movs	r1, #52	; 0x34
 80089b8:	68b8      	ldr	r0, [r7, #8]
 80089ba:	f002 fe51 	bl	800b660 <_txm_module_manager_object_size_check>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <_txm_module_manager_tx_byte_pool_create_dispatch+0x62>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <_txm_module_manager_tx_byte_pool_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 80089ca:	23f4      	movs	r3, #244	; 0xf4
 80089cc:	e0a6      	b.n	8008b1c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d01d      	beq.n	8008a12 <_txm_module_manager_tx_byte_pool_create_dispatch+0xa6>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	461a      	mov	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4293      	cmp	r3, r2
 80089e0:	d306      	bcc.n	80089f0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x84>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	3301      	adds	r3, #1
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d926      	bls.n	8008a3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d30a      	bcc.n	8008a12 <_txm_module_manager_tx_byte_pool_create_dispatch+0xa6>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a0c:	440b      	add	r3, r1
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d915      	bls.n	8008a3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	d00c      	beq.n	8008a34 <_txm_module_manager_tx_byte_pool_create_dispatch+0xc8>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d306      	bcc.n	8008a34 <_txm_module_manager_tx_byte_pool_create_dispatch+0xc8>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d904      	bls.n	8008a3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 8008a3a:	23f4      	movs	r3, #244	; 0xf4
 8008a3c:	e06e      	b.n	8008b1c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	f113 0f0d 	cmn.w	r3, #13
 8008a44:	d81f      	bhi.n	8008a86 <_txm_module_manager_tx_byte_pool_create_dispatch+0x11a>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d807      	bhi.n	8008a62 <_txm_module_manager_tx_byte_pool_create_dispatch+0xf6>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f103 020c 	add.w	r2, r3, #12
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d913      	bls.n	8008a8a <_txm_module_manager_tx_byte_pool_create_dispatch+0x11e>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d80b      	bhi.n	8008a86 <_txm_module_manager_tx_byte_pool_create_dispatch+0x11a>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	f103 020c 	add.w	r2, r3, #12
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a80:	440b      	add	r3, r1
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d901      	bls.n	8008a8a <_txm_module_manager_tx_byte_pool_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 8008a86:	23f4      	movs	r3, #244	; 0xf4
 8008a88:	e048      	b.n	8008b1c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], extra_parameters[1]))
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6819      	ldr	r1, [r3, #0]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	3304      	adds	r3, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	440b      	add	r3, r1
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d226      	bcs.n	8008aec <_txm_module_manager_tx_byte_pool_create_dispatch+0x180>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d30a      	bcc.n	8008ac0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x154>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	3301      	adds	r3, #1
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d91b      	bls.n	8008af8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d30e      	bcc.n	8008aec <_txm_module_manager_tx_byte_pool_create_dispatch+0x180>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ae6:	440b      	add	r3, r1
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d905      	bls.n	8008af8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
            return(TXM_MODULE_INVALID_MEMORY);
 8008af4:	23f4      	movs	r3, #244	; 0xf4
 8008af6:	e011      	b.n	8008b1c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 8008af8:	68b8      	ldr	r0, [r7, #8]
 8008afa:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (CHAR *) param_1,
        (VOID *) extra_parameters[0],
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 8008b00:	461c      	mov	r4, r3
        (ULONG) extra_parameters[1],
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 8008b06:	681a      	ldr	r2, [r3, #0]
        (UINT) extra_parameters[2]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	4622      	mov	r2, r4
 8008b14:	f7fe fbd8 	bl	80072c8 <_txe_byte_pool_create>
 8008b18:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8008b1a:	697b      	ldr	r3, [r7, #20]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd90      	pop	{r4, r7, pc}
 8008b24:	2000f640 	.word	0x2000f640
 8008b28:	2000f60c 	.word	0x2000f60c

08008b2c <_txm_module_manager_tx_queue_create_dispatch>:
    VOID *queue_start, -> extra_parameters[1]
    ULONG queue_size, -> extra_parameters[2]
    UINT queue_control_block_size -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8008b2c:	b5b0      	push	{r4, r5, r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80bf 	beq.w	8008cc6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_QUEUE)))
 8008b48:	4b6c      	ldr	r3, [pc, #432]	; (8008cfc <_txm_module_manager_tx_queue_create_dispatch+0x1d0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d119      	bne.n	8008b84 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8008b56:	d815      	bhi.n	8008b84 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 8008b58:	4b69      	ldr	r3, [pc, #420]	; (8008d00 <_txm_module_manager_tx_queue_create_dispatch+0x1d4>)
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	3310      	adds	r3, #16
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d30f      	bcc.n	8008b84 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	3344      	adds	r3, #68	; 0x44
 8008b68:	4a65      	ldr	r2, [pc, #404]	; (8008d00 <_txm_module_manager_tx_queue_create_dispatch+0x1d4>)
 8008b6a:	6991      	ldr	r1, [r2, #24]
 8008b6c:	4a64      	ldr	r2, [pc, #400]	; (8008d00 <_txm_module_manager_tx_queue_create_dispatch+0x1d4>)
 8008b6e:	69d2      	ldr	r2, [r2, #28]
 8008b70:	440a      	add	r2, r1
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d806      	bhi.n	8008b84 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 8008b76:	2144      	movs	r1, #68	; 0x44
 8008b78:	68b8      	ldr	r0, [r7, #8]
 8008b7a:	f002 fd71 	bl	800b660 <_txm_module_manager_object_size_check>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <_txm_module_manager_tx_queue_create_dispatch+0x62>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <_txm_module_manager_tx_queue_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 8008b8a:	23f4      	movs	r3, #244	; 0xf4
 8008b8c:	e0b1      	b.n	8008cf2 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d01d      	beq.n	8008bd2 <_txm_module_manager_tx_queue_create_dispatch+0xa6>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d306      	bcc.n	8008bb0 <_txm_module_manager_tx_queue_create_dispatch+0x84>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	3301      	adds	r3, #1
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d926      	bls.n	8008bfe <_txm_module_manager_tx_queue_create_dispatch+0xd2>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d30a      	bcc.n	8008bd2 <_txm_module_manager_tx_queue_create_dispatch+0xa6>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bcc:	440b      	add	r3, r1
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d915      	bls.n	8008bfe <_txm_module_manager_tx_queue_create_dispatch+0xd2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d00c      	beq.n	8008bf4 <_txm_module_manager_tx_queue_create_dispatch+0xc8>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d306      	bcc.n	8008bf4 <_txm_module_manager_tx_queue_create_dispatch+0xc8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d904      	bls.n	8008bfe <_txm_module_manager_tx_queue_create_dispatch+0xd2>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <_txm_module_manager_tx_queue_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 8008bfa:	23f4      	movs	r3, #244	; 0xf4
 8008bfc:	e079      	b.n	8008cf2 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	f113 0f11 	cmn.w	r3, #17
 8008c04:	d81f      	bhi.n	8008c46 <_txm_module_manager_tx_queue_create_dispatch+0x11a>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d807      	bhi.n	8008c22 <_txm_module_manager_tx_queue_create_dispatch+0xf6>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	f103 0210 	add.w	r2, r3, #16
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d913      	bls.n	8008c4a <_txm_module_manager_tx_queue_create_dispatch+0x11e>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d80b      	bhi.n	8008c46 <_txm_module_manager_tx_queue_create_dispatch+0x11a>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	f103 0210 	add.w	r2, r3, #16
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c40:	440b      	add	r3, r1
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d901      	bls.n	8008c4a <_txm_module_manager_tx_queue_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 8008c46:	23f4      	movs	r3, #244	; 0xf4
 8008c48:	e053      	b.n	8008cf2 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], extra_parameters[2]))
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	3304      	adds	r3, #4
 8008c54:	6819      	ldr	r1, [r3, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	440b      	add	r3, r1
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d22a      	bcs.n	8008cb8 <_txm_module_manager_tx_queue_create_dispatch+0x18c>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	3304      	adds	r3, #4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d30b      	bcc.n	8008c88 <_txm_module_manager_tx_queue_create_dispatch+0x15c>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	3304      	adds	r3, #4
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	3301      	adds	r3, #1
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d91e      	bls.n	8008cc6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d30f      	bcc.n	8008cb8 <_txm_module_manager_tx_queue_create_dispatch+0x18c>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cb2:	440b      	add	r3, r1
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d906      	bls.n	8008cc6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
            return(TXM_MODULE_INVALID_MEMORY);
 8008cc2:	23f4      	movs	r3, #244	; 0xf4
 8008cc4:	e015      	b.n	8008cf2 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>
    }

    return_value = (ALIGN_TYPE) _txe_queue_create(
 8008cc6:	68b8      	ldr	r0, [r7, #8]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	681c      	ldr	r4, [r3, #0]
        (TX_QUEUE *) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (VOID *) extra_parameters[1],
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_create(
 8008cd4:	461d      	mov	r5, r3
        (ULONG) extra_parameters[2],
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_queue_create(
 8008cda:	681b      	ldr	r3, [r3, #0]
        (UINT) extra_parameters[3]
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_queue_create(
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	9201      	str	r2, [sp, #4]
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	4622      	mov	r2, r4
 8008cea:	f7fe fc21 	bl	8007530 <_txe_queue_create>
 8008cee:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8008cf0:	697b      	ldr	r3, [r7, #20]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	2000f640 	.word	0x2000f640
 8008d00:	2000f60c 	.word	0x2000f60c

08008d04 <_txm_module_manager_tx_queue_receive_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *destination_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_receive_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d06d      	beq.n	8008dfa <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8008d24:	d81f      	bhi.n	8008d66 <_txm_module_manager_tx_queue_receive_dispatch+0x62>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d307      	bcc.n	8008d42 <_txm_module_manager_tx_queue_receive_dispatch+0x3e>
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d923      	bls.n	8008d8a <_txm_module_manager_tx_queue_receive_dispatch+0x86>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d30b      	bcc.n	8008d66 <_txm_module_manager_tx_queue_receive_dispatch+0x62>
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d60:	440b      	add	r3, r1
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d911      	bls.n	8008d8a <_txm_module_manager_tx_queue_receive_dispatch+0x86>
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8008d6c:	d812      	bhi.n	8008d94 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	461a      	mov	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d30c      	bcc.n	8008d94 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	3301      	adds	r3, #1
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d804      	bhi.n	8008d94 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 8008d90:	23f4      	movs	r3, #244	; 0xf4
 8008d92:	e03a      	b.n	8008e0a <_txm_module_manager_tx_queue_receive_dispatch+0x106>

        /* We need to get the max size of the buffer from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)*queue_ptr -> tx_queue_message_size))
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	009a      	lsls	r2, r3, #2
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4413      	add	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d223      	bcs.n	8008df0 <_txm_module_manager_tx_queue_receive_dispatch+0xec>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	461a      	mov	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d309      	bcc.n	8008dc8 <_txm_module_manager_tx_queue_receive_dispatch+0xc4>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	009a      	lsls	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	441a      	add	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d918      	bls.n	8008dfa <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d30d      	bcc.n	8008df0 <_txm_module_manager_tx_queue_receive_dispatch+0xec>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	009a      	lsls	r2, r3, #2
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	441a      	add	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dea:	440b      	add	r3, r1
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d904      	bls.n	8008dfa <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
            return(TXM_MODULE_INVALID_MEMORY);
 8008df6:	23f4      	movs	r3, #244	; 0xf4
 8008df8:	e007      	b.n	8008e0a <_txm_module_manager_tx_queue_receive_dispatch+0x106>
    }

    return_value = (ALIGN_TYPE) _txe_queue_receive(
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fe fc45 	bl	8007690 <_txe_queue_receive>
 8008e06:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 8008e08:	693b      	ldr	r3, [r7, #16]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <_txm_module_manager_tx_queue_send_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *source_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_send_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8086 	beq.w	8008f3a <_txm_module_manager_tx_queue_send_dispatch+0x128>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8008e34:	d81f      	bhi.n	8008e76 <_txm_module_manager_tx_queue_send_dispatch+0x64>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d307      	bcc.n	8008e52 <_txm_module_manager_tx_queue_send_dispatch+0x40>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d923      	bls.n	8008e9a <_txm_module_manager_tx_queue_send_dispatch+0x88>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d30b      	bcc.n	8008e76 <_txm_module_manager_tx_queue_send_dispatch+0x64>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e70:	440b      	add	r3, r1
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d911      	bls.n	8008e9a <_txm_module_manager_tx_queue_send_dispatch+0x88>
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8008e7c:	d812      	bhi.n	8008ea4 <_txm_module_manager_tx_queue_send_dispatch+0x92>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	461a      	mov	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d30c      	bcc.n	8008ea4 <_txm_module_manager_tx_queue_send_dispatch+0x92>
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	3301      	adds	r3, #1
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d804      	bhi.n	8008ea4 <_txm_module_manager_tx_queue_send_dispatch+0x92>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <_txm_module_manager_tx_queue_send_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 8008ea0:	23f4      	movs	r3, #244	; 0xf4
 8008ea2:	e052      	b.n	8008f4a <_txm_module_manager_tx_queue_send_dispatch+0x138>

        /* We need to get the size of the message from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_READ(module_instance, param_1, sizeof(ULONG)*queue_ptr -> tx_queue_message_size))
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	009a      	lsls	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d223      	bcs.n	8008f00 <_txm_module_manager_tx_queue_send_dispatch+0xee>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d309      	bcc.n	8008ed8 <_txm_module_manager_tx_queue_send_dispatch+0xc6>
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	009a      	lsls	r2, r3, #2
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	441a      	add	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d930      	bls.n	8008f3a <_txm_module_manager_tx_queue_send_dispatch+0x128>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d30d      	bcc.n	8008f00 <_txm_module_manager_tx_queue_send_dispatch+0xee>
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	009a      	lsls	r2, r3, #2
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	441a      	add	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008efa:	440b      	add	r3, r1
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d91c      	bls.n	8008f3a <_txm_module_manager_tx_queue_send_dispatch+0x128>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	009a      	lsls	r2, r3, #2
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d20f      	bcs.n	8008f30 <_txm_module_manager_tx_queue_send_dispatch+0x11e>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	461a      	mov	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d309      	bcc.n	8008f30 <_txm_module_manager_tx_queue_send_dispatch+0x11e>
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	009a      	lsls	r2, r3, #2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	441a      	add	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d904      	bls.n	8008f3a <_txm_module_manager_tx_queue_send_dispatch+0x128>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <_txm_module_manager_tx_queue_send_dispatch+0x128>
            return(TXM_MODULE_INVALID_MEMORY);
 8008f36:	23f4      	movs	r3, #244	; 0xf4
 8008f38:	e007      	b.n	8008f4a <_txm_module_manager_tx_queue_send_dispatch+0x138>
    }

    return_value = (ALIGN_TYPE) _txe_queue_send(
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fbef 	bl	8007724 <_txe_queue_send>
 8008f46:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 8008f48:	693b      	ldr	r3, [r7, #16]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <_txm_module_manager_tx_thread_create_dispatch>:
    ULONG time_slice, -> extra_parameters[6]
    UINT auto_start, -> extra_parameters[7]
    UINT thread_control_block_size -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8008f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f56:	b097      	sub	sp, #92	; 0x5c
 8008f58:	af0a      	add	r7, sp, #40	; 0x28
 8008f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f5c:	6239      	str	r1, [r7, #32]
 8008f5e:	61fa      	str	r2, [r7, #28]
 8008f60:	61bb      	str	r3, [r7, #24]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80d3 	beq.w	8009116 <_txm_module_manager_tx_thread_create_dispatch+0x1c2>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_THREAD)))
 8008f70:	4b87      	ldr	r3, [pc, #540]	; (8009190 <_txm_module_manager_tx_thread_create_dispatch+0x23c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d119      	bne.n	8008fac <_txm_module_manager_tx_thread_create_dispatch+0x58>
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8008f7e:	d815      	bhi.n	8008fac <_txm_module_manager_tx_thread_create_dispatch+0x58>
 8008f80:	4b84      	ldr	r3, [pc, #528]	; (8009194 <_txm_module_manager_tx_thread_create_dispatch+0x240>)
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	3310      	adds	r3, #16
 8008f86:	6a3a      	ldr	r2, [r7, #32]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d30f      	bcc.n	8008fac <_txm_module_manager_tx_thread_create_dispatch+0x58>
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	33e8      	adds	r3, #232	; 0xe8
 8008f90:	4a80      	ldr	r2, [pc, #512]	; (8009194 <_txm_module_manager_tx_thread_create_dispatch+0x240>)
 8008f92:	6991      	ldr	r1, [r2, #24]
 8008f94:	4a7f      	ldr	r2, [pc, #508]	; (8009194 <_txm_module_manager_tx_thread_create_dispatch+0x240>)
 8008f96:	69d2      	ldr	r2, [r2, #28]
 8008f98:	440a      	add	r2, r1
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d806      	bhi.n	8008fac <_txm_module_manager_tx_thread_create_dispatch+0x58>
 8008f9e:	21e8      	movs	r1, #232	; 0xe8
 8008fa0:	6a38      	ldr	r0, [r7, #32]
 8008fa2:	f002 fb5d 	bl	800b660 <_txm_module_manager_object_size_check>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d004      	beq.n	8008fb6 <_txm_module_manager_tx_thread_create_dispatch+0x62>
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <_txm_module_manager_tx_thread_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 8008fb2:	23f4      	movs	r3, #244	; 0xf4
 8008fb4:	e0e7      	b.n	8009186 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbc:	d01d      	beq.n	8008ffa <_txm_module_manager_tx_thread_create_dispatch+0xa6>
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d306      	bcc.n	8008fd8 <_txm_module_manager_tx_thread_create_dispatch+0x84>
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d926      	bls.n	8009026 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fde:	69fa      	ldr	r2, [r7, #28]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d30a      	bcc.n	8008ffa <_txm_module_manager_tx_thread_create_dispatch+0xa6>
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ff4:	440b      	add	r3, r1
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d915      	bls.n	8009026 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d00c      	beq.n	800901c <_txm_module_manager_tx_thread_create_dispatch+0xc8>
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	461a      	mov	r2, r3
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4293      	cmp	r3, r2
 800900c:	d306      	bcc.n	800901c <_txm_module_manager_tx_thread_create_dispatch+0xc8>
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	3301      	adds	r3, #1
 8009018:	429a      	cmp	r2, r3
 800901a:	d904      	bls.n	8009026 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 8009022:	23f4      	movs	r3, #244	; 0xf4
 8009024:	e0af      	b.n	8009186 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	f113 0f25 	cmn.w	r3, #37	; 0x25
 800902c:	d81f      	bhi.n	800906e <_txm_module_manager_tx_thread_create_dispatch+0x11a>
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	461a      	mov	r2, r3
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	429a      	cmp	r2, r3
 8009038:	d807      	bhi.n	800904a <_txm_module_manager_tx_thread_create_dispatch+0xf6>
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	3301      	adds	r3, #1
 8009046:	429a      	cmp	r2, r3
 8009048:	d913      	bls.n	8009072 <_txm_module_manager_tx_thread_create_dispatch+0x11e>
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	429a      	cmp	r2, r3
 8009054:	d80b      	bhi.n	800906e <_txm_module_manager_tx_thread_create_dispatch+0x11a>
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009068:	440b      	add	r3, r1
 800906a:	429a      	cmp	r2, r3
 800906c:	d901      	bls.n	8009072 <_txm_module_manager_tx_thread_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800906e:	23f4      	movs	r3, #244	; 0xf4
 8009070:	e089      	b.n	8009186 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], extra_parameters[3]))
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	3308      	adds	r3, #8
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	3308      	adds	r3, #8
 800907c:	6819      	ldr	r1, [r3, #0]
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	330c      	adds	r3, #12
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	440b      	add	r3, r1
 8009086:	429a      	cmp	r2, r3
 8009088:	d22a      	bcs.n	80090e0 <_txm_module_manager_tx_thread_create_dispatch+0x18c>
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	3308      	adds	r3, #8
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009094:	4293      	cmp	r3, r2
 8009096:	d30b      	bcc.n	80090b0 <_txm_module_manager_tx_thread_create_dispatch+0x15c>
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	3308      	adds	r3, #8
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	330c      	adds	r3, #12
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	441a      	add	r2, r3
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	3301      	adds	r3, #1
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d91e      	bls.n	80090ee <_txm_module_manager_tx_thread_create_dispatch+0x19a>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	3308      	adds	r3, #8
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090bc:	429a      	cmp	r2, r3
 80090be:	d30f      	bcc.n	80090e0 <_txm_module_manager_tx_thread_create_dispatch+0x18c>
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	3308      	adds	r3, #8
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	330c      	adds	r3, #12
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	441a      	add	r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090da:	440b      	add	r3, r1
 80090dc:	429a      	cmp	r2, r3
 80090de:	d906      	bls.n	80090ee <_txm_module_manager_tx_thread_create_dispatch+0x19a>
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	3308      	adds	r3, #8
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <_txm_module_manager_tx_thread_create_dispatch+0x19a>
            return(TXM_MODULE_INVALID_MEMORY);
 80090ea:	23f4      	movs	r3, #244	; 0xf4
 80090ec:	e04b      	b.n	8009186 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (extra_parameters[4] < module_instance -> txm_module_instance_maximum_priority)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	3310      	adds	r3, #16
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d201      	bcs.n	8009102 <_txm_module_manager_tx_thread_create_dispatch+0x1ae>
            return(TX_PRIORITY_ERROR);
 80090fe:	230f      	movs	r3, #15
 8009100:	e041      	b.n	8009186 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (extra_parameters[5] < module_instance -> txm_module_instance_maximum_priority)
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	3314      	adds	r3, #20
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 800910e:	429a      	cmp	r2, r3
 8009110:	d201      	bcs.n	8009116 <_txm_module_manager_tx_thread_create_dispatch+0x1c2>
            return(TX_THRESH_ERROR);
 8009112:	2318      	movs	r3, #24
 8009114:	e037      	b.n	8009186 <_txm_module_manager_tx_thread_create_dispatch+0x232>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	613a      	str	r2, [r7, #16]
        (TX_THREAD *) param_0,
        (CHAR *) param_1,
        module_instance -> txm_module_instance_shell_entry_function,
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8009122:	60fc      	str	r4, [r7, #12]
        (VOID (*)(ULONG entry_input)) extra_parameters[0],
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8009128:	469c      	mov	ip, r3
        (ULONG) extra_parameters[1],
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800912e:	681b      	ldr	r3, [r3, #0]
        (VOID *) extra_parameters[2],
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	3208      	adds	r2, #8
 8009134:	6812      	ldr	r2, [r2, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8009136:	60ba      	str	r2, [r7, #8]
        (ULONG) extra_parameters[3],
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800913c:	6812      	ldr	r2, [r2, #0]
        (UINT) extra_parameters[4],
 800913e:	69b9      	ldr	r1, [r7, #24]
 8009140:	3110      	adds	r1, #16
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8009142:	6809      	ldr	r1, [r1, #0]
        (UINT) extra_parameters[5],
 8009144:	69b8      	ldr	r0, [r7, #24]
 8009146:	3014      	adds	r0, #20
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8009148:	6800      	ldr	r0, [r0, #0]
        (ULONG) extra_parameters[6],
 800914a:	69bc      	ldr	r4, [r7, #24]
 800914c:	3418      	adds	r4, #24
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800914e:	6824      	ldr	r4, [r4, #0]
        (UINT) extra_parameters[7],
 8009150:	69bd      	ldr	r5, [r7, #24]
 8009152:	351c      	adds	r5, #28
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8009154:	682d      	ldr	r5, [r5, #0]
 8009156:	607d      	str	r5, [r7, #4]
        (UINT) extra_parameters[8],
 8009158:	69be      	ldr	r6, [r7, #24]
 800915a:	3620      	adds	r6, #32
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800915c:	6836      	ldr	r6, [r6, #0]
 800915e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8009160:	9508      	str	r5, [sp, #32]
 8009162:	9607      	str	r6, [sp, #28]
 8009164:	687d      	ldr	r5, [r7, #4]
 8009166:	9506      	str	r5, [sp, #24]
 8009168:	9405      	str	r4, [sp, #20]
 800916a:	9004      	str	r0, [sp, #16]
 800916c:	9103      	str	r1, [sp, #12]
 800916e:	9202      	str	r2, [sp, #8]
 8009170:	68bd      	ldr	r5, [r7, #8]
 8009172:	9501      	str	r5, [sp, #4]
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	4663      	mov	r3, ip
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	6939      	ldr	r1, [r7, #16]
 800917c:	6978      	ldr	r0, [r7, #20]
 800917e:	f001 fdf3 	bl	800ad68 <_txm_module_manager_thread_create>
 8009182:	62f8      	str	r0, [r7, #44]	; 0x2c
        module_instance
    );
    return(return_value);
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009186:	4618      	mov	r0, r3
 8009188:	3734      	adds	r7, #52	; 0x34
 800918a:	46bd      	mov	sp, r7
 800918c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800918e:	bf00      	nop
 8009190:	2000f640 	.word	0x2000f640
 8009194:	2000f60c 	.word	0x2000f60c

08009198 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch>:
/* UINT _txe_thread_entry_exit_notify(
    TX_THREAD *thread_ptr, -> param_0
    VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_entry_exit_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_THREAD *thread_ptr = (TX_THREAD *) param_0;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	61bb      	str	r3, [r7, #24]
TXM_MODULE_THREAD_ENTRY_INFO *thread_entry_info_ptr;
VOID (*thread_entry_exit_notify)(TX_THREAD *, UINT);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d04c      	beq.n	800924e <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xb6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80091ba:	d81f      	bhi.n	80091fc <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x64>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	461a      	mov	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d307      	bcc.n	80091d8 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x40>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	3301      	adds	r3, #1
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d923      	bls.n	8009220 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x88>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d30b      	bcc.n	80091fc <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x64>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091f6:	440b      	add	r3, r1
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d911      	bls.n	8009220 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x88>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8009202:	d812      	bhi.n	800922a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	461a      	mov	r2, r3
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4293      	cmp	r3, r2
 800920e:	d30c      	bcc.n	800922a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	429a      	cmp	r2, r3
 800921e:	d804      	bhi.n	800922a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 8009226:	23f4      	movs	r3, #244	; 0xf4
 8009228:	e027      	b.n	800927a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xe2>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((thread_ptr == TX_NULL) || (thread_ptr -> tx_thread_id != TX_THREAD_ID))
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xa2>
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a13      	ldr	r2, [pc, #76]	; (8009284 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xec>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d001      	beq.n	800923e <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xa6>
            return(TX_THREAD_ERROR);
 800923a:	230e      	movs	r3, #14
 800923c:	e01d      	b.n	800927a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xe2>

        /* Ensure this thread is from the module trying to set the callback.  */
        if (thread_ptr -> tx_thread_module_instance_ptr != module_instance)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	429a      	cmp	r2, r3
 8009248:	d001      	beq.n	800924e <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xb6>
            return(TXM_MODULE_INVALID);
 800924a:	23f2      	movs	r3, #242	; 0xf2
 800924c:	e015      	b.n	800927a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xe2>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d102      	bne.n	800925a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xc2>
    {

        /* Clear the callback.  */
        thread_entry_exit_notify = (VOID (*)(TX_THREAD *, UINT)) TX_NULL;
 8009254:	2300      	movs	r3, #0
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	e008      	b.n	800926c <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xd4>
    }
    else
    {

        /* Setup trampoline values.  */
        thread_entry_info_ptr = (TXM_MODULE_THREAD_ENTRY_INFO *) thread_ptr -> tx_thread_module_entry_info_ptr;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009260:	617b      	str	r3, [r7, #20]
        thread_entry_info_ptr -> txm_module_thread_entry_info_exit_notify = (VOID (*)(TX_THREAD *, UINT)) param_1;
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	619a      	str	r2, [r3, #24]
        thread_entry_exit_notify = _txm_module_manager_thread_notify_trampoline;
 8009268:	4b07      	ldr	r3, [pc, #28]	; (8009288 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xf0>)
 800926a:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_thread_entry_exit_notify(
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	69f9      	ldr	r1, [r7, #28]
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fb93 	bl	800799c <_txe_thread_entry_exit_notify>
 8009276:	6138      	str	r0, [r7, #16]
        (TX_THREAD *) param_0,
        (VOID (*)(TX_THREAD *notify_thread_ptr, UINT type)) thread_entry_exit_notify
    );
    return(return_value);
 8009278:	693b      	ldr	r3, [r7, #16]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	54485244 	.word	0x54485244
 8009288:	0800b221 	.word	0x0800b221

0800928c <_txm_module_manager_tx_thread_reset_dispatch>:
#ifndef TXM_THREAD_RESET_CALL_NOT_USED
/* UINT _txe_thread_reset(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_reset_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d03a      	beq.n	8009318 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80092a8:	d81f      	bhi.n	80092ea <_txm_module_manager_tx_thread_reset_dispatch+0x5e>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	461a      	mov	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d307      	bcc.n	80092c6 <_txm_module_manager_tx_thread_reset_dispatch+0x3a>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c0:	3301      	adds	r3, #1
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d923      	bls.n	800930e <_txm_module_manager_tx_thread_reset_dispatch+0x82>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d30b      	bcc.n	80092ea <_txm_module_manager_tx_thread_reset_dispatch+0x5e>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092e4:	440b      	add	r3, r1
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d911      	bls.n	800930e <_txm_module_manager_tx_thread_reset_dispatch+0x82>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80092f0:	d812      	bhi.n	8009318 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	461a      	mov	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d30c      	bcc.n	8009318 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	3301      	adds	r3, #1
 800930a:	429a      	cmp	r2, r3
 800930c:	d804      	bhi.n	8009318 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8009314:	23f4      	movs	r3, #244	; 0xf4
 8009316:	e005      	b.n	8009324 <_txm_module_manager_tx_thread_reset_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_thread_reset(
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f001 fff6 	bl	800b30c <_txm_module_manager_thread_reset>
 8009320:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8009322:	68fb      	ldr	r3, [r7, #12]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <_txm_module_manager_tx_thread_resume_dispatch>:
#ifndef TXM_THREAD_RESUME_CALL_NOT_USED
/* UINT _txe_thread_resume(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_resume_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d03a      	beq.n	80093b8 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8009348:	d81f      	bhi.n	800938a <_txm_module_manager_tx_thread_resume_dispatch+0x5e>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	461a      	mov	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	4293      	cmp	r3, r2
 8009354:	d307      	bcc.n	8009366 <_txm_module_manager_tx_thread_resume_dispatch+0x3a>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009360:	3301      	adds	r3, #1
 8009362:	429a      	cmp	r2, r3
 8009364:	d923      	bls.n	80093ae <_txm_module_manager_tx_thread_resume_dispatch+0x82>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d30b      	bcc.n	800938a <_txm_module_manager_tx_thread_resume_dispatch+0x5e>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009384:	440b      	add	r3, r1
 8009386:	429a      	cmp	r2, r3
 8009388:	d911      	bls.n	80093ae <_txm_module_manager_tx_thread_resume_dispatch+0x82>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8009390:	d812      	bhi.n	80093b8 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	461a      	mov	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	4293      	cmp	r3, r2
 800939c:	d30c      	bcc.n	80093b8 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	3301      	adds	r3, #1
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d804      	bhi.n	80093b8 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 80093b4:	23f4      	movs	r3, #244	; 0xf4
 80093b6:	e005      	b.n	80093c4 <_txm_module_manager_tx_thread_resume_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_thread_resume(
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fb0e 	bl	80079dc <_txe_thread_resume>
 80093c0:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 80093c2:	68fb      	ldr	r3, [r7, #12]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_txm_module_manager_tx_thread_sleep_dispatch>:
#ifndef TXM_THREAD_SLEEP_CALL_NOT_USED
/* UINT _tx_thread_sleep(
    ULONG timer_ticks -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_sleep_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_thread_sleep(
 80093d6:	6838      	ldr	r0, [r7, #0]
 80093d8:	f7fc fe72 	bl	80060c0 <_tx_thread_sleep>
 80093dc:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 80093de:	68fb      	ldr	r3, [r7, #12]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <_txm_module_manager_tx_thread_system_suspend_dispatch>:
#ifndef TXM_THREAD_SYSTEM_SUSPEND_CALL_NOT_USED
/* VOID _tx_thread_system_suspend(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_system_suspend_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08a      	sub	sp, #40	; 0x28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]

TX_INTERRUPT_SAVE_AREA

TX_THREAD *thread_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d041      	beq.n	8009482 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
    {
        /* Ensure the thread is suspending itself.  */
        if (((TX_THREAD *) param_0) != _tx_thread_current_ptr)
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	4b3b      	ldr	r3, [pc, #236]	; (80094f0 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x108>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d001      	beq.n	800940c <_txm_module_manager_tx_thread_system_suspend_dispatch+0x24>
        {
            return(TXM_MODULE_INVALID_MEMORY);
 8009408:	23f4      	movs	r3, #244	; 0xf4
 800940a:	e06c      	b.n	80094e6 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xfe>
        }
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8009412:	d81f      	bhi.n	8009454 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x6c>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	461a      	mov	r2, r3
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	4293      	cmp	r3, r2
 800941e:	d307      	bcc.n	8009430 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x48>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	3301      	adds	r3, #1
 800942c:	429a      	cmp	r2, r3
 800942e:	d923      	bls.n	8009478 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x90>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d30b      	bcc.n	8009454 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x6c>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800944e:	440b      	add	r3, r1
 8009450:	429a      	cmp	r2, r3
 8009452:	d911      	bls.n	8009478 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x90>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800945a:	d812      	bhi.n	8009482 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	461a      	mov	r2, r3
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	4293      	cmp	r3, r2
 8009466:	d30c      	bcc.n	8009482 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	3301      	adds	r3, #1
 8009474:	429a      	cmp	r2, r3
 8009476:	d804      	bhi.n	8009482 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
            return(TXM_MODULE_INVALID_MEMORY);
 800947e:	23f4      	movs	r3, #244	; 0xf4
 8009480:	e031      	b.n	80094e6 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xfe>
    }

    /* Get the thread pointer.  */
    thread_ptr = (TX_THREAD *) param_0;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009486:	f3ef 8310 	mrs	r3, PRIMASK
 800948a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800948c:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800948e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009490:	b672      	cpsid	i
    return(int_posture);
 8009492:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 8009494:	623b      	str	r3, [r7, #32]

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	2201      	movs	r2, #1
 800949a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Thread state change.  */
    TX_THREAD_STATE_CHANGE(thread_ptr, TX_COMPLETED)

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	2201      	movs	r2, #1
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  0;
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	2200      	movs	r2, #0
 80094a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80094a8:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x10c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	4a11      	ldr	r2, [pc, #68]	; (80094f4 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x10c>)
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f383 8810 	msr	PRIMASK, r3
}
 80094bc:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80094be:	f3ef 8314 	mrs	r3, CONTROL
 80094c2:	617b      	str	r3, [r7, #20]
    return(control_value);
 80094c4:	697b      	ldr	r3, [r7, #20]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr);
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	f023 0304 	bic.w	r3, r3, #4
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f383 8814 	msr	CONTROL, r3
}
 80094da:	bf00      	nop

    _tx_thread_system_suspend(
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fc ffbc 	bl	800645c <_tx_thread_system_suspend>
        (TX_THREAD *) param_0
    );
    return(TX_SUCCESS);
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3728      	adds	r7, #40	; 0x28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	2000ef8c 	.word	0x2000ef8c
 80094f4:	2000f028 	.word	0x2000f028

080094f8 <_txm_module_manager_tx_thread_time_slice_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    ULONG new_time_slice, -> param_1
    ULONG *old_time_slice -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_time_slice_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d061      	beq.n	80095d6 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8009518:	d81f      	bhi.n	800955a <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x62>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	461a      	mov	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	4293      	cmp	r3, r2
 8009524:	d307      	bcc.n	8009536 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x3e>
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009530:	3301      	adds	r3, #1
 8009532:	429a      	cmp	r2, r3
 8009534:	d923      	bls.n	800957e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x86>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	429a      	cmp	r2, r3
 8009540:	d30b      	bcc.n	800955a <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x62>
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009554:	440b      	add	r3, r1
 8009556:	429a      	cmp	r2, r3
 8009558:	d911      	bls.n	800957e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x86>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8009560:	d812      	bhi.n	8009588 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	461a      	mov	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4293      	cmp	r3, r2
 800956c:	d30c      	bcc.n	8009588 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	3301      	adds	r3, #1
 800957a:	429a      	cmp	r2, r3
 800957c:	d804      	bhi.n	8009588 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 8009584:	23f4      	movs	r3, #244	; 0xf4
 8009586:	e02e      	b.n	80095e6 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xee>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(ULONG)))
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f113 0f05 	cmn.w	r3, #5
 800958e:	d81d      	bhi.n	80095cc <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xd4>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	461a      	mov	r2, r3
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	4293      	cmp	r3, r2
 800959a:	d306      	bcc.n	80095aa <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xb2>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	1d1a      	adds	r2, r3, #4
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	3301      	adds	r3, #1
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d915      	bls.n	80095d6 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d30a      	bcc.n	80095cc <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xd4>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	1d1a      	adds	r2, r3, #4
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095c6:	440b      	add	r3, r1
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d904      	bls.n	80095d6 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
            return(TXM_MODULE_INVALID_MEMORY);
 80095d2:	23f4      	movs	r3, #244	; 0xf4
 80095d4:	e007      	b.n	80095e6 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xee>
    }

    return_value = (ALIGN_TYPE) _txe_thread_time_slice_change(
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe fa1b 	bl	8007a18 <_txe_thread_time_slice_change>
 80095e2:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (ULONG) param_1,
        (ULONG *) param_2
    );
    return(return_value);
 80095e4:	697b      	ldr	r3, [r7, #20]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <_txm_module_manager_tx_timer_create_dispatch>:
    ULONG reschedule_ticks, -> extra_parameters[3]
    UINT auto_activate, -> extra_parameters[4]
    UINT timer_control_block_size -> extra_parameters[5]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80095f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f2:	b08d      	sub	sp, #52	; 0x34
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_TIMER *timer_ptr;
VOID (*expiration_function)(ULONG);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 8081 	beq.w	800970e <_txm_module_manager_tx_timer_create_dispatch+0x11e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_TIMER)))
 800960c:	4b5d      	ldr	r3, [pc, #372]	; (8009784 <_txm_module_manager_tx_timer_create_dispatch+0x194>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d119      	bne.n	8009648 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800961a:	d815      	bhi.n	8009648 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 800961c:	4b5a      	ldr	r3, [pc, #360]	; (8009788 <_txm_module_manager_tx_timer_create_dispatch+0x198>)
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	3310      	adds	r3, #16
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	429a      	cmp	r2, r3
 8009626:	d30f      	bcc.n	8009648 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	3334      	adds	r3, #52	; 0x34
 800962c:	4a56      	ldr	r2, [pc, #344]	; (8009788 <_txm_module_manager_tx_timer_create_dispatch+0x198>)
 800962e:	6991      	ldr	r1, [r2, #24]
 8009630:	4a55      	ldr	r2, [pc, #340]	; (8009788 <_txm_module_manager_tx_timer_create_dispatch+0x198>)
 8009632:	69d2      	ldr	r2, [r2, #28]
 8009634:	440a      	add	r2, r1
 8009636:	4293      	cmp	r3, r2
 8009638:	d806      	bhi.n	8009648 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 800963a:	2134      	movs	r1, #52	; 0x34
 800963c:	68b8      	ldr	r0, [r7, #8]
 800963e:	f002 f80f 	bl	800b660 <_txm_module_manager_object_size_check>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <_txm_module_manager_tx_timer_create_dispatch+0x62>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <_txm_module_manager_tx_timer_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800964e:	23f4      	movs	r3, #244	; 0xf4
 8009650:	e094      	b.n	800977c <_txm_module_manager_tx_timer_create_dispatch+0x18c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d01d      	beq.n	8009696 <_txm_module_manager_tx_timer_create_dispatch+0xa6>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	461a      	mov	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4293      	cmp	r3, r2
 8009664:	d306      	bcc.n	8009674 <_txm_module_manager_tx_timer_create_dispatch+0x84>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	3301      	adds	r3, #1
 8009670:	429a      	cmp	r2, r3
 8009672:	d926      	bls.n	80096c2 <_txm_module_manager_tx_timer_create_dispatch+0xd2>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d30a      	bcc.n	8009696 <_txm_module_manager_tx_timer_create_dispatch+0xa6>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009690:	440b      	add	r3, r1
 8009692:	429a      	cmp	r2, r3
 8009694:	d915      	bls.n	80096c2 <_txm_module_manager_tx_timer_create_dispatch+0xd2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969c:	d00c      	beq.n	80096b8 <_txm_module_manager_tx_timer_create_dispatch+0xc8>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d306      	bcc.n	80096b8 <_txm_module_manager_tx_timer_create_dispatch+0xc8>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	3301      	adds	r3, #1
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d904      	bls.n	80096c2 <_txm_module_manager_tx_timer_create_dispatch+0xd2>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <_txm_module_manager_tx_timer_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 80096be:	23f4      	movs	r3, #244	; 0xf4
 80096c0:	e05c      	b.n	800977c <_txm_module_manager_tx_timer_create_dispatch+0x18c>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[6])))
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f113 0f19 	cmn.w	r3, #25
 80096c8:	d81f      	bhi.n	800970a <_txm_module_manager_tx_timer_create_dispatch+0x11a>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	461a      	mov	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d807      	bhi.n	80096e6 <_txm_module_manager_tx_timer_create_dispatch+0xf6>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	f103 0218 	add.w	r2, r3, #24
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e0:	3301      	adds	r3, #1
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d913      	bls.n	800970e <_txm_module_manager_tx_timer_create_dispatch+0x11e>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d80b      	bhi.n	800970a <_txm_module_manager_tx_timer_create_dispatch+0x11a>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	f103 0218 	add.w	r2, r3, #24
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009704:	440b      	add	r3, r1
 8009706:	429a      	cmp	r2, r3
 8009708:	d901      	bls.n	800970e <_txm_module_manager_tx_timer_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800970a:	23f4      	movs	r3, #244	; 0xf4
 800970c:	e036      	b.n	800977c <_txm_module_manager_tx_timer_create_dispatch+0x18c>
    }

    /* Is it a disable request?  */
    if ((void *) extra_parameters[0] == TX_NULL)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <_txm_module_manager_tx_timer_create_dispatch+0x12c>
    {

        /* Clear the callback.  */
        expiration_function = (VOID (*)(ULONG)) TX_NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	e001      	b.n	8009720 <_txm_module_manager_tx_timer_create_dispatch+0x130>
    }
    else
    {

        /* Set trampoline callback.  */
        expiration_function = _txm_module_manager_timer_notify_trampoline;
 800971c:	4b1b      	ldr	r3, [pc, #108]	; (800978c <_txm_module_manager_tx_timer_create_dispatch+0x19c>)
 800971e:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_timer_create(
 8009720:	68bc      	ldr	r4, [r7, #8]
 8009722:	687d      	ldr	r5, [r7, #4]
        (TX_TIMER *) param_0,
        (CHAR *) param_1,
        (VOID (*)(ULONG)) expiration_function,
        (ULONG) extra_parameters[1],
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8009728:	681e      	ldr	r6, [r3, #0]
        (ULONG) extra_parameters[2],
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_timer_create(
 800972e:	681b      	ldr	r3, [r3, #0]
        (ULONG) extra_parameters[3],
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8009734:	6812      	ldr	r2, [r2, #0]
        (UINT) extra_parameters[4],
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	3110      	adds	r1, #16
    return_value = (ALIGN_TYPE) _txe_timer_create(
 800973a:	6809      	ldr	r1, [r1, #0]
        (UINT) extra_parameters[5]
 800973c:	6838      	ldr	r0, [r7, #0]
 800973e:	3014      	adds	r0, #20
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8009740:	6800      	ldr	r0, [r0, #0]
 8009742:	9003      	str	r0, [sp, #12]
 8009744:	9102      	str	r1, [sp, #8]
 8009746:	9201      	str	r2, [sp, #4]
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	4633      	mov	r3, r6
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	4629      	mov	r1, r5
 8009750:	4620      	mov	r0, r4
 8009752:	f7fe f997 	bl	8007a84 <_txe_timer_create>
 8009756:	61b8      	str	r0, [r7, #24]
    );

    if (return_value == TX_SUCCESS)
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10d      	bne.n	800977a <_txm_module_manager_tx_timer_create_dispatch+0x18a>
    {

        /* Get the object pointer.  */
        timer_ptr = (TX_TIMER *) param_0;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	617b      	str	r3, [r7, #20]

        /* Setup trampoline values.  */
        if ((void *) extra_parameters[0] != TX_NULL)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <_txm_module_manager_tx_timer_create_dispatch+0x18a>
        {

            timer_ptr -> tx_timer_module_instance = (VOID *) module_instance;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c
            timer_ptr -> tx_timer_module_expiration_function = (VOID (*)(ULONG)) extra_parameters[0];
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    return(return_value);
 800977a:	69bb      	ldr	r3, [r7, #24]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3724      	adds	r7, #36	; 0x24
 8009780:	46bd      	mov	sp, r7
 8009782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009784:	2000f640 	.word	0x2000f640
 8009788:	2000f60c 	.word	0x2000f60c
 800978c:	0800b3e1 	.word	0x0800b3e1

08009790 <_txm_module_manager_txm_module_object_allocate_dispatch>:
/* UINT _txm_module_object_allocate(
    VOID **object_ptr, -> param_0
    ULONG object_size -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d026      	beq.n	80097f6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(VOID *)))
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f113 0f05 	cmn.w	r3, #5
 80097ae:	d81d      	bhi.n	80097ec <_txm_module_manager_txm_module_object_allocate_dispatch+0x5c>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	461a      	mov	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d306      	bcc.n	80097ca <_txm_module_manager_txm_module_object_allocate_dispatch+0x3a>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	1d1a      	adds	r2, r3, #4
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	3301      	adds	r3, #1
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d915      	bls.n	80097f6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d30a      	bcc.n	80097ec <_txm_module_manager_txm_module_object_allocate_dispatch+0x5c>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	1d1a      	adds	r2, r3, #4
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097e6:	440b      	add	r3, r1
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d904      	bls.n	80097f6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
            return(TXM_MODULE_INVALID_MEMORY);
 80097f2:	23f4      	movs	r3, #244	; 0xf4
 80097f4:	e007      	b.n	8009806 <_txm_module_manager_txm_module_object_allocate_dispatch+0x76>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_allocate(
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fc2b 	bl	800a058 <_txm_module_manager_object_allocate>
 8009802:	6178      	str	r0, [r7, #20]
        (VOID **) param_0,
        (ULONG) param_1,
        module_instance
    );
    return(return_value);
 8009804:	697b      	ldr	r3, [r7, #20]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <_txm_module_manager_txm_module_object_pointer_get_dispatch>:
    UINT object_type, -> param_0
    CHAR *name, -> param_1
    VOID **object_ptr -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_pointer_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	60b9      	str	r1, [r7, #8]
 8009818:	607a      	str	r2, [r7, #4]
 800981a:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d05e      	beq.n	80098e6 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982e:	d01d      	beq.n	800986c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x5e>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	461a      	mov	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4293      	cmp	r3, r2
 800983a:	d306      	bcc.n	800984a <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x3c>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	3301      	adds	r3, #1
 8009846:	429a      	cmp	r2, r3
 8009848:	d926      	bls.n	8009898 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d30a      	bcc.n	800986c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x5e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009866:	440b      	add	r3, r1
 8009868:	429a      	cmp	r2, r3
 800986a:	d915      	bls.n	8009898 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009872:	d00c      	beq.n	800988e <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x80>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	461a      	mov	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4293      	cmp	r3, r2
 800987e:	d306      	bcc.n	800988e <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x80>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	3301      	adds	r3, #1
 800988a:	429a      	cmp	r2, r3
 800988c:	d904      	bls.n	8009898 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 8009894:	23f4      	movs	r3, #244	; 0xf4
 8009896:	e02e      	b.n	80098f6 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xe8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(VOID *)))
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f113 0f05 	cmn.w	r3, #5
 800989e:	d81d      	bhi.n	80098dc <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xce>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	461a      	mov	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d306      	bcc.n	80098ba <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xac>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b4:	3301      	adds	r3, #1
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d915      	bls.n	80098e6 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d30a      	bcc.n	80098dc <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xce>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	1d1a      	adds	r2, r3, #4
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098d6:	440b      	add	r3, r1
 80098d8:	429a      	cmp	r2, r3
 80098da:	d904      	bls.n	80098e6 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
            return(TXM_MODULE_INVALID_MEMORY);
 80098e2:	23f4      	movs	r3, #244	; 0xf4
 80098e4:	e007      	b.n	80098f6 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xe8>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get(
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	4619      	mov	r1, r3
 80098ec:	68b8      	ldr	r0, [r7, #8]
 80098ee:	f000 fc1b 	bl	800a128 <_txm_module_manager_object_pointer_get>
 80098f2:	6178      	str	r0, [r7, #20]
        (UINT) param_0,
        (CHAR *) param_1,
        (VOID **) param_2
    );
    return(return_value);
 80098f4:	697b      	ldr	r3, [r7, #20]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <_txm_module_manager_kernel_dispatch>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ALIGN_TYPE _txm_module_manager_kernel_dispatch(ULONG kernel_request, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value = TX_NOT_AVAILABLE;
 800990e:	231d      	movs	r3, #29
 8009910:	617b      	str	r3, [r7, #20]
TXM_MODULE_INSTANCE *module_instance;


    /* Get the module instance.  */
    module_instance = _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 8009912:	4b9a      	ldr	r3, [pc, #616]	; (8009b7c <_txm_module_manager_kernel_dispatch+0x27c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991a:	613b      	str	r3, [r7, #16]

    /* Sanity-check for a valid module instance.  */
    if (module_instance == TX_NULL)
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <_txm_module_manager_kernel_dispatch+0x26>
    {
        /* Just return!  */
        return(TXM_MODULE_INVALID);
 8009922:	23f2      	movs	r3, #242	; 0xf2
 8009924:	e126      	b.n	8009b74 <_txm_module_manager_kernel_dispatch+0x274>
    }

    switch (kernel_request)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3b09      	subs	r3, #9
 800992a:	2b56      	cmp	r3, #86	; 0x56
 800992c:	f200 8120 	bhi.w	8009b70 <_txm_module_manager_kernel_dispatch+0x270>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <_txm_module_manager_kernel_dispatch+0x38>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009a95 	.word	0x08009a95
 800993c:	08009aa5 	.word	0x08009aa5
 8009940:	08009b71 	.word	0x08009b71
 8009944:	08009b71 	.word	0x08009b71
 8009948:	08009b71 	.word	0x08009b71
 800994c:	08009b71 	.word	0x08009b71
 8009950:	08009b71 	.word	0x08009b71
 8009954:	08009b71 	.word	0x08009b71
 8009958:	08009b71 	.word	0x08009b71
 800995c:	08009b71 	.word	0x08009b71
 8009960:	08009b71 	.word	0x08009b71
 8009964:	08009b71 	.word	0x08009b71
 8009968:	08009b71 	.word	0x08009b71
 800996c:	08009b71 	.word	0x08009b71
 8009970:	08009b71 	.word	0x08009b71
 8009974:	08009b71 	.word	0x08009b71
 8009978:	08009b71 	.word	0x08009b71
 800997c:	08009b71 	.word	0x08009b71
 8009980:	08009b71 	.word	0x08009b71
 8009984:	08009b71 	.word	0x08009b71
 8009988:	08009b71 	.word	0x08009b71
 800998c:	08009b71 	.word	0x08009b71
 8009990:	08009b71 	.word	0x08009b71
 8009994:	08009b71 	.word	0x08009b71
 8009998:	08009b71 	.word	0x08009b71
 800999c:	08009ab5 	.word	0x08009ab5
 80099a0:	08009b71 	.word	0x08009b71
 80099a4:	08009b71 	.word	0x08009b71
 80099a8:	08009b71 	.word	0x08009b71
 80099ac:	08009b71 	.word	0x08009b71
 80099b0:	08009b71 	.word	0x08009b71
 80099b4:	08009b71 	.word	0x08009b71
 80099b8:	08009b71 	.word	0x08009b71
 80099bc:	08009ac5 	.word	0x08009ac5
 80099c0:	08009ad5 	.word	0x08009ad5
 80099c4:	08009b71 	.word	0x08009b71
 80099c8:	08009b71 	.word	0x08009b71
 80099cc:	08009b71 	.word	0x08009b71
 80099d0:	08009b71 	.word	0x08009b71
 80099d4:	08009b71 	.word	0x08009b71
 80099d8:	08009b71 	.word	0x08009b71
 80099dc:	08009b71 	.word	0x08009b71
 80099e0:	08009b71 	.word	0x08009b71
 80099e4:	08009b71 	.word	0x08009b71
 80099e8:	08009b71 	.word	0x08009b71
 80099ec:	08009b71 	.word	0x08009b71
 80099f0:	08009ae5 	.word	0x08009ae5
 80099f4:	08009b71 	.word	0x08009b71
 80099f8:	08009af5 	.word	0x08009af5
 80099fc:	08009b71 	.word	0x08009b71
 8009a00:	08009b71 	.word	0x08009b71
 8009a04:	08009b71 	.word	0x08009b71
 8009a08:	08009b71 	.word	0x08009b71
 8009a0c:	08009b71 	.word	0x08009b71
 8009a10:	08009b71 	.word	0x08009b71
 8009a14:	08009b71 	.word	0x08009b71
 8009a18:	08009b03 	.word	0x08009b03
 8009a1c:	08009b0f 	.word	0x08009b0f
 8009a20:	08009b1b 	.word	0x08009b1b
 8009a24:	08009b71 	.word	0x08009b71
 8009a28:	08009b71 	.word	0x08009b71
 8009a2c:	08009b71 	.word	0x08009b71
 8009a30:	08009b33 	.word	0x08009b33
 8009a34:	08009b71 	.word	0x08009b71
 8009a38:	08009b71 	.word	0x08009b71
 8009a3c:	08009b71 	.word	0x08009b71
 8009a40:	08009b71 	.word	0x08009b71
 8009a44:	08009b71 	.word	0x08009b71
 8009a48:	08009b43 	.word	0x08009b43
 8009a4c:	08009b71 	.word	0x08009b71
 8009a50:	08009b71 	.word	0x08009b71
 8009a54:	08009b71 	.word	0x08009b71
 8009a58:	08009b71 	.word	0x08009b71
 8009a5c:	08009b71 	.word	0x08009b71
 8009a60:	08009b71 	.word	0x08009b71
 8009a64:	08009b71 	.word	0x08009b71
 8009a68:	08009b71 	.word	0x08009b71
 8009a6c:	08009b71 	.word	0x08009b71
 8009a70:	08009b71 	.word	0x08009b71
 8009a74:	08009b71 	.word	0x08009b71
 8009a78:	08009b71 	.word	0x08009b71
 8009a7c:	08009b71 	.word	0x08009b71
 8009a80:	08009b71 	.word	0x08009b71
 8009a84:	08009b27 	.word	0x08009b27
 8009a88:	08009b61 	.word	0x08009b61
 8009a8c:	08009b71 	.word	0x08009b71
 8009a90:	08009b53 	.word	0x08009b53
    #endif

    #ifndef TXM_BYTE_ALLOCATE_CALL_NOT_USED
    case TXM_BYTE_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_allocate_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	68b9      	ldr	r1, [r7, #8]
 8009a9a:	6938      	ldr	r0, [r7, #16]
 8009a9c:	f7fe fec0 	bl	8008820 <_txm_module_manager_tx_byte_allocate_dispatch>
 8009aa0:	6178      	str	r0, [r7, #20]
        break;
 8009aa2:	e066      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_BYTE_POOL_CREATE_CALL_NOT_USED
    case TXM_BYTE_POOL_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f7fe ff5e 	bl	800896c <_txm_module_manager_tx_byte_pool_create_dispatch>
 8009ab0:	6178      	str	r0, [r7, #20]
        break;
 8009ab2:	e05e      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_QUEUE_CREATE_CALL_NOT_USED
    case TXM_QUEUE_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	68b9      	ldr	r1, [r7, #8]
 8009aba:	6938      	ldr	r0, [r7, #16]
 8009abc:	f7ff f836 	bl	8008b2c <_txm_module_manager_tx_queue_create_dispatch>
 8009ac0:	6178      	str	r0, [r7, #20]
        break;
 8009ac2:	e056      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_QUEUE_RECEIVE_CALL_NOT_USED
    case TXM_QUEUE_RECEIVE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_receive_dispatch(module_instance, param_0, param_1, param_2);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	68b9      	ldr	r1, [r7, #8]
 8009aca:	6938      	ldr	r0, [r7, #16]
 8009acc:	f7ff f91a 	bl	8008d04 <_txm_module_manager_tx_queue_receive_dispatch>
 8009ad0:	6178      	str	r0, [r7, #20]
        break;
 8009ad2:	e04e      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif
    
    #ifndef TXM_QUEUE_SEND_CALL_NOT_USED
    case TXM_QUEUE_SEND_CALL:
    {
        return_value = _txm_module_manager_tx_queue_send_dispatch(module_instance, param_0, param_1, param_2);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	68b9      	ldr	r1, [r7, #8]
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f7ff f999 	bl	8008e12 <_txm_module_manager_tx_queue_send_dispatch>
 8009ae0:	6178      	str	r0, [r7, #20]
        break;
 8009ae2:	e046      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_CREATE_CALL_NOT_USED
    case TXM_THREAD_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f7ff fa32 	bl	8008f54 <_txm_module_manager_tx_thread_create_dispatch>
 8009af0:	6178      	str	r0, [r7, #20]
        break;
 8009af2:	e03e      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL_NOT_USED
    case TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_entry_exit_notify_dispatch(module_instance, param_0, param_1);
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	68b9      	ldr	r1, [r7, #8]
 8009af8:	6938      	ldr	r0, [r7, #16]
 8009afa:	f7ff fb4d 	bl	8009198 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch>
 8009afe:	6178      	str	r0, [r7, #20]
        break;
 8009b00:	e037      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_RESET_CALL_NOT_USED
    case TXM_THREAD_RESET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_reset_dispatch(module_instance, param_0);
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	6938      	ldr	r0, [r7, #16]
 8009b06:	f7ff fbc1 	bl	800928c <_txm_module_manager_tx_thread_reset_dispatch>
 8009b0a:	6178      	str	r0, [r7, #20]
        break;
 8009b0c:	e031      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_RESUME_CALL_NOT_USED
    case TXM_THREAD_RESUME_CALL:
    {
        return_value = _txm_module_manager_tx_thread_resume_dispatch(module_instance, param_0);
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	6938      	ldr	r0, [r7, #16]
 8009b12:	f7ff fc0b 	bl	800932c <_txm_module_manager_tx_thread_resume_dispatch>
 8009b16:	6178      	str	r0, [r7, #20]
        break;
 8009b18:	e02b      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_SLEEP_CALL_NOT_USED
    case TXM_THREAD_SLEEP_CALL:
    {
        return_value = _txm_module_manager_tx_thread_sleep_dispatch(module_instance, param_0);
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	6938      	ldr	r0, [r7, #16]
 8009b1e:	f7ff fc55 	bl	80093cc <_txm_module_manager_tx_thread_sleep_dispatch>
 8009b22:	6178      	str	r0, [r7, #20]
        break;
 8009b24:	e025      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_SYSTEM_SUSPEND_CALL_NOT_USED
    case TXM_THREAD_SYSTEM_SUSPEND_CALL:
    {
        return_value = _txm_module_manager_tx_thread_system_suspend_dispatch(module_instance, param_0);
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	6938      	ldr	r0, [r7, #16]
 8009b2a:	f7ff fc5d 	bl	80093e8 <_txm_module_manager_tx_thread_system_suspend_dispatch>
 8009b2e:	6178      	str	r0, [r7, #20]
        break;
 8009b30:	e01f      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_THREAD_TIME_SLICE_CHANGE_CALL_NOT_USED
    case TXM_THREAD_TIME_SLICE_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_time_slice_change_dispatch(module_instance, param_0, param_1, param_2);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	6938      	ldr	r0, [r7, #16]
 8009b3a:	f7ff fcdd 	bl	80094f8 <_txm_module_manager_tx_thread_time_slice_change_dispatch>
 8009b3e:	6178      	str	r0, [r7, #20]
        break;
 8009b40:	e017      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_TIMER_CREATE_CALL_NOT_USED
    case TXM_TIMER_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	6938      	ldr	r0, [r7, #16]
 8009b4a:	f7ff fd51 	bl	80095f0 <_txm_module_manager_tx_timer_create_dispatch>
 8009b4e:	6178      	str	r0, [r7, #20]
        break;
 8009b50:	e00f      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_MODULE_OBJECT_ALLOCATE_CALL_NOT_USED
    case TXM_MODULE_OBJECT_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_allocate_dispatch(module_instance, param_0, param_1);
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	6938      	ldr	r0, [r7, #16]
 8009b58:	f7ff fe1a 	bl	8009790 <_txm_module_manager_txm_module_object_allocate_dispatch>
 8009b5c:	6178      	str	r0, [r7, #20]
        break;
 8009b5e:	e008      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
    #endif

    #ifndef TXM_MODULE_OBJECT_POINTER_GET_CALL_NOT_USED
    case TXM_MODULE_OBJECT_POINTER_GET_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_pointer_get_dispatch(module_instance, param_0, param_1, param_2);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	6938      	ldr	r0, [r7, #16]
 8009b68:	f7ff fe51 	bl	800980e <_txm_module_manager_txm_module_object_pointer_get_dispatch>
 8009b6c:	6178      	str	r0, [r7, #20]
        break;
 8009b6e:	e000      	b.n	8009b72 <_txm_module_manager_kernel_dispatch+0x272>
            return_value =  _txm_module_manager_usbx_dispatch(module_instance, kernel_request, param_0, param_1, param_2);
        }
#endif

        /* Unhandled kernel request, return an error!  */
        break;
 8009b70:	bf00      	nop
    }
    }

    return(return_value);
 8009b72:	697b      	ldr	r3, [r7, #20]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	2000ef8c 	.word	0x2000ef8c

08009b80 <_txm_module_manager_memory_fault_handler>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_memory_fault_handler(VOID)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0

TXM_MODULE_INSTANCE     *module_instance_ptr;
TX_THREAD               *thread_ptr;

    /* Pickup the current thread.  */
    thread_ptr =  _tx_thread_current_ptr;
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <_txm_module_manager_memory_fault_handler+0x44>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	603b      	str	r3, [r7, #0]

    /* Initialize the module instance pointer to NULL.  */
    module_instance_ptr =  TX_NULL;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	607b      	str	r3, [r7, #4]
    
    /* Is there a thread?  */
    if (thread_ptr)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d008      	beq.n	8009ba8 <_txm_module_manager_memory_fault_handler+0x28>
    {
        /* Pickup the module instance.  */
        module_instance_ptr =  thread_ptr -> tx_thread_module_instance_ptr;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9c:	607b      	str	r3, [r7, #4]

        /* Terminate the current thread.  */
        _tx_thread_terminate(_tx_thread_current_ptr);
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <_txm_module_manager_memory_fault_handler+0x44>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fc fdea 	bl	800677c <_tx_thread_terminate>
    }
    
    /* Determine if there is a user memory fault notification callback.  */
    if (_txm_module_manager_fault_notify)
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <_txm_module_manager_memory_fault_handler+0x48>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <_txm_module_manager_memory_fault_handler+0x3a>
    {
        /* Yes, call the user's notification memory fault callback.  */
        (_txm_module_manager_fault_notify)(thread_ptr, module_instance_ptr);
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <_txm_module_manager_memory_fault_handler+0x48>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	6838      	ldr	r0, [r7, #0]
 8009bb8:	4798      	blx	r3
    }
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	2000ef8c 	.word	0x2000ef8c
 8009bc8:	2000f68c 	.word	0x2000f68c

08009bcc <_txm_module_manager_memory_fault_notify>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_memory_fault_notify(VOID (*notify_function)(TX_THREAD *, TXM_MODULE_INSTANCE *))
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
    /* Setup notification function.  */
    _txm_module_manager_fault_notify =  notify_function;
 8009bd4:	4a04      	ldr	r2, [pc, #16]	; (8009be8 <_txm_module_manager_memory_fault_notify+0x1c>)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6013      	str	r3, [r2, #0]
    
    /* Return success.  */
    return(TX_SUCCESS);
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	2000f68c 	.word	0x2000f68c

08009bec <_txm_module_manager_region_size_get>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_module_manager_region_size_get(ULONG block_size)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]

ULONG   return_value;

    /* Process relative to the input block size.  */
    if (block_size == 32)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d102      	bne.n	8009c00 <_txm_module_manager_region_size_get+0x14>
    {
        return_value =  0x04;
 8009bfa:	2304      	movs	r3, #4
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e06f      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 64)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b40      	cmp	r3, #64	; 0x40
 8009c04:	d102      	bne.n	8009c0c <_txm_module_manager_region_size_get+0x20>
    {
        return_value =  0x05;
 8009c06:	2305      	movs	r3, #5
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	e069      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 128)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b80      	cmp	r3, #128	; 0x80
 8009c10:	d102      	bne.n	8009c18 <_txm_module_manager_region_size_get+0x2c>
    {
        return_value =  0x06;
 8009c12:	2306      	movs	r3, #6
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	e063      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 256)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1e:	d102      	bne.n	8009c26 <_txm_module_manager_region_size_get+0x3a>
    {
        return_value =  0x07;
 8009c20:	2307      	movs	r3, #7
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e05c      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 512)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c2c:	d102      	bne.n	8009c34 <_txm_module_manager_region_size_get+0x48>
    {
        return_value =  0x08;
 8009c2e:	2308      	movs	r3, #8
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	e055      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 1024)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c3a:	d102      	bne.n	8009c42 <_txm_module_manager_region_size_get+0x56>
    {
        return_value =  0x09;
 8009c3c:	2309      	movs	r3, #9
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e04e      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 2048)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c48:	d102      	bne.n	8009c50 <_txm_module_manager_region_size_get+0x64>
    {
        return_value =  0x0A;
 8009c4a:	230a      	movs	r3, #10
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	e047      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 4096)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c56:	d102      	bne.n	8009c5e <_txm_module_manager_region_size_get+0x72>
    {
        return_value =  0x0B;
 8009c58:	230b      	movs	r3, #11
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e040      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 8192)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c64:	d102      	bne.n	8009c6c <_txm_module_manager_region_size_get+0x80>
    {
        return_value =  0x0C;
 8009c66:	230c      	movs	r3, #12
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	e039      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 16384)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c72:	d102      	bne.n	8009c7a <_txm_module_manager_region_size_get+0x8e>
    {
        return_value =  0x0D;
 8009c74:	230d      	movs	r3, #13
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	e032      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 32768)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c80:	d102      	bne.n	8009c88 <_txm_module_manager_region_size_get+0x9c>
    {
        return_value =  0x0E;
 8009c82:	230e      	movs	r3, #14
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	e02b      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 65536)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c8e:	d102      	bne.n	8009c96 <_txm_module_manager_region_size_get+0xaa>
    {
        return_value =  0x0F;
 8009c90:	230f      	movs	r3, #15
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e024      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 131072)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c9c:	d102      	bne.n	8009ca4 <_txm_module_manager_region_size_get+0xb8>
    {
        return_value =  0x10;
 8009c9e:	2310      	movs	r3, #16
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	e01d      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 262144)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009caa:	d102      	bne.n	8009cb2 <_txm_module_manager_region_size_get+0xc6>
    {
        return_value =  0x11;
 8009cac:	2311      	movs	r3, #17
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e016      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 524288)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009cb8:	d102      	bne.n	8009cc0 <_txm_module_manager_region_size_get+0xd4>
    {
        return_value =  0x12;
 8009cba:	2312      	movs	r3, #18
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	e00f      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 1048576)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cc6:	d102      	bne.n	8009cce <_txm_module_manager_region_size_get+0xe2>
    {
        return_value =  0x13;
 8009cc8:	2313      	movs	r3, #19
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	e008      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 2097152)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cd4:	d102      	bne.n	8009cdc <_txm_module_manager_region_size_get+0xf0>
    {
        return_value =  0x14;
 8009cd6:	2314      	movs	r3, #20
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	e001      	b.n	8009ce0 <_txm_module_manager_region_size_get+0xf4>
    }
    else
    {
        /* Max 4MB MPU pages for modules.  */
        return_value =  0x15;
 8009cdc:	2315      	movs	r3, #21
 8009cde:	60fb      	str	r3, [r7, #12]
    }

    return(return_value);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <_txm_module_manager_calculate_srd_bits>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_module_manager_calculate_srd_bits(ULONG block_size, ULONG length)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]

ULONG   srd_bits = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
UINT    srd_bit_index;

    /* length is smaller than block_size, set SRD bits if block_size is 256 or more. */
    if((block_size >= 256) && (length < block_size))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2bff      	cmp	r3, #255	; 0xff
 8009d00:	d929      	bls.n	8009d56 <_txm_module_manager_calculate_srd_bits+0x68>
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d225      	bcs.n	8009d56 <_txm_module_manager_calculate_srd_bits+0x68>
    {
        /* Divide block_size by 8 by shifting right 3. Result is size of subregion.  */
        block_size = block_size >> 3;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	08db      	lsrs	r3, r3, #3
 8009d0e:	607b      	str	r3, [r7, #4]
        
        /* Set SRD index into attribute register. */
        srd_bit_index = 8;
 8009d10:	2308      	movs	r3, #8
 8009d12:	60bb      	str	r3, [r7, #8]
        
        /* If subregion overlaps length, move to the next subregion. */
        while(length > block_size)
 8009d14:	e006      	b.n	8009d24 <_txm_module_manager_calculate_srd_bits+0x36>
        {
            length = length - block_size;
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	603b      	str	r3, [r7, #0]
            srd_bit_index++;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60bb      	str	r3, [r7, #8]
        while(length > block_size)
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d8f4      	bhi.n	8009d16 <_txm_module_manager_calculate_srd_bits+0x28>
        }
        /* Check for a portion of code remaining. */
        if(length)
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00e      	beq.n	8009d50 <_txm_module_manager_calculate_srd_bits+0x62>
        {
            srd_bit_index++;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	3301      	adds	r3, #1
 8009d36:	60bb      	str	r3, [r7, #8]
        }
        
        /* Set unused subregion bits. */
        while(srd_bit_index < 16)
 8009d38:	e00a      	b.n	8009d50 <_txm_module_manager_calculate_srd_bits+0x62>
        {
            srd_bits = srd_bits | (0x1 << srd_bit_index);
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	461a      	mov	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]
            srd_bit_index++;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	60bb      	str	r3, [r7, #8]
        while(srd_bit_index < 16)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d9f1      	bls.n	8009d3a <_txm_module_manager_calculate_srd_bits+0x4c>
        }
    }
    
    return(srd_bits);
 8009d56:	68fb      	ldr	r3, [r7, #12]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <_txm_module_manager_mm_register_setup>:
/*  07-29-2022      Scott Larson            Enable user defined regions,  */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_mm_register_setup(TXM_MODULE_INSTANCE *module_instance)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b090      	sub	sp, #64	; 0x40
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
ULONG   callback_stack_size;
ULONG   block_size;
ULONG   base_address_register;
ULONG   base_attribute_register;
ULONG   region_size;
ULONG   srd_bits = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
UINT    mpu_register = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	623b      	str	r3, [r7, #32]
UINT    i;


    /* Setup the first region for the ThreadX trampoline code.  */
    /* Set base register to user mode entry, which is guaranteed to be at least 32-byte aligned.  */
    base_address_register =  (ULONG) _txm_module_manager_user_mode_entry;
 8009d74:	4b8c      	ldr	r3, [pc, #560]	; (8009fa8 <_txm_module_manager_mm_register_setup+0x244>)
 8009d76:	617b      	str	r3, [r7, #20]
    
    /* Mask address to proper range,  region 0, set Valid bit. */
    base_address_register =  (base_address_register & 0xFFFFFFE0) | mpu_register | 0x10;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f023 021f 	bic.w	r2, r3, #31
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f043 0310 	orr.w	r3, r3, #16
 8009d86:	617b      	str	r3, [r7, #20]
    module_instance -> txm_module_instance_mpu_registers[0] =  base_address_register;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	665a      	str	r2, [r3, #100]	; 0x64
    
    /* Attributes: read only, write-back, shareable, size 32 bytes, region enabled. */
    module_instance -> txm_module_instance_mpu_registers[1] =  0x06070009;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a86      	ldr	r2, [pc, #536]	; (8009fac <_txm_module_manager_mm_register_setup+0x248>)
 8009d92:	669a      	str	r2, [r3, #104]	; 0x68

    /* Initialize the MPU register.  */
    mpu_register =  1;
 8009d94:	2301      	movs	r3, #1
 8009d96:	623b      	str	r3, [r7, #32]

    /* Initialize the MPU table index.  */
    mpu_table_index = 2;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	61fb      	str	r3, [r7, #28]

    /* Setup values for code area.  */
    code_address =  (ULONG) module_instance -> txm_module_instance_code_start;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    code_size =     module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_code_size;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* Check if shared memory was set up. If so, only 3 entries are available for
       code protection. If not set up, 4 code entries are available.  */
    if(module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MANAGER_SHARED_MPU_INDEX] == 0)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d15d      	bne.n	8009e70 <_txm_module_manager_mm_register_setup+0x10c>
           2. 1/4 of the largest power of two that is greater than or equal to code size.
           3. Largest power of 2 that fits in the remaining space.
           4. Smallest power of 2 that exceeds the remaining space, minimum 32. */
        
        /* Now loop through to setup MPU protection for the code area.  */
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES; i++)
 8009db4:	2300      	movs	r3, #0
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	e056      	b.n	8009e68 <_txm_module_manager_mm_register_setup+0x104>
        {
            /* First two MPU blocks are 1/4 of the largest power of two
               that is greater than or equal to code size.  */
            if (i < 2)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d806      	bhi.n	8009dce <_txm_module_manager_mm_register_setup+0x6a>
            {
                block_size = _txm_power_of_two_block_size(code_size) >> 2;
 8009dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dc2:	f7fd ff0b 	bl	8007bdc <_txm_power_of_two_block_size>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	089b      	lsrs	r3, r3, #2
 8009dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dcc:	e01b      	b.n	8009e06 <_txm_module_manager_mm_register_setup+0xa2>
            }
            
            /* Third MPU block is the largest power of 2 that fits in the remaining space. */
            else if (i == 2)
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d10b      	bne.n	8009dec <_txm_module_manager_mm_register_setup+0x88>
            {
                /* Subtract (block_size*2) from code_size to calculate remaining space.  */
                code_size =  code_size - (block_size << 1);
 8009dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	63bb      	str	r3, [r7, #56]	; 0x38
                block_size = _txm_power_of_two_block_size(code_size) >> 1;
 8009dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009de0:	f7fd fefc 	bl	8007bdc <_txm_power_of_two_block_size>
 8009de4:	4603      	mov	r3, r0
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dea:	e00c      	b.n	8009e06 <_txm_module_manager_mm_register_setup+0xa2>
            
            /* Last MPU block is the smallest power of 2 that exceeds the remaining space, minimum 32. */
            else
            {
                /* Calculate remaining space.  */
                code_size =  code_size - block_size;
 8009dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	63bb      	str	r3, [r7, #56]	; 0x38
                block_size = _txm_power_of_two_block_size(code_size);
 8009df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009df6:	f7fd fef1 	bl	8007bdc <_txm_power_of_two_block_size>
 8009dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
                srd_bits = _txm_module_manager_calculate_srd_bits(block_size, code_size);
 8009dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e00:	f7ff ff75 	bl	8009cee <_txm_module_manager_calculate_srd_bits>
 8009e04:	6278      	str	r0, [r7, #36]	; 0x24
            }
            
            /* Build the base address register.  */
            base_address_register =  (code_address & ~(block_size - 1)) | mpu_register | 0x10;
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	425a      	negs	r2, r3
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	401a      	ands	r2, r3
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	f043 0310 	orr.w	r3, r3, #16
 8009e16:	617b      	str	r3, [r7, #20]
            
            /* Calculate the region size information.  */
            region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8009e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e1a:	f7ff fee7 	bl	8009bec <_txm_module_manager_region_size_get>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	613b      	str	r3, [r7, #16]
            
            /* Build the base attribute register. */
            base_attribute_register =  region_size | srd_bits | 0x06070001;
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	4b61      	ldr	r3, [pc, #388]	; (8009fb0 <_txm_module_manager_mm_register_setup+0x24c>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28
            
            /* Setup the MPU Base Address Register.  */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index] =  base_address_register;
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	3318      	adds	r3, #24
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	605a      	str	r2, [r3, #4]
            
            /* Setup the MPU Base Attribute Register.   */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index+1] =  base_attribute_register;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	3301      	adds	r3, #1
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	3318      	adds	r3, #24
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e4c:	605a      	str	r2, [r3, #4]

            /* Adjust the code address.  */
            code_address =  code_address + block_size;
 8009e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	4413      	add	r3, r2
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
            
            /* Move MPU table index.  */
            mpu_table_index =  mpu_table_index + 2;
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	3302      	adds	r3, #2
 8009e5a:	61fb      	str	r3, [r7, #28]
            
            /* Increment the MPU register index.  */
            mpu_register++;
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	623b      	str	r3, [r7, #32]
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES; i++)
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	3301      	adds	r3, #1
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d9a5      	bls.n	8009dba <_txm_module_manager_mm_register_setup+0x56>
 8009e6e:	e062      	b.n	8009f36 <_txm_module_manager_mm_register_setup+0x1d2>
    
    /* Only 3 code entries available.  */
    else
    {
        /* Calculate block size, one code entry taken up by shared memory.  */
        block_size = _txm_power_of_two_block_size(code_size / (TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1));
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	4a50      	ldr	r2, [pc, #320]	; (8009fb4 <_txm_module_manager_mm_register_setup+0x250>)
 8009e74:	fba2 2303 	umull	r2, r3, r2, r3
 8009e78:	085b      	lsrs	r3, r3, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fd feae 	bl	8007bdc <_txm_power_of_two_block_size>
 8009e80:	62f8      	str	r0, [r7, #44]	; 0x2c
        
        /* Calculate the region size information.  */
        region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8009e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e84:	f7ff feb2 	bl	8009bec <_txm_module_manager_region_size_get>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	613b      	str	r3, [r7, #16]
        
        /* Now loop through to setup MPU protection for the code area.  */
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1; i++)
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	e047      	b.n	8009f24 <_txm_module_manager_mm_register_setup+0x1c0>
        {
            /* Build the base address register.  */
            base_address_register = (code_address & ~(block_size - 1)) | mpu_register | 0x10;
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	425a      	negs	r2, r3
 8009e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9a:	401a      	ands	r2, r3
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	f043 0310 	orr.w	r3, r3, #16
 8009ea4:	617b      	str	r3, [r7, #20]
            
            /* Check if SRD bits need to be set.  */
            if (code_size < block_size)
 8009ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d204      	bcs.n	8009eb8 <_txm_module_manager_mm_register_setup+0x154>
            {
                srd_bits = _txm_module_manager_calculate_srd_bits(block_size, code_size);
 8009eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb2:	f7ff ff1c 	bl	8009cee <_txm_module_manager_calculate_srd_bits>
 8009eb6:	6278      	str	r0, [r7, #36]	; 0x24
            }
            
            /* Build the base attribute register. */
            base_attribute_register =  region_size | srd_bits | 0x06070000;
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8009ec2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009ec6:	62bb      	str	r3, [r7, #40]	; 0x28
            
            /* Is there still some code?  If so set the region enable bit.  */
            if (code_size)
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <_txm_module_manager_mm_register_setup+0x172>
            {
                /* Set the region enable bit.  */
                base_attribute_register =  base_attribute_register | 0x1;
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            /* Setup the MPU Base Address Register.  */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index] =  base_address_register;
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	3318      	adds	r3, #24
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	605a      	str	r2, [r3, #4]
            
            /* Setup the MPU Base Attribute Register.   */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index+1] =  base_attribute_register;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	3318      	adds	r3, #24
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef2:	605a      	str	r2, [r3, #4]
            
            /* Adjust the code address.  */
            code_address =  code_address + block_size;
 8009ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	4413      	add	r3, r2
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
            
            /* Decrement the code size.  */
            if (code_size > block_size)
 8009efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d904      	bls.n	8009f0e <_txm_module_manager_mm_register_setup+0x1aa>
            {
                code_size =  code_size - block_size;
 8009f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f0c:	e001      	b.n	8009f12 <_txm_module_manager_mm_register_setup+0x1ae>
            }
            else
            {
                code_size =  0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            
            /* Move MPU table index.  */
            mpu_table_index =  mpu_table_index + 2;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	3302      	adds	r3, #2
 8009f16:	61fb      	str	r3, [r7, #28]
            
            /* Increment the MPU register index.  */
            mpu_register++;
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	623b      	str	r3, [r7, #32]
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1; i++)
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	3301      	adds	r3, #1
 8009f22:	61bb      	str	r3, [r7, #24]
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d9b4      	bls.n	8009e94 <_txm_module_manager_mm_register_setup+0x130>
        }
        
        /* Adjust indeces to pass over the shared memory entry.  */
        /* Move MPU table index.  */
        mpu_table_index =  mpu_table_index + 2;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	3302      	adds	r3, #2
 8009f2e:	61fb      	str	r3, [r7, #28]
        
        /* Increment the MPU register index.  */
        mpu_register++;
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	3301      	adds	r3, #1
 8009f34:	623b      	str	r3, [r7, #32]
    }
    
    /* Setup values for data area.  */
    data_address =  (ULONG) module_instance -> txm_module_instance_data_start;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3a:	637b      	str	r3, [r7, #52]	; 0x34
    /* Adjust the size of the module elements to be aligned to the default alignment. We do this
       so that when we partition the allocated memory, we can simply place these regions right beside
       each other without having to align their pointers. Note this only works when they all have
       the same alignment.  */
    
    data_size =             module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_data_size;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f42:	633b      	str	r3, [r7, #48]	; 0x30
    start_stop_stack_size = module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_start_stop_stack_size;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4a:	60fb      	str	r3, [r7, #12]
    callback_stack_size =   module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_callback_stack_size;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f52:	60bb      	str	r3, [r7, #8]
    
    data_size =              ((data_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	3303      	adds	r3, #3
 8009f58:	f023 0303 	bic.w	r3, r3, #3
 8009f5c:	633b      	str	r3, [r7, #48]	; 0x30

    start_stop_stack_size =  ((start_stop_stack_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3303      	adds	r3, #3
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	60fb      	str	r3, [r7, #12]

    callback_stack_size =    ((callback_stack_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	3303      	adds	r3, #3
 8009f6c:	f023 0303 	bic.w	r3, r3, #3
 8009f70:	60bb      	str	r3, [r7, #8]

    /* Update the data size to include thread stacks.  */
    data_size = data_size + start_stop_stack_size + callback_stack_size;
 8009f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4413      	add	r3, r2
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
    
    block_size = _txm_power_of_two_block_size(data_size / TXM_MODULE_MANAGER_DATA_MPU_ENTRIES);
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	4a0c      	ldr	r2, [pc, #48]	; (8009fb4 <_txm_module_manager_mm_register_setup+0x250>)
 8009f82:	fba2 2303 	umull	r2, r3, r2, r3
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fd fe27 	bl	8007bdc <_txm_power_of_two_block_size>
 8009f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
    
    /* Reset SRD bitfield.  */
    srd_bits = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Calculate the region size information.  */
    region_size =   (_txm_module_manager_region_size_get(block_size) << 1);
 8009f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f96:	f7ff fe29 	bl	8009bec <_txm_module_manager_region_size_get>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]
    
    /* Now loop through to setup MPU protection for the data area.  */
    for (i = 0; i < TXM_MODULE_MANAGER_DATA_MPU_ENTRIES; i++)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61bb      	str	r3, [r7, #24]
 8009fa4:	e050      	b.n	800a048 <_txm_module_manager_mm_register_setup+0x2e4>
 8009fa6:	bf00      	nop
 8009fa8:	08000641 	.word	0x08000641
 8009fac:	06070009 	.word	0x06070009
 8009fb0:	06070001 	.word	0x06070001
 8009fb4:	aaaaaaab 	.word	0xaaaaaaab
    {
        /* Build the base address register.  */
        base_address_register =  (data_address & ~(block_size - 1)) | mpu_register | 0x10;
 8009fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fba:	425a      	negs	r2, r3
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	401a      	ands	r2, r3
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	f043 0310 	orr.w	r3, r3, #16
 8009fc8:	617b      	str	r3, [r7, #20]
        
        /* Check if SRD bits need to be set.  */
        if (data_size < block_size)
 8009fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d204      	bcs.n	8009fdc <_txm_module_manager_mm_register_setup+0x278>
        {
            srd_bits = _txm_module_manager_calculate_srd_bits(block_size, data_size);
 8009fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fd6:	f7ff fe8a 	bl	8009cee <_txm_module_manager_calculate_srd_bits>
 8009fda:	6278      	str	r0, [r7, #36]	; 0x24
        }
        
        /* Build the base attribute register. */
        base_attribute_register =  region_size | srd_bits | 0x13070000;
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	f043 5398 	orr.w	r3, r3, #318767104	; 0x13000000
 8009fe6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009fea:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Is there still some data?  If so set the region enable bit.  */
        if (data_size)
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <_txm_module_manager_mm_register_setup+0x296>
        {
            /* Set the region enable bit.  */
            base_attribute_register =  base_attribute_register | 0x1;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	f043 0301 	orr.w	r3, r3, #1
 8009ff8:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        /* Setup the MPU Base Address Register.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index] =  base_address_register;
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	3318      	adds	r3, #24
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	605a      	str	r2, [r3, #4]
        
        /* Setup the MPU Base Attribute Register.   */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index+1] =  base_attribute_register;
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	3301      	adds	r3, #1
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	3318      	adds	r3, #24
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a016:	605a      	str	r2, [r3, #4]

        /* Adjust the data address.  */
        data_address =  data_address + block_size;
 800a018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	4413      	add	r3, r2
 800a01e:	637b      	str	r3, [r7, #52]	; 0x34
        
        /* Decrement the data size.  */
        if (data_size > block_size)
 800a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	429a      	cmp	r2, r3
 800a026:	d904      	bls.n	800a032 <_txm_module_manager_mm_register_setup+0x2ce>
        {
            data_size =  data_size - block_size;
 800a028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	633b      	str	r3, [r7, #48]	; 0x30
 800a030:	e001      	b.n	800a036 <_txm_module_manager_mm_register_setup+0x2d2>
        }
        else
        {
            data_size =  0;
 800a032:	2300      	movs	r3, #0
 800a034:	633b      	str	r3, [r7, #48]	; 0x30
        }
        
        /* Move MPU table index.  */
        mpu_table_index =  mpu_table_index + 2;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	3302      	adds	r3, #2
 800a03a:	61fb      	str	r3, [r7, #28]
        
        /* Increment the MPU register index.  */
        mpu_register++;
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	3301      	adds	r3, #1
 800a040:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TXM_MODULE_MANAGER_DATA_MPU_ENTRIES; i++)
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	3301      	adds	r3, #1
 800a046:	61bb      	str	r3, [r7, #24]
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d9b4      	bls.n	8009fb8 <_txm_module_manager_mm_register_setup+0x254>
    }

#endif
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	3740      	adds	r7, #64	; 0x40
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_txm_module_manager_object_allocate>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_manager_object_allocate(VOID **object_ptr_ptr, ULONG object_size, TXM_MODULE_INSTANCE *module_instance)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
TXM_MODULE_ALLOCATED_OBJECT *object_ptr;
UINT                        return_value;


    /* Ensure the object pointer pointer is valid. */
    if (object_ptr_ptr == (VOID **) TX_NULL)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <_txm_module_manager_object_allocate+0x16>
    {

        /* The object pointer pointer is invalid, return an error.  */
        return(TXM_MODULE_INVALID_MEMORY);
 800a06a:	23f4      	movs	r3, #244	; 0xf4
 800a06c:	e052      	b.n	800a114 <_txm_module_manager_object_allocate+0xbc>
    }

    /* Initialize the return pointer to NULL.  */
    *((VOID **) object_ptr_ptr) =  TX_NULL;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]

    /* Get module manager protection mutex.  */
    _txe_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 800a074:	f04f 31ff 	mov.w	r1, #4294967295
 800a078:	4828      	ldr	r0, [pc, #160]	; (800a11c <_txm_module_manager_object_allocate+0xc4>)
 800a07a:	f7fd f9c5 	bl	8007408 <_txe_mutex_get>

    /* Determine if an object pool was created.  */
    if (_txm_module_manager_object_pool_created)
 800a07e:	4b28      	ldr	r3, [pc, #160]	; (800a120 <_txm_module_manager_object_allocate+0xc8>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d040      	beq.n	800a108 <_txm_module_manager_object_allocate+0xb0>

    TXM_MODULE_ALLOCATED_OBJECT   *next_object, *previous_object;

        /* Allocate the object requested by the module - adding an extra ULONG in order to
           store the module instance pointer.  */
        return_value =  (ULONG)  _txe_byte_allocate(&_txm_module_manager_object_pool, (VOID **) &object_ptr,
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f103 0210 	add.w	r2, r3, #16
 800a08c:	f107 0110 	add.w	r1, r7, #16
 800a090:	2300      	movs	r3, #0
 800a092:	4824      	ldr	r0, [pc, #144]	; (800a124 <_txm_module_manager_object_allocate+0xcc>)
 800a094:	f7fd f8a4 	bl	80071e0 <_txe_byte_allocate>
 800a098:	61f8      	str	r0, [r7, #28]
            (ULONG) (object_size + sizeof(TXM_MODULE_ALLOCATED_OBJECT)), TX_NO_WAIT);

        /* Determine if the request was successful.  */
        if (return_value == TX_SUCCESS)
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d135      	bne.n	800a10c <_txm_module_manager_object_allocate+0xb4>
        {
            /* Yes, now store the module instance in the allocated memory block.  */

            /* Link the allocated memory to the module instance.  */
            if (module_instance -> txm_module_instance_object_list_count++ == 0)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800a0a6:	1c59      	adds	r1, r3, #1
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	f8c2 147c 	str.w	r1, [r2, #1148]	; 0x47c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10a      	bne.n	800a0c8 <_txm_module_manager_object_allocate+0x70>
            {
                /* The allocated object list is empty.  Add object to empty list.  */
                module_instance -> txm_module_instance_object_list_head =  object_ptr;
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
                object_ptr -> txm_module_allocated_object_next =           object_ptr;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	605a      	str	r2, [r3, #4]
                object_ptr -> txm_module_allocated_object_previous =       object_ptr;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	609a      	str	r2, [r3, #8]
 800a0c6:	e012      	b.n	800a0ee <_txm_module_manager_object_allocate+0x96>
            }
            else
            {
                /* This list is not NULL, add to the end of the list.  */
                next_object =      module_instance -> txm_module_instance_object_list_head;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
 800a0ce:	61bb      	str	r3, [r7, #24]
                previous_object =  next_object -> txm_module_allocated_object_previous;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	617b      	str	r3, [r7, #20]

                /* Place the new object in the list.  */
                next_object -> txm_module_allocated_object_previous =  object_ptr;
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	609a      	str	r2, [r3, #8]
                previous_object -> txm_module_allocated_object_next =  object_ptr;
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	605a      	str	r2, [r3, #4]

                /* Setup this object's allocated links.  */
                object_ptr -> txm_module_allocated_object_previous =  previous_object;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	609a      	str	r2, [r3, #8]
                object_ptr -> txm_module_allocated_object_next =      next_object;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	605a      	str	r2, [r3, #4]
            }

            /* Setup the module instance pointer in the allocated object.  */
            object_ptr -> txm_module_allocated_object_module_instance =  module_instance;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	601a      	str	r2, [r3, #0]

            /* Set the object size. */
            object_ptr -> txm_module_object_size =  object_size;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	60da      	str	r2, [r3, #12]

            /* Move the object pointer forward. This is what the module is given. */
            object_ptr++;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	613b      	str	r3, [r7, #16]

            /* Return this pointer to the application.  */
            *((VOID **) object_ptr_ptr) =  object_ptr;
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	e001      	b.n	800a10c <_txm_module_manager_object_allocate+0xb4>
        }
    }
    else
    {
        /* Set return value to not enabled.  */
        return_value =  TX_NOT_AVAILABLE;
 800a108:	231d      	movs	r3, #29
 800a10a:	61fb      	str	r3, [r7, #28]
    }

    /* Release the protection mutex.  */
    _txe_mutex_put(&_txm_module_manager_mutex);
 800a10c:	4803      	ldr	r0, [pc, #12]	; (800a11c <_txm_module_manager_object_allocate+0xc4>)
 800a10e:	f7fd f9d5 	bl	80074bc <_txe_mutex_put>

    return(return_value);
 800a112:	69fb      	ldr	r3, [r7, #28]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3720      	adds	r7, #32
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	2000f644 	.word	0x2000f644
 800a120:	2000f640 	.word	0x2000f640
 800a124:	2000f60c 	.word	0x2000f60c

0800a128 <_txm_module_manager_object_pointer_get>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call the secure version of this function with the maximum length
       possible since none was passed.  */
    status =  _txm_module_manager_object_pointer_get_extended(object_type, name, TXM_MODULE_MANAGER_UTIL_MAX_VALUE_OF_TYPE_UNSIGNED(UINT), object_ptr);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f04f 32ff 	mov.w	r2, #4294967295
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f807 	bl	800a150 <_txm_module_manager_object_pointer_get_extended>
 800a142:	6178      	str	r0, [r7, #20]
    return(status);
 800a144:	697b      	ldr	r3, [r7, #20]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <_txm_module_manager_object_pointer_get_extended>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pointer_get_extended(UINT object_type, CHAR *search_name, UINT search_name_length, VOID **object_ptr)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b096      	sub	sp, #88	; 0x58
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
UINT                    status;
TXM_MODULE_INSTANCE     *module_instance;


    /* Determine if the name or object pointer are NULL.  */
    if ((search_name == TX_NULL) || (object_ptr == TX_NULL))
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <_txm_module_manager_object_pointer_get_extended+0x1a>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <_txm_module_manager_object_pointer_get_extended+0x1e>
    {

        /* Return error!  */
        return(TX_PTR_ERROR);
 800a16a:	2303      	movs	r3, #3
 800a16c:	e1a3      	b.n	800a4b6 <_txm_module_manager_object_pointer_get_extended+0x366>
    }

    /* Default status to not found.  */
    status =  TX_NO_INSTANCE;
 800a16e:	230d      	movs	r3, #13
 800a170:	633b      	str	r3, [r7, #48]	; 0x30

    /* Set the return value to NULL.  */
    *object_ptr =  TX_NULL;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a178:	f3ef 8310 	mrs	r3, PRIMASK
 800a17c:	623b      	str	r3, [r7, #32]
    return(posture);
 800a17e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a180:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a182:	b672      	cpsid	i
    return(int_posture);
 800a184:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts.  */
    TX_DISABLE
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Temporarily disable preemption.  This will keep other threads from creating and deleting threads.  */
    _tx_thread_preempt_disable++;
 800a188:	4b8f      	ldr	r3, [pc, #572]	; (800a3c8 <_txm_module_manager_object_pointer_get_extended+0x278>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3301      	adds	r3, #1
 800a18e:	4a8e      	ldr	r2, [pc, #568]	; (800a3c8 <_txm_module_manager_object_pointer_get_extended+0x278>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	f383 8810 	msr	PRIMASK, r3
}
 800a19c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Process relative to the object type.  */
    switch(object_type)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	2b07      	cmp	r3, #7
 800a1a4:	f200 816e 	bhi.w	800a484 <_txm_module_manager_object_pointer_get_extended+0x334>
 800a1a8:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <_txm_module_manager_object_pointer_get_extended+0x60>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a377 	.word	0x0800a377
 800a1b4:	0800a41d 	.word	0x0800a41d
 800a1b8:	0800a2a5 	.word	0x0800a2a5
 800a1bc:	0800a331 	.word	0x0800a331
 800a1c0:	0800a25f 	.word	0x0800a25f
 800a1c4:	0800a2eb 	.word	0x0800a2eb
 800a1c8:	0800a1d1 	.word	0x0800a1d1
 800a1cc:	0800a219 	.word	0x0800a219
    /* Determine if a thread object is requested.  */
    case TXM_THREAD_OBJECT:
    {

        /* Loop to find the first matching thread.  */
        i = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	637b      	str	r3, [r7, #52]	; 0x34
        thread_ptr =  _tx_thread_created_ptr;
 800a1d4:	4b7d      	ldr	r3, [pc, #500]	; (800a3cc <_txm_module_manager_object_pointer_get_extended+0x27c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	657b      	str	r3, [r7, #84]	; 0x54
        while (i < _tx_thread_created_count)
 800a1da:	e017      	b.n	800a20c <_txm_module_manager_object_pointer_get_extended+0xbc>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, thread_ptr -> tx_thread_name))
 800a1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	68b8      	ldr	r0, [r7, #8]
 800a1e6:	f001 fa54 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d006      	beq.n	800a1fe <_txm_module_manager_object_pointer_get_extended+0xae>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) thread_ptr;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1f4:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a1fa:	bf00      	nop
            i++;

            /* Move to next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
        }
        break;
 800a1fc:	e145      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a200:	3301      	adds	r3, #1
 800a202:	637b      	str	r3, [r7, #52]	; 0x34
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 800a204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	657b      	str	r3, [r7, #84]	; 0x54
        while (i < _tx_thread_created_count)
 800a20c:	4b70      	ldr	r3, [pc, #448]	; (800a3d0 <_txm_module_manager_object_pointer_get_extended+0x280>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a212:	429a      	cmp	r2, r3
 800a214:	d3e2      	bcc.n	800a1dc <_txm_module_manager_object_pointer_get_extended+0x8c>
        break;
 800a216:	e138      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a timer object is requested.  */
    case TXM_TIMER_OBJECT:
    {

        /* Loop to find the first matching timer.  */
        i = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	637b      	str	r3, [r7, #52]	; 0x34
        timer_ptr =  _tx_timer_created_ptr;
 800a21c:	4b6d      	ldr	r3, [pc, #436]	; (800a3d4 <_txm_module_manager_object_pointer_get_extended+0x284>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	653b      	str	r3, [r7, #80]	; 0x50
        while (i < _tx_timer_created_count)
 800a222:	e016      	b.n	800a252 <_txm_module_manager_object_pointer_get_extended+0x102>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, timer_ptr -> tx_timer_name))
 800a224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	461a      	mov	r2, r3
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	68b8      	ldr	r0, [r7, #8]
 800a22e:	f001 fa30 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d006      	beq.n	800a246 <_txm_module_manager_object_pointer_get_extended+0xf6>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) timer_ptr;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a23c:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a23e:	2300      	movs	r3, #0
 800a240:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a242:	bf00      	nop
            i++;

            /* Move to next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
        }
        break;
 800a244:	e121      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a248:	3301      	adds	r3, #1
 800a24a:	637b      	str	r3, [r7, #52]	; 0x34
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 800a24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	653b      	str	r3, [r7, #80]	; 0x50
        while (i < _tx_timer_created_count)
 800a252:	4b61      	ldr	r3, [pc, #388]	; (800a3d8 <_txm_module_manager_object_pointer_get_extended+0x288>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a258:	429a      	cmp	r2, r3
 800a25a:	d3e3      	bcc.n	800a224 <_txm_module_manager_object_pointer_get_extended+0xd4>
        break;
 800a25c:	e115      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a queue object is requested.  */
    case TXM_QUEUE_OBJECT:
    {

        /* Loop to find the first matching queue.  */
        i = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
        queue_ptr =  _tx_queue_created_ptr;
 800a262:	4b5e      	ldr	r3, [pc, #376]	; (800a3dc <_txm_module_manager_object_pointer_get_extended+0x28c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < _tx_queue_created_count)
 800a268:	e016      	b.n	800a298 <_txm_module_manager_object_pointer_get_extended+0x148>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, queue_ptr -> tx_queue_name))
 800a26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	461a      	mov	r2, r3
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	68b8      	ldr	r0, [r7, #8]
 800a274:	f001 fa0d 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d006      	beq.n	800a28c <_txm_module_manager_object_pointer_get_extended+0x13c>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) queue_ptr;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a282:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a284:	2300      	movs	r3, #0
 800a286:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a288:	bf00      	nop
            i++;

            /* Move to next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
        }
        break;
 800a28a:	e0fe      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28e:	3301      	adds	r3, #1
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 800a292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < _tx_queue_created_count)
 800a298:	4b51      	ldr	r3, [pc, #324]	; (800a3e0 <_txm_module_manager_object_pointer_get_extended+0x290>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d3e3      	bcc.n	800a26a <_txm_module_manager_object_pointer_get_extended+0x11a>
        break;
 800a2a2:	e0f2      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a event flags object is requested.  */
    case TXM_EVENT_FLAGS_OBJECT:
    {

        /* Loop to find the first matching event flags group.  */
        i = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	637b      	str	r3, [r7, #52]	; 0x34
        events_ptr =  _tx_event_flags_created_ptr;
 800a2a8:	4b4e      	ldr	r3, [pc, #312]	; (800a3e4 <_txm_module_manager_object_pointer_get_extended+0x294>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	64bb      	str	r3, [r7, #72]	; 0x48
        while (i < _tx_event_flags_created_count)
 800a2ae:	e016      	b.n	800a2de <_txm_module_manager_object_pointer_get_extended+0x18e>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, events_ptr -> tx_event_flags_group_name))
 800a2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	68b8      	ldr	r0, [r7, #8]
 800a2ba:	f001 f9ea 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <_txm_module_manager_object_pointer_get_extended+0x182>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) events_ptr;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c8:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a2ce:	bf00      	nop
            i++;

            /* Move to next event flags group.  */
            events_ptr =  events_ptr -> tx_event_flags_group_created_next;
        }
        break;
 800a2d0:	e0db      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	637b      	str	r3, [r7, #52]	; 0x34
            events_ptr =  events_ptr -> tx_event_flags_group_created_next;
 800a2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	64bb      	str	r3, [r7, #72]	; 0x48
        while (i < _tx_event_flags_created_count)
 800a2de:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <_txm_module_manager_object_pointer_get_extended+0x298>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d3e3      	bcc.n	800a2b0 <_txm_module_manager_object_pointer_get_extended+0x160>
        break;
 800a2e8:	e0cf      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a semaphore object is requested.  */
    case TXM_SEMAPHORE_OBJECT:
    {

        /* Loop to find the first matching semaphore.  */
        i = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	637b      	str	r3, [r7, #52]	; 0x34
        semaphore_ptr =  _tx_semaphore_created_ptr;
 800a2ee:	4b3f      	ldr	r3, [pc, #252]	; (800a3ec <_txm_module_manager_object_pointer_get_extended+0x29c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	647b      	str	r3, [r7, #68]	; 0x44
        while (i < _tx_semaphore_created_count)
 800a2f4:	e016      	b.n	800a324 <_txm_module_manager_object_pointer_get_extended+0x1d4>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, semaphore_ptr -> tx_semaphore_name))
 800a2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6879      	ldr	r1, [r7, #4]
 800a2fe:	68b8      	ldr	r0, [r7, #8]
 800a300:	f001 f9c7 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <_txm_module_manager_object_pointer_get_extended+0x1c8>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) semaphore_ptr;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a30e:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a310:	2300      	movs	r3, #0
 800a312:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a314:	bf00      	nop
            i++;

            /* Move to next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
        }
        break;
 800a316:	e0b8      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31a:	3301      	adds	r3, #1
 800a31c:	637b      	str	r3, [r7, #52]	; 0x34
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 800a31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	647b      	str	r3, [r7, #68]	; 0x44
        while (i < _tx_semaphore_created_count)
 800a324:	4b32      	ldr	r3, [pc, #200]	; (800a3f0 <_txm_module_manager_object_pointer_get_extended+0x2a0>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d3e3      	bcc.n	800a2f6 <_txm_module_manager_object_pointer_get_extended+0x1a6>
        break;
 800a32e:	e0ac      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a mutex object is requested.  */
    case TXM_MUTEX_OBJECT:
    {

        /* Loop to find the first matching mutex.  */
        i = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	637b      	str	r3, [r7, #52]	; 0x34
        mutex_ptr =  _tx_mutex_created_ptr;
 800a334:	4b2f      	ldr	r3, [pc, #188]	; (800a3f4 <_txm_module_manager_object_pointer_get_extended+0x2a4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	643b      	str	r3, [r7, #64]	; 0x40
        while (i < _tx_mutex_created_count)
 800a33a:	e016      	b.n	800a36a <_txm_module_manager_object_pointer_get_extended+0x21a>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, mutex_ptr -> tx_mutex_name))
 800a33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	461a      	mov	r2, r3
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	68b8      	ldr	r0, [r7, #8]
 800a346:	f001 f9a4 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <_txm_module_manager_object_pointer_get_extended+0x20e>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) mutex_ptr;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a354:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a356:	2300      	movs	r3, #0
 800a358:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a35a:	bf00      	nop
            i++;

            /* Move to next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
        }
        break;
 800a35c:	e095      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	3301      	adds	r3, #1
 800a362:	637b      	str	r3, [r7, #52]	; 0x34
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 800a364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	643b      	str	r3, [r7, #64]	; 0x40
        while (i < _tx_mutex_created_count)
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <_txm_module_manager_object_pointer_get_extended+0x2a8>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a370:	429a      	cmp	r2, r3
 800a372:	d3e3      	bcc.n	800a33c <_txm_module_manager_object_pointer_get_extended+0x1ec>
        break;
 800a374:	e089      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a block pool object is requested.  */
    case TXM_BLOCK_POOL_OBJECT:
    {

        /* Get the module instance.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 800a376:	4b21      	ldr	r3, [pc, #132]	; (800a3fc <_txm_module_manager_object_pointer_get_extended+0x2ac>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Is a module making this request?  */
        if (module_instance != TX_NULL)
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d008      	beq.n	800a398 <_txm_module_manager_object_pointer_get_extended+0x248>
        {

            /* Is memory protection enabled?  */
            if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <_txm_module_manager_object_pointer_get_extended+0x248>
            {

                /* Modules with memory protection can only access block pools they created.  */
                status =  TXM_MODULE_INVALID;
 800a392:	23f2      	movs	r3, #242	; 0xf2
 800a394:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a396:	e078      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            }
        }

        /* Loop to find the first matching block pool.  */
        i = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	637b      	str	r3, [r7, #52]	; 0x34
        block_pool_ptr =  _tx_block_pool_created_ptr;
 800a39c:	4b18      	ldr	r3, [pc, #96]	; (800a400 <_txm_module_manager_object_pointer_get_extended+0x2b0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (i < _tx_block_pool_created_count)
 800a3a2:	e035      	b.n	800a410 <_txm_module_manager_object_pointer_get_extended+0x2c0>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, block_pool_ptr -> tx_block_pool_name))
 800a3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	68b8      	ldr	r0, [r7, #8]
 800a3ae:	f001 f970 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d025      	beq.n	800a404 <_txm_module_manager_object_pointer_get_extended+0x2b4>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) block_pool_ptr;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3bc:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a3c2:	bf00      	nop
            i++;

            /* Move to next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
        }
        break;
 800a3c4:	e061      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
 800a3c6:	bf00      	nop
 800a3c8:	2000f028 	.word	0x2000f028
 800a3cc:	2000ef94 	.word	0x2000ef94
 800a3d0:	2000ef98 	.word	0x2000ef98
 800a3d4:	2000f0cc 	.word	0x2000f0cc
 800a3d8:	2000f0d0 	.word	0x2000f0d0
 800a3dc:	2000ef5c 	.word	0x2000ef5c
 800a3e0:	2000ef60 	.word	0x2000ef60
 800a3e4:	2000ef64 	.word	0x2000ef64
 800a3e8:	2000ef68 	.word	0x2000ef68
 800a3ec:	2000ef54 	.word	0x2000ef54
 800a3f0:	2000ef58 	.word	0x2000ef58
 800a3f4:	2000ef6c 	.word	0x2000ef6c
 800a3f8:	2000ef70 	.word	0x2000ef70
 800a3fc:	2000ef8c 	.word	0x2000ef8c
 800a400:	2000ef74 	.word	0x2000ef74
            i++;
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	3301      	adds	r3, #1
 800a408:	637b      	str	r3, [r7, #52]	; 0x34
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 800a40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (i < _tx_block_pool_created_count)
 800a410:	4b2b      	ldr	r3, [pc, #172]	; (800a4c0 <_txm_module_manager_object_pointer_get_extended+0x370>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a416:	429a      	cmp	r2, r3
 800a418:	d3c4      	bcc.n	800a3a4 <_txm_module_manager_object_pointer_get_extended+0x254>
        break;
 800a41a:	e036      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    /* Determine if a byte pool object is requested.  */
    case TXM_BYTE_POOL_OBJECT:
    {

        /* Get the module instance.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 800a41c:	4b29      	ldr	r3, [pc, #164]	; (800a4c4 <_txm_module_manager_object_pointer_get_extended+0x374>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a424:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Is a module making this request?  */
        if (module_instance != TX_NULL)
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d008      	beq.n	800a43e <_txm_module_manager_object_pointer_get_extended+0x2ee>
        {

            /* Is memory protection enabled?  */
            if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <_txm_module_manager_object_pointer_get_extended+0x2ee>
            {

                /* Modules with memory protection can only access block pools they created.  */
                status =  TXM_MODULE_INVALID;
 800a438:	23f2      	movs	r3, #242	; 0xf2
 800a43a:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a43c:	e025      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            }
        }

        /* Loop to find the first matching byte pool.  */
        i = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	637b      	str	r3, [r7, #52]	; 0x34
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 800a442:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <_txm_module_manager_object_pointer_get_extended+0x378>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	63bb      	str	r3, [r7, #56]	; 0x38
        while (i < _tx_byte_pool_created_count)
 800a448:	e016      	b.n	800a478 <_txm_module_manager_object_pointer_get_extended+0x328>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, byte_pool_ptr -> tx_byte_pool_name))
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	461a      	mov	r2, r3
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	68b8      	ldr	r0, [r7, #8]
 800a454:	f001 f91d 	bl	800b692 <_txm_module_manager_object_name_compare>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d006      	beq.n	800a46c <_txm_module_manager_object_pointer_get_extended+0x31c>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) byte_pool_ptr;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a462:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 800a464:	2300      	movs	r3, #0
 800a466:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800a468:	bf00      	nop
            i++;

            /* Move to next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
        }
        break;
 800a46a:	e00e      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
            i++;
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	3301      	adds	r3, #1
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a476:	63bb      	str	r3, [r7, #56]	; 0x38
        while (i < _tx_byte_pool_created_count)
 800a478:	4b14      	ldr	r3, [pc, #80]	; (800a4cc <_txm_module_manager_object_pointer_get_extended+0x37c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a47e:	429a      	cmp	r2, r3
 800a480:	d3e3      	bcc.n	800a44a <_txm_module_manager_object_pointer_get_extended+0x2fa>
        break;
 800a482:	e002      	b.n	800a48a <_txm_module_manager_object_pointer_get_extended+0x33a>
    }

    default:

        /* Invalid object ID.  */
        status =  TX_OPTION_ERROR;
 800a484:	2308      	movs	r3, #8
 800a486:	633b      	str	r3, [r7, #48]	; 0x30
            /* Call the USBX object get function.  */
            status =  _txm_module_manager_usbx_object_pointer_get(object_type, search_name, search_name_length, object_ptr);
        }
#endif

        break;
 800a488:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a48a:	f3ef 8310 	mrs	r3, PRIMASK
 800a48e:	617b      	str	r3, [r7, #20]
    return(posture);
 800a490:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a492:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a494:	b672      	cpsid	i
    return(int_posture);
 800a496:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Enable preemption again.  */
    _tx_thread_preempt_disable--;
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <_txm_module_manager_object_pointer_get_extended+0x380>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	4a0b      	ldr	r2, [pc, #44]	; (800a4d0 <_txm_module_manager_object_pointer_get_extended+0x380>)
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	f383 8810 	msr	PRIMASK, r3
}
 800a4ae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a4b0:	f7fb fe86 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(status);
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3758      	adds	r7, #88	; 0x58
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	2000ef78 	.word	0x2000ef78
 800a4c4:	2000ef8c 	.word	0x2000ef8c
 800a4c8:	2000ef7c 	.word	0x2000ef7c
 800a4cc:	2000ef80 	.word	0x2000ef80
 800a4d0:	2000f028 	.word	0x2000f028

0800a4d4 <_txm_module_manager_object_pool_create>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pool_create(VOID *object_memory, ULONG object_memory_size)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]

    /* Create a byte pool for allocating RAM areas for modules.  */
    _tx_byte_pool_create(&_txm_module_manager_object_pool, "Module Manager Object Pool", object_memory, object_memory_size);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	4906      	ldr	r1, [pc, #24]	; (800a4fc <_txm_module_manager_object_pool_create+0x28>)
 800a4e4:	4806      	ldr	r0, [pc, #24]	; (800a500 <_txm_module_manager_object_pool_create+0x2c>)
 800a4e6:	f7f9 fb85 	bl	8003bf4 <_tx_byte_pool_create>

    /* Indicate the module manager object pool has been created.  */
    _txm_module_manager_object_pool_created =  TX_TRUE;
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <_txm_module_manager_object_pool_create+0x30>)
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800c9dc 	.word	0x0800c9dc
 800a500:	2000f60c 	.word	0x2000f60c
 800a504:	2000f640 	.word	0x2000f640

0800a508 <_txm_module_manager_properties_get>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_properties_get(TXM_MODULE_INSTANCE *module_instance, ULONG *module_properties_ptr)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <_txm_module_manager_properties_get+0x50>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d001      	beq.n	800a51e <_txm_module_manager_properties_get+0x16>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 800a51a:	231d      	movs	r3, #29
 800a51c:	e015      	b.n	800a54a <_txm_module_manager_properties_get+0x42>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <_txm_module_manager_properties_get+0x20>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800a524:	2303      	movs	r3, #3
 800a526:	e010      	b.n	800a54a <_txm_module_manager_properties_get+0x42>
    }

    /* Check the module ID.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a0b      	ldr	r2, [pc, #44]	; (800a55c <_txm_module_manager_properties_get+0x54>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d001      	beq.n	800a536 <_txm_module_manager_properties_get+0x2e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800a532:	2303      	movs	r3, #3
 800a534:	e009      	b.n	800a54a <_txm_module_manager_properties_get+0x42>
    }

    /* Check for non-null buffer.  */
    if (module_properties_ptr == TX_NULL)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <_txm_module_manager_properties_get+0x38>
    {

        /* Invalid buffer pointer.  */
        return(TX_PTR_ERROR);
 800a53c:	2303      	movs	r3, #3
 800a53e:	e004      	b.n	800a54a <_txm_module_manager_properties_get+0x42>
    }

    /* Simply return the property bitmap.  */
    *module_properties_ptr =  module_instance -> txm_module_instance_property_flags;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	2000f680 	.word	0x2000f680
 800a55c:	4d4f4455 	.word	0x4d4f4455

0800a560 <_txm_module_manager_queue_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_queue_notify_trampoline(TX_QUEUE *queue_ptr)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b096      	sub	sp, #88	; 0x58
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a568:	f3ef 8310 	mrs	r3, PRIMASK
 800a56c:	64bb      	str	r3, [r7, #72]	; 0x48
    return(posture);
 800a56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    int_posture = __get_interrupt_posture();
 800a570:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("CPSID i" : : : "memory");
 800a572:	b672      	cpsid	i
    return(int_posture);
 800a574:	6c7b      	ldr	r3, [r7, #68]	; 0x44


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800a576:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) queue_ptr -> tx_queue_module_instance;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800a57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a580:	2b00      	cmp	r3, #0
 800a582:	d034      	beq.n	800a5ee <_txm_module_manager_queue_notify_trampoline+0x8e>
 800a584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a20      	ldr	r2, [pc, #128]	; (800a60c <_txm_module_manager_queue_notify_trampoline+0xac>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d12f      	bne.n	800a5ee <_txm_module_manager_queue_notify_trampoline+0x8e>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 800a58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a590:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800a592:	2b02      	cmp	r3, #2
 800a594:	d12b      	bne.n	800a5ee <_txm_module_manager_queue_notify_trampoline+0x8e>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 800a596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a598:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a59c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_QUEUE_SEND_CALLBACK;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	60bb      	str	r3, [r7, #8]
        callback_message.txm_module_callback_message_activation_count =      1;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) queue_ptr -> tx_queue_send_module_notify;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) queue_ptr;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_2 =               0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_3 =               0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_4 =               0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_5 =               0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_6 =               0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_7 =               0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_8 =               0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_reserved1 =             0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved2 =             0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5da:	f383 8810 	msr	PRIMASK, r3
}
 800a5de:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 800a5e0:	f107 0308 	add.w	r3, r7, #8
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a5e8:	f7fd fcb2 	bl	8007f50 <_txm_module_manager_callback_request>
 800a5ec:	e00a      	b.n	800a604 <_txm_module_manager_queue_notify_trampoline+0xa4>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800a5ee:	4b08      	ldr	r3, [pc, #32]	; (800a610 <_txm_module_manager_queue_notify_trampoline+0xb0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	4a06      	ldr	r2, [pc, #24]	; (800a610 <_txm_module_manager_queue_notify_trampoline+0xb0>)
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fe:	f383 8810 	msr	PRIMASK, r3
}
 800a602:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 800a604:	bf00      	nop
 800a606:	3758      	adds	r7, #88	; 0x58
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	4d4f4455 	.word	0x4d4f4455
 800a610:	2000f688 	.word	0x2000f688

0800a614 <_txm_module_manager_semaphore_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_semaphore_notify_trampoline(TX_SEMAPHORE *semaphore_ptr)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b096      	sub	sp, #88	; 0x58
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a61c:	f3ef 8310 	mrs	r3, PRIMASK
 800a620:	64bb      	str	r3, [r7, #72]	; 0x48
    return(posture);
 800a622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    int_posture = __get_interrupt_posture();
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("CPSID i" : : : "memory");
 800a626:	b672      	cpsid	i
    return(int_posture);
 800a628:	6c7b      	ldr	r3, [r7, #68]	; 0x44


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800a62a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) semaphore_ptr -> tx_semaphore_module_instance;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800a632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a634:	2b00      	cmp	r3, #0
 800a636:	d034      	beq.n	800a6a2 <_txm_module_manager_semaphore_notify_trampoline+0x8e>
 800a638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a20      	ldr	r2, [pc, #128]	; (800a6c0 <_txm_module_manager_semaphore_notify_trampoline+0xac>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d12f      	bne.n	800a6a2 <_txm_module_manager_semaphore_notify_trampoline+0x8e>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 800a642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a644:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800a646:	2b02      	cmp	r3, #2
 800a648:	d12b      	bne.n	800a6a2 <_txm_module_manager_semaphore_notify_trampoline+0x8e>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 800a64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a64c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a650:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_SEMAPHORE_PUT_CALLBACK;
 800a652:	2303      	movs	r3, #3
 800a654:	60bb      	str	r3, [r7, #8]
        callback_message.txm_module_callback_message_activation_count =      1;
 800a656:	2301      	movs	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) semaphore_ptr -> tx_semaphore_put_module_notify;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) semaphore_ptr;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_2 =               0;
 800a664:	2300      	movs	r3, #0
 800a666:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_3 =               0;
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_4 =               0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_5 =               0;
 800a670:	2300      	movs	r3, #0
 800a672:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_6 =               0;
 800a674:	2300      	movs	r3, #0
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_7 =               0;
 800a678:	2300      	movs	r3, #0
 800a67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_8 =               0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_reserved1 =             0;
 800a680:	2300      	movs	r3, #0
 800a682:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved2 =             0;
 800a684:	2300      	movs	r3, #0
 800a686:	63bb      	str	r3, [r7, #56]	; 0x38
 800a688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68e:	f383 8810 	msr	PRIMASK, r3
}
 800a692:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	4619      	mov	r1, r3
 800a69a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a69c:	f7fd fc58 	bl	8007f50 <_txm_module_manager_callback_request>
 800a6a0:	e00a      	b.n	800a6b8 <_txm_module_manager_semaphore_notify_trampoline+0xa4>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <_txm_module_manager_semaphore_notify_trampoline+0xb0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	4a06      	ldr	r2, [pc, #24]	; (800a6c4 <_txm_module_manager_semaphore_notify_trampoline+0xb0>)
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b2:	f383 8810 	msr	PRIMASK, r3
}
 800a6b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 800a6b8:	bf00      	nop
 800a6ba:	3758      	adds	r7, #88	; 0x58
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	4d4f4455 	.word	0x4d4f4455
 800a6c4:	2000f688 	.word	0x2000f688

0800a6c8 <_txm_module_manager_start>:
/*  12-31-2020      Scott Larson            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_start(TXM_MODULE_INSTANCE *module_instance)
{
 800a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ca:	b091      	sub	sp, #68	; 0x44
 800a6cc:	af0a      	add	r7, sp, #40	; 0x28
 800a6ce:	60f8      	str	r0, [r7, #12]

UINT    status;


    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 800a6d0:	4b6e      	ldr	r3, [pc, #440]	; (800a88c <_txm_module_manager_start+0x1c4>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d001      	beq.n	800a6dc <_txm_module_manager_start+0x14>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 800a6d8:	231d      	movs	r3, #29
 800a6da:	e0d3      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <_txm_module_manager_start+0x1e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e0ce      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 800a6e6:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ea:	4869      	ldr	r0, [pc, #420]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a6ec:	f7fa f89c 	bl	8004828 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a67      	ldr	r2, [pc, #412]	; (800a894 <_txm_module_manager_start+0x1cc>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <_txm_module_manager_start+0x3c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a6fa:	4865      	ldr	r0, [pc, #404]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a6fc:	f7fa fb1a 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800a700:	2303      	movs	r3, #3
 800a702:	e0bf      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Determine if the module instance is in the loaded state.  */
    if ((module_instance -> txm_module_instance_state != TXM_MODULE_LOADED) && (module_instance -> txm_module_instance_state != TXM_MODULE_STOPPED))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d008      	beq.n	800a71e <_txm_module_manager_start+0x56>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b04      	cmp	r3, #4
 800a712:	d004      	beq.n	800a71e <_txm_module_manager_start+0x56>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a714:	485e      	ldr	r0, [pc, #376]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a716:	f7fa fb0d 	bl	8004d34 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 800a71a:	2310      	movs	r3, #16
 800a71c:	e0b2      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Check the priorities of the start/stop and callback request threads. */
    if (module_instance -> txm_module_instance_start_stop_priority < module_instance -> txm_module_instance_maximum_priority ||
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d307      	bcc.n	800a73e <_txm_module_manager_start+0x76>
        module_instance -> txm_module_instance_callback_priority < module_instance -> txm_module_instance_maximum_priority)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 246c 	ldr.w	r2, [r3, #1132]	; 0x46c
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
    if (module_instance -> txm_module_instance_start_stop_priority < module_instance -> txm_module_instance_maximum_priority ||
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d204      	bcs.n	800a748 <_txm_module_manager_start+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a73e:	4854      	ldr	r0, [pc, #336]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a740:	f7fa faf8 	bl	8004d34 <_tx_mutex_put>

        /* At least one thread has an invalid priority.  */
        return(TX_PRIORITY_ERROR);
 800a744:	230f      	movs	r3, #15
 800a746:	e09d      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Create the module's callback request queue.  */
    status = _tx_queue_create(&(module_instance -> txm_module_instance_callback_request_queue), "Module Callback Request Queue", (sizeof(TXM_MODULE_CALLBACK_MESSAGE)/sizeof(ULONG)),
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 701f 	add.w	r0, r3, #636	; 0x27c
                              module_instance -> txm_module_instance_callback_request_queue_area, sizeof(module_instance -> txm_module_instance_callback_request_queue_area));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
    status = _tx_queue_create(&(module_instance -> txm_module_instance_callback_request_queue), "Module Callback Request Queue", (sizeof(TXM_MODULE_CALLBACK_MESSAGE)/sizeof(ULONG)),
 800a754:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800a758:	9200      	str	r2, [sp, #0]
 800a75a:	220d      	movs	r2, #13
 800a75c:	494e      	ldr	r1, [pc, #312]	; (800a898 <_txm_module_manager_start+0x1d0>)
 800a75e:	f7fa fd93 	bl	8005288 <_tx_queue_create>
 800a762:	6178      	str	r0, [r7, #20]

    /* Determine if there was an error.  */
    if (status)
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <_txm_module_manager_start+0xac>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a76a:	4849      	ldr	r0, [pc, #292]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a76c:	f7fa fae2 	bl	8004d34 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 800a770:	2310      	movs	r3, #16
 800a772:	e087      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Create the module start thread.  */
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f103 06ac 	add.w	r6, r3, #172	; 0xac
                                                "Module Start Thread",
                                                module_instance -> txm_module_instance_shell_entry_function,
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77e:	60bb      	str	r3, [r7, #8]
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a784:	6079      	str	r1, [r7, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	f8d1 1460 	ldr.w	r1, [r1, #1120]	; 0x460
                                                module_instance -> txm_module_instance_start_thread_entry,
                                                module_instance -> txm_module_instance_application_module_id,
                                                module_instance -> txm_module_instance_start_stop_stack_start_address,
                                                module_instance -> txm_module_instance_start_stop_stack_size,
                                                (UINT) module_instance -> txm_module_instance_start_stop_priority,
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f8d0 0464 	ldr.w	r0, [r0, #1124]	; 0x464
                                                (UINT) module_instance -> txm_module_instance_start_stop_priority,
 800a79c:	68fc      	ldr	r4, [r7, #12]
 800a79e:	f8d4 4464 	ldr.w	r4, [r4, #1124]	; 0x464
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 800a7a2:	68fd      	ldr	r5, [r7, #12]
 800a7a4:	9508      	str	r5, [sp, #32]
 800a7a6:	25e8      	movs	r5, #232	; 0xe8
 800a7a8:	9507      	str	r5, [sp, #28]
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	9506      	str	r5, [sp, #24]
 800a7ae:	2504      	movs	r5, #4
 800a7b0:	9505      	str	r5, [sp, #20]
 800a7b2:	9404      	str	r4, [sp, #16]
 800a7b4:	9003      	str	r0, [sp, #12]
 800a7b6:	9102      	str	r1, [sp, #8]
 800a7b8:	9201      	str	r2, [sp, #4]
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	4936      	ldr	r1, [pc, #216]	; (800a89c <_txm_module_manager_start+0x1d4>)
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 fad0 	bl	800ad68 <_txm_module_manager_thread_create>
 800a7c8:	6178      	str	r0, [r7, #20]
                                                TX_DONT_START,
                                                sizeof(TX_THREAD),
                                                module_instance);

    /* Determine if the thread create was successful.  */
    if (status != TX_SUCCESS)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00a      	beq.n	800a7e6 <_txm_module_manager_start+0x11e>
    {

        /* Delete the callback notification queue.  */
        _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fa fdca 	bl	8005370 <_tx_queue_delete>

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a7dc:	482c      	ldr	r0, [pc, #176]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a7de:	f7fa faa9 	bl	8004d34 <_tx_mutex_put>

        /* Return the error status.  */
        return(status);
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	e04e      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }

    /* Create the module callback thread.  */
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f503 76ca 	add.w	r6, r3, #404	; 0x194
                                                "Module Callback Request Thread",
                                                module_instance -> txm_module_instance_shell_entry_function,
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f0:	60bb      	str	r3, [r7, #8]
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800a7f6:	6079      	str	r1, [r7, #4]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	f8d1 1468 	ldr.w	r1, [r1, #1128]	; 0x468
                                                module_instance -> txm_module_instance_callback_request_thread_entry,
                                                module_instance -> txm_module_instance_application_module_id,
                                                module_instance -> txm_module_instance_callback_stack_start_address,
                                                module_instance -> txm_module_instance_callback_stack_size,
                                                (UINT) module_instance -> txm_module_instance_callback_priority,
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f8d0 046c 	ldr.w	r0, [r0, #1132]	; 0x46c
                                                (UINT) module_instance -> txm_module_instance_callback_priority,
 800a80e:	68fc      	ldr	r4, [r7, #12]
 800a810:	f8d4 446c 	ldr.w	r4, [r4, #1132]	; 0x46c
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 800a814:	68fd      	ldr	r5, [r7, #12]
 800a816:	9508      	str	r5, [sp, #32]
 800a818:	25e8      	movs	r5, #232	; 0xe8
 800a81a:	9507      	str	r5, [sp, #28]
 800a81c:	2500      	movs	r5, #0
 800a81e:	9506      	str	r5, [sp, #24]
 800a820:	2500      	movs	r5, #0
 800a822:	9505      	str	r5, [sp, #20]
 800a824:	9404      	str	r4, [sp, #16]
 800a826:	9003      	str	r0, [sp, #12]
 800a828:	9102      	str	r1, [sp, #8]
 800a82a:	9201      	str	r2, [sp, #4]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	491b      	ldr	r1, [pc, #108]	; (800a8a0 <_txm_module_manager_start+0x1d8>)
 800a834:	4630      	mov	r0, r6
 800a836:	f000 fa97 	bl	800ad68 <_txm_module_manager_thread_create>
 800a83a:	6178      	str	r0, [r7, #20]
                                                TX_DONT_START,
                                                sizeof(TX_THREAD),
                                                module_instance);

    /* Determine if the thread create was successful.  */
    if (status != TX_SUCCESS)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d014      	beq.n	800a86c <_txm_module_manager_start+0x1a4>
    {

        /* Terminate the start thread.  */
        _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	33ac      	adds	r3, #172	; 0xac
 800a846:	4618      	mov	r0, r3
 800a848:	f7fb ff98 	bl	800677c <_tx_thread_terminate>

        /* Delete the start thread.  */
        _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	33ac      	adds	r3, #172	; 0xac
 800a850:	4618      	mov	r0, r3
 800a852:	f7fb faad 	bl	8005db0 <_tx_thread_delete>

        /* Delete the callback notification queue.  */
        _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fa fd87 	bl	8005370 <_tx_queue_delete>

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a862:	480b      	ldr	r0, [pc, #44]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a864:	f7fa fa66 	bl	8004d34 <_tx_mutex_put>

        /* Return the error status.  */
        return(status);
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	e00b      	b.n	800a884 <_txm_module_manager_start+0x1bc>
    }


    /* Set the module state to started.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STARTED;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2202      	movs	r2, #2
 800a870:	609a      	str	r2, [r3, #8]

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 800a872:	4807      	ldr	r0, [pc, #28]	; (800a890 <_txm_module_manager_start+0x1c8>)
 800a874:	f7fa fa5e 	bl	8004d34 <_tx_mutex_put>

    /* Resume the module's start thread.  */
    _tx_thread_resume(&(module_instance -> txm_module_instance_start_stop_thread));
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	33ac      	adds	r3, #172	; 0xac
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fb fb4f 	bl	8005f20 <_tx_thread_resume>

    /* Return success.  */
    return(TX_SUCCESS);
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a88c:	2000f680 	.word	0x2000f680
 800a890:	2000f644 	.word	0x2000f644
 800a894:	4d4f4455 	.word	0x4d4f4455
 800a898:	0800c9f8 	.word	0x0800c9f8
 800a89c:	0800ca18 	.word	0x0800ca18
 800a8a0:	0800ca2c 	.word	0x0800ca2c

0800a8a4 <_txm_module_manager_stop>:
/*                                            object delete underflow,    */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_stop(TXM_MODULE_INSTANCE *module_instance)
{
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	b0ab      	sub	sp, #172	; 0xac
 800a8a8:	af0a      	add	r7, sp, #40	; 0x28
 800a8aa:	60f8      	str	r0, [r7, #12]
ULONG                           i;
TXM_MODULE_ALLOCATED_OBJECT     *object_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a8ac:	4b85      	ldr	r3, [pc, #532]	; (800aac4 <_txm_module_manager_stop+0x220>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800a8b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <_txm_module_manager_stop+0x18>
    {

        /* Illegal caller of this service.  */
        return(TX_CALLER_ERROR);
 800a8b8:	2313      	movs	r3, #19
 800a8ba:	e232      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8bc:	f3ef 8305 	mrs	r3, IPSR
 800a8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800a8c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    }

    /* Is the caller an ISR or Initialization?  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 800a8c4:	4b80      	ldr	r3, [pc, #512]	; (800aac8 <_txm_module_manager_stop+0x224>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <_txm_module_manager_stop+0x2e>
    {

        /* Illegal caller of this service.  */
        return(TX_CALLER_ERROR);
 800a8ce:	2313      	movs	r3, #19
 800a8d0:	e227      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for invalid caller of this function.  First check for a calling thread.  */
    if (thread_ptr == &_tx_timer_thread)
 800a8d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8d4:	4a7d      	ldr	r2, [pc, #500]	; (800aacc <_txm_module_manager_stop+0x228>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d101      	bne.n	800a8de <_txm_module_manager_stop+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        return(TX_CALLER_ERROR);
 800a8da:	2313      	movs	r3, #19
 800a8dc:	e221      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    }
#endif

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 800a8de:	4b7c      	ldr	r3, [pc, #496]	; (800aad0 <_txm_module_manager_stop+0x22c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d001      	beq.n	800a8ea <_txm_module_manager_stop+0x46>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 800a8e6:	231d      	movs	r3, #29
 800a8e8:	e21b      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <_txm_module_manager_stop+0x50>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e216      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 800a8f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a8f8:	4876      	ldr	r0, [pc, #472]	; (800aad4 <_txm_module_manager_stop+0x230>)
 800a8fa:	f7f9 ff95 	bl	8004828 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a75      	ldr	r2, [pc, #468]	; (800aad8 <_txm_module_manager_stop+0x234>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d004      	beq.n	800a912 <_txm_module_manager_stop+0x6e>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a908:	4872      	ldr	r0, [pc, #456]	; (800aad4 <_txm_module_manager_stop+0x230>)
 800a90a:	f7fa fa13 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800a90e:	2303      	movs	r3, #3
 800a910:	e207      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    }

    /* Determine if the module instance is in the loaded state.  */
    if (module_instance -> txm_module_instance_state != TXM_MODULE_STARTED)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	2b02      	cmp	r3, #2
 800a918:	d004      	beq.n	800a924 <_txm_module_manager_stop+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a91a:	486e      	ldr	r0, [pc, #440]	; (800aad4 <_txm_module_manager_stop+0x230>)
 800a91c:	f7fa fa0a 	bl	8004d34 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 800a920:	2310      	movs	r3, #16
 800a922:	e1fe      	b.n	800ad22 <_txm_module_manager_stop+0x47e>
    }

    /* Set the module state to indicate the module is stopping.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STOPPING;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2203      	movs	r2, #3
 800a928:	609a      	str	r2, [r3, #8]

    /* This thread was previously used as the start thread. So first, make sure it is terminated and deleted before doing anything else.  */
    _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	33ac      	adds	r3, #172	; 0xac
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fb ff24 	bl	800677c <_tx_thread_terminate>
    _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	33ac      	adds	r3, #172	; 0xac
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fb fa39 	bl	8005db0 <_tx_thread_delete>

    /* Determine if there is a module stop function.  */
    if (module_instance -> txm_module_instance_stop_thread_entry)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d044      	beq.n	800a9d0 <_txm_module_manager_stop+0x12c>
    {

        /* Yes, there is a stop function.  Build a thread for executing the module stop function.  */

        /* Create the module stop thread.  */
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f103 06ac 	add.w	r6, r3, #172	; 0xac
                                          "Module Stop Thread",
                                          module_instance -> txm_module_instance_shell_entry_function,
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a950:	60bb      	str	r3, [r7, #8]
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a956:	6079      	str	r1, [r7, #4]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a962:	68f9      	ldr	r1, [r7, #12]
 800a964:	f8d1 1460 	ldr.w	r1, [r1, #1120]	; 0x460
                                          module_instance -> txm_module_instance_stop_thread_entry,
                                          module_instance -> txm_module_instance_application_module_id,
                                          module_instance -> txm_module_instance_start_stop_stack_start_address,
                                          module_instance -> txm_module_instance_start_stop_stack_size,
                                          (UINT) module_instance -> txm_module_instance_start_stop_priority,
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f8d0 0464 	ldr.w	r0, [r0, #1124]	; 0x464
                                          (UINT) module_instance -> txm_module_instance_start_stop_priority,
 800a96e:	68fc      	ldr	r4, [r7, #12]
 800a970:	f8d4 4464 	ldr.w	r4, [r4, #1124]	; 0x464
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 800a974:	68fd      	ldr	r5, [r7, #12]
 800a976:	9508      	str	r5, [sp, #32]
 800a978:	25e8      	movs	r5, #232	; 0xe8
 800a97a:	9507      	str	r5, [sp, #28]
 800a97c:	2501      	movs	r5, #1
 800a97e:	9506      	str	r5, [sp, #24]
 800a980:	2504      	movs	r5, #4
 800a982:	9505      	str	r5, [sp, #20]
 800a984:	9404      	str	r4, [sp, #16]
 800a986:	9003      	str	r0, [sp, #12]
 800a988:	9102      	str	r1, [sp, #8]
 800a98a:	9201      	str	r2, [sp, #4]
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	4952      	ldr	r1, [pc, #328]	; (800aadc <_txm_module_manager_stop+0x238>)
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f9e7 	bl	800ad68 <_txm_module_manager_thread_create>
                                          TX_AUTO_START,
                                          sizeof(TX_THREAD),
                                          module_instance);

        /* Wait for the stop thread to complete.  */
        i =  0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	65fb      	str	r3, [r7, #92]	; 0x5c
        while ((i < TXM_MODULE_TIMEOUT) && (module_instance -> txm_module_instance_start_stop_thread.tx_thread_state != TX_COMPLETED))
 800a99e:	e005      	b.n	800a9ac <_txm_module_manager_stop+0x108>
        {

            /* Sleep to let the module stop thread run.  */
            _tx_thread_sleep(1);
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	f7fb fb8d 	bl	80060c0 <_tx_thread_sleep>

            /* Increment the counter.  */
            i++;
 800a9a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        while ((i < TXM_MODULE_TIMEOUT) && (module_instance -> txm_module_instance_start_stop_thread.tx_thread_state != TX_COMPLETED))
 800a9ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9ae:	2b63      	cmp	r3, #99	; 0x63
 800a9b0:	d804      	bhi.n	800a9bc <_txm_module_manager_stop+0x118>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d1f1      	bne.n	800a9a0 <_txm_module_manager_stop+0xfc>
        }

        /* At this point, we need to terminate and delete the stop thread.  */
        _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	33ac      	adds	r3, #172	; 0xac
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fb fedb 	bl	800677c <_tx_thread_terminate>
        _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	33ac      	adds	r3, #172	; 0xac
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fb f9f0 	bl	8005db0 <_tx_thread_delete>
    }

    /* Delete the module's callback thread and queue for the callback thread.  */
    _tx_thread_terminate(&(module_instance -> txm_module_instance_callback_request_thread));
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fb fed0 	bl	800677c <_tx_thread_terminate>
    _tx_thread_delete(&(module_instance -> txm_module_instance_callback_request_thread));
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fb f9e4 	bl	8005db0 <_tx_thread_delete>
    _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fa fcbe 	bl	8005370 <_tx_queue_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a9fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9fe:	b672      	cpsid	i
    return(int_posture);
 800aa00:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 800aa02:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Temporarily disable preemption.  This will keep other threads from creating and deleting threads.  */
    _tx_thread_preempt_disable++;
 800aa04:	4b36      	ldr	r3, [pc, #216]	; (800aae0 <_txm_module_manager_stop+0x23c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	4a35      	ldr	r2, [pc, #212]	; (800aae0 <_txm_module_manager_stop+0x23c>)
 800aa0c:	6013      	str	r3, [r2, #0]
 800aa0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	f383 8810 	msr	PRIMASK, r3
}
 800aa18:	bf00      	nop
    /* Call the USBX stop function.  */
    _txm_module_manager_usbx_stop(module_instance);
#endif

    /* Loop to delete any and all threads created by the module.  */
    i = _tx_thread_created_count;
 800aa1a:	4b32      	ldr	r3, [pc, #200]	; (800aae4 <_txm_module_manager_stop+0x240>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    thread_ptr =  _tx_thread_created_ptr;
 800aa20:	4b31      	ldr	r3, [pc, #196]	; (800aae8 <_txm_module_manager_stop+0x244>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (i--)
 800aa26:	e022      	b.n	800aa6e <_txm_module_manager_stop+0x1ca>
    {

        /* Pickup the next thread pointer.  */
        next_thread_ptr =  thread_ptr -> tx_thread_created_next;
 800aa28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the thread control block is inside the module.  */
        if ( (((CHAR *) thread_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d30b      	bcc.n	800aa52 <_txm_module_manager_stop+0x1ae>
             (((CHAR *) thread_ptr) < ((CHAR *) module_instance -> txm_module_instance_data_end)))
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if ( (((CHAR *) thread_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 800aa3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d206      	bcs.n	800aa52 <_txm_module_manager_stop+0x1ae>
        {

            /* Terminate and delete this thread, since it is part of this module.  */
            _tx_thread_terminate(thread_ptr);
 800aa44:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800aa46:	f7fb fe99 	bl	800677c <_tx_thread_terminate>
            _tx_thread_delete(thread_ptr);
 800aa4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800aa4c:	f7fb f9b0 	bl	8005db0 <_tx_thread_delete>
 800aa50:	e00b      	b.n	800aa6a <_txm_module_manager_stop+0x1c6>
        }

        /* Is this thread part of the module?  */
        else if (thread_ptr -> tx_thread_module_instance_ptr == module_instance)
 800aa52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d105      	bne.n	800aa6a <_txm_module_manager_stop+0x1c6>
        {

            /* Terminate and delete this thread, since it is part of this module.  */
            _tx_thread_terminate(thread_ptr);
 800aa5e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800aa60:	f7fb fe8c 	bl	800677c <_tx_thread_terminate>
            _tx_thread_delete(thread_ptr);
 800aa64:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800aa66:	f7fb f9a3 	bl	8005db0 <_tx_thread_delete>
        }

        /* Move to next thread.  */
        thread_ptr =  next_thread_ptr;
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (i--)
 800aa6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa70:	1e5a      	subs	r2, r3, #1
 800aa72:	65fa      	str	r2, [r7, #92]	; 0x5c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1d7      	bne.n	800aa28 <_txm_module_manager_stop+0x184>
    }

    /* Loop to delete any and all timers created by the module.  */
    i = _tx_timer_created_count;
 800aa78:	4b1c      	ldr	r3, [pc, #112]	; (800aaec <_txm_module_manager_stop+0x248>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    timer_ptr =  _tx_timer_created_ptr;
 800aa7e:	4b1c      	ldr	r3, [pc, #112]	; (800aaf0 <_txm_module_manager_stop+0x24c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800aa84:	e012      	b.n	800aaac <_txm_module_manager_stop+0x208>
    {

        /* Pickup the next timer pointer.  */
        next_timer_ptr =  timer_ptr -> tx_timer_created_next;
 800aa86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if this module created this timer.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) timer_ptr);
 800aa8c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fdac 	bl	800b5ec <_txm_module_manager_created_object_check>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800aa9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d102      	bne.n	800aaa8 <_txm_module_manager_stop+0x204>
        {

            /* Delete this timer, since it is part of this module.  */
            _tx_timer_delete(timer_ptr);
 800aaa2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800aaa4:	f7fc f91e 	bl	8006ce4 <_tx_timer_delete>
        }

        /* Move to next timer.  */
        timer_ptr =  next_timer_ptr;
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaaa:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800aaac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaae:	1e5a      	subs	r2, r3, #1
 800aab0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e7      	bne.n	800aa86 <_txm_module_manager_stop+0x1e2>
    }

    /* Loop to delete any and all queues created by the module.  */
    i = _tx_queue_created_count;
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <_txm_module_manager_stop+0x250>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	65fb      	str	r3, [r7, #92]	; 0x5c
    queue_ptr =  _tx_queue_created_ptr;
 800aabc:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <_txm_module_manager_stop+0x254>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	677b      	str	r3, [r7, #116]	; 0x74
    while (i--)
 800aac2:	e03b      	b.n	800ab3c <_txm_module_manager_stop+0x298>
 800aac4:	2000ef8c 	.word	0x2000ef8c
 800aac8:	20000008 	.word	0x20000008
 800aacc:	2000f0d8 	.word	0x2000f0d8
 800aad0:	2000f680 	.word	0x2000f680
 800aad4:	2000f644 	.word	0x2000f644
 800aad8:	4d4f4455 	.word	0x4d4f4455
 800aadc:	0800ca4c 	.word	0x0800ca4c
 800aae0:	2000f028 	.word	0x2000f028
 800aae4:	2000ef98 	.word	0x2000ef98
 800aae8:	2000ef94 	.word	0x2000ef94
 800aaec:	2000f0d0 	.word	0x2000f0d0
 800aaf0:	2000f0cc 	.word	0x2000f0cc
 800aaf4:	2000ef60 	.word	0x2000ef60
 800aaf8:	2000ef5c 	.word	0x2000ef5c
    {

        /* Pickup the next queue pointer.  */
        next_queue_ptr =   queue_ptr -> tx_queue_created_next;
 800aafc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab00:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the queue callback function is associated with this module.  */
        if ((queue_ptr -> tx_queue_module_instance == module_instance) &&
 800ab02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d107      	bne.n	800ab1c <_txm_module_manager_stop+0x278>
            (queue_ptr -> tx_queue_send_notify == _txm_module_manager_queue_notify_trampoline))
 800ab0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if ((queue_ptr -> tx_queue_module_instance == module_instance) &&
 800ab10:	4a86      	ldr	r2, [pc, #536]	; (800ad2c <_txm_module_manager_stop+0x488>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d102      	bne.n	800ab1c <_txm_module_manager_stop+0x278>
        {

            /* Clear the callback notification for this queue since it is no longer valid.  */
            queue_ptr -> tx_queue_send_notify =  TX_NULL;
 800ab16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab18:	2200      	movs	r2, #0
 800ab1a:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif

        /* Check if this module created this queue.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) queue_ptr);
 800ab1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fd64 	bl	800b5ec <_txm_module_manager_created_object_check>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800ab2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d102      	bne.n	800ab38 <_txm_module_manager_stop+0x294>
        {

            /* Delete this queue, since it is part of this module.  */
            _tx_queue_delete(queue_ptr);
 800ab32:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab34:	f7fa fc1c 	bl	8005370 <_tx_queue_delete>
        }

        /* Move to next queue.  */
        queue_ptr =  next_queue_ptr;
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	677b      	str	r3, [r7, #116]	; 0x74
    while (i--)
 800ab3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab3e:	1e5a      	subs	r2, r3, #1
 800ab40:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1da      	bne.n	800aafc <_txm_module_manager_stop+0x258>
    }

    /* Loop to delete any and all event flag groups created by the module.  */
    i = _tx_event_flags_created_count;
 800ab46:	4b7a      	ldr	r3, [pc, #488]	; (800ad30 <_txm_module_manager_stop+0x48c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    events_ptr =  _tx_event_flags_created_ptr;
 800ab4c:	4b79      	ldr	r3, [pc, #484]	; (800ad34 <_txm_module_manager_stop+0x490>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	673b      	str	r3, [r7, #112]	; 0x70
    while (i--)
 800ab52:	e01f      	b.n	800ab94 <_txm_module_manager_stop+0x2f0>
    {

        /* Pickup the next event flags group pointer.  */
        next_events_ptr =   events_ptr -> tx_event_flags_group_created_next;
 800ab54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the event flags callback function is associated with this module.  */
        if ((events_ptr -> tx_event_flags_group_module_instance == module_instance) &&
 800ab5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d107      	bne.n	800ab74 <_txm_module_manager_stop+0x2d0>
            (events_ptr -> tx_event_flags_group_set_notify == _txm_module_manager_event_flags_notify_trampoline))
 800ab64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((events_ptr -> tx_event_flags_group_module_instance == module_instance) &&
 800ab68:	4a73      	ldr	r2, [pc, #460]	; (800ad38 <_txm_module_manager_stop+0x494>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d102      	bne.n	800ab74 <_txm_module_manager_stop+0x2d0>
        {

            /* Clear the callback notification for this event flag group since it is no longer valid.  */
            events_ptr -> tx_event_flags_group_set_notify =  TX_NULL;
 800ab6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab70:	2200      	movs	r2, #0
 800ab72:	625a      	str	r2, [r3, #36]	; 0x24
        }
#endif

        /* Check if this module created this event flags.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) events_ptr);
 800ab74:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 fd38 	bl	800b5ec <_txm_module_manager_created_object_check>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800ab82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d102      	bne.n	800ab90 <_txm_module_manager_stop+0x2ec>
        {

            /* Delete this event flags group, since it is part of this module.  */
            _tx_event_flags_delete(events_ptr);
 800ab8a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ab8c:	f7f9 fb8a 	bl	80042a4 <_tx_event_flags_delete>
        }

        /* Move to next event flags group.  */
        events_ptr =  next_events_ptr;
 800ab90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab92:	673b      	str	r3, [r7, #112]	; 0x70
    while (i--)
 800ab94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab96:	1e5a      	subs	r2, r3, #1
 800ab98:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1da      	bne.n	800ab54 <_txm_module_manager_stop+0x2b0>
    }

    /* Loop to delete any and all semaphores created by the module.  */
    i = _tx_semaphore_created_count;
 800ab9e:	4b67      	ldr	r3, [pc, #412]	; (800ad3c <_txm_module_manager_stop+0x498>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	65fb      	str	r3, [r7, #92]	; 0x5c
    semaphore_ptr =  _tx_semaphore_created_ptr;
 800aba4:	4b66      	ldr	r3, [pc, #408]	; (800ad40 <_txm_module_manager_stop+0x49c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (i--)
 800abaa:	e01f      	b.n	800abec <_txm_module_manager_stop+0x348>
    {

        /* Pickup the next semaphore pointer.  */
        next_semaphore_ptr =   semaphore_ptr -> tx_semaphore_created_next;
 800abac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the semaphore callback function is associated with this module.  */
        if ((semaphore_ptr -> tx_semaphore_module_instance == module_instance) &&
 800abb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d107      	bne.n	800abcc <_txm_module_manager_stop+0x328>
            (semaphore_ptr -> tx_semaphore_put_notify == _txm_module_manager_semaphore_notify_trampoline))
 800abbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abbe:	69db      	ldr	r3, [r3, #28]
        if ((semaphore_ptr -> tx_semaphore_module_instance == module_instance) &&
 800abc0:	4a60      	ldr	r2, [pc, #384]	; (800ad44 <_txm_module_manager_stop+0x4a0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d102      	bne.n	800abcc <_txm_module_manager_stop+0x328>
        {

            /* Clear the callback notification for this semaphore since it is no longer valid.  */
            semaphore_ptr -> tx_semaphore_put_notify =  TX_NULL;
 800abc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc8:	2200      	movs	r2, #0
 800abca:	61da      	str	r2, [r3, #28]
        }
#endif

        /* Check if this module created this semaphore.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) semaphore_ptr);
 800abcc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 fd0c 	bl	800b5ec <_txm_module_manager_created_object_check>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800abda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d102      	bne.n	800abe8 <_txm_module_manager_stop+0x344>
        {

            /* Delete this semaphore, since it is part of this module.  */
            _tx_semaphore_delete(semaphore_ptr);
 800abe2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abe4:	f7fa ff6a 	bl	8005abc <_tx_semaphore_delete>
        }

        /* Move to next semaphore.  */
        semaphore_ptr =  next_semaphore_ptr;
 800abe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abea:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (i--)
 800abec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abee:	1e5a      	subs	r2, r3, #1
 800abf0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1da      	bne.n	800abac <_txm_module_manager_stop+0x308>
    }

    /* Loop to delete any and all mutexes created by the module.  */
    i = _tx_mutex_created_count;
 800abf6:	4b54      	ldr	r3, [pc, #336]	; (800ad48 <_txm_module_manager_stop+0x4a4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    mutex_ptr =  _tx_mutex_created_ptr;
 800abfc:	4b53      	ldr	r3, [pc, #332]	; (800ad4c <_txm_module_manager_stop+0x4a8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 800ac02:	e012      	b.n	800ac2a <_txm_module_manager_stop+0x386>
    {

        /* Pickup the next mutex pointer.  */
        next_mutex_ptr =   mutex_ptr -> tx_mutex_created_next;
 800ac04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	647b      	str	r3, [r7, #68]	; 0x44

        /* Check if this module created this mutex.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) mutex_ptr);
 800ac0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 fced 	bl	800b5ec <_txm_module_manager_created_object_check>
 800ac12:	4603      	mov	r3, r0
 800ac14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800ac18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d102      	bne.n	800ac26 <_txm_module_manager_stop+0x382>
        {

            /* Delete this mutex, since it is part of this module.  */
            _tx_mutex_delete(mutex_ptr);
 800ac20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ac22:	f7f9 fd57 	bl	80046d4 <_tx_mutex_delete>
        }

        /* Move to next mutex.  */
        mutex_ptr =  next_mutex_ptr;
 800ac26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac28:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 800ac2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac2c:	1e5a      	subs	r2, r3, #1
 800ac2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e7      	bne.n	800ac04 <_txm_module_manager_stop+0x360>
    }

    /* Loop to delete any and all block pools created by the module.  */
    i = _tx_block_pool_created_count;
 800ac34:	4b46      	ldr	r3, [pc, #280]	; (800ad50 <_txm_module_manager_stop+0x4ac>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	65fb      	str	r3, [r7, #92]	; 0x5c
    block_pool_ptr =  _tx_block_pool_created_ptr;
 800ac3a:	4b46      	ldr	r3, [pc, #280]	; (800ad54 <_txm_module_manager_stop+0x4b0>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	667b      	str	r3, [r7, #100]	; 0x64
    while (i--)
 800ac40:	e012      	b.n	800ac68 <_txm_module_manager_stop+0x3c4>
    {

        /* Pickup the next block pool pointer.  */
        next_block_pool_ptr =   block_pool_ptr -> tx_block_pool_created_next;
 800ac42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Check if this module created this block pool.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) block_pool_ptr);
 800ac48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 fcce 	bl	800b5ec <_txm_module_manager_created_object_check>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800ac56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d102      	bne.n	800ac64 <_txm_module_manager_stop+0x3c0>
        {

            /* Delete this block pool, since it is part of this module.  */
            _tx_block_pool_delete(block_pool_ptr);
 800ac5e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ac60:	f7f8 fdf6 	bl	8003850 <_tx_block_pool_delete>
        }

        /* Move to next block pool.  */
        block_pool_ptr =  next_block_pool_ptr;
 800ac64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac66:	667b      	str	r3, [r7, #100]	; 0x64
    while (i--)
 800ac68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac6a:	1e5a      	subs	r2, r3, #1
 800ac6c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e7      	bne.n	800ac42 <_txm_module_manager_stop+0x39e>
    }

    /* Loop to delete any and all byte pools created by the module.  */
    i = _tx_byte_pool_created_count;
 800ac72:	4b39      	ldr	r3, [pc, #228]	; (800ad58 <_txm_module_manager_stop+0x4b4>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	65fb      	str	r3, [r7, #92]	; 0x5c
    byte_pool_ptr =  _tx_byte_pool_created_ptr;
 800ac78:	4b38      	ldr	r3, [pc, #224]	; (800ad5c <_txm_module_manager_stop+0x4b8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	663b      	str	r3, [r7, #96]	; 0x60
    while (i--)
 800ac7e:	e012      	b.n	800aca6 <_txm_module_manager_stop+0x402>
    {

        /* Pickup the next byte pool pointer.  */
        next_byte_pool_ptr =   byte_pool_ptr -> tx_byte_pool_created_next;
 800ac80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50

        /* Check if this module created this byte pool.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) byte_pool_ptr);
 800ac86:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 fcaf 	bl	800b5ec <_txm_module_manager_created_object_check>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (created_by_module == TX_TRUE)
 800ac94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d102      	bne.n	800aca2 <_txm_module_manager_stop+0x3fe>
        {

            /* Delete this byte pool, since it is part of this module.  */
            _tx_byte_pool_delete(byte_pool_ptr);
 800ac9c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ac9e:	f7f9 f83f 	bl	8003d20 <_tx_byte_pool_delete>
        }

        /* Move to next byte pool.  */
        byte_pool_ptr =  next_byte_pool_ptr;
 800aca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca4:	663b      	str	r3, [r7, #96]	; 0x60
    while (i--)
 800aca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aca8:	1e5a      	subs	r2, r3, #1
 800acaa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e7      	bne.n	800ac80 <_txm_module_manager_stop+0x3dc>
        }
    }
#endif

    /* Delete the allocated objects for this module.  */
    while (module_instance -> txm_module_instance_object_list_count != 0)
 800acb0:	e012      	b.n	800acd8 <_txm_module_manager_stop+0x434>
    {
        /* Pickup the current object pointer.  */
        object_ptr =  module_instance -> txm_module_instance_object_list_head;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
 800acb8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Move the head pointer forward.  */
        module_instance -> txm_module_instance_object_list_head =  object_ptr -> txm_module_allocated_object_next;
 800acba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478

        /* Release the object.  */
        _tx_byte_release((VOID *) object_ptr);
 800acc4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800acc6:	f7f9 f9c9 	bl	800405c <_tx_byte_release>

        /* Decrement count.  */
        module_instance -> txm_module_instance_object_list_count--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800acd0:	1e5a      	subs	r2, r3, #1
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
    while (module_instance -> txm_module_instance_object_list_count != 0)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e7      	bne.n	800acb2 <_txm_module_manager_stop+0x40e>
    }

    /* Set the allocated list head pointer to NULL.  */
    module_instance -> txm_module_instance_object_list_head =  TX_NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acea:	f3ef 8310 	mrs	r3, PRIMASK
 800acee:	61bb      	str	r3, [r7, #24]
    return(posture);
 800acf0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800acf2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800acf4:	b672      	cpsid	i
    return(int_posture);
 800acf6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 800acf8:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Enable preemption again.  */
    _tx_thread_preempt_disable--;
 800acfa:	4b19      	ldr	r3, [pc, #100]	; (800ad60 <_txm_module_manager_stop+0x4bc>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	4a17      	ldr	r2, [pc, #92]	; (800ad60 <_txm_module_manager_stop+0x4bc>)
 800ad02:	6013      	str	r3, [r2, #0]

    /* Set the module state to indicate the module is stopped.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STOPPED;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2204      	movs	r2, #4
 800ad08:	609a      	str	r2, [r3, #8]
 800ad0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	f383 8810 	msr	PRIMASK, r3
}
 800ad14:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 800ad16:	4813      	ldr	r0, [pc, #76]	; (800ad64 <_txm_module_manager_stop+0x4c0>)
 800ad18:	f7fa f80c 	bl	8004d34 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800ad1c:	f7fb fa50 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(TX_SUCCESS);
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3784      	adds	r7, #132	; 0x84
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800a561 	.word	0x0800a561
 800ad30:	2000ef68 	.word	0x2000ef68
 800ad34:	2000ef64 	.word	0x2000ef64
 800ad38:	080080ad 	.word	0x080080ad
 800ad3c:	2000ef58 	.word	0x2000ef58
 800ad40:	2000ef54 	.word	0x2000ef54
 800ad44:	0800a615 	.word	0x0800a615
 800ad48:	2000ef70 	.word	0x2000ef70
 800ad4c:	2000ef6c 	.word	0x2000ef6c
 800ad50:	2000ef78 	.word	0x2000ef78
 800ad54:	2000ef74 	.word	0x2000ef74
 800ad58:	2000ef80 	.word	0x2000ef80
 800ad5c:	2000ef7c 	.word	0x2000ef7c
 800ad60:	2000f028 	.word	0x2000f028
 800ad64:	2000f644 	.word	0x2000f644

0800ad68 <_txm_module_manager_thread_create>:
                            VOID (*shell_function)(TX_THREAD *, TXM_MODULE_INSTANCE *),
                            VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start,
                            UINT thread_control_block_size, TXM_MODULE_INSTANCE *module_instance)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b0a0      	sub	sp, #128	; 0x80
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
UINT                    core_index;
#endif
TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ad76:	2300      	movs	r3, #0
 800ad78:	677b      	str	r3, [r7, #116]	; 0x74
TXM_MODULE_THREAD_ENTRY_INFO *thread_entry_info;
VOID                    *stack_end;
ULONG                   i;

    /* First, check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <_txm_module_manager_thread_create+0x1c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 800ad80:	230e      	movs	r3, #14
 800ad82:	e236      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800ad84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad88:	2be8      	cmp	r3, #232	; 0xe8
 800ad8a:	d001      	beq.n	800ad90 <_txm_module_manager_thread_create+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 800ad8c:	230e      	movs	r3, #14
 800ad8e:	e230      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad90:	f3ef 8310 	mrs	r3, PRIMASK
 800ad94:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800ad96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800ad98:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad9a:	b672      	cpsid	i
    return(int_posture);
 800ad9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ad9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800ada0:	4b5e      	ldr	r3, [pc, #376]	; (800af1c <_txm_module_manager_thread_create+0x1b4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3301      	adds	r3, #1
 800ada6:	4a5d      	ldr	r2, [pc, #372]	; (800af1c <_txm_module_manager_thread_create+0x1b4>)
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adac:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb0:	f383 8810 	msr	PRIMASK, r3
}
 800adb4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Next see if it is already in the created list.  */
    next_thread =  _tx_thread_created_ptr;
 800adb6:	4b5a      	ldr	r3, [pc, #360]	; (800af20 <_txm_module_manager_thread_create+0x1b8>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	67fb      	str	r3, [r7, #124]	; 0x7c
    stack_end   =  (VOID *) (((UCHAR *) ((VOID *) stack_start)) + (stack_size - 1));
 800adbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800adc0:	3b01      	subs	r3, #1
 800adc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800adc6:	4413      	add	r3, r2
 800adc8:	66bb      	str	r3, [r7, #104]	; 0x68
    for (i = 0; i < _tx_thread_created_count; i++)
 800adca:	2300      	movs	r3, #0
 800adcc:	673b      	str	r3, [r7, #112]	; 0x70
 800adce:	e019      	b.n	800ae04 <_txm_module_manager_thread_create+0x9c>
    {

        /* Determine if this thread matches the thread in the list.  */
        if (thread_ptr == next_thread)
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800add4:	429a      	cmp	r2, r3
 800add6:	d01b      	beq.n	800ae10 <_txm_module_manager_thread_create+0xa8>

            break;
        }

        /* Check the stack pointer to see if it overlaps with this thread's stack.  */
        if ((((UCHAR *) ((VOID *) stack_start)) <= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_end))) &&
 800add8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d808      	bhi.n	800adf6 <_txm_module_manager_thread_create+0x8e>
            (((UCHAR *) ((VOID *) stack_end)) >= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_start))))
 800ade4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ade6:	68db      	ldr	r3, [r3, #12]
        if ((((UCHAR *) ((VOID *) stack_start)) <= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_end))) &&
 800ade8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800adea:	429a      	cmp	r2, r3
 800adec:	d303      	bcc.n	800adf6 <_txm_module_manager_thread_create+0x8e>
        {
            /* Stacks overlap, clear the stack pointer to force a stack error below.  */
            stack_start =  TX_NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            break;
 800adf4:	e00d      	b.n	800ae12 <_txm_module_manager_thread_create+0xaa>
        }

        /* Move to the next thread.  */
        next_thread =  next_thread -> tx_thread_created_next;
 800adf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (i = 0; i < _tx_thread_created_count; i++)
 800adfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae00:	3301      	adds	r3, #1
 800ae02:	673b      	str	r3, [r7, #112]	; 0x70
 800ae04:	4b47      	ldr	r3, [pc, #284]	; (800af24 <_txm_module_manager_thread_create+0x1bc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d3e0      	bcc.n	800add0 <_txm_module_manager_thread_create+0x68>
 800ae0e:	e000      	b.n	800ae12 <_txm_module_manager_thread_create+0xaa>
            break;
 800ae10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae12:	f3ef 8310 	mrs	r3, PRIMASK
 800ae16:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae1c:	b672      	cpsid	i
    return(int_posture);
 800ae1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ae20:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Decrement the preempt disable flag.  */
    _tx_thread_preempt_disable--;
 800ae22:	4b3e      	ldr	r3, [pc, #248]	; (800af1c <_txm_module_manager_thread_create+0x1b4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	4a3c      	ldr	r2, [pc, #240]	; (800af1c <_txm_module_manager_thread_create+0x1b4>)
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae32:	f383 8810 	msr	PRIMASK, r3
}
 800ae36:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800ae38:	f7fb f9c2 	bl	80061c0 <_tx_thread_system_preempt_check>

    /* At this point, check to see if there is a duplicate thread.  */
    if (thread_ptr == next_thread)
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d101      	bne.n	800ae48 <_txm_module_manager_thread_create+0xe0>
    {

        /* Thread is already created, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 800ae44:	230e      	movs	r3, #14
 800ae46:	e1d4      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Check for invalid starting address of stack.  */
    if (stack_start == TX_NULL)
 800ae48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <_txm_module_manager_thread_create+0xec>
    {

        /* Invalid stack or entry point, return appropriate error code.  */
        return(TX_PTR_ERROR);
 800ae50:	2303      	movs	r3, #3
 800ae52:	e1ce      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Check for invalid thread entry point.  */
    if (entry_function == TX_NULL)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <_txm_module_manager_thread_create+0xf6>
    {

        /* Invalid stack or entry point, return appropriate error code.  */
        return(TX_PTR_ERROR);
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e1c9      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Check the stack size.  */
    if (stack_size < TX_MINIMUM_STACK)
 800ae5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae62:	2bc7      	cmp	r3, #199	; 0xc7
 800ae64:	d801      	bhi.n	800ae6a <_txm_module_manager_thread_create+0x102>
    {

        /* Stack is not big enough, return appropriate error code.  */
        return(TX_SIZE_ERROR);
 800ae66:	2305      	movs	r3, #5
 800ae68:	e1c3      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800ae6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae6e:	2b1f      	cmp	r3, #31
 800ae70:	d901      	bls.n	800ae76 <_txm_module_manager_thread_create+0x10e>
    {

        /* Invalid priority selected, return appropriate error code.  */
        return(TX_PRIORITY_ERROR);
 800ae72:	230f      	movs	r3, #15
 800ae74:	e1bd      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Check preemption threshold. */
    if (preempt_threshold > priority)
 800ae76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ae7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d901      	bls.n	800ae86 <_txm_module_manager_thread_create+0x11e>
    {

        /* Invalid preempt threshold, return appropriate error code.  */
        return(TX_THRESH_ERROR);
 800ae82:	2318      	movs	r3, #24
 800ae84:	e1b5      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    }

    /* Check the start selection.  */
    if (auto_start > TX_AUTO_START)
 800ae86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d901      	bls.n	800ae92 <_txm_module_manager_thread_create+0x12a>
    {

        /* Invalid auto start selection, return appropriate error code.  */
        return(TX_START_ERROR);
 800ae8e:	2310      	movs	r3, #16
 800ae90:	e1af      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
#ifndef TX_TIMER_PROCESS_IN_ISR
    {
        TX_THREAD *current_thread;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800ae92:	4b25      	ldr	r3, [pc, #148]	; (800af28 <_txm_module_manager_thread_create+0x1c0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	667b      	str	r3, [r7, #100]	; 0x64

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (current_thread == &_tx_timer_thread)
 800ae98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9a:	4a24      	ldr	r2, [pc, #144]	; (800af2c <_txm_module_manager_thread_create+0x1c4>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d101      	bne.n	800aea4 <_txm_module_manager_thread_create+0x13c>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 800aea0:	2313      	movs	r3, #19
 800aea2:	e1a6      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aea4:	f3ef 8305 	mrs	r3, IPSR
 800aea8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800aeaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
        }
    }
#endif

    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 800aeac:	4b20      	ldr	r3, [pc, #128]	; (800af30 <_txm_module_manager_thread_create+0x1c8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <_txm_module_manager_thread_create+0x166>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aeb6:	f3ef 8305 	mrs	r3, IPSR
 800aeba:	637b      	str	r3, [r7, #52]	; 0x34
    return(ipsr_value);
 800aebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800aebe:	4b1c      	ldr	r3, [pc, #112]	; (800af30 <_txm_module_manager_thread_create+0x1c8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aec8:	d201      	bcs.n	800aece <_txm_module_manager_thread_create+0x166>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 800aeca:	2313      	movs	r3, #19
 800aecc:	e191      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800aece:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800aed2:	21ef      	movs	r1, #239	; 0xef
 800aed4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800aed8:	f000 fe52 	bl	800bb80 <memset>
    stack_start =  TX_ALIGN_TYPE_TO_POINTER_CONVERT(updated_stack_start);
#endif

    /* Allocate the thread entry information at the top of thread's stack - Leaving one
       ULONG worth of 0xEF pattern between the actual stack and the entry info structure.  */
    stack_size =  stack_size - (sizeof(TXM_MODULE_THREAD_ENTRY_INFO) + (3*sizeof(ULONG)));
 800aedc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aee0:	3b3c      	subs	r3, #60	; 0x3c
 800aee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, sizeof(TX_THREAD));
 800aee6:	22e8      	movs	r2, #232	; 0xe8
 800aee8:	2100      	movs	r1, #0
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fe48 	bl	800bb80 <memset>

#if TXM_MODULE_MEMORY_PROTECTION
    /* If this is a memory protected module, allocate a kernel stack.  */
    if((module_instance -> txm_module_instance_property_flags) & TXM_MODULE_MEMORY_PROTECTION)
 800aef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d033      	beq.n	800af66 <_txm_module_manager_thread_create+0x1fe>
    {
        ULONG status;

        /* Allocate kernel stack space. */
        status = _txm_module_manager_object_allocate((VOID **) &(thread_ptr -> tx_thread_module_kernel_stack_start), TXM_MODULE_KERNEL_STACK_SIZE, module_instance);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	33a4      	adds	r3, #164	; 0xa4
 800af02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af06:	f44f 7140 	mov.w	r1, #768	; 0x300
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7ff f8a4 	bl	800a058 <_txm_module_manager_object_allocate>
 800af10:	6638      	str	r0, [r7, #96]	; 0x60
        if(status)
 800af12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00d      	beq.n	800af34 <_txm_module_manager_thread_create+0x1cc>
        {
            return(status);
 800af18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af1a:	e16a      	b.n	800b1f2 <_txm_module_manager_thread_create+0x48a>
 800af1c:	2000f028 	.word	0x2000f028
 800af20:	2000ef94 	.word	0x2000ef94
 800af24:	2000ef98 	.word	0x2000ef98
 800af28:	2000ef8c 	.word	0x2000ef8c
 800af2c:	2000f0d8 	.word	0x2000f0d8
 800af30:	20000008 	.word	0x20000008

#ifndef TX_DISABLE_STACK_FILLING
        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_module_kernel_stack_start, ((UCHAR) TX_STACK_FILL), TXM_MODULE_KERNEL_STACK_SIZE);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800af3e:	21ef      	movs	r1, #239	; 0xef
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fe1d 	bl	800bb80 <memset>
#endif

        /* Align kernel stack pointer.  */
        thread_ptr -> tx_thread_module_kernel_stack_end = (VOID *) (((ALIGN_TYPE)(thread_ptr -> tx_thread_module_kernel_stack_start) + TXM_MODULE_KERNEL_STACK_SIZE) & ~0x07);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800af50:	f023 0307 	bic.w	r3, r3, #7
 800af54:	461a      	mov	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

        /* Set kernel stack size.  */
        thread_ptr -> tx_thread_module_kernel_stack_size = TXM_MODULE_KERNEL_STACK_SIZE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800af62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Place the stack parameters into the thread's control block.  */
    thread_ptr -> tx_thread_module_stack_start =  stack_start;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800af6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    thread_ptr -> tx_thread_module_stack_size =   stack_size;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800af76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =                name_ptr;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =               entry_function;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =     entry_input;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800af8c:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =         stack_start;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800af94:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =          stack_size;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800af9c:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =            priority;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800afa4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =       priority;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800afac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    thread_ptr -> tx_thread_time_slice =          time_slice;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800afb6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =      time_slice;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800afbe:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =    ((UINT) TX_MAX_PRIORITIES);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2220      	movs	r2, #32
 800afc4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    thread_ptr -> tx_thread_smp_core_mapped =  0;
#endif
#endif

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800afc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800afce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afd2:	3b01      	subs	r3, #1
 800afd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afd6:	4413      	add	r3, r2
 800afd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afde:	611a      	str	r2, [r3, #16]
#if TXM_MODULE_MEMORY_PROTECTION
    thread_ptr -> tx_thread_module_stack_end =  thread_ptr -> tx_thread_stack_end;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TXM_MODULE_MEMORY_PROTECTION */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800aff0:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800aff8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2203      	movs	r2, #3
 800b000:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	4a7d      	ldr	r2, [pc, #500]	; (800b1fc <_txm_module_manager_thread_create+0x494>)
 800b006:	655a      	str	r2, [r3, #84]	; 0x54
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Setup pointer to the thread entry information structure, which will live at the top of each
       module thread's stack. This will allow the module thread entry function to avoid direct
       access to the actual thread control block.  */
    thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((UCHAR *) thread_ptr -> tx_thread_stack_end) + (2*sizeof(ULONG)) + 1);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	3309      	adds	r3, #9
 800b014:	65bb      	str	r3, [r7, #88]	; 0x58
    thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((ALIGN_TYPE)(thread_entry_info)) & (~0x3));
 800b016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b018:	f023 0303 	bic.w	r3, r3, #3
 800b01c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Build the thread entry information structure.  */
    thread_entry_info -> txm_module_thread_entry_info_thread =                   thread_ptr;
 800b01e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	601a      	str	r2, [r3, #0]
    thread_entry_info -> txm_module_thread_entry_info_module =                   module_instance;
 800b024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b02a:	605a      	str	r2, [r3, #4]
    thread_entry_info -> txm_module_thread_entry_info_data_base_address =        module_instance -> txm_module_instance_module_data_base_address;
 800b02c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b034:	609a      	str	r2, [r3, #8]
    thread_entry_info -> txm_module_thread_entry_info_code_base_address =        module_instance -> txm_module_instance_code_start;
 800b036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b03a:	699a      	ldr	r2, [r3, #24]
 800b03c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b03e:	60da      	str	r2, [r3, #12]
    thread_entry_info -> txm_module_thread_entry_info_entry =                    thread_ptr -> tx_thread_entry;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b046:	611a      	str	r2, [r3, #16]
    thread_entry_info -> txm_module_thread_entry_info_parameter =                thread_ptr -> tx_thread_entry_parameter;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b04c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b04e:	615a      	str	r2, [r3, #20]
    thread_entry_info -> txm_module_thread_entry_info_callback_request_queue =   &(module_instance -> txm_module_instance_callback_request_queue);
 800b050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b054:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 800b058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b05a:	625a      	str	r2, [r3, #36]	; 0x24
    thread_entry_info -> txm_module_thread_entry_info_callback_request_thread =  &(module_instance -> txm_module_instance_callback_request_thread);
 800b05c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b060:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 800b064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b066:	621a      	str	r2, [r3, #32]

    /* Populate thread control block with some stock information from the module.  */
    TXM_MODULE_MANAGER_THREAD_SETUP(thread_ptr, module_instance)
 800b068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	f003 0201 	and.w	r2, r3, #1
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	f003 0201 	and.w	r2, r3, #1
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <_txm_module_manager_thread_create+0x332>
 800b092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b094:	4a5a      	ldr	r2, [pc, #360]	; (800b200 <_txm_module_manager_thread_create+0x498>)
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c
 800b098:	e002      	b.n	800b0a0 <_txm_module_manager_thread_create+0x338>
 800b09a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b09c:	4a59      	ldr	r2, [pc, #356]	; (800b204 <_txm_module_manager_thread_create+0x49c>)
 800b09e:	62da      	str	r2, [r3, #44]	; 0x2c

#ifndef TX_DISABLE_NOTIFY_CALLBACKS
    thread_entry_info ->  txm_module_thread_entry_info_exit_notify =        thread_ptr -> tx_thread_entry_exit_notify;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b0a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0a8:	619a      	str	r2, [r3, #24]
#else /* TX_DISABLE_NOTIFY_CALLBACKS */
    thread_entry_info ->  txm_module_thread_entry_info_exit_notify =        TX_NULL;
#endif /* TX_DISABLE_NOTIFY_CALLBACKS */
    if (thread_ptr -> tx_thread_entry == module_instance -> txm_module_instance_start_thread_entry)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d103      	bne.n	800b0c0 <_txm_module_manager_thread_create+0x358>
        thread_entry_info ->  txm_module_thread_entry_info_start_thread =   TX_TRUE;
 800b0b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	61da      	str	r2, [r3, #28]
 800b0be:	e002      	b.n	800b0c6 <_txm_module_manager_thread_create+0x35e>
    else
        thread_entry_info ->  txm_module_thread_entry_info_start_thread =   TX_FALSE;
 800b0c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	61da      	str	r2, [r3, #28]

    /* Place pointers to the thread info and module instance in the thread control block.  */
    thread_ptr -> tx_thread_module_instance_ptr =    (VOID *) module_instance;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    thread_ptr -> tx_thread_module_entry_info_ptr =  (VOID *) thread_entry_info;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Place the thread entry information pointer in the thread control block so it can be picked up
       in the following stack build function. This is supplied to the module's shell entry function
       to avoid direct access to the actual thread control block. Note that this is overwritten
       with the actual stack pointer at the end of stack build.  */
    thread_ptr -> tx_thread_stack_ptr =  (VOID *) thread_entry_info;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0dc:	609a      	str	r2, [r3, #8]

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _txm_module_manager_thread_stack_build(thread_ptr, shell_function);
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f7f5 fafd 	bl	80006e0 <_txm_module_manager_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b0ea:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0f0:	b672      	cpsid	i
    return(int_posture);
 800b0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800b0f4:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4a43      	ldr	r2, [pc, #268]	; (800b208 <_txm_module_manager_thread_create+0x4a0>)
 800b0fa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b0fc:	4b43      	ldr	r3, [pc, #268]	; (800b20c <_txm_module_manager_thread_create+0x4a4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <_txm_module_manager_thread_create+0x3b4>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b104:	4a42      	ldr	r2, [pc, #264]	; (800b210 <_txm_module_manager_thread_create+0x4a8>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b11a:	e016      	b.n	800b14a <_txm_module_manager_thread_create+0x3e2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800b11c:	4b3c      	ldr	r3, [pc, #240]	; (800b210 <_txm_module_manager_thread_create+0x4a8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	67fb      	str	r3, [r7, #124]	; 0x7c
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b128:	657b      	str	r3, [r7, #84]	; 0x54

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b12a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800b14a:	4b30      	ldr	r3, [pc, #192]	; (800b20c <_txm_module_manager_thread_create+0x4a4>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	4a2e      	ldr	r2, [pc, #184]	; (800b20c <_txm_module_manager_thread_create+0x4a4>)
 800b152:	6013      	str	r3, [r2, #0]
#else /* TX_THREAD_SMP */

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b154:	4b2f      	ldr	r3, [pc, #188]	; (800b214 <_txm_module_manager_thread_create+0x4ac>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	4a2e      	ldr	r2, [pc, #184]	; (800b214 <_txm_module_manager_thread_create+0x4ac>)
 800b15c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b15e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b162:	2b01      	cmp	r3, #1
 800b164:	d129      	bne.n	800b1ba <_txm_module_manager_thread_create+0x452>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b166:	f3ef 8305 	mrs	r3, IPSR
 800b16a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b16c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b16e:	4b2a      	ldr	r3, [pc, #168]	; (800b218 <_txm_module_manager_thread_create+0x4b0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4313      	orrs	r3, r2
 800b174:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b178:	d30d      	bcc.n	800b196 <_txm_module_manager_thread_create+0x42e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b17a:	4b28      	ldr	r3, [pc, #160]	; (800b21c <_txm_module_manager_thread_create+0x4b4>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800b180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <_txm_module_manager_thread_create+0x432>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18a:	677b      	str	r3, [r7, #116]	; 0x74

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b192:	63da      	str	r2, [r3, #60]	; 0x3c
 800b194:	e001      	b.n	800b19a <_txm_module_manager_thread_create+0x432>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	67bb      	str	r3, [r7, #120]	; 0x78
 800b19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	f383 8810 	msr	PRIMASK, r3
}
 800b1a4:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f7fb f844 	bl	8006234 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800b1ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01e      	beq.n	800b1f0 <_txm_module_manager_thread_create+0x488>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800b1b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b1b6:	63da      	str	r2, [r3, #60]	; 0x3c
 800b1b8:	e01a      	b.n	800b1f0 <_txm_module_manager_thread_create+0x488>
 800b1ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f383 8810 	msr	PRIMASK, r3
}
 800b1c4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ca:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b1cc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b1ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1d0:	b672      	cpsid	i
    return(int_posture);
 800b1d2:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800b1d4:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800b1d6:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <_txm_module_manager_thread_create+0x4ac>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	4a0d      	ldr	r2, [pc, #52]	; (800b214 <_txm_module_manager_thread_create+0x4ac>)
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	f383 8810 	msr	PRIMASK, r3
}
 800b1ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b1ec:	f7fa ffe8 	bl	80061c0 <_tx_thread_system_preempt_check>
    }

#endif /* TX_THREAD_SMP */

    /* Return success.  */
    return(TX_SUCCESS);
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3780      	adds	r7, #128	; 0x80
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08006ba5 	.word	0x08006ba5
 800b200:	08000641 	.word	0x08000641
 800b204:	08009901 	.word	0x08009901
 800b208:	54485244 	.word	0x54485244
 800b20c:	2000ef98 	.word	0x2000ef98
 800b210:	2000ef94 	.word	0x2000ef94
 800b214:	2000f028 	.word	0x2000f028
 800b218:	20000008 	.word	0x20000008
 800b21c:	2000ef90 	.word	0x2000ef90

0800b220 <_txm_module_manager_thread_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_thread_notify_trampoline(TX_THREAD *thread_ptr, UINT type)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b098      	sub	sp, #96	; 0x60
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b22a:	f3ef 8310 	mrs	r3, PRIMASK
 800b22e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b232:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b234:	b672      	cpsid	i
    return(int_posture);
 800b236:	6cbb      	ldr	r3, [r7, #72]	; 0x48


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b238:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if the thread is valid.  */
    if ((thread_ptr) && (thread_ptr -> tx_thread_id == TX_THREAD_ID))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d050      	beq.n	800b2e2 <_txm_module_manager_thread_notify_trampoline+0xc2>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a2e      	ldr	r2, [pc, #184]	; (800b300 <_txm_module_manager_thread_notify_trampoline+0xe0>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d14b      	bne.n	800b2e2 <_txm_module_manager_thread_notify_trampoline+0xc2>
    {

        /* Pickup the module instance pointer.  */
        module_instance =  (TXM_MODULE_INSTANCE *) thread_ptr -> tx_thread_module_instance_ptr;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b250:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the module's thread pointer.  */
        thread_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) thread_ptr -> tx_thread_module_entry_info_ptr;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b258:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if this module is still valid.  */
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800b25a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d034      	beq.n	800b2ca <_txm_module_manager_thread_notify_trampoline+0xaa>
 800b260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a27      	ldr	r2, [pc, #156]	; (800b304 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d12f      	bne.n	800b2ca <_txm_module_manager_thread_notify_trampoline+0xaa>
            (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 800b26a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b26c:	689b      	ldr	r3, [r3, #8]
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d12b      	bne.n	800b2ca <_txm_module_manager_thread_notify_trampoline+0xaa>
        {

            /* Yes, the module is still valid.  */

            /* Pickup the module's callback message queue.  */
            module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 800b272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b274:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b278:	653b      	str	r3, [r7, #80]	; 0x50

            /* Build the queue notification message.  */
            callback_message.txm_module_callback_message_type =                  TXM_THREAD_ENTRY_EXIT_CALLBACK;
 800b27a:	2304      	movs	r3, #4
 800b27c:	60bb      	str	r3, [r7, #8]
            callback_message.txm_module_callback_message_activation_count =      1;
 800b27e:	2301      	movs	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
            callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) thread_info -> txm_module_thread_entry_info_exit_notify;
 800b282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	613b      	str	r3, [r7, #16]
            callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) thread_ptr;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	617b      	str	r3, [r7, #20]
            callback_message.txm_module_callback_message_param_2 =               (ALIGN_TYPE) type;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	61bb      	str	r3, [r7, #24]
            callback_message.txm_module_callback_message_param_3 =               0;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
            callback_message.txm_module_callback_message_param_4 =               0;
 800b294:	2300      	movs	r3, #0
 800b296:	623b      	str	r3, [r7, #32]
            callback_message.txm_module_callback_message_param_5 =               0;
 800b298:	2300      	movs	r3, #0
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24
            callback_message.txm_module_callback_message_param_6 =               0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
            callback_message.txm_module_callback_message_param_7 =               0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            callback_message.txm_module_callback_message_param_8 =               0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	633b      	str	r3, [r7, #48]	; 0x30
            callback_message.txm_module_callback_message_reserved1 =             0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
            callback_message.txm_module_callback_message_reserved2 =             0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2b2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ba:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Call the general processing that will place the callback on the
               module's callback request queue.  */
            _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 800b2bc:	f107 0308 	add.w	r3, r7, #8
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b2c4:	f7fc fe44 	bl	8007f50 <_txm_module_manager_callback_request>
 800b2c8:	e00a      	b.n	800b2e0 <_txm_module_manager_thread_notify_trampoline+0xc0>
        {

            /* Module no longer valid.  */

            /* Error, increment the error counter and return.  */
            _txm_module_manager_callback_error_count++;
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <_txm_module_manager_thread_notify_trampoline+0xe8>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	4a0d      	ldr	r2, [pc, #52]	; (800b308 <_txm_module_manager_thread_notify_trampoline+0xe8>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2d6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2da:	f383 8810 	msr	PRIMASK, r3
}
 800b2de:	bf00      	nop
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800b2e0:	e00a      	b.n	800b2f8 <_txm_module_manager_thread_notify_trampoline+0xd8>
    {

        /* Thread pointer is not valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <_txm_module_manager_thread_notify_trampoline+0xe8>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	4a07      	ldr	r2, [pc, #28]	; (800b308 <_txm_module_manager_thread_notify_trampoline+0xe8>)
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f2:	f383 8810 	msr	PRIMASK, r3
}
 800b2f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 800b2f8:	bf00      	nop
 800b2fa:	3760      	adds	r7, #96	; 0x60
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	54485244 	.word	0x54485244
 800b304:	4d4f4455 	.word	0x4d4f4455
 800b308:	2000f688 	.word	0x2000f688

0800b30c <_txm_module_manager_thread_reset>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_thread_reset(TX_THREAD *thread_ptr)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08e      	sub	sp, #56	; 0x38
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
UINT            status;
TXM_MODULE_INSTANCE             *module_instance;
TXM_MODULE_THREAD_ENTRY_INFO    *thread_entry_info;

    /* Default a successful completion status.  */
    status =  TX_SUCCESS;
 800b314:	2300      	movs	r3, #0
 800b316:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b318:	f3ef 8310 	mrs	r3, PRIMASK
 800b31c:	623b      	str	r3, [r7, #32]
    return(posture);
 800b31e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b320:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b322:	b672      	cpsid	i
    return(int_posture);
 800b324:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts.  */
    TX_DISABLE
 800b326:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b328:	4b2c      	ldr	r3, [pc, #176]	; (800b3dc <_txm_module_manager_thread_reset+0xd0>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for a call from the current thread, which is not allowed!  */
    if (current_thread == thread_ptr)
 800b32e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	429a      	cmp	r2, r3
 800b334:	d108      	bne.n	800b348 <_txm_module_manager_thread_reset+0x3c>
 800b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b338:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	f383 8810 	msr	PRIMASK, r3
}
 800b340:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Thread not completed or terminated - return an error!  */
        status =  TX_NOT_DONE;
 800b342:	2320      	movs	r3, #32
 800b344:	633b      	str	r3, [r7, #48]	; 0x30
 800b346:	e009      	b.n	800b35c <_txm_module_manager_thread_reset+0x50>
    }
    else
    {

        /* Check for proper status of this thread to reset.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d005      	beq.n	800b35c <_txm_module_manager_thread_reset+0x50>
        {

            /* Now check for terminated state.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b354:	2b02      	cmp	r3, #2
 800b356:	d001      	beq.n	800b35c <_txm_module_manager_thread_reset+0x50>
            {

                /* Thread not completed or terminated - return an error!  */
                status =  TX_NOT_DONE;
 800b358:	2320      	movs	r3, #32
 800b35a:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }
    }

    /* Is the request valid?  */
    if (status == TX_SUCCESS)
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d130      	bne.n	800b3c4 <_txm_module_manager_thread_reset+0xb8>
    {

        /* Modify the thread status to prevent additional reset calls.  */
        thread_ptr -> tx_thread_state =  TX_NOT_DONE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2220      	movs	r2, #32
 800b366:	631a      	str	r2, [r3, #48]	; 0x30

        /* Get the module instance.  */
        module_instance =  thread_ptr -> tx_thread_module_instance_ptr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b36e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b372:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f383 8810 	msr	PRIMASK, r3
}
 800b37a:	bf00      	nop
#ifndef TX_DISABLE_STACK_FILLING

        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_stack_start, ((UCHAR) TX_STACK_FILL), thread_ptr -> tx_thread_stack_size);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68d8      	ldr	r0, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	461a      	mov	r2, r3
 800b386:	21ef      	movs	r1, #239	; 0xef
 800b388:	f000 fbfa 	bl	800bb80 <memset>
#endif

        /* Setup pointer to the thread entry information structure, which will live at the top of each
           module thread's stack. This will allow the module thread entry function to avoid direct
           access to the actual thread control block.  */
        thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((UCHAR *) thread_ptr -> tx_thread_stack_end) + (2*sizeof(ULONG)) + 1);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	3309      	adds	r3, #9
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
        thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((ALIGN_TYPE)(thread_entry_info)) & (~0x3));
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	f023 0303 	bic.w	r3, r3, #3
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Place the thread entry information pointer in the thread control block so it can be picked up
           in the following stack build function. This is supplied to the module's shell entry function
           to avoid direct access to the actual thread control block. Note that this is overwritten
           with the actual stack pointer at the end of stack build.  */
        thread_ptr -> tx_thread_stack_ptr =  (VOID *) thread_entry_info;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3a0:	609a      	str	r2, [r3, #8]

        /* Call the target specific stack frame building routine to build the
           thread's initial stack and to setup the actual stack pointer in the
           control block.  */
        _txm_module_manager_thread_stack_build(thread_ptr, module_instance -> txm_module_instance_shell_entry_function);
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7f5 f999 	bl	80006e0 <_txm_module_manager_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b2:	617b      	str	r3, [r7, #20]
    return(posture);
 800b3b4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b3b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3b8:	b672      	cpsid	i
    return(int_posture);
 800b3ba:	693b      	ldr	r3, [r7, #16]

        /* Disable interrupts.  */
        TX_DISABLE
 800b3bc:	637b      	str	r3, [r7, #52]	; 0x34

        /* Finally, move into a suspended state to allow for the thread to be resumed.  */
        thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2203      	movs	r2, #3
 800b3c2:	631a      	str	r2, [r3, #48]	; 0x30
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f383 8810 	msr	PRIMASK, r3
}
 800b3ce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status to caller.  */
    return(status);
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3738      	adds	r7, #56	; 0x38
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	2000ef8c 	.word	0x2000ef8c

0800b3e0 <_txm_module_manager_timer_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_timer_notify_trampoline(ULONG id)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b09a      	sub	sp, #104	; 0x68
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b3f0:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3f2:	b672      	cpsid	i
    return(int_posture);
 800b3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b3f6:	667b      	str	r3, [r7, #100]	; 0x64

    /* Our expired timer pointer points to the internal timer,
     * we need to get to the full timer pointer.  */
    /* Pickup the current internal timer pointer.  */
    internal_ptr =  (CHAR *) _tx_timer_expired_timer_ptr;
 800b3f8:	4b2a      	ldr	r3, [pc, #168]	; (800b4a4 <_txm_module_manager_timer_notify_trampoline+0xc4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	663b      	str	r3, [r7, #96]	; 0x60

    /* Get the timer pointer from the internal pointer.  */
    TX_USER_TIMER_POINTER_GET((TX_TIMER_INTERNAL *) internal_ptr, timer_ptr);
 800b3fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b400:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b404:	65bb      	str	r3, [r7, #88]	; 0x58
 800b406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b408:	3b08      	subs	r3, #8
 800b40a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b40c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b40e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) timer_ptr -> tx_timer_module_instance;
 800b410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	657b      	str	r3, [r7, #84]	; 0x54

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800b416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d034      	beq.n	800b486 <_txm_module_manager_timer_notify_trampoline+0xa6>
 800b41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a21      	ldr	r2, [pc, #132]	; (800b4a8 <_txm_module_manager_timer_notify_trampoline+0xc8>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d12f      	bne.n	800b486 <_txm_module_manager_timer_notify_trampoline+0xa6>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 800b426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b428:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d12b      	bne.n	800b486 <_txm_module_manager_timer_notify_trampoline+0xa6>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 800b42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b430:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b434:	653b      	str	r3, [r7, #80]	; 0x50

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_TIMER_CALLBACK;
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 800b43a:	2301      	movs	r3, #1
 800b43c:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) timer_ptr -> tx_timer_module_expiration_function;
 800b43e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b442:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ULONG) id;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 800b448:	2300      	movs	r3, #0
 800b44a:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 800b450:	2300      	movs	r3, #0
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 800b454:	2300      	movs	r3, #0
 800b456:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 800b458:	2300      	movs	r3, #0
 800b45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 800b460:	2300      	movs	r3, #0
 800b462:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 800b464:	2300      	movs	r3, #0
 800b466:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 800b468:	2300      	movs	r3, #0
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b46c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b46e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b472:	f383 8810 	msr	PRIMASK, r3
}
 800b476:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 800b478:	f107 030c 	add.w	r3, r7, #12
 800b47c:	4619      	mov	r1, r3
 800b47e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b480:	f7fc fd66 	bl	8007f50 <_txm_module_manager_callback_request>
 800b484:	e00a      	b.n	800b49c <_txm_module_manager_timer_notify_trampoline+0xbc>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800b486:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <_txm_module_manager_timer_notify_trampoline+0xcc>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3301      	adds	r3, #1
 800b48c:	4a07      	ldr	r2, [pc, #28]	; (800b4ac <_txm_module_manager_timer_notify_trampoline+0xcc>)
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b492:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b496:	f383 8810 	msr	PRIMASK, r3
}
 800b49a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 800b49c:	bf00      	nop
 800b49e:	3768      	adds	r7, #104	; 0x68
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	2000f0d4 	.word	0x2000f0d4
 800b4a8:	4d4f4455 	.word	0x4d4f4455
 800b4ac:	2000f688 	.word	0x2000f688

0800b4b0 <_txm_module_manager_unload>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_unload(TXM_MODULE_INSTANCE *module_instance)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08c      	sub	sp, #48	; 0x30
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4b8:	f3ef 8305 	mrs	r3, IPSR
 800b4bc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b4be:	69fa      	ldr	r2, [r7, #28]
TXM_MODULE_INSTANCE *next_module, *previous_module;
CHAR                *memory_ptr;


    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 800b4c0:	4b44      	ldr	r3, [pc, #272]	; (800b5d4 <_txm_module_manager_unload+0x124>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00b      	beq.n	800b4e2 <_txm_module_manager_unload+0x32>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4ca:	f3ef 8305 	mrs	r3, IPSR
 800b4ce:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b4d0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b4d2:	4b40      	ldr	r3, [pc, #256]	; (800b5d4 <_txm_module_manager_unload+0x124>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b4dc:	d201      	bcs.n	800b4e2 <_txm_module_manager_unload+0x32>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 800b4de:	2313      	movs	r3, #19
 800b4e0:	e073      	b.n	800b5ca <_txm_module_manager_unload+0x11a>
        }
    }

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 800b4e2:	4b3d      	ldr	r3, [pc, #244]	; (800b5d8 <_txm_module_manager_unload+0x128>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d001      	beq.n	800b4ee <_txm_module_manager_unload+0x3e>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 800b4ea:	231d      	movs	r3, #29
 800b4ec:	e06d      	b.n	800b5ca <_txm_module_manager_unload+0x11a>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <_txm_module_manager_unload+0x48>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e068      	b.n	800b5ca <_txm_module_manager_unload+0x11a>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 800b4f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b4fc:	4837      	ldr	r0, [pc, #220]	; (800b5dc <_txm_module_manager_unload+0x12c>)
 800b4fe:	f7f9 f993 	bl	8004828 <_tx_mutex_get>

    /* Determine if the module is already valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a36      	ldr	r2, [pc, #216]	; (800b5e0 <_txm_module_manager_unload+0x130>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d004      	beq.n	800b516 <_txm_module_manager_unload+0x66>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800b50c:	4833      	ldr	r0, [pc, #204]	; (800b5dc <_txm_module_manager_unload+0x12c>)
 800b50e:	f7f9 fc11 	bl	8004d34 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800b512:	2303      	movs	r3, #3
 800b514:	e059      	b.n	800b5ca <_txm_module_manager_unload+0x11a>
    }

    /* Determine if the module instance is in the  state.  */
    if ((module_instance -> txm_module_instance_state != TXM_MODULE_LOADED) && (module_instance -> txm_module_instance_state != TXM_MODULE_STOPPED))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d008      	beq.n	800b530 <_txm_module_manager_unload+0x80>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	2b04      	cmp	r3, #4
 800b524:	d004      	beq.n	800b530 <_txm_module_manager_unload+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800b526:	482d      	ldr	r0, [pc, #180]	; (800b5dc <_txm_module_manager_unload+0x12c>)
 800b528:	f7f9 fc04 	bl	8004d34 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_NOT_DONE);
 800b52c:	2320      	movs	r3, #32
 800b52e:	e04c      	b.n	800b5ca <_txm_module_manager_unload+0x11a>
    }

    /* Pickup the module data memory allocation address.  */
    memory_ptr =  module_instance -> txm_module_instance_data_allocation_ptr;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release the module's data memory.  */
    _tx_byte_release(memory_ptr);
 800b536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b538:	f7f8 fd90 	bl	800405c <_tx_byte_release>

    /* Determine if there was memory allocated for the code.  */
    if (module_instance -> txm_module_instance_code_allocation_ptr)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d005      	beq.n	800b550 <_txm_module_manager_unload+0xa0>
    {

        /* Yes, release the module's code memory.  */
        memory_ptr =  module_instance -> txm_module_instance_code_allocation_ptr;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Release the module's data memory.  */
        _tx_byte_release(memory_ptr);
 800b54a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b54c:	f7f8 fd86 	bl	800405c <_tx_byte_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b550:	f3ef 8310 	mrs	r3, PRIMASK
 800b554:	617b      	str	r3, [r7, #20]
    return(posture);
 800b556:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b558:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b55a:	b672      	cpsid	i
    return(int_posture);
 800b55c:	693b      	ldr	r3, [r7, #16]
    }

    /* Temporarily disable interrupts.  */
    TX_DISABLE
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Clear some of the module information.  */
    module_instance -> txm_module_instance_id =     0;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
    module_instance -> txm_module_instance_state =  TXM_MODULE_UNLOADED;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2205      	movs	r2, #5
 800b56a:	609a      	str	r2, [r3, #8]
    TXM_MODULE_MANAGER_MODULE_UNLOAD(module_instance);

    /* Remove the module from the linked list of loaded modules.  */

    /* See if the module is the only one on the list.  */
    if ((--_txm_module_manger_loaded_count) == 0)
 800b56c:	4b1d      	ldr	r3, [pc, #116]	; (800b5e4 <_txm_module_manager_unload+0x134>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3b01      	subs	r3, #1
 800b572:	4a1c      	ldr	r2, [pc, #112]	; (800b5e4 <_txm_module_manager_unload+0x134>)
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	4b1b      	ldr	r3, [pc, #108]	; (800b5e4 <_txm_module_manager_unload+0x134>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d103      	bne.n	800b586 <_txm_module_manager_unload+0xd6>
    {

        /* Only created module, just set the created list to NULL.  */
        _txm_module_manager_loaded_list_ptr =  TX_NULL;
 800b57e:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <_txm_module_manager_unload+0x138>)
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	e017      	b.n	800b5b6 <_txm_module_manager_unload+0x106>
    }
    else
    {

        /* Otherwise, not the only created module, link-up the neighbors.  */
        next_module =                                module_instance -> txm_module_instance_loaded_next;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800b58c:	627b      	str	r3, [r7, #36]	; 0x24
        previous_module =                            module_instance -> txm_module_instance_loaded_previous;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800b594:	623b      	str	r3, [r7, #32]
        next_module -> txm_module_instance_loaded_previous =  previous_module;
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	6a3a      	ldr	r2, [r7, #32]
 800b59a:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
        previous_module -> txm_module_instance_loaded_next =  next_module;
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

        /* See if we have to update the created list head pointer.  */
        if (_txm_module_manager_loaded_list_ptr == module_instance)
 800b5a6:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <_txm_module_manager_unload+0x138>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d102      	bne.n	800b5b6 <_txm_module_manager_unload+0x106>
        {

            /* Yes, move the head pointer to the next link. */
            _txm_module_manager_loaded_list_ptr =  next_module;
 800b5b0:	4a0d      	ldr	r2, [pc, #52]	; (800b5e8 <_txm_module_manager_unload+0x138>)
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f383 8810 	msr	PRIMASK, r3
}
 800b5c0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 800b5c2:	4806      	ldr	r0, [pc, #24]	; (800b5dc <_txm_module_manager_unload+0x12c>)
 800b5c4:	f7f9 fbb6 	bl	8004d34 <_tx_mutex_put>

    /* Return success.  */
    return(TX_SUCCESS);
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3730      	adds	r7, #48	; 0x30
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000008 	.word	0x20000008
 800b5d8:	2000f680 	.word	0x2000f680
 800b5dc:	2000f644 	.word	0x2000f644
 800b5e0:	4d4f4455 	.word	0x4d4f4455
 800b5e4:	2000f67c 	.word	0x2000f67c
 800b5e8:	2000f678 	.word	0x2000f678

0800b5ec <_txm_module_manager_created_object_check>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UCHAR _txm_module_manager_created_object_check(TXM_MODULE_INSTANCE *module_instance, VOID *object_ptr)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]

TXM_MODULE_ALLOCATED_OBJECT     *allocated_object_ptr;

    /* Determine if the socket control block is inside the module.  */
    if ( (((CHAR *) object_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d306      	bcc.n	800b60e <_txm_module_manager_created_object_check+0x22>
         (((CHAR *) object_ptr) < ((CHAR *) module_instance -> txm_module_instance_data_end)))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if ( (((CHAR *) object_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d201      	bcs.n	800b60e <_txm_module_manager_created_object_check+0x22>
    {
        return TX_TRUE;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e01d      	b.n	800b64a <_txm_module_manager_created_object_check+0x5e>
    }

    /* Determine if this object control block was allocated by this module instance.  */
    else if (_txm_module_manager_object_pool_created)
 800b60e:	4b12      	ldr	r3, [pc, #72]	; (800b658 <_txm_module_manager_created_object_check+0x6c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d018      	beq.n	800b648 <_txm_module_manager_created_object_check+0x5c>
    {

        /* Determine if the current object is from the pool of dynamically allocated objects.  */
        if ((((UCHAR *) object_ptr) >= _txm_module_manager_object_pool.tx_byte_pool_start) &&
 800b616:	4b11      	ldr	r3, [pc, #68]	; (800b65c <_txm_module_manager_created_object_check+0x70>)
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d313      	bcc.n	800b648 <_txm_module_manager_created_object_check+0x5c>
            (((UCHAR *) object_ptr) < (_txm_module_manager_object_pool.tx_byte_pool_start + _txm_module_manager_object_pool.tx_byte_pool_size)))
 800b620:	4b0e      	ldr	r3, [pc, #56]	; (800b65c <_txm_module_manager_created_object_check+0x70>)
 800b622:	699a      	ldr	r2, [r3, #24]
 800b624:	4b0d      	ldr	r3, [pc, #52]	; (800b65c <_txm_module_manager_created_object_check+0x70>)
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	4413      	add	r3, r2
        if ((((UCHAR *) object_ptr) >= _txm_module_manager_object_pool.tx_byte_pool_start) &&
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d20b      	bcs.n	800b648 <_txm_module_manager_created_object_check+0x5c>
        {

            /* Pickup object pointer.  */
            allocated_object_ptr =  (TXM_MODULE_ALLOCATED_OBJECT *) object_ptr;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	60fb      	str	r3, [r7, #12]

            /* Move back to get the header information.  */
            allocated_object_ptr--;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3b10      	subs	r3, #16
 800b638:	60fb      	str	r3, [r7, #12]

            /* Now determine if this object belongs to this module.  */
            if (allocated_object_ptr -> txm_module_allocated_object_module_instance == module_instance)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d101      	bne.n	800b648 <_txm_module_manager_created_object_check+0x5c>
            {
                return TX_TRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	e000      	b.n	800b64a <_txm_module_manager_created_object_check+0x5e>
            }
        }
    }

    return TX_FALSE;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	2000f640 	.word	0x2000f640
 800b65c:	2000f60c 	.word	0x2000f60c

0800b660 <_txm_module_manager_object_size_check>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_size_check(ALIGN_TYPE object_ptr, ULONG object_size)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
TXM_MODULE_ALLOCATED_OBJECT *module_allocated_object_ptr;
UINT                        return_value;

    /* Pickup the allocated object pointer.  */
    module_allocated_object_ptr = ((TXM_MODULE_ALLOCATED_OBJECT *) object_ptr) - 1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3b10      	subs	r3, #16
 800b66e:	60bb      	str	r3, [r7, #8]

    /* Does the allocated memory match the expected object size?  */
    if (module_allocated_object_ptr -> txm_module_object_size == object_size)
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d102      	bne.n	800b680 <_txm_module_manager_object_size_check+0x20>
        return_value =  TX_SUCCESS;
 800b67a:	2300      	movs	r3, #0
 800b67c:	60fb      	str	r3, [r7, #12]
 800b67e:	e001      	b.n	800b684 <_txm_module_manager_object_size_check+0x24>
    else
        return_value =  TXM_MODULE_INVALID_MEMORY;
 800b680:	23f4      	movs	r3, #244	; 0xf4
 800b682:	60fb      	str	r3, [r7, #12]

    return(return_value);
 800b684:	68fb      	ldr	r3, [r7, #12]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <_txm_module_manager_object_name_compare>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_name_compare(CHAR *search_name, UINT search_name_length, CHAR *object_name)
{
 800b692:	b480      	push	{r7}
 800b694:	b087      	sub	sp, #28
 800b696:	af00      	add	r7, sp, #0
 800b698:	60f8      	str	r0, [r7, #12]
 800b69a:	60b9      	str	r1, [r7, #8]
 800b69c:	607a      	str	r2, [r7, #4]
CHAR    object_name_char;


    /* Is the object name null? Note that the search name has already been checked
       by the caller.  */
    if (object_name == TX_NULL)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <_txm_module_manager_object_name_compare+0x16>
    {

        /* The strings can't match.  */
        return(TX_FALSE);
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e01f      	b.n	800b6e8 <_txm_module_manager_object_name_compare+0x56>
    /* Loop through the names.  */
    while (1)
    {

        /* Get the current characters from each name.  */
        search_name_char =  *search_name;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	75fb      	strb	r3, [r7, #23]
        object_name_char =  *object_name;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	75bb      	strb	r3, [r7, #22]

        /* Check for match.  */
        if (search_name_char == object_name_char)
 800b6b4:	7dfa      	ldrb	r2, [r7, #23]
 800b6b6:	7dbb      	ldrb	r3, [r7, #22]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d104      	bne.n	800b6c6 <_txm_module_manager_object_name_compare+0x34>
        {

            /* Are they null-terminators?  */
            if (search_name_char == '\0')
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d103      	bne.n	800b6ca <_txm_module_manager_object_name_compare+0x38>
            {

                /* The strings match.  */
                return(TX_TRUE);
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e010      	b.n	800b6e8 <_txm_module_manager_object_name_compare+0x56>
        }
        else
        {

            /* The strings don't match.  */
            return(TX_FALSE);
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e00e      	b.n	800b6e8 <_txm_module_manager_object_name_compare+0x56>
        }

        /* Are we at the end of the search name?  */
        if (search_name_length == 0)
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <_txm_module_manager_object_name_compare+0x42>
        {

            /* The strings don't match.  */
            return(TX_FALSE);
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e009      	b.n	800b6e8 <_txm_module_manager_object_name_compare+0x56>
        }

        /* Move to next character.  */
        search_name++;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
        object_name++;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	607b      	str	r3, [r7, #4]
        search_name_length--;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	60bb      	str	r3, [r7, #8]
        search_name_char =  *search_name;
 800b6e6:	e7df      	b.n	800b6a8 <_txm_module_manager_object_name_compare+0x16>
    }
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	371c      	adds	r7, #28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <_txm_module_manager_util_code_allocation_size_and_alignment_get>:
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_util_code_allocation_size_and_alignment_get(TXM_MODULE_PREAMBLE *module_preamble,
                                                                      ULONG *code_alignment_dest, ULONG *code_allocation_size_dest)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08a      	sub	sp, #40	; 0x28
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
ULONG   data_size_ignored;
ULONG   data_alignment_ignored;


    /* Pickup the module code size.  */
    code_size =  module_preamble -> txm_module_preamble_code_size;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b704:	61fb      	str	r3, [r7, #28]

    /* Adjust the size of the module elements to be aligned to the default alignment.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(code_size, TXM_MODULE_CODE_ALIGNMENT, code_size);
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	f113 0f05 	cmn.w	r3, #5
 800b70c:	d901      	bls.n	800b712 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x1e>
 800b70e:	23f8      	movs	r3, #248	; 0xf8
 800b710:	e02a      	b.n	800b768 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x74>
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	3304      	adds	r3, #4
 800b716:	61fb      	str	r3, [r7, #28]
    code_size =  ((code_size - 1)/TXM_MODULE_CODE_ALIGNMENT) * TXM_MODULE_CODE_ALIGNMENT;
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	f023 0303 	bic.w	r3, r3, #3
 800b720:	61fb      	str	r3, [r7, #28]

    /* Setup the default code and data alignments.  */
    code_alignment =  (ULONG) TXM_MODULE_CODE_ALIGNMENT;
 800b722:	2304      	movs	r3, #4
 800b724:	61bb      	str	r3, [r7, #24]

    /* Get the port-specific alignment for the code size. Note we only want code so we pass 'null' values for data.  */
    data_size_ignored = 1;
 800b726:	2301      	movs	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
    data_alignment_ignored = 1;
 800b72a:	2301      	movs	r3, #1
 800b72c:	613b      	str	r3, [r7, #16]
    TXM_MODULE_MANAGER_ALIGNMENT_ADJUST(module_preamble, code_size, code_alignment, data_size_ignored, data_alignment_ignored)
 800b72e:	f107 0014 	add.w	r0, r7, #20
 800b732:	f107 0218 	add.w	r2, r7, #24
 800b736:	f107 011c 	add.w	r1, r7, #28
 800b73a:	f107 0310 	add.w	r3, r7, #16
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	4603      	mov	r3, r0
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7fc fa7e 	bl	8007c44 <_txm_module_manager_alignment_adjust>

    /* Calculate the code memory allocation size.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(code_size, code_alignment, *code_allocation_size_dest);
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	43da      	mvns	r2, r3
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d201      	bcs.n	800b756 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x62>
 800b752:	23f8      	movs	r3, #248	; 0xf8
 800b754:	e008      	b.n	800b768 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x74>
 800b756:	69fa      	ldr	r2, [r7, #28]
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	441a      	add	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	601a      	str	r2, [r3, #0]

    /* Write the alignment result into the caller's destination address.  */
    *code_alignment_dest =  code_alignment;
 800b760:	69ba      	ldr	r2, [r7, #24]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <std>:
 800b770:	2300      	movs	r3, #0
 800b772:	b510      	push	{r4, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	e9c0 3300 	strd	r3, r3, [r0]
 800b77a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b77e:	6083      	str	r3, [r0, #8]
 800b780:	8181      	strh	r1, [r0, #12]
 800b782:	6643      	str	r3, [r0, #100]	; 0x64
 800b784:	81c2      	strh	r2, [r0, #14]
 800b786:	6183      	str	r3, [r0, #24]
 800b788:	4619      	mov	r1, r3
 800b78a:	2208      	movs	r2, #8
 800b78c:	305c      	adds	r0, #92	; 0x5c
 800b78e:	f000 f9f7 	bl	800bb80 <memset>
 800b792:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <std+0x58>)
 800b794:	6263      	str	r3, [r4, #36]	; 0x24
 800b796:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <std+0x5c>)
 800b798:	62a3      	str	r3, [r4, #40]	; 0x28
 800b79a:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <std+0x60>)
 800b79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b79e:	4b0d      	ldr	r3, [pc, #52]	; (800b7d4 <std+0x64>)
 800b7a0:	6323      	str	r3, [r4, #48]	; 0x30
 800b7a2:	4b0d      	ldr	r3, [pc, #52]	; (800b7d8 <std+0x68>)
 800b7a4:	6224      	str	r4, [r4, #32]
 800b7a6:	429c      	cmp	r4, r3
 800b7a8:	d006      	beq.n	800b7b8 <std+0x48>
 800b7aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b7ae:	4294      	cmp	r4, r2
 800b7b0:	d002      	beq.n	800b7b8 <std+0x48>
 800b7b2:	33d0      	adds	r3, #208	; 0xd0
 800b7b4:	429c      	cmp	r4, r3
 800b7b6:	d105      	bne.n	800b7c4 <std+0x54>
 800b7b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c0:	f000 ba56 	b.w	800bc70 <__retarget_lock_init_recursive>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0800b9d1 	.word	0x0800b9d1
 800b7cc:	0800b9f3 	.word	0x0800b9f3
 800b7d0:	0800ba2b 	.word	0x0800ba2b
 800b7d4:	0800ba4f 	.word	0x0800ba4f
 800b7d8:	2000f6ec 	.word	0x2000f6ec

0800b7dc <stdio_exit_handler>:
 800b7dc:	4a02      	ldr	r2, [pc, #8]	; (800b7e8 <stdio_exit_handler+0xc>)
 800b7de:	4903      	ldr	r1, [pc, #12]	; (800b7ec <stdio_exit_handler+0x10>)
 800b7e0:	4803      	ldr	r0, [pc, #12]	; (800b7f0 <stdio_exit_handler+0x14>)
 800b7e2:	f000 b869 	b.w	800b8b8 <_fwalk_sglue>
 800b7e6:	bf00      	nop
 800b7e8:	2000000c 	.word	0x2000000c
 800b7ec:	0800c539 	.word	0x0800c539
 800b7f0:	20000018 	.word	0x20000018

0800b7f4 <cleanup_stdio>:
 800b7f4:	6841      	ldr	r1, [r0, #4]
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <cleanup_stdio+0x34>)
 800b7f8:	4299      	cmp	r1, r3
 800b7fa:	b510      	push	{r4, lr}
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	d001      	beq.n	800b804 <cleanup_stdio+0x10>
 800b800:	f000 fe9a 	bl	800c538 <_fflush_r>
 800b804:	68a1      	ldr	r1, [r4, #8]
 800b806:	4b09      	ldr	r3, [pc, #36]	; (800b82c <cleanup_stdio+0x38>)
 800b808:	4299      	cmp	r1, r3
 800b80a:	d002      	beq.n	800b812 <cleanup_stdio+0x1e>
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fe93 	bl	800c538 <_fflush_r>
 800b812:	68e1      	ldr	r1, [r4, #12]
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <cleanup_stdio+0x3c>)
 800b816:	4299      	cmp	r1, r3
 800b818:	d004      	beq.n	800b824 <cleanup_stdio+0x30>
 800b81a:	4620      	mov	r0, r4
 800b81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b820:	f000 be8a 	b.w	800c538 <_fflush_r>
 800b824:	bd10      	pop	{r4, pc}
 800b826:	bf00      	nop
 800b828:	2000f6ec 	.word	0x2000f6ec
 800b82c:	2000f754 	.word	0x2000f754
 800b830:	2000f7bc 	.word	0x2000f7bc

0800b834 <global_stdio_init.part.0>:
 800b834:	b510      	push	{r4, lr}
 800b836:	4b0b      	ldr	r3, [pc, #44]	; (800b864 <global_stdio_init.part.0+0x30>)
 800b838:	4c0b      	ldr	r4, [pc, #44]	; (800b868 <global_stdio_init.part.0+0x34>)
 800b83a:	4a0c      	ldr	r2, [pc, #48]	; (800b86c <global_stdio_init.part.0+0x38>)
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	4620      	mov	r0, r4
 800b840:	2200      	movs	r2, #0
 800b842:	2104      	movs	r1, #4
 800b844:	f7ff ff94 	bl	800b770 <std>
 800b848:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b84c:	2201      	movs	r2, #1
 800b84e:	2109      	movs	r1, #9
 800b850:	f7ff ff8e 	bl	800b770 <std>
 800b854:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b858:	2202      	movs	r2, #2
 800b85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b85e:	2112      	movs	r1, #18
 800b860:	f7ff bf86 	b.w	800b770 <std>
 800b864:	2000f824 	.word	0x2000f824
 800b868:	2000f6ec 	.word	0x2000f6ec
 800b86c:	0800b7dd 	.word	0x0800b7dd

0800b870 <__sfp_lock_acquire>:
 800b870:	4801      	ldr	r0, [pc, #4]	; (800b878 <__sfp_lock_acquire+0x8>)
 800b872:	f000 b9fe 	b.w	800bc72 <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	2000f82d 	.word	0x2000f82d

0800b87c <__sfp_lock_release>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__sfp_lock_release+0x8>)
 800b87e:	f000 b9f9 	b.w	800bc74 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	2000f82d 	.word	0x2000f82d

0800b888 <__sinit>:
 800b888:	b510      	push	{r4, lr}
 800b88a:	4604      	mov	r4, r0
 800b88c:	f7ff fff0 	bl	800b870 <__sfp_lock_acquire>
 800b890:	6a23      	ldr	r3, [r4, #32]
 800b892:	b11b      	cbz	r3, 800b89c <__sinit+0x14>
 800b894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b898:	f7ff bff0 	b.w	800b87c <__sfp_lock_release>
 800b89c:	4b04      	ldr	r3, [pc, #16]	; (800b8b0 <__sinit+0x28>)
 800b89e:	6223      	str	r3, [r4, #32]
 800b8a0:	4b04      	ldr	r3, [pc, #16]	; (800b8b4 <__sinit+0x2c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1f5      	bne.n	800b894 <__sinit+0xc>
 800b8a8:	f7ff ffc4 	bl	800b834 <global_stdio_init.part.0>
 800b8ac:	e7f2      	b.n	800b894 <__sinit+0xc>
 800b8ae:	bf00      	nop
 800b8b0:	0800b7f5 	.word	0x0800b7f5
 800b8b4:	2000f824 	.word	0x2000f824

0800b8b8 <_fwalk_sglue>:
 800b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	4607      	mov	r7, r0
 800b8be:	4688      	mov	r8, r1
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	2600      	movs	r6, #0
 800b8c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b8cc:	d505      	bpl.n	800b8da <_fwalk_sglue+0x22>
 800b8ce:	6824      	ldr	r4, [r4, #0]
 800b8d0:	2c00      	cmp	r4, #0
 800b8d2:	d1f7      	bne.n	800b8c4 <_fwalk_sglue+0xc>
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d907      	bls.n	800b8f0 <_fwalk_sglue+0x38>
 800b8e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	d003      	beq.n	800b8f0 <_fwalk_sglue+0x38>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	47c0      	blx	r8
 800b8ee:	4306      	orrs	r6, r0
 800b8f0:	3568      	adds	r5, #104	; 0x68
 800b8f2:	e7e9      	b.n	800b8c8 <_fwalk_sglue+0x10>

0800b8f4 <iprintf>:
 800b8f4:	b40f      	push	{r0, r1, r2, r3}
 800b8f6:	b507      	push	{r0, r1, r2, lr}
 800b8f8:	4906      	ldr	r1, [pc, #24]	; (800b914 <iprintf+0x20>)
 800b8fa:	ab04      	add	r3, sp, #16
 800b8fc:	6808      	ldr	r0, [r1, #0]
 800b8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b902:	6881      	ldr	r1, [r0, #8]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	f000 fae7 	bl	800bed8 <_vfiprintf_r>
 800b90a:	b003      	add	sp, #12
 800b90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b910:	b004      	add	sp, #16
 800b912:	4770      	bx	lr
 800b914:	20000064 	.word	0x20000064

0800b918 <_puts_r>:
 800b918:	6a03      	ldr	r3, [r0, #32]
 800b91a:	b570      	push	{r4, r5, r6, lr}
 800b91c:	6884      	ldr	r4, [r0, #8]
 800b91e:	4605      	mov	r5, r0
 800b920:	460e      	mov	r6, r1
 800b922:	b90b      	cbnz	r3, 800b928 <_puts_r+0x10>
 800b924:	f7ff ffb0 	bl	800b888 <__sinit>
 800b928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b92a:	07db      	lsls	r3, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_puts_r+0x22>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	0598      	lsls	r0, r3, #22
 800b932:	d402      	bmi.n	800b93a <_puts_r+0x22>
 800b934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b936:	f000 f99c 	bl	800bc72 <__retarget_lock_acquire_recursive>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	0719      	lsls	r1, r3, #28
 800b93e:	d513      	bpl.n	800b968 <_puts_r+0x50>
 800b940:	6923      	ldr	r3, [r4, #16]
 800b942:	b18b      	cbz	r3, 800b968 <_puts_r+0x50>
 800b944:	3e01      	subs	r6, #1
 800b946:	68a3      	ldr	r3, [r4, #8]
 800b948:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b94c:	3b01      	subs	r3, #1
 800b94e:	60a3      	str	r3, [r4, #8]
 800b950:	b9e9      	cbnz	r1, 800b98e <_puts_r+0x76>
 800b952:	2b00      	cmp	r3, #0
 800b954:	da2e      	bge.n	800b9b4 <_puts_r+0x9c>
 800b956:	4622      	mov	r2, r4
 800b958:	210a      	movs	r1, #10
 800b95a:	4628      	mov	r0, r5
 800b95c:	f000 f87b 	bl	800ba56 <__swbuf_r>
 800b960:	3001      	adds	r0, #1
 800b962:	d007      	beq.n	800b974 <_puts_r+0x5c>
 800b964:	250a      	movs	r5, #10
 800b966:	e007      	b.n	800b978 <_puts_r+0x60>
 800b968:	4621      	mov	r1, r4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f8b0 	bl	800bad0 <__swsetup_r>
 800b970:	2800      	cmp	r0, #0
 800b972:	d0e7      	beq.n	800b944 <_puts_r+0x2c>
 800b974:	f04f 35ff 	mov.w	r5, #4294967295
 800b978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b97a:	07da      	lsls	r2, r3, #31
 800b97c:	d405      	bmi.n	800b98a <_puts_r+0x72>
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	059b      	lsls	r3, r3, #22
 800b982:	d402      	bmi.n	800b98a <_puts_r+0x72>
 800b984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b986:	f000 f975 	bl	800bc74 <__retarget_lock_release_recursive>
 800b98a:	4628      	mov	r0, r5
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	2b00      	cmp	r3, #0
 800b990:	da04      	bge.n	800b99c <_puts_r+0x84>
 800b992:	69a2      	ldr	r2, [r4, #24]
 800b994:	429a      	cmp	r2, r3
 800b996:	dc06      	bgt.n	800b9a6 <_puts_r+0x8e>
 800b998:	290a      	cmp	r1, #10
 800b99a:	d004      	beq.n	800b9a6 <_puts_r+0x8e>
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	6022      	str	r2, [r4, #0]
 800b9a2:	7019      	strb	r1, [r3, #0]
 800b9a4:	e7cf      	b.n	800b946 <_puts_r+0x2e>
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f000 f854 	bl	800ba56 <__swbuf_r>
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d1c9      	bne.n	800b946 <_puts_r+0x2e>
 800b9b2:	e7df      	b.n	800b974 <_puts_r+0x5c>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	250a      	movs	r5, #10
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	6022      	str	r2, [r4, #0]
 800b9bc:	701d      	strb	r5, [r3, #0]
 800b9be:	e7db      	b.n	800b978 <_puts_r+0x60>

0800b9c0 <puts>:
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <puts+0xc>)
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	f7ff bfa7 	b.w	800b918 <_puts_r>
 800b9ca:	bf00      	nop
 800b9cc:	20000064 	.word	0x20000064

0800b9d0 <__sread>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	f000 f8fc 	bl	800bbd4 <_read_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	bfab      	itete	ge
 800b9e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9e4:	181b      	addge	r3, r3, r0
 800b9e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ea:	bfac      	ite	ge
 800b9ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9ee:	81a3      	strhlt	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__swrite>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	898b      	ldrh	r3, [r1, #12]
 800b9fa:	05db      	lsls	r3, r3, #23
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4616      	mov	r6, r2
 800ba02:	d505      	bpl.n	800ba10 <__swrite+0x1e>
 800ba04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba08:	2302      	movs	r3, #2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f000 f8d0 	bl	800bbb0 <_lseek_r>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	4628      	mov	r0, r5
 800ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	f000 b8e7 	b.w	800bbf8 <_write_r>

0800ba2a <__sseek>:
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba32:	f000 f8bd 	bl	800bbb0 <_lseek_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	bf15      	itete	ne
 800ba3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba46:	81a3      	strheq	r3, [r4, #12]
 800ba48:	bf18      	it	ne
 800ba4a:	81a3      	strhne	r3, [r4, #12]
 800ba4c:	bd10      	pop	{r4, pc}

0800ba4e <__sclose>:
 800ba4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba52:	f000 b89d 	b.w	800bb90 <_close_r>

0800ba56 <__swbuf_r>:
 800ba56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba58:	460e      	mov	r6, r1
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	b118      	cbz	r0, 800ba68 <__swbuf_r+0x12>
 800ba60:	6a03      	ldr	r3, [r0, #32]
 800ba62:	b90b      	cbnz	r3, 800ba68 <__swbuf_r+0x12>
 800ba64:	f7ff ff10 	bl	800b888 <__sinit>
 800ba68:	69a3      	ldr	r3, [r4, #24]
 800ba6a:	60a3      	str	r3, [r4, #8]
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	071a      	lsls	r2, r3, #28
 800ba70:	d525      	bpl.n	800babe <__swbuf_r+0x68>
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	b31b      	cbz	r3, 800babe <__swbuf_r+0x68>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	6922      	ldr	r2, [r4, #16]
 800ba7a:	1a98      	subs	r0, r3, r2
 800ba7c:	6963      	ldr	r3, [r4, #20]
 800ba7e:	b2f6      	uxtb	r6, r6
 800ba80:	4283      	cmp	r3, r0
 800ba82:	4637      	mov	r7, r6
 800ba84:	dc04      	bgt.n	800ba90 <__swbuf_r+0x3a>
 800ba86:	4621      	mov	r1, r4
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f000 fd55 	bl	800c538 <_fflush_r>
 800ba8e:	b9e0      	cbnz	r0, 800baca <__swbuf_r+0x74>
 800ba90:	68a3      	ldr	r3, [r4, #8]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	60a3      	str	r3, [r4, #8]
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	6022      	str	r2, [r4, #0]
 800ba9c:	701e      	strb	r6, [r3, #0]
 800ba9e:	6962      	ldr	r2, [r4, #20]
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d004      	beq.n	800bab0 <__swbuf_r+0x5a>
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	07db      	lsls	r3, r3, #31
 800baaa:	d506      	bpl.n	800baba <__swbuf_r+0x64>
 800baac:	2e0a      	cmp	r6, #10
 800baae:	d104      	bne.n	800baba <__swbuf_r+0x64>
 800bab0:	4621      	mov	r1, r4
 800bab2:	4628      	mov	r0, r5
 800bab4:	f000 fd40 	bl	800c538 <_fflush_r>
 800bab8:	b938      	cbnz	r0, 800baca <__swbuf_r+0x74>
 800baba:	4638      	mov	r0, r7
 800babc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800babe:	4621      	mov	r1, r4
 800bac0:	4628      	mov	r0, r5
 800bac2:	f000 f805 	bl	800bad0 <__swsetup_r>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d0d5      	beq.n	800ba76 <__swbuf_r+0x20>
 800baca:	f04f 37ff 	mov.w	r7, #4294967295
 800bace:	e7f4      	b.n	800baba <__swbuf_r+0x64>

0800bad0 <__swsetup_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4b2a      	ldr	r3, [pc, #168]	; (800bb7c <__swsetup_r+0xac>)
 800bad4:	4605      	mov	r5, r0
 800bad6:	6818      	ldr	r0, [r3, #0]
 800bad8:	460c      	mov	r4, r1
 800bada:	b118      	cbz	r0, 800bae4 <__swsetup_r+0x14>
 800badc:	6a03      	ldr	r3, [r0, #32]
 800bade:	b90b      	cbnz	r3, 800bae4 <__swsetup_r+0x14>
 800bae0:	f7ff fed2 	bl	800b888 <__sinit>
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baea:	0718      	lsls	r0, r3, #28
 800baec:	d422      	bmi.n	800bb34 <__swsetup_r+0x64>
 800baee:	06d9      	lsls	r1, r3, #27
 800baf0:	d407      	bmi.n	800bb02 <__swsetup_r+0x32>
 800baf2:	2309      	movs	r3, #9
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	f04f 30ff 	mov.w	r0, #4294967295
 800bb00:	e034      	b.n	800bb6c <__swsetup_r+0x9c>
 800bb02:	0758      	lsls	r0, r3, #29
 800bb04:	d512      	bpl.n	800bb2c <__swsetup_r+0x5c>
 800bb06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb08:	b141      	cbz	r1, 800bb1c <__swsetup_r+0x4c>
 800bb0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb0e:	4299      	cmp	r1, r3
 800bb10:	d002      	beq.n	800bb18 <__swsetup_r+0x48>
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 f8be 	bl	800bc94 <_free_r>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	6363      	str	r3, [r4, #52]	; 0x34
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb22:	81a3      	strh	r3, [r4, #12]
 800bb24:	2300      	movs	r3, #0
 800bb26:	6063      	str	r3, [r4, #4]
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f043 0308 	orr.w	r3, r3, #8
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	b94b      	cbnz	r3, 800bb4c <__swsetup_r+0x7c>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb42:	d003      	beq.n	800bb4c <__swsetup_r+0x7c>
 800bb44:	4621      	mov	r1, r4
 800bb46:	4628      	mov	r0, r5
 800bb48:	f000 fd44 	bl	800c5d4 <__smakebuf_r>
 800bb4c:	89a0      	ldrh	r0, [r4, #12]
 800bb4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb52:	f010 0301 	ands.w	r3, r0, #1
 800bb56:	d00a      	beq.n	800bb6e <__swsetup_r+0x9e>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60a3      	str	r3, [r4, #8]
 800bb5c:	6963      	ldr	r3, [r4, #20]
 800bb5e:	425b      	negs	r3, r3
 800bb60:	61a3      	str	r3, [r4, #24]
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	b943      	cbnz	r3, 800bb78 <__swsetup_r+0xa8>
 800bb66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb6a:	d1c4      	bne.n	800baf6 <__swsetup_r+0x26>
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	0781      	lsls	r1, r0, #30
 800bb70:	bf58      	it	pl
 800bb72:	6963      	ldrpl	r3, [r4, #20]
 800bb74:	60a3      	str	r3, [r4, #8]
 800bb76:	e7f4      	b.n	800bb62 <__swsetup_r+0x92>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e7f7      	b.n	800bb6c <__swsetup_r+0x9c>
 800bb7c:	20000064 	.word	0x20000064

0800bb80 <memset>:
 800bb80:	4402      	add	r2, r0
 800bb82:	4603      	mov	r3, r0
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d100      	bne.n	800bb8a <memset+0xa>
 800bb88:	4770      	bx	lr
 800bb8a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb8e:	e7f9      	b.n	800bb84 <memset+0x4>

0800bb90 <_close_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	; (800bbac <_close_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f5 fbc5 	bl	800132a <_close>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_close_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_close_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	2000f828 	.word	0x2000f828

0800bbb0 <_lseek_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d07      	ldr	r5, [pc, #28]	; (800bbd0 <_lseek_r+0x20>)
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	4608      	mov	r0, r1
 800bbb8:	4611      	mov	r1, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f7f5 fbda 	bl	8001378 <_lseek>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_lseek_r+0x1e>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_lseek_r+0x1e>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	2000f828 	.word	0x2000f828

0800bbd4 <_read_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	; (800bbf4 <_read_r+0x20>)
 800bbd8:	4604      	mov	r4, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	4611      	mov	r1, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	602a      	str	r2, [r5, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7f5 fb68 	bl	80012b8 <_read>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_read_r+0x1e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_read_r+0x1e>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	2000f828 	.word	0x2000f828

0800bbf8 <_write_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d07      	ldr	r5, [pc, #28]	; (800bc18 <_write_r+0x20>)
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	2200      	movs	r2, #0
 800bc04:	602a      	str	r2, [r5, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f7f5 fb73 	bl	80012f2 <_write>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_write_r+0x1e>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_write_r+0x1e>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	2000f828 	.word	0x2000f828

0800bc1c <__errno>:
 800bc1c:	4b01      	ldr	r3, [pc, #4]	; (800bc24 <__errno+0x8>)
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20000064 	.word	0x20000064

0800bc28 <__libc_init_array>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	4d0d      	ldr	r5, [pc, #52]	; (800bc60 <__libc_init_array+0x38>)
 800bc2c:	4c0d      	ldr	r4, [pc, #52]	; (800bc64 <__libc_init_array+0x3c>)
 800bc2e:	1b64      	subs	r4, r4, r5
 800bc30:	10a4      	asrs	r4, r4, #2
 800bc32:	2600      	movs	r6, #0
 800bc34:	42a6      	cmp	r6, r4
 800bc36:	d109      	bne.n	800bc4c <__libc_init_array+0x24>
 800bc38:	4d0b      	ldr	r5, [pc, #44]	; (800bc68 <__libc_init_array+0x40>)
 800bc3a:	4c0c      	ldr	r4, [pc, #48]	; (800bc6c <__libc_init_array+0x44>)
 800bc3c:	f000 fd38 	bl	800c6b0 <_init>
 800bc40:	1b64      	subs	r4, r4, r5
 800bc42:	10a4      	asrs	r4, r4, #2
 800bc44:	2600      	movs	r6, #0
 800bc46:	42a6      	cmp	r6, r4
 800bc48:	d105      	bne.n	800bc56 <__libc_init_array+0x2e>
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc50:	4798      	blx	r3
 800bc52:	3601      	adds	r6, #1
 800bc54:	e7ee      	b.n	800bc34 <__libc_init_array+0xc>
 800bc56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5a:	4798      	blx	r3
 800bc5c:	3601      	adds	r6, #1
 800bc5e:	e7f2      	b.n	800bc46 <__libc_init_array+0x1e>
 800bc60:	0800cafc 	.word	0x0800cafc
 800bc64:	0800cafc 	.word	0x0800cafc
 800bc68:	0800cafc 	.word	0x0800cafc
 800bc6c:	0800cb00 	.word	0x0800cb00

0800bc70 <__retarget_lock_init_recursive>:
 800bc70:	4770      	bx	lr

0800bc72 <__retarget_lock_acquire_recursive>:
 800bc72:	4770      	bx	lr

0800bc74 <__retarget_lock_release_recursive>:
 800bc74:	4770      	bx	lr

0800bc76 <memcpy>:
 800bc76:	440a      	add	r2, r1
 800bc78:	4291      	cmp	r1, r2
 800bc7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc7e:	d100      	bne.n	800bc82 <memcpy+0xc>
 800bc80:	4770      	bx	lr
 800bc82:	b510      	push	{r4, lr}
 800bc84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc8c:	4291      	cmp	r1, r2
 800bc8e:	d1f9      	bne.n	800bc84 <memcpy+0xe>
 800bc90:	bd10      	pop	{r4, pc}
	...

0800bc94 <_free_r>:
 800bc94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc96:	2900      	cmp	r1, #0
 800bc98:	d044      	beq.n	800bd24 <_free_r+0x90>
 800bc9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc9e:	9001      	str	r0, [sp, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f1a1 0404 	sub.w	r4, r1, #4
 800bca6:	bfb8      	it	lt
 800bca8:	18e4      	addlt	r4, r4, r3
 800bcaa:	f000 f8df 	bl	800be6c <__malloc_lock>
 800bcae:	4a1e      	ldr	r2, [pc, #120]	; (800bd28 <_free_r+0x94>)
 800bcb0:	9801      	ldr	r0, [sp, #4]
 800bcb2:	6813      	ldr	r3, [r2, #0]
 800bcb4:	b933      	cbnz	r3, 800bcc4 <_free_r+0x30>
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	6014      	str	r4, [r2, #0]
 800bcba:	b003      	add	sp, #12
 800bcbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcc0:	f000 b8da 	b.w	800be78 <__malloc_unlock>
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	d908      	bls.n	800bcda <_free_r+0x46>
 800bcc8:	6825      	ldr	r5, [r4, #0]
 800bcca:	1961      	adds	r1, r4, r5
 800bccc:	428b      	cmp	r3, r1
 800bcce:	bf01      	itttt	eq
 800bcd0:	6819      	ldreq	r1, [r3, #0]
 800bcd2:	685b      	ldreq	r3, [r3, #4]
 800bcd4:	1949      	addeq	r1, r1, r5
 800bcd6:	6021      	streq	r1, [r4, #0]
 800bcd8:	e7ed      	b.n	800bcb6 <_free_r+0x22>
 800bcda:	461a      	mov	r2, r3
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	b10b      	cbz	r3, 800bce4 <_free_r+0x50>
 800bce0:	42a3      	cmp	r3, r4
 800bce2:	d9fa      	bls.n	800bcda <_free_r+0x46>
 800bce4:	6811      	ldr	r1, [r2, #0]
 800bce6:	1855      	adds	r5, r2, r1
 800bce8:	42a5      	cmp	r5, r4
 800bcea:	d10b      	bne.n	800bd04 <_free_r+0x70>
 800bcec:	6824      	ldr	r4, [r4, #0]
 800bcee:	4421      	add	r1, r4
 800bcf0:	1854      	adds	r4, r2, r1
 800bcf2:	42a3      	cmp	r3, r4
 800bcf4:	6011      	str	r1, [r2, #0]
 800bcf6:	d1e0      	bne.n	800bcba <_free_r+0x26>
 800bcf8:	681c      	ldr	r4, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	6053      	str	r3, [r2, #4]
 800bcfe:	440c      	add	r4, r1
 800bd00:	6014      	str	r4, [r2, #0]
 800bd02:	e7da      	b.n	800bcba <_free_r+0x26>
 800bd04:	d902      	bls.n	800bd0c <_free_r+0x78>
 800bd06:	230c      	movs	r3, #12
 800bd08:	6003      	str	r3, [r0, #0]
 800bd0a:	e7d6      	b.n	800bcba <_free_r+0x26>
 800bd0c:	6825      	ldr	r5, [r4, #0]
 800bd0e:	1961      	adds	r1, r4, r5
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf04      	itt	eq
 800bd14:	6819      	ldreq	r1, [r3, #0]
 800bd16:	685b      	ldreq	r3, [r3, #4]
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	bf04      	itt	eq
 800bd1c:	1949      	addeq	r1, r1, r5
 800bd1e:	6021      	streq	r1, [r4, #0]
 800bd20:	6054      	str	r4, [r2, #4]
 800bd22:	e7ca      	b.n	800bcba <_free_r+0x26>
 800bd24:	b003      	add	sp, #12
 800bd26:	bd30      	pop	{r4, r5, pc}
 800bd28:	2000f830 	.word	0x2000f830

0800bd2c <sbrk_aligned>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	4e0e      	ldr	r6, [pc, #56]	; (800bd68 <sbrk_aligned+0x3c>)
 800bd30:	460c      	mov	r4, r1
 800bd32:	6831      	ldr	r1, [r6, #0]
 800bd34:	4605      	mov	r5, r0
 800bd36:	b911      	cbnz	r1, 800bd3e <sbrk_aligned+0x12>
 800bd38:	f000 fcaa 	bl	800c690 <_sbrk_r>
 800bd3c:	6030      	str	r0, [r6, #0]
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f000 fca5 	bl	800c690 <_sbrk_r>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d00a      	beq.n	800bd60 <sbrk_aligned+0x34>
 800bd4a:	1cc4      	adds	r4, r0, #3
 800bd4c:	f024 0403 	bic.w	r4, r4, #3
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d007      	beq.n	800bd64 <sbrk_aligned+0x38>
 800bd54:	1a21      	subs	r1, r4, r0
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 fc9a 	bl	800c690 <_sbrk_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d101      	bne.n	800bd64 <sbrk_aligned+0x38>
 800bd60:	f04f 34ff 	mov.w	r4, #4294967295
 800bd64:	4620      	mov	r0, r4
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	2000f834 	.word	0x2000f834

0800bd6c <_malloc_r>:
 800bd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd70:	1ccd      	adds	r5, r1, #3
 800bd72:	f025 0503 	bic.w	r5, r5, #3
 800bd76:	3508      	adds	r5, #8
 800bd78:	2d0c      	cmp	r5, #12
 800bd7a:	bf38      	it	cc
 800bd7c:	250c      	movcc	r5, #12
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	4607      	mov	r7, r0
 800bd82:	db01      	blt.n	800bd88 <_malloc_r+0x1c>
 800bd84:	42a9      	cmp	r1, r5
 800bd86:	d905      	bls.n	800bd94 <_malloc_r+0x28>
 800bd88:	230c      	movs	r3, #12
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	4630      	mov	r0, r6
 800bd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be68 <_malloc_r+0xfc>
 800bd98:	f000 f868 	bl	800be6c <__malloc_lock>
 800bd9c:	f8d8 3000 	ldr.w	r3, [r8]
 800bda0:	461c      	mov	r4, r3
 800bda2:	bb5c      	cbnz	r4, 800bdfc <_malloc_r+0x90>
 800bda4:	4629      	mov	r1, r5
 800bda6:	4638      	mov	r0, r7
 800bda8:	f7ff ffc0 	bl	800bd2c <sbrk_aligned>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	4604      	mov	r4, r0
 800bdb0:	d155      	bne.n	800be5e <_malloc_r+0xf2>
 800bdb2:	f8d8 4000 	ldr.w	r4, [r8]
 800bdb6:	4626      	mov	r6, r4
 800bdb8:	2e00      	cmp	r6, #0
 800bdba:	d145      	bne.n	800be48 <_malloc_r+0xdc>
 800bdbc:	2c00      	cmp	r4, #0
 800bdbe:	d048      	beq.n	800be52 <_malloc_r+0xe6>
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	eb04 0903 	add.w	r9, r4, r3
 800bdca:	f000 fc61 	bl	800c690 <_sbrk_r>
 800bdce:	4581      	cmp	r9, r0
 800bdd0:	d13f      	bne.n	800be52 <_malloc_r+0xe6>
 800bdd2:	6821      	ldr	r1, [r4, #0]
 800bdd4:	1a6d      	subs	r5, r5, r1
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f7ff ffa7 	bl	800bd2c <sbrk_aligned>
 800bdde:	3001      	adds	r0, #1
 800bde0:	d037      	beq.n	800be52 <_malloc_r+0xe6>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	442b      	add	r3, r5
 800bde6:	6023      	str	r3, [r4, #0]
 800bde8:	f8d8 3000 	ldr.w	r3, [r8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d038      	beq.n	800be62 <_malloc_r+0xf6>
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	42a2      	cmp	r2, r4
 800bdf4:	d12b      	bne.n	800be4e <_malloc_r+0xe2>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	605a      	str	r2, [r3, #4]
 800bdfa:	e00f      	b.n	800be1c <_malloc_r+0xb0>
 800bdfc:	6822      	ldr	r2, [r4, #0]
 800bdfe:	1b52      	subs	r2, r2, r5
 800be00:	d41f      	bmi.n	800be42 <_malloc_r+0xd6>
 800be02:	2a0b      	cmp	r2, #11
 800be04:	d917      	bls.n	800be36 <_malloc_r+0xca>
 800be06:	1961      	adds	r1, r4, r5
 800be08:	42a3      	cmp	r3, r4
 800be0a:	6025      	str	r5, [r4, #0]
 800be0c:	bf18      	it	ne
 800be0e:	6059      	strne	r1, [r3, #4]
 800be10:	6863      	ldr	r3, [r4, #4]
 800be12:	bf08      	it	eq
 800be14:	f8c8 1000 	streq.w	r1, [r8]
 800be18:	5162      	str	r2, [r4, r5]
 800be1a:	604b      	str	r3, [r1, #4]
 800be1c:	4638      	mov	r0, r7
 800be1e:	f104 060b 	add.w	r6, r4, #11
 800be22:	f000 f829 	bl	800be78 <__malloc_unlock>
 800be26:	f026 0607 	bic.w	r6, r6, #7
 800be2a:	1d23      	adds	r3, r4, #4
 800be2c:	1af2      	subs	r2, r6, r3
 800be2e:	d0ae      	beq.n	800bd8e <_malloc_r+0x22>
 800be30:	1b9b      	subs	r3, r3, r6
 800be32:	50a3      	str	r3, [r4, r2]
 800be34:	e7ab      	b.n	800bd8e <_malloc_r+0x22>
 800be36:	42a3      	cmp	r3, r4
 800be38:	6862      	ldr	r2, [r4, #4]
 800be3a:	d1dd      	bne.n	800bdf8 <_malloc_r+0x8c>
 800be3c:	f8c8 2000 	str.w	r2, [r8]
 800be40:	e7ec      	b.n	800be1c <_malloc_r+0xb0>
 800be42:	4623      	mov	r3, r4
 800be44:	6864      	ldr	r4, [r4, #4]
 800be46:	e7ac      	b.n	800bda2 <_malloc_r+0x36>
 800be48:	4634      	mov	r4, r6
 800be4a:	6876      	ldr	r6, [r6, #4]
 800be4c:	e7b4      	b.n	800bdb8 <_malloc_r+0x4c>
 800be4e:	4613      	mov	r3, r2
 800be50:	e7cc      	b.n	800bdec <_malloc_r+0x80>
 800be52:	230c      	movs	r3, #12
 800be54:	603b      	str	r3, [r7, #0]
 800be56:	4638      	mov	r0, r7
 800be58:	f000 f80e 	bl	800be78 <__malloc_unlock>
 800be5c:	e797      	b.n	800bd8e <_malloc_r+0x22>
 800be5e:	6025      	str	r5, [r4, #0]
 800be60:	e7dc      	b.n	800be1c <_malloc_r+0xb0>
 800be62:	605b      	str	r3, [r3, #4]
 800be64:	deff      	udf	#255	; 0xff
 800be66:	bf00      	nop
 800be68:	2000f830 	.word	0x2000f830

0800be6c <__malloc_lock>:
 800be6c:	4801      	ldr	r0, [pc, #4]	; (800be74 <__malloc_lock+0x8>)
 800be6e:	f7ff bf00 	b.w	800bc72 <__retarget_lock_acquire_recursive>
 800be72:	bf00      	nop
 800be74:	2000f82c 	.word	0x2000f82c

0800be78 <__malloc_unlock>:
 800be78:	4801      	ldr	r0, [pc, #4]	; (800be80 <__malloc_unlock+0x8>)
 800be7a:	f7ff befb 	b.w	800bc74 <__retarget_lock_release_recursive>
 800be7e:	bf00      	nop
 800be80:	2000f82c 	.word	0x2000f82c

0800be84 <__sfputc_r>:
 800be84:	6893      	ldr	r3, [r2, #8]
 800be86:	3b01      	subs	r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	b410      	push	{r4}
 800be8c:	6093      	str	r3, [r2, #8]
 800be8e:	da08      	bge.n	800bea2 <__sfputc_r+0x1e>
 800be90:	6994      	ldr	r4, [r2, #24]
 800be92:	42a3      	cmp	r3, r4
 800be94:	db01      	blt.n	800be9a <__sfputc_r+0x16>
 800be96:	290a      	cmp	r1, #10
 800be98:	d103      	bne.n	800bea2 <__sfputc_r+0x1e>
 800be9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be9e:	f7ff bdda 	b.w	800ba56 <__swbuf_r>
 800bea2:	6813      	ldr	r3, [r2, #0]
 800bea4:	1c58      	adds	r0, r3, #1
 800bea6:	6010      	str	r0, [r2, #0]
 800bea8:	7019      	strb	r1, [r3, #0]
 800beaa:	4608      	mov	r0, r1
 800beac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <__sfputs_r>:
 800beb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb4:	4606      	mov	r6, r0
 800beb6:	460f      	mov	r7, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	18d5      	adds	r5, r2, r3
 800bebc:	42ac      	cmp	r4, r5
 800bebe:	d101      	bne.n	800bec4 <__sfputs_r+0x12>
 800bec0:	2000      	movs	r0, #0
 800bec2:	e007      	b.n	800bed4 <__sfputs_r+0x22>
 800bec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec8:	463a      	mov	r2, r7
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff ffda 	bl	800be84 <__sfputc_r>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d1f3      	bne.n	800bebc <__sfputs_r+0xa>
 800bed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bed8 <_vfiprintf_r>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	460d      	mov	r5, r1
 800bede:	b09d      	sub	sp, #116	; 0x74
 800bee0:	4614      	mov	r4, r2
 800bee2:	4698      	mov	r8, r3
 800bee4:	4606      	mov	r6, r0
 800bee6:	b118      	cbz	r0, 800bef0 <_vfiprintf_r+0x18>
 800bee8:	6a03      	ldr	r3, [r0, #32]
 800beea:	b90b      	cbnz	r3, 800bef0 <_vfiprintf_r+0x18>
 800beec:	f7ff fccc 	bl	800b888 <__sinit>
 800bef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef2:	07d9      	lsls	r1, r3, #31
 800bef4:	d405      	bmi.n	800bf02 <_vfiprintf_r+0x2a>
 800bef6:	89ab      	ldrh	r3, [r5, #12]
 800bef8:	059a      	lsls	r2, r3, #22
 800befa:	d402      	bmi.n	800bf02 <_vfiprintf_r+0x2a>
 800befc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800befe:	f7ff feb8 	bl	800bc72 <__retarget_lock_acquire_recursive>
 800bf02:	89ab      	ldrh	r3, [r5, #12]
 800bf04:	071b      	lsls	r3, r3, #28
 800bf06:	d501      	bpl.n	800bf0c <_vfiprintf_r+0x34>
 800bf08:	692b      	ldr	r3, [r5, #16]
 800bf0a:	b99b      	cbnz	r3, 800bf34 <_vfiprintf_r+0x5c>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff fdde 	bl	800bad0 <__swsetup_r>
 800bf14:	b170      	cbz	r0, 800bf34 <_vfiprintf_r+0x5c>
 800bf16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf18:	07dc      	lsls	r4, r3, #31
 800bf1a:	d504      	bpl.n	800bf26 <_vfiprintf_r+0x4e>
 800bf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf20:	b01d      	add	sp, #116	; 0x74
 800bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf26:	89ab      	ldrh	r3, [r5, #12]
 800bf28:	0598      	lsls	r0, r3, #22
 800bf2a:	d4f7      	bmi.n	800bf1c <_vfiprintf_r+0x44>
 800bf2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf2e:	f7ff fea1 	bl	800bc74 <__retarget_lock_release_recursive>
 800bf32:	e7f3      	b.n	800bf1c <_vfiprintf_r+0x44>
 800bf34:	2300      	movs	r3, #0
 800bf36:	9309      	str	r3, [sp, #36]	; 0x24
 800bf38:	2320      	movs	r3, #32
 800bf3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf42:	2330      	movs	r3, #48	; 0x30
 800bf44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c0f8 <_vfiprintf_r+0x220>
 800bf48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf4c:	f04f 0901 	mov.w	r9, #1
 800bf50:	4623      	mov	r3, r4
 800bf52:	469a      	mov	sl, r3
 800bf54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf58:	b10a      	cbz	r2, 800bf5e <_vfiprintf_r+0x86>
 800bf5a:	2a25      	cmp	r2, #37	; 0x25
 800bf5c:	d1f9      	bne.n	800bf52 <_vfiprintf_r+0x7a>
 800bf5e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf62:	d00b      	beq.n	800bf7c <_vfiprintf_r+0xa4>
 800bf64:	465b      	mov	r3, fp
 800bf66:	4622      	mov	r2, r4
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7ff ffa1 	bl	800beb2 <__sfputs_r>
 800bf70:	3001      	adds	r0, #1
 800bf72:	f000 80a9 	beq.w	800c0c8 <_vfiprintf_r+0x1f0>
 800bf76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf78:	445a      	add	r2, fp
 800bf7a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 80a1 	beq.w	800c0c8 <_vfiprintf_r+0x1f0>
 800bf86:	2300      	movs	r3, #0
 800bf88:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf90:	f10a 0a01 	add.w	sl, sl, #1
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	9307      	str	r3, [sp, #28]
 800bf98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf9c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf9e:	4654      	mov	r4, sl
 800bfa0:	2205      	movs	r2, #5
 800bfa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfa6:	4854      	ldr	r0, [pc, #336]	; (800c0f8 <_vfiprintf_r+0x220>)
 800bfa8:	f7f4 fbc2 	bl	8000730 <memchr>
 800bfac:	9a04      	ldr	r2, [sp, #16]
 800bfae:	b9d8      	cbnz	r0, 800bfe8 <_vfiprintf_r+0x110>
 800bfb0:	06d1      	lsls	r1, r2, #27
 800bfb2:	bf44      	itt	mi
 800bfb4:	2320      	movmi	r3, #32
 800bfb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfba:	0713      	lsls	r3, r2, #28
 800bfbc:	bf44      	itt	mi
 800bfbe:	232b      	movmi	r3, #43	; 0x2b
 800bfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfc4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfca:	d015      	beq.n	800bff8 <_vfiprintf_r+0x120>
 800bfcc:	9a07      	ldr	r2, [sp, #28]
 800bfce:	4654      	mov	r4, sl
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	f04f 0c0a 	mov.w	ip, #10
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfdc:	3b30      	subs	r3, #48	; 0x30
 800bfde:	2b09      	cmp	r3, #9
 800bfe0:	d94d      	bls.n	800c07e <_vfiprintf_r+0x1a6>
 800bfe2:	b1b0      	cbz	r0, 800c012 <_vfiprintf_r+0x13a>
 800bfe4:	9207      	str	r2, [sp, #28]
 800bfe6:	e014      	b.n	800c012 <_vfiprintf_r+0x13a>
 800bfe8:	eba0 0308 	sub.w	r3, r0, r8
 800bfec:	fa09 f303 	lsl.w	r3, r9, r3
 800bff0:	4313      	orrs	r3, r2
 800bff2:	9304      	str	r3, [sp, #16]
 800bff4:	46a2      	mov	sl, r4
 800bff6:	e7d2      	b.n	800bf9e <_vfiprintf_r+0xc6>
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	1d19      	adds	r1, r3, #4
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	9103      	str	r1, [sp, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	bfbb      	ittet	lt
 800c004:	425b      	neglt	r3, r3
 800c006:	f042 0202 	orrlt.w	r2, r2, #2
 800c00a:	9307      	strge	r3, [sp, #28]
 800c00c:	9307      	strlt	r3, [sp, #28]
 800c00e:	bfb8      	it	lt
 800c010:	9204      	strlt	r2, [sp, #16]
 800c012:	7823      	ldrb	r3, [r4, #0]
 800c014:	2b2e      	cmp	r3, #46	; 0x2e
 800c016:	d10c      	bne.n	800c032 <_vfiprintf_r+0x15a>
 800c018:	7863      	ldrb	r3, [r4, #1]
 800c01a:	2b2a      	cmp	r3, #42	; 0x2a
 800c01c:	d134      	bne.n	800c088 <_vfiprintf_r+0x1b0>
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	1d1a      	adds	r2, r3, #4
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	9203      	str	r2, [sp, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	bfb8      	it	lt
 800c02a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c02e:	3402      	adds	r4, #2
 800c030:	9305      	str	r3, [sp, #20]
 800c032:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c108 <_vfiprintf_r+0x230>
 800c036:	7821      	ldrb	r1, [r4, #0]
 800c038:	2203      	movs	r2, #3
 800c03a:	4650      	mov	r0, sl
 800c03c:	f7f4 fb78 	bl	8000730 <memchr>
 800c040:	b138      	cbz	r0, 800c052 <_vfiprintf_r+0x17a>
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	eba0 000a 	sub.w	r0, r0, sl
 800c048:	2240      	movs	r2, #64	; 0x40
 800c04a:	4082      	lsls	r2, r0
 800c04c:	4313      	orrs	r3, r2
 800c04e:	3401      	adds	r4, #1
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c056:	4829      	ldr	r0, [pc, #164]	; (800c0fc <_vfiprintf_r+0x224>)
 800c058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c05c:	2206      	movs	r2, #6
 800c05e:	f7f4 fb67 	bl	8000730 <memchr>
 800c062:	2800      	cmp	r0, #0
 800c064:	d03f      	beq.n	800c0e6 <_vfiprintf_r+0x20e>
 800c066:	4b26      	ldr	r3, [pc, #152]	; (800c100 <_vfiprintf_r+0x228>)
 800c068:	bb1b      	cbnz	r3, 800c0b2 <_vfiprintf_r+0x1da>
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	3307      	adds	r3, #7
 800c06e:	f023 0307 	bic.w	r3, r3, #7
 800c072:	3308      	adds	r3, #8
 800c074:	9303      	str	r3, [sp, #12]
 800c076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c078:	443b      	add	r3, r7
 800c07a:	9309      	str	r3, [sp, #36]	; 0x24
 800c07c:	e768      	b.n	800bf50 <_vfiprintf_r+0x78>
 800c07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c082:	460c      	mov	r4, r1
 800c084:	2001      	movs	r0, #1
 800c086:	e7a6      	b.n	800bfd6 <_vfiprintf_r+0xfe>
 800c088:	2300      	movs	r3, #0
 800c08a:	3401      	adds	r4, #1
 800c08c:	9305      	str	r3, [sp, #20]
 800c08e:	4619      	mov	r1, r3
 800c090:	f04f 0c0a 	mov.w	ip, #10
 800c094:	4620      	mov	r0, r4
 800c096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c09a:	3a30      	subs	r2, #48	; 0x30
 800c09c:	2a09      	cmp	r2, #9
 800c09e:	d903      	bls.n	800c0a8 <_vfiprintf_r+0x1d0>
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0c6      	beq.n	800c032 <_vfiprintf_r+0x15a>
 800c0a4:	9105      	str	r1, [sp, #20]
 800c0a6:	e7c4      	b.n	800c032 <_vfiprintf_r+0x15a>
 800c0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e7f0      	b.n	800c094 <_vfiprintf_r+0x1bc>
 800c0b2:	ab03      	add	r3, sp, #12
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	4b12      	ldr	r3, [pc, #72]	; (800c104 <_vfiprintf_r+0x22c>)
 800c0ba:	a904      	add	r1, sp, #16
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f3af 8000 	nop.w
 800c0c2:	4607      	mov	r7, r0
 800c0c4:	1c78      	adds	r0, r7, #1
 800c0c6:	d1d6      	bne.n	800c076 <_vfiprintf_r+0x19e>
 800c0c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ca:	07d9      	lsls	r1, r3, #31
 800c0cc:	d405      	bmi.n	800c0da <_vfiprintf_r+0x202>
 800c0ce:	89ab      	ldrh	r3, [r5, #12]
 800c0d0:	059a      	lsls	r2, r3, #22
 800c0d2:	d402      	bmi.n	800c0da <_vfiprintf_r+0x202>
 800c0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0d6:	f7ff fdcd 	bl	800bc74 <__retarget_lock_release_recursive>
 800c0da:	89ab      	ldrh	r3, [r5, #12]
 800c0dc:	065b      	lsls	r3, r3, #25
 800c0de:	f53f af1d 	bmi.w	800bf1c <_vfiprintf_r+0x44>
 800c0e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0e4:	e71c      	b.n	800bf20 <_vfiprintf_r+0x48>
 800c0e6:	ab03      	add	r3, sp, #12
 800c0e8:	9300      	str	r3, [sp, #0]
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <_vfiprintf_r+0x22c>)
 800c0ee:	a904      	add	r1, sp, #16
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f000 f879 	bl	800c1e8 <_printf_i>
 800c0f6:	e7e4      	b.n	800c0c2 <_vfiprintf_r+0x1ea>
 800c0f8:	0800cac0 	.word	0x0800cac0
 800c0fc:	0800caca 	.word	0x0800caca
 800c100:	00000000 	.word	0x00000000
 800c104:	0800beb3 	.word	0x0800beb3
 800c108:	0800cac6 	.word	0x0800cac6

0800c10c <_printf_common>:
 800c10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c110:	4616      	mov	r6, r2
 800c112:	4699      	mov	r9, r3
 800c114:	688a      	ldr	r2, [r1, #8]
 800c116:	690b      	ldr	r3, [r1, #16]
 800c118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c11c:	4293      	cmp	r3, r2
 800c11e:	bfb8      	it	lt
 800c120:	4613      	movlt	r3, r2
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c128:	4607      	mov	r7, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	b10a      	cbz	r2, 800c132 <_printf_common+0x26>
 800c12e:	3301      	adds	r3, #1
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	0699      	lsls	r1, r3, #26
 800c136:	bf42      	ittt	mi
 800c138:	6833      	ldrmi	r3, [r6, #0]
 800c13a:	3302      	addmi	r3, #2
 800c13c:	6033      	strmi	r3, [r6, #0]
 800c13e:	6825      	ldr	r5, [r4, #0]
 800c140:	f015 0506 	ands.w	r5, r5, #6
 800c144:	d106      	bne.n	800c154 <_printf_common+0x48>
 800c146:	f104 0a19 	add.w	sl, r4, #25
 800c14a:	68e3      	ldr	r3, [r4, #12]
 800c14c:	6832      	ldr	r2, [r6, #0]
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	42ab      	cmp	r3, r5
 800c152:	dc26      	bgt.n	800c1a2 <_printf_common+0x96>
 800c154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c158:	1e13      	subs	r3, r2, #0
 800c15a:	6822      	ldr	r2, [r4, #0]
 800c15c:	bf18      	it	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	0692      	lsls	r2, r2, #26
 800c162:	d42b      	bmi.n	800c1bc <_printf_common+0xb0>
 800c164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c168:	4649      	mov	r1, r9
 800c16a:	4638      	mov	r0, r7
 800c16c:	47c0      	blx	r8
 800c16e:	3001      	adds	r0, #1
 800c170:	d01e      	beq.n	800c1b0 <_printf_common+0xa4>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	6922      	ldr	r2, [r4, #16]
 800c176:	f003 0306 	and.w	r3, r3, #6
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	bf02      	ittt	eq
 800c17e:	68e5      	ldreq	r5, [r4, #12]
 800c180:	6833      	ldreq	r3, [r6, #0]
 800c182:	1aed      	subeq	r5, r5, r3
 800c184:	68a3      	ldr	r3, [r4, #8]
 800c186:	bf0c      	ite	eq
 800c188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c18c:	2500      	movne	r5, #0
 800c18e:	4293      	cmp	r3, r2
 800c190:	bfc4      	itt	gt
 800c192:	1a9b      	subgt	r3, r3, r2
 800c194:	18ed      	addgt	r5, r5, r3
 800c196:	2600      	movs	r6, #0
 800c198:	341a      	adds	r4, #26
 800c19a:	42b5      	cmp	r5, r6
 800c19c:	d11a      	bne.n	800c1d4 <_printf_common+0xc8>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e008      	b.n	800c1b4 <_printf_common+0xa8>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	47c0      	blx	r8
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d103      	bne.n	800c1b8 <_printf_common+0xac>
 800c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	e7c6      	b.n	800c14a <_printf_common+0x3e>
 800c1bc:	18e1      	adds	r1, r4, r3
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	2030      	movs	r0, #48	; 0x30
 800c1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1c6:	4422      	add	r2, r4
 800c1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	e7c7      	b.n	800c164 <_printf_common+0x58>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	4649      	mov	r1, r9
 800c1da:	4638      	mov	r0, r7
 800c1dc:	47c0      	blx	r8
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d0e6      	beq.n	800c1b0 <_printf_common+0xa4>
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	e7d9      	b.n	800c19a <_printf_common+0x8e>
	...

0800c1e8 <_printf_i>:
 800c1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ec:	7e0f      	ldrb	r7, [r1, #24]
 800c1ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1f0:	2f78      	cmp	r7, #120	; 0x78
 800c1f2:	4691      	mov	r9, r2
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	469a      	mov	sl, r3
 800c1fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1fe:	d807      	bhi.n	800c210 <_printf_i+0x28>
 800c200:	2f62      	cmp	r7, #98	; 0x62
 800c202:	d80a      	bhi.n	800c21a <_printf_i+0x32>
 800c204:	2f00      	cmp	r7, #0
 800c206:	f000 80d4 	beq.w	800c3b2 <_printf_i+0x1ca>
 800c20a:	2f58      	cmp	r7, #88	; 0x58
 800c20c:	f000 80c0 	beq.w	800c390 <_printf_i+0x1a8>
 800c210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c218:	e03a      	b.n	800c290 <_printf_i+0xa8>
 800c21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c21e:	2b15      	cmp	r3, #21
 800c220:	d8f6      	bhi.n	800c210 <_printf_i+0x28>
 800c222:	a101      	add	r1, pc, #4	; (adr r1, 800c228 <_printf_i+0x40>)
 800c224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c228:	0800c281 	.word	0x0800c281
 800c22c:	0800c295 	.word	0x0800c295
 800c230:	0800c211 	.word	0x0800c211
 800c234:	0800c211 	.word	0x0800c211
 800c238:	0800c211 	.word	0x0800c211
 800c23c:	0800c211 	.word	0x0800c211
 800c240:	0800c295 	.word	0x0800c295
 800c244:	0800c211 	.word	0x0800c211
 800c248:	0800c211 	.word	0x0800c211
 800c24c:	0800c211 	.word	0x0800c211
 800c250:	0800c211 	.word	0x0800c211
 800c254:	0800c399 	.word	0x0800c399
 800c258:	0800c2c1 	.word	0x0800c2c1
 800c25c:	0800c353 	.word	0x0800c353
 800c260:	0800c211 	.word	0x0800c211
 800c264:	0800c211 	.word	0x0800c211
 800c268:	0800c3bb 	.word	0x0800c3bb
 800c26c:	0800c211 	.word	0x0800c211
 800c270:	0800c2c1 	.word	0x0800c2c1
 800c274:	0800c211 	.word	0x0800c211
 800c278:	0800c211 	.word	0x0800c211
 800c27c:	0800c35b 	.word	0x0800c35b
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	602a      	str	r2, [r5, #0]
 800c288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c290:	2301      	movs	r3, #1
 800c292:	e09f      	b.n	800c3d4 <_printf_i+0x1ec>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	682b      	ldr	r3, [r5, #0]
 800c298:	0607      	lsls	r7, r0, #24
 800c29a:	f103 0104 	add.w	r1, r3, #4
 800c29e:	6029      	str	r1, [r5, #0]
 800c2a0:	d501      	bpl.n	800c2a6 <_printf_i+0xbe>
 800c2a2:	681e      	ldr	r6, [r3, #0]
 800c2a4:	e003      	b.n	800c2ae <_printf_i+0xc6>
 800c2a6:	0646      	lsls	r6, r0, #25
 800c2a8:	d5fb      	bpl.n	800c2a2 <_printf_i+0xba>
 800c2aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2ae:	2e00      	cmp	r6, #0
 800c2b0:	da03      	bge.n	800c2ba <_printf_i+0xd2>
 800c2b2:	232d      	movs	r3, #45	; 0x2d
 800c2b4:	4276      	negs	r6, r6
 800c2b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2ba:	485a      	ldr	r0, [pc, #360]	; (800c424 <_printf_i+0x23c>)
 800c2bc:	230a      	movs	r3, #10
 800c2be:	e012      	b.n	800c2e6 <_printf_i+0xfe>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	6820      	ldr	r0, [r4, #0]
 800c2c4:	1d19      	adds	r1, r3, #4
 800c2c6:	6029      	str	r1, [r5, #0]
 800c2c8:	0605      	lsls	r5, r0, #24
 800c2ca:	d501      	bpl.n	800c2d0 <_printf_i+0xe8>
 800c2cc:	681e      	ldr	r6, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <_printf_i+0xee>
 800c2d0:	0641      	lsls	r1, r0, #25
 800c2d2:	d5fb      	bpl.n	800c2cc <_printf_i+0xe4>
 800c2d4:	881e      	ldrh	r6, [r3, #0]
 800c2d6:	4853      	ldr	r0, [pc, #332]	; (800c424 <_printf_i+0x23c>)
 800c2d8:	2f6f      	cmp	r7, #111	; 0x6f
 800c2da:	bf0c      	ite	eq
 800c2dc:	2308      	moveq	r3, #8
 800c2de:	230a      	movne	r3, #10
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2e6:	6865      	ldr	r5, [r4, #4]
 800c2e8:	60a5      	str	r5, [r4, #8]
 800c2ea:	2d00      	cmp	r5, #0
 800c2ec:	bfa2      	ittt	ge
 800c2ee:	6821      	ldrge	r1, [r4, #0]
 800c2f0:	f021 0104 	bicge.w	r1, r1, #4
 800c2f4:	6021      	strge	r1, [r4, #0]
 800c2f6:	b90e      	cbnz	r6, 800c2fc <_printf_i+0x114>
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	d04b      	beq.n	800c394 <_printf_i+0x1ac>
 800c2fc:	4615      	mov	r5, r2
 800c2fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800c302:	fb03 6711 	mls	r7, r3, r1, r6
 800c306:	5dc7      	ldrb	r7, [r0, r7]
 800c308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c30c:	4637      	mov	r7, r6
 800c30e:	42bb      	cmp	r3, r7
 800c310:	460e      	mov	r6, r1
 800c312:	d9f4      	bls.n	800c2fe <_printf_i+0x116>
 800c314:	2b08      	cmp	r3, #8
 800c316:	d10b      	bne.n	800c330 <_printf_i+0x148>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	07de      	lsls	r6, r3, #31
 800c31c:	d508      	bpl.n	800c330 <_printf_i+0x148>
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	6861      	ldr	r1, [r4, #4]
 800c322:	4299      	cmp	r1, r3
 800c324:	bfde      	ittt	le
 800c326:	2330      	movle	r3, #48	; 0x30
 800c328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c32c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c330:	1b52      	subs	r2, r2, r5
 800c332:	6122      	str	r2, [r4, #16]
 800c334:	f8cd a000 	str.w	sl, [sp]
 800c338:	464b      	mov	r3, r9
 800c33a:	aa03      	add	r2, sp, #12
 800c33c:	4621      	mov	r1, r4
 800c33e:	4640      	mov	r0, r8
 800c340:	f7ff fee4 	bl	800c10c <_printf_common>
 800c344:	3001      	adds	r0, #1
 800c346:	d14a      	bne.n	800c3de <_printf_i+0x1f6>
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	b004      	add	sp, #16
 800c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	f043 0320 	orr.w	r3, r3, #32
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	4833      	ldr	r0, [pc, #204]	; (800c428 <_printf_i+0x240>)
 800c35c:	2778      	movs	r7, #120	; 0x78
 800c35e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	6829      	ldr	r1, [r5, #0]
 800c366:	061f      	lsls	r7, r3, #24
 800c368:	f851 6b04 	ldr.w	r6, [r1], #4
 800c36c:	d402      	bmi.n	800c374 <_printf_i+0x18c>
 800c36e:	065f      	lsls	r7, r3, #25
 800c370:	bf48      	it	mi
 800c372:	b2b6      	uxthmi	r6, r6
 800c374:	07df      	lsls	r7, r3, #31
 800c376:	bf48      	it	mi
 800c378:	f043 0320 	orrmi.w	r3, r3, #32
 800c37c:	6029      	str	r1, [r5, #0]
 800c37e:	bf48      	it	mi
 800c380:	6023      	strmi	r3, [r4, #0]
 800c382:	b91e      	cbnz	r6, 800c38c <_printf_i+0x1a4>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	f023 0320 	bic.w	r3, r3, #32
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	2310      	movs	r3, #16
 800c38e:	e7a7      	b.n	800c2e0 <_printf_i+0xf8>
 800c390:	4824      	ldr	r0, [pc, #144]	; (800c424 <_printf_i+0x23c>)
 800c392:	e7e4      	b.n	800c35e <_printf_i+0x176>
 800c394:	4615      	mov	r5, r2
 800c396:	e7bd      	b.n	800c314 <_printf_i+0x12c>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	6826      	ldr	r6, [r4, #0]
 800c39c:	6961      	ldr	r1, [r4, #20]
 800c39e:	1d18      	adds	r0, r3, #4
 800c3a0:	6028      	str	r0, [r5, #0]
 800c3a2:	0635      	lsls	r5, r6, #24
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	d501      	bpl.n	800c3ac <_printf_i+0x1c4>
 800c3a8:	6019      	str	r1, [r3, #0]
 800c3aa:	e002      	b.n	800c3b2 <_printf_i+0x1ca>
 800c3ac:	0670      	lsls	r0, r6, #25
 800c3ae:	d5fb      	bpl.n	800c3a8 <_printf_i+0x1c0>
 800c3b0:	8019      	strh	r1, [r3, #0]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6123      	str	r3, [r4, #16]
 800c3b6:	4615      	mov	r5, r2
 800c3b8:	e7bc      	b.n	800c334 <_printf_i+0x14c>
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	1d1a      	adds	r2, r3, #4
 800c3be:	602a      	str	r2, [r5, #0]
 800c3c0:	681d      	ldr	r5, [r3, #0]
 800c3c2:	6862      	ldr	r2, [r4, #4]
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f7f4 f9b2 	bl	8000730 <memchr>
 800c3cc:	b108      	cbz	r0, 800c3d2 <_printf_i+0x1ea>
 800c3ce:	1b40      	subs	r0, r0, r5
 800c3d0:	6060      	str	r0, [r4, #4]
 800c3d2:	6863      	ldr	r3, [r4, #4]
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3dc:	e7aa      	b.n	800c334 <_printf_i+0x14c>
 800c3de:	6923      	ldr	r3, [r4, #16]
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	47d0      	blx	sl
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d0ad      	beq.n	800c348 <_printf_i+0x160>
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	079b      	lsls	r3, r3, #30
 800c3f0:	d413      	bmi.n	800c41a <_printf_i+0x232>
 800c3f2:	68e0      	ldr	r0, [r4, #12]
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	4298      	cmp	r0, r3
 800c3f8:	bfb8      	it	lt
 800c3fa:	4618      	movlt	r0, r3
 800c3fc:	e7a6      	b.n	800c34c <_printf_i+0x164>
 800c3fe:	2301      	movs	r3, #1
 800c400:	4632      	mov	r2, r6
 800c402:	4649      	mov	r1, r9
 800c404:	4640      	mov	r0, r8
 800c406:	47d0      	blx	sl
 800c408:	3001      	adds	r0, #1
 800c40a:	d09d      	beq.n	800c348 <_printf_i+0x160>
 800c40c:	3501      	adds	r5, #1
 800c40e:	68e3      	ldr	r3, [r4, #12]
 800c410:	9903      	ldr	r1, [sp, #12]
 800c412:	1a5b      	subs	r3, r3, r1
 800c414:	42ab      	cmp	r3, r5
 800c416:	dcf2      	bgt.n	800c3fe <_printf_i+0x216>
 800c418:	e7eb      	b.n	800c3f2 <_printf_i+0x20a>
 800c41a:	2500      	movs	r5, #0
 800c41c:	f104 0619 	add.w	r6, r4, #25
 800c420:	e7f5      	b.n	800c40e <_printf_i+0x226>
 800c422:	bf00      	nop
 800c424:	0800cad1 	.word	0x0800cad1
 800c428:	0800cae2 	.word	0x0800cae2

0800c42c <__sflush_r>:
 800c42c:	898a      	ldrh	r2, [r1, #12]
 800c42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	4605      	mov	r5, r0
 800c434:	0710      	lsls	r0, r2, #28
 800c436:	460c      	mov	r4, r1
 800c438:	d458      	bmi.n	800c4ec <__sflush_r+0xc0>
 800c43a:	684b      	ldr	r3, [r1, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dc05      	bgt.n	800c44c <__sflush_r+0x20>
 800c440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	dc02      	bgt.n	800c44c <__sflush_r+0x20>
 800c446:	2000      	movs	r0, #0
 800c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d0f9      	beq.n	800c446 <__sflush_r+0x1a>
 800c452:	2300      	movs	r3, #0
 800c454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c458:	682f      	ldr	r7, [r5, #0]
 800c45a:	6a21      	ldr	r1, [r4, #32]
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	d032      	beq.n	800c4c6 <__sflush_r+0x9a>
 800c460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	075a      	lsls	r2, r3, #29
 800c466:	d505      	bpl.n	800c474 <__sflush_r+0x48>
 800c468:	6863      	ldr	r3, [r4, #4]
 800c46a:	1ac0      	subs	r0, r0, r3
 800c46c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c46e:	b10b      	cbz	r3, 800c474 <__sflush_r+0x48>
 800c470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c472:	1ac0      	subs	r0, r0, r3
 800c474:	2300      	movs	r3, #0
 800c476:	4602      	mov	r2, r0
 800c478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c47a:	6a21      	ldr	r1, [r4, #32]
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b0      	blx	r6
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	d106      	bne.n	800c494 <__sflush_r+0x68>
 800c486:	6829      	ldr	r1, [r5, #0]
 800c488:	291d      	cmp	r1, #29
 800c48a:	d82b      	bhi.n	800c4e4 <__sflush_r+0xb8>
 800c48c:	4a29      	ldr	r2, [pc, #164]	; (800c534 <__sflush_r+0x108>)
 800c48e:	410a      	asrs	r2, r1
 800c490:	07d6      	lsls	r6, r2, #31
 800c492:	d427      	bmi.n	800c4e4 <__sflush_r+0xb8>
 800c494:	2200      	movs	r2, #0
 800c496:	6062      	str	r2, [r4, #4]
 800c498:	04d9      	lsls	r1, r3, #19
 800c49a:	6922      	ldr	r2, [r4, #16]
 800c49c:	6022      	str	r2, [r4, #0]
 800c49e:	d504      	bpl.n	800c4aa <__sflush_r+0x7e>
 800c4a0:	1c42      	adds	r2, r0, #1
 800c4a2:	d101      	bne.n	800c4a8 <__sflush_r+0x7c>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b903      	cbnz	r3, 800c4aa <__sflush_r+0x7e>
 800c4a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ac:	602f      	str	r7, [r5, #0]
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	d0c9      	beq.n	800c446 <__sflush_r+0x1a>
 800c4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4b6:	4299      	cmp	r1, r3
 800c4b8:	d002      	beq.n	800c4c0 <__sflush_r+0x94>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7ff fbea 	bl	800bc94 <_free_r>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c4c4:	e7c0      	b.n	800c448 <__sflush_r+0x1c>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	47b0      	blx	r6
 800c4cc:	1c41      	adds	r1, r0, #1
 800c4ce:	d1c8      	bne.n	800c462 <__sflush_r+0x36>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0c5      	beq.n	800c462 <__sflush_r+0x36>
 800c4d6:	2b1d      	cmp	r3, #29
 800c4d8:	d001      	beq.n	800c4de <__sflush_r+0xb2>
 800c4da:	2b16      	cmp	r3, #22
 800c4dc:	d101      	bne.n	800c4e2 <__sflush_r+0xb6>
 800c4de:	602f      	str	r7, [r5, #0]
 800c4e0:	e7b1      	b.n	800c446 <__sflush_r+0x1a>
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	e7ad      	b.n	800c448 <__sflush_r+0x1c>
 800c4ec:	690f      	ldr	r7, [r1, #16]
 800c4ee:	2f00      	cmp	r7, #0
 800c4f0:	d0a9      	beq.n	800c446 <__sflush_r+0x1a>
 800c4f2:	0793      	lsls	r3, r2, #30
 800c4f4:	680e      	ldr	r6, [r1, #0]
 800c4f6:	bf08      	it	eq
 800c4f8:	694b      	ldreq	r3, [r1, #20]
 800c4fa:	600f      	str	r7, [r1, #0]
 800c4fc:	bf18      	it	ne
 800c4fe:	2300      	movne	r3, #0
 800c500:	eba6 0807 	sub.w	r8, r6, r7
 800c504:	608b      	str	r3, [r1, #8]
 800c506:	f1b8 0f00 	cmp.w	r8, #0
 800c50a:	dd9c      	ble.n	800c446 <__sflush_r+0x1a>
 800c50c:	6a21      	ldr	r1, [r4, #32]
 800c50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c510:	4643      	mov	r3, r8
 800c512:	463a      	mov	r2, r7
 800c514:	4628      	mov	r0, r5
 800c516:	47b0      	blx	r6
 800c518:	2800      	cmp	r0, #0
 800c51a:	dc06      	bgt.n	800c52a <__sflush_r+0xfe>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	e78e      	b.n	800c448 <__sflush_r+0x1c>
 800c52a:	4407      	add	r7, r0
 800c52c:	eba8 0800 	sub.w	r8, r8, r0
 800c530:	e7e9      	b.n	800c506 <__sflush_r+0xda>
 800c532:	bf00      	nop
 800c534:	dfbffffe 	.word	0xdfbffffe

0800c538 <_fflush_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b913      	cbnz	r3, 800c548 <_fflush_r+0x10>
 800c542:	2500      	movs	r5, #0
 800c544:	4628      	mov	r0, r5
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	b118      	cbz	r0, 800c552 <_fflush_r+0x1a>
 800c54a:	6a03      	ldr	r3, [r0, #32]
 800c54c:	b90b      	cbnz	r3, 800c552 <_fflush_r+0x1a>
 800c54e:	f7ff f99b 	bl	800b888 <__sinit>
 800c552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0f3      	beq.n	800c542 <_fflush_r+0xa>
 800c55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c55c:	07d0      	lsls	r0, r2, #31
 800c55e:	d404      	bmi.n	800c56a <_fflush_r+0x32>
 800c560:	0599      	lsls	r1, r3, #22
 800c562:	d402      	bmi.n	800c56a <_fflush_r+0x32>
 800c564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c566:	f7ff fb84 	bl	800bc72 <__retarget_lock_acquire_recursive>
 800c56a:	4628      	mov	r0, r5
 800c56c:	4621      	mov	r1, r4
 800c56e:	f7ff ff5d 	bl	800c42c <__sflush_r>
 800c572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c574:	07da      	lsls	r2, r3, #31
 800c576:	4605      	mov	r5, r0
 800c578:	d4e4      	bmi.n	800c544 <_fflush_r+0xc>
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	059b      	lsls	r3, r3, #22
 800c57e:	d4e1      	bmi.n	800c544 <_fflush_r+0xc>
 800c580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c582:	f7ff fb77 	bl	800bc74 <__retarget_lock_release_recursive>
 800c586:	e7dd      	b.n	800c544 <_fflush_r+0xc>

0800c588 <__swhatbuf_r>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	460c      	mov	r4, r1
 800c58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c590:	2900      	cmp	r1, #0
 800c592:	b096      	sub	sp, #88	; 0x58
 800c594:	4615      	mov	r5, r2
 800c596:	461e      	mov	r6, r3
 800c598:	da0d      	bge.n	800c5b6 <__swhatbuf_r+0x2e>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c5a0:	f04f 0100 	mov.w	r1, #0
 800c5a4:	bf0c      	ite	eq
 800c5a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c5aa:	2340      	movne	r3, #64	; 0x40
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	6031      	str	r1, [r6, #0]
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	b016      	add	sp, #88	; 0x58
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	466a      	mov	r2, sp
 800c5b8:	f000 f848 	bl	800c64c <_fstat_r>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	dbec      	blt.n	800c59a <__swhatbuf_r+0x12>
 800c5c0:	9901      	ldr	r1, [sp, #4]
 800c5c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c5c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c5ca:	4259      	negs	r1, r3
 800c5cc:	4159      	adcs	r1, r3
 800c5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5d2:	e7eb      	b.n	800c5ac <__swhatbuf_r+0x24>

0800c5d4 <__smakebuf_r>:
 800c5d4:	898b      	ldrh	r3, [r1, #12]
 800c5d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5d8:	079d      	lsls	r5, r3, #30
 800c5da:	4606      	mov	r6, r0
 800c5dc:	460c      	mov	r4, r1
 800c5de:	d507      	bpl.n	800c5f0 <__smakebuf_r+0x1c>
 800c5e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	6123      	str	r3, [r4, #16]
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	6163      	str	r3, [r4, #20]
 800c5ec:	b002      	add	sp, #8
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	ab01      	add	r3, sp, #4
 800c5f2:	466a      	mov	r2, sp
 800c5f4:	f7ff ffc8 	bl	800c588 <__swhatbuf_r>
 800c5f8:	9900      	ldr	r1, [sp, #0]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f7ff fbb5 	bl	800bd6c <_malloc_r>
 800c602:	b948      	cbnz	r0, 800c618 <__smakebuf_r+0x44>
 800c604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c608:	059a      	lsls	r2, r3, #22
 800c60a:	d4ef      	bmi.n	800c5ec <__smakebuf_r+0x18>
 800c60c:	f023 0303 	bic.w	r3, r3, #3
 800c610:	f043 0302 	orr.w	r3, r3, #2
 800c614:	81a3      	strh	r3, [r4, #12]
 800c616:	e7e3      	b.n	800c5e0 <__smakebuf_r+0xc>
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	6020      	str	r0, [r4, #0]
 800c61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c620:	81a3      	strh	r3, [r4, #12]
 800c622:	9b00      	ldr	r3, [sp, #0]
 800c624:	6163      	str	r3, [r4, #20]
 800c626:	9b01      	ldr	r3, [sp, #4]
 800c628:	6120      	str	r0, [r4, #16]
 800c62a:	b15b      	cbz	r3, 800c644 <__smakebuf_r+0x70>
 800c62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c630:	4630      	mov	r0, r6
 800c632:	f000 f81d 	bl	800c670 <_isatty_r>
 800c636:	b128      	cbz	r0, 800c644 <__smakebuf_r+0x70>
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	89a3      	ldrh	r3, [r4, #12]
 800c646:	431d      	orrs	r5, r3
 800c648:	81a5      	strh	r5, [r4, #12]
 800c64a:	e7cf      	b.n	800c5ec <__smakebuf_r+0x18>

0800c64c <_fstat_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4d07      	ldr	r5, [pc, #28]	; (800c66c <_fstat_r+0x20>)
 800c650:	2300      	movs	r3, #0
 800c652:	4604      	mov	r4, r0
 800c654:	4608      	mov	r0, r1
 800c656:	4611      	mov	r1, r2
 800c658:	602b      	str	r3, [r5, #0]
 800c65a:	f7f4 fe72 	bl	8001342 <_fstat>
 800c65e:	1c43      	adds	r3, r0, #1
 800c660:	d102      	bne.n	800c668 <_fstat_r+0x1c>
 800c662:	682b      	ldr	r3, [r5, #0]
 800c664:	b103      	cbz	r3, 800c668 <_fstat_r+0x1c>
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	bd38      	pop	{r3, r4, r5, pc}
 800c66a:	bf00      	nop
 800c66c:	2000f828 	.word	0x2000f828

0800c670 <_isatty_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d06      	ldr	r5, [pc, #24]	; (800c68c <_isatty_r+0x1c>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f7f4 fe71 	bl	8001362 <_isatty>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_isatty_r+0x1a>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_isatty_r+0x1a>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	2000f828 	.word	0x2000f828

0800c690 <_sbrk_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4d06      	ldr	r5, [pc, #24]	; (800c6ac <_sbrk_r+0x1c>)
 800c694:	2300      	movs	r3, #0
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	f7f4 fe7a 	bl	8001394 <_sbrk>
 800c6a0:	1c43      	adds	r3, r0, #1
 800c6a2:	d102      	bne.n	800c6aa <_sbrk_r+0x1a>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	b103      	cbz	r3, 800c6aa <_sbrk_r+0x1a>
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	2000f828 	.word	0x2000f828

0800c6b0 <_init>:
 800c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b2:	bf00      	nop
 800c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b6:	bc08      	pop	{r3}
 800c6b8:	469e      	mov	lr, r3
 800c6ba:	4770      	bx	lr

0800c6bc <_fini>:
 800c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6be:	bf00      	nop
 800c6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c2:	bc08      	pop	{r3}
 800c6c4:	469e      	mov	lr, r3
 800c6c6:	4770      	bx	lr
