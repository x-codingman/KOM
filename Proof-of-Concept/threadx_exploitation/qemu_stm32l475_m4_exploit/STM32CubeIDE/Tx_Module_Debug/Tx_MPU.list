
Tx_MPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     000000a0  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  080200a0  08020707  00010707  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  080200a0  08020707  00010707  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  080200a0  080200a0  000100a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000030  08020684  08020684  00010684  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  080200a0  08020707  00010707  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  080200a0  080200a0  00010707  2**0
                  CONTENTS
  7 .hash         00000000  080200a0  08020707  00010707  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         000005e4  080200a0  080200a0  000100a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       00000053  080206b4  080206b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  20020030  20020030  00010707  2**0
                  CONTENTS
 11 .data_run     00000000  20020030  20020030  00010707  2**0
                  CONTENTS
 12 .bss          00000838  20020030  20020030  00020030  2**4
                  ALLOC
 13 .heap         00000080  20020868  20020868  00020030  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00010707  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00010737  2**0
                  CONTENTS, READONLY
 16 .debug_line   0002a780  00000000  00000000  0001077a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000074  00000000  00000000  0003aefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   00009af5  00000000  00000000  0003af6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00002146  00000000  00000000  00044a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00000a10  00000000  00000000  00046bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00014712  00000000  00000000  000475c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000007e6  00000000  00000000  0005bcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0000c84e  00000000  00000000  0005c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000036c  00000000  00000000  00068d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000495 	.word	0x00000495
 802001c:	0000016f 	.word	0x0000016f
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	000003c9 	.word	0x000003c9
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00000707 	.word	0x00000707
 802003c:	000008e8 	.word	0x000008e8
	...
 8020080:	00001f41 	.word	0x00001f41
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	00000015 	.word	0x00000015
 8020090:	2d453705 	.word	0x2d453705
 8020094:	0d06004d 	.word	0x0d06004d
 8020098:	02094d07 	.word	0x02094d07
 802009c:	011b080a 	.word	0x011b080a

Disassembly of section .text:

080200a0 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 80200a0:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 80200a4:	4b2e      	ldr	r3, [pc, #184]	; (8020160 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 80200a6:	4c2f      	ldr	r4, [pc, #188]	; (8020164 <memory_set_done+0x6>)
    mov     r5,r0
 80200a8:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 80200aa:	482f      	ldr	r0, [pc, #188]	; (8020168 <memory_set_done+0xa>)
    sub     r0,r0,r3
 80200ac:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 80200b0:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 80200b2:	492e      	ldr	r1, [pc, #184]	; (802016c <memory_set_done+0xe>)
    sub     r1,r1, r4
 80200b4:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 80200b8:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 80200ba:	4a2d      	ldr	r2, [pc, #180]	; (8020170 <memory_set_done+0x12>)
    sub     r2,r2,r4
 80200bc:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 80200c0:	444a      	add	r2, r9

080200c2 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 80200c2:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 80200c4:	d011      	beq.n	80200ea <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 80200c6:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 80200c8:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 80200ca:	d008      	beq.n	80200de <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 80200cc:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 80200ce:	db03      	blt.n	80200d8 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 80200d0:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 80200d4:	444e      	add	r6, r9
    b       address_built   // Finished building address
 80200d6:	e002      	b.n	80200de <address_built>

080200d8 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 80200d8:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 80200dc:	442e      	add	r6, r5

080200de <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 80200de:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 80200e0:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 80200e4:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 80200e8:	e7eb      	b.n	80200c2 <new_got_setup>

080200ea <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 80200ea:	4822      	ldr	r0, [pc, #136]	; (8020174 <memory_set_done+0x16>)
    sub     r0,r0,r3
 80200ec:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 80200f0:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 80200f2:	4921      	ldr	r1, [pc, #132]	; (8020178 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 80200f4:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 80200f8:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 80200fa:	4a20      	ldr	r2, [pc, #128]	; (802017c <memory_set_done+0x1e>)
    sub     r2,r2,r4
 80200fc:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8020100:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8020102:	f000 f815 	bl	8020130 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8020106:	481e      	ldr	r0, [pc, #120]	; (8020180 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8020108:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802010c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802010e:	491d      	ldr	r1, [pc, #116]	; (8020184 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8020110:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020114:	4449      	add	r1, r9
    mov     r2, #0
 8020116:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802011a:	f000 f81a 	bl	8020152 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802011e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 8020122:	4770      	bx	lr
 8020124:	f3af 8000 	nop.w
 8020128:	f3af 8000 	nop.w
 802012c:	f3af 8000 	nop.w

08020130 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 8020130:	4288      	cmp	r0, r1
    beq     memory_copy_done
 8020132:	d00d      	beq.n	8020150 <memory_copy_done>
    cmp     r2, r1
 8020134:	428a      	cmp	r2, r1
    beq     memory_copy_done
 8020136:	d00b      	beq.n	8020150 <memory_copy_done>
    sub     r2, r2, r1
 8020138:	eba2 0201 	sub.w	r2, r2, r1

0802013c <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 802013c:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 802013e:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 8020142:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 8020144:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 8020148:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 802014c:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 802014e:	d1f5      	bne.n	802013c <memory_copy_loop>

08020150 <memory_copy_done>:
memory_copy_done:
    bx      lr
 8020150:	4770      	bx	lr

08020152 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 8020152:	4288      	cmp	r0, r1
    beq     memory_set_done
 8020154:	d003      	beq.n	802015e <memory_set_done>
    strb    r2, [r0]
 8020156:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 8020158:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 802015c:	e7f9      	b.n	8020152 <crt0_memory_set>

0802015e <memory_set_done>:
memory_set_done:
    bx      lr
 802015e:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 8020160:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 8020164:	20020000 	.word	0x20020000
    ldr     r0, =__got_load_start__
 8020168:	08020684 	.word	0x08020684
    ldr     r1, =__new_got_start__
 802016c:	20020000 	.word	0x20020000
    ldr     r2, =__new_got_end__
 8020170:	20020030 	.word	0x20020030
    ldr     r0, =__data_load_start__
 8020174:	08020708 	.word	0x08020708
    ldr     r1, =__data_start__
 8020178:	20020030 	.word	0x20020030
    ldr     r2, =__data_end__
 802017c:	20020030 	.word	0x20020030
    ldr     r0, =__bss_start__
 8020180:	20020030 	.word	0x20020030
    ldr     r1, =__bss_end__
 8020184:	20020868 	.word	0x20020868

08020188 <MaliciousTimerFunction>:
{
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
}

void MaliciousTimerFunction(void){}
 8020188:	4770      	bx	lr

0802018a <default_module_start>:
{
 802018a:	b530      	push	{r4, r5, lr}
 802018c:	b08b      	sub	sp, #44	; 0x2c
    txm_module_object_allocate((void*)&thread_0, sizeof(TX_THREAD));
 802018e:	4b1c      	ldr	r3, [pc, #112]	; (8020200 <default_module_start+0x76>)
 8020190:	f859 5003 	ldr.w	r5, [r9, r3]
 8020194:	21e8      	movs	r1, #232	; 0xe8
 8020196:	4628      	mov	r0, r5
 8020198:	f000 f96c 	bl	8020474 <_txm_module_object_allocate>
    txm_module_object_allocate((void*)&byte_pool_0, sizeof(TX_BYTE_POOL));
 802019c:	4b19      	ldr	r3, [pc, #100]	; (8020204 <default_module_start+0x7a>)
 802019e:	f859 4003 	ldr.w	r4, [r9, r3]
 80201a2:	2134      	movs	r1, #52	; 0x34
 80201a4:	4620      	mov	r0, r4
 80201a6:	f000 f965 	bl	8020474 <_txm_module_object_allocate>
    tx_byte_pool_create(byte_pool_0, "module byte pool 0", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80201aa:	4b17      	ldr	r3, [pc, #92]	; (8020208 <default_module_start+0x7e>)
 80201ac:	f859 2003 	ldr.w	r2, [r9, r3]
 80201b0:	6820      	ldr	r0, [r4, #0]
 80201b2:	2334      	movs	r3, #52	; 0x34
 80201b4:	9300      	str	r3, [sp, #0]
 80201b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80201ba:	4914      	ldr	r1, [pc, #80]	; (802020c <default_module_start+0x82>)
 80201bc:	4479      	add	r1, pc
 80201be:	f000 f905 	bl	80203cc <_txe_byte_pool_create>
    tx_byte_allocate(byte_pool_0, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80201c2:	2300      	movs	r3, #0
 80201c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80201c8:	a909      	add	r1, sp, #36	; 0x24
 80201ca:	6820      	ldr	r0, [r4, #0]
 80201cc:	f000 f8ec 	bl	80203a8 <_txe_byte_allocate>
    tx_thread_create(thread_0, "module thread 0", thread_0_entry, 0,
 80201d0:	4b0f      	ldr	r3, [pc, #60]	; (8020210 <default_module_start+0x86>)
 80201d2:	f859 2003 	ldr.w	r2, [r9, r3]
 80201d6:	6828      	ldr	r0, [r5, #0]
 80201d8:	23e8      	movs	r3, #232	; 0xe8
 80201da:	9306      	str	r3, [sp, #24]
 80201dc:	2301      	movs	r3, #1
 80201de:	9305      	str	r3, [sp, #20]
 80201e0:	2300      	movs	r3, #0
 80201e2:	9304      	str	r3, [sp, #16]
 80201e4:	2102      	movs	r1, #2
 80201e6:	9103      	str	r1, [sp, #12]
 80201e8:	9102      	str	r1, [sp, #8]
 80201ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80201ee:	9101      	str	r1, [sp, #4]
 80201f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80201f2:	9100      	str	r1, [sp, #0]
 80201f4:	4907      	ldr	r1, [pc, #28]	; (8020214 <default_module_start+0x8a>)
 80201f6:	4479      	add	r1, pc
 80201f8:	f000 f9c4 	bl	8020584 <_txe_thread_create>
}
 80201fc:	b00b      	add	sp, #44	; 0x2c
 80201fe:	bd30      	pop	{r4, r5, pc}
 8020200:	00000014 	.word	0x00000014
 8020204:	00000010 	.word	0x00000010
 8020208:	0000000c 	.word	0x0000000c
 802020c:	000004f4 	.word	0x000004f4
 8020210:	00000020 	.word	0x00000020
 8020214:	000004ce 	.word	0x000004ce

08020218 <Error_Handler>:
{
 8020218:	b508      	push	{r3, lr}
  tx_thread_sleep(TX_WAIT_FOREVER);
 802021a:	f04f 30ff 	mov.w	r0, #4294967295
 802021e:	f000 f9fb 	bl	8020618 <_tx_thread_sleep>
}
 8020222:	bd08      	pop	{r3, pc}

08020224 <thread_0_entry>:
{
 8020224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020226:	b08b      	sub	sp, #44	; 0x2c
    txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 8020228:	2134      	movs	r1, #52	; 0x34
 802022a:	a807      	add	r0, sp, #28
 802022c:	f000 f922 	bl	8020474 <_txm_module_object_allocate>
    tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 8020230:	4d52      	ldr	r5, [pc, #328]	; (802037c <thread_0_entry+0x158>)
 8020232:	4b55      	ldr	r3, [pc, #340]	; (8020388 <thread_0_entry+0x164>)
 8020234:	f859 2003 	ldr.w	r2, [r9, r3]
 8020238:	2334      	movs	r3, #52	; 0x34
 802023a:	9303      	str	r3, [sp, #12]
 802023c:	2600      	movs	r6, #0
 802023e:	9602      	str	r6, [sp, #8]
 8020240:	9501      	str	r5, [sp, #4]
 8020242:	9500      	str	r5, [sp, #0]
 8020244:	462b      	mov	r3, r5
 8020246:	4951      	ldr	r1, [pc, #324]	; (802038c <thread_0_entry+0x168>)
 8020248:	4479      	add	r1, pc
 802024a:	9807      	ldr	r0, [sp, #28]
 802024c:	f000 fa00 	bl	8020650 <_txe_timer_create>
    txm_module_object_allocate((void*)&MaliciousQueue, sizeof(TX_QUEUE));
 8020250:	2144      	movs	r1, #68	; 0x44
 8020252:	a806      	add	r0, sp, #24
 8020254:	f000 f90e 	bl	8020474 <_txm_module_object_allocate>
    tx_byte_allocate(byte_pool_0, (VOID **) &pointer, 16 * sizeof(ULONG), TX_NO_WAIT);
 8020258:	4b4d      	ldr	r3, [pc, #308]	; (8020390 <thread_0_entry+0x16c>)
 802025a:	f859 0003 	ldr.w	r0, [r9, r3]
 802025e:	4633      	mov	r3, r6
 8020260:	2240      	movs	r2, #64	; 0x40
 8020262:	a908      	add	r1, sp, #32
 8020264:	6800      	ldr	r0, [r0, #0]
 8020266:	f000 f89f 	bl	80203a8 <_txe_byte_allocate>
    tx_queue_create(MaliciousQueue, "Malicious Queue",TX_1_ULONG, pointer, 16 * sizeof(ULONG));
 802026a:	2344      	movs	r3, #68	; 0x44
 802026c:	9301      	str	r3, [sp, #4]
 802026e:	2340      	movs	r3, #64	; 0x40
 8020270:	9300      	str	r3, [sp, #0]
 8020272:	9b08      	ldr	r3, [sp, #32]
 8020274:	2201      	movs	r2, #1
 8020276:	4947      	ldr	r1, [pc, #284]	; (8020394 <thread_0_entry+0x170>)
 8020278:	4479      	add	r1, pc
 802027a:	9806      	ldr	r0, [sp, #24]
 802027c:	f000 f950 	bl	8020520 <_txe_queue_create>
    tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020280:	ac05      	add	r4, sp, #20
 8020282:	4622      	mov	r2, r4
 8020284:	4629      	mov	r1, r5
 8020286:	9807      	ldr	r0, [sp, #28]
 8020288:	3008      	adds	r0, #8
 802028a:	f000 f9d3 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 802028e:	4622      	mov	r2, r4
 8020290:	4629      	mov	r1, r5
 8020292:	9807      	ldr	r0, [sp, #28]
 8020294:	3020      	adds	r0, #32
 8020296:	f000 f9cd 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 802029a:	4622      	mov	r2, r4
 802029c:	4629      	mov	r1, r5
 802029e:	9807      	ldr	r0, [sp, #28]
 80202a0:	3038      	adds	r0, #56	; 0x38
 80202a2:	f000 f9c7 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 80202a6:	4622      	mov	r2, r4
 80202a8:	4935      	ldr	r1, [pc, #212]	; (8020380 <thread_0_entry+0x15c>)
 80202aa:	9807      	ldr	r0, [sp, #28]
 80202ac:	3054      	adds	r0, #84	; 0x54
 80202ae:	f000 f9c1 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0x4, &time_slice);
 80202b2:	4622      	mov	r2, r4
 80202b4:	2104      	movs	r1, #4
 80202b6:	9807      	ldr	r0, [sp, #28]
 80202b8:	3038      	adds	r0, #56	; 0x38
 80202ba:	f000 f9bb 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80202be:	4622      	mov	r2, r4
 80202c0:	4629      	mov	r1, r5
 80202c2:	9807      	ldr	r0, [sp, #28]
 80202c4:	3014      	adds	r0, #20
 80202c6:	f000 f9b5 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80202ca:	4622      	mov	r2, r4
 80202cc:	4629      	mov	r1, r5
 80202ce:	9807      	ldr	r0, [sp, #28]
 80202d0:	302c      	adds	r0, #44	; 0x2c
 80202d2:	f000 f9af 	bl	8020634 <_txe_thread_time_slice_change>
    tx_thread_time_slice_change(ForgedThread, 0x1, &time_slice);
 80202d6:	4622      	mov	r2, r4
 80202d8:	2101      	movs	r1, #1
 80202da:	9807      	ldr	r0, [sp, #28]
 80202dc:	3044      	adds	r0, #68	; 0x44
 80202de:	f000 f9a9 	bl	8020634 <_txe_thread_time_slice_change>
    ULONG value = 0;
 80202e2:	9604      	str	r6, [sp, #16]
    tx_queue_send(MaliciousQueue, &value, 0);
 80202e4:	4632      	mov	r2, r6
 80202e6:	a904      	add	r1, sp, #16
 80202e8:	9806      	ldr	r0, [sp, #24]
 80202ea:	f000 f93d 	bl	8020568 <_txe_queue_send>
    privileged_read_test = MaliciousTimer->tx_timer_id;
 80202ee:	9b07      	ldr	r3, [sp, #28]
 80202f0:	681a      	ldr	r2, [r3, #0]
 80202f2:	4b29      	ldr	r3, [pc, #164]	; (8020398 <thread_0_entry+0x174>)
 80202f4:	f859 3003 	ldr.w	r3, [r9, r3]
 80202f8:	601a      	str	r2, [r3, #0]
  status = txm_module_object_pointer_get(TXM_QUEUE_OBJECT, "Resident Queue", (VOID **)&resident_queue);
 80202fa:	4b28      	ldr	r3, [pc, #160]	; (802039c <thread_0_entry+0x178>)
 80202fc:	f859 2003 	ldr.w	r2, [r9, r3]
 8020300:	4927      	ldr	r1, [pc, #156]	; (80203a0 <thread_0_entry+0x17c>)
 8020302:	4479      	add	r1, pc
 8020304:	2005      	movs	r0, #5
 8020306:	f000 f8c3 	bl	8020490 <_txm_module_object_pointer_get>
  if(status)
 802030a:	2800      	cmp	r0, #0
 802030c:	d133      	bne.n	8020376 <thread_0_entry+0x152>
  s_msg = WRITING_TO_READWRITE;
 802030e:	2358      	movs	r3, #88	; 0x58
 8020310:	9309      	str	r3, [sp, #36]	; 0x24
  tx_queue_send(resident_queue, &s_msg, TX_NO_WAIT);
 8020312:	4b22      	ldr	r3, [pc, #136]	; (802039c <thread_0_entry+0x178>)
 8020314:	f859 5003 	ldr.w	r5, [r9, r3]
 8020318:	2200      	movs	r2, #0
 802031a:	ac09      	add	r4, sp, #36	; 0x24
 802031c:	4621      	mov	r1, r4
 802031e:	6828      	ldr	r0, [r5, #0]
 8020320:	f000 f922 	bl	8020568 <_txe_queue_send>
  *(ULONG *)READWRITE_REGION = 0xABABABAB;
 8020324:	4e17      	ldr	r6, [pc, #92]	; (8020384 <thread_0_entry+0x160>)
 8020326:	f04f 37ab 	mov.w	r7, #2880154539	; 0xabababab
 802032a:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 802032e:	200a      	movs	r0, #10
 8020330:	f000 f972 	bl	8020618 <_tx_thread_sleep>
  s_msg = READING_FROM_READWRITE;
 8020334:	2342      	movs	r3, #66	; 0x42
 8020336:	9309      	str	r3, [sp, #36]	; 0x24
  tx_queue_send(resident_queue, &s_msg, TX_NO_WAIT);
 8020338:	2200      	movs	r2, #0
 802033a:	4621      	mov	r1, r4
 802033c:	6828      	ldr	r0, [r5, #0]
 802033e:	f000 f913 	bl	8020568 <_txe_queue_send>
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020342:	200a      	movs	r0, #10
 8020344:	f000 f968 	bl	8020618 <_tx_thread_sleep>
  s_msg = READING_FROM_READONLY;
 8020348:	2337      	movs	r3, #55	; 0x37
 802034a:	9309      	str	r3, [sp, #36]	; 0x24
  tx_queue_send(resident_queue, &s_msg, TX_NO_WAIT);
 802034c:	2200      	movs	r2, #0
 802034e:	4621      	mov	r1, r4
 8020350:	6828      	ldr	r0, [r5, #0]
 8020352:	f000 f909 	bl	8020568 <_txe_queue_send>
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020356:	200a      	movs	r0, #10
 8020358:	f000 f95e 	bl	8020618 <_tx_thread_sleep>
  s_msg = WRITING_TO_READONLY;
 802035c:	234d      	movs	r3, #77	; 0x4d
 802035e:	9309      	str	r3, [sp, #36]	; 0x24
  tx_queue_send(resident_queue, &s_msg, TX_NO_WAIT);
 8020360:	2200      	movs	r2, #0
 8020362:	4621      	mov	r1, r4
 8020364:	6828      	ldr	r0, [r5, #0]
 8020366:	f000 f8ff 	bl	8020568 <_txe_queue_send>
  *(ULONG *)READONLY_REGION = 0xABABABAB;
 802036a:	6037      	str	r7, [r6, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 802036c:	200a      	movs	r0, #10
 802036e:	f000 f953 	bl	8020618 <_tx_thread_sleep>
}
 8020372:	b00b      	add	sp, #44	; 0x2c
 8020374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8020376:	f7ff ff4f 	bl	8020218 <Error_Handler>
 802037a:	e7c8      	b.n	802030e <thread_0_entry+0xea>
 802037c:	54485244 	.word	0x54485244
 8020380:	e000ed94 	.word	0xe000ed94
 8020384:	20010000 	.word	0x20010000
 8020388:	00000000 	.word	0x00000000
 802038c:	0000048c 	.word	0x0000048c
 8020390:	00000010 	.word	0x00000010
 8020394:	0000046c 	.word	0x0000046c
 8020398:	00000018 	.word	0x00000018
 802039c:	0000001c 	.word	0x0000001c
 80203a0:	000003f2 	.word	0x000003f2

080203a4 <MainThread_Entry>:

void MainThread_Entry(ULONG thread_input){}
 80203a4:	4770      	bx	lr
 80203a6:	bf00      	nop

080203a8 <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 80203a8:	b510      	push	{r4, lr}
 80203aa:	b082      	sub	sp, #8

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 80203ac:	9200      	str	r2, [sp, #0]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 80203ae:	9301      	str	r3, [sp, #4]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 80203b0:	4b05      	ldr	r3, [pc, #20]	; (80203c8 <_txe_byte_allocate+0x20>)
 80203b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80203b6:	681c      	ldr	r4, [r3, #0]
 80203b8:	466b      	mov	r3, sp
 80203ba:	460a      	mov	r2, r1
 80203bc:	4601      	mov	r1, r0
 80203be:	2009      	movs	r0, #9
 80203c0:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 80203c2:	b002      	add	sp, #8
 80203c4:	bd10      	pop	{r4, pc}
 80203c6:	bf00      	nop
 80203c8:	00000004 	.word	0x00000004

080203cc <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80203cc:	b510      	push	{r4, lr}
 80203ce:	b084      	sub	sp, #16

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 80203d0:	9201      	str	r2, [sp, #4]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 80203d2:	9302      	str	r3, [sp, #8]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 80203d4:	9b06      	ldr	r3, [sp, #24]
 80203d6:	9303      	str	r3, [sp, #12]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80203d8:	4b05      	ldr	r3, [pc, #20]	; (80203f0 <_txe_byte_pool_create+0x24>)
 80203da:	f859 3003 	ldr.w	r3, [r9, r3]
 80203de:	681c      	ldr	r4, [r3, #0]
 80203e0:	ab01      	add	r3, sp, #4
 80203e2:	460a      	mov	r2, r1
 80203e4:	4601      	mov	r1, r0
 80203e6:	200a      	movs	r0, #10
 80203e8:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 80203ea:	b004      	add	sp, #16
 80203ec:	bd10      	pop	{r4, pc}
 80203ee:	bf00      	nop
 80203f0:	00000004 	.word	0x00000004

080203f4 <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 80203f4:	b530      	push	{r4, r5, lr}
 80203f6:	b08f      	sub	sp, #60	; 0x3c

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 80203f8:	4b1d      	ldr	r3, [pc, #116]	; (8020470 <_txm_module_callback_request_thread_entry+0x7c>)
 80203fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020402:	f04f 32ff 	mov.w	r2, #4294967295
 8020406:	a901      	add	r1, sp, #4
 8020408:	4628      	mov	r0, r5
 802040a:	f000 f89f 	bl	802054c <_txe_queue_receive>

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 802040e:	2800      	cmp	r0, #0
 8020410:	d12b      	bne.n	802046a <_txm_module_callback_request_thread_entry+0x76>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020412:	9c02      	ldr	r4, [sp, #8]

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020414:	e002      	b.n	802041c <_txm_module_callback_request_thread_entry+0x28>

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020416:	9804      	ldr	r0, [sp, #16]
 8020418:	9b03      	ldr	r3, [sp, #12]
 802041a:	4798      	blx	r3
        while (activation_count)
 802041c:	2c00      	cmp	r4, #0
 802041e:	d0f0      	beq.n	8020402 <_txm_module_callback_request_thread_entry+0xe>
            activation_count--;
 8020420:	3c01      	subs	r4, #1
            switch (callback_message.txm_module_callback_message_type)
 8020422:	9b01      	ldr	r3, [sp, #4]
 8020424:	2b04      	cmp	r3, #4
 8020426:	d8f9      	bhi.n	802041c <_txm_module_callback_request_thread_entry+0x28>
 8020428:	a202      	add	r2, pc, #8	; (adr r2, 8020434 <_txm_module_callback_request_thread_entry+0x40>)
 802042a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802042e:	441a      	add	r2, r3
 8020430:	4710      	bx	r2
 8020432:	bf00      	nop
 8020434:	ffffffe3 	.word	0xffffffe3
 8020438:	00000015 	.word	0x00000015
 802043c:	0000001d 	.word	0x0000001d
 8020440:	00000025 	.word	0x00000025
 8020444:	0000002d 	.word	0x0000002d

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 8020448:	9804      	ldr	r0, [sp, #16]
 802044a:	9b03      	ldr	r3, [sp, #12]
 802044c:	4798      	blx	r3

                break;
 802044e:	e7e5      	b.n	802041c <_txm_module_callback_request_thread_entry+0x28>

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 8020450:	9804      	ldr	r0, [sp, #16]
 8020452:	9b03      	ldr	r3, [sp, #12]
 8020454:	4798      	blx	r3

                break;
 8020456:	e7e1      	b.n	802041c <_txm_module_callback_request_thread_entry+0x28>

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 8020458:	9804      	ldr	r0, [sp, #16]
 802045a:	9b03      	ldr	r3, [sp, #12]
 802045c:	4798      	blx	r3

                break;
 802045e:	e7dd      	b.n	802041c <_txm_module_callback_request_thread_entry+0x28>

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 8020460:	9905      	ldr	r1, [sp, #20]
 8020462:	9804      	ldr	r0, [sp, #16]
 8020464:	9b03      	ldr	r3, [sp, #12]
 8020466:	4798      	blx	r3

                break;
 8020468:	e7d8      	b.n	802041c <_txm_module_callback_request_thread_entry+0x28>

                break;
            }
        }
    }
}
 802046a:	b00f      	add	sp, #60	; 0x3c
 802046c:	bd30      	pop	{r4, r5, pc}
 802046e:	bf00      	nop
 8020470:	00000008 	.word	0x00000008

08020474 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 8020474:	b510      	push	{r4, lr}
 8020476:	460a      	mov	r2, r1

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 8020478:	4b04      	ldr	r3, [pc, #16]	; (802048c <_txm_module_object_allocate+0x18>)
 802047a:	f859 3003 	ldr.w	r3, [r9, r3]
 802047e:	681c      	ldr	r4, [r3, #0]
 8020480:	2300      	movs	r3, #0
 8020482:	4601      	mov	r1, r0
 8020484:	205f      	movs	r0, #95	; 0x5f
 8020486:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 8020488:	bd10      	pop	{r4, pc}
 802048a:	bf00      	nop
 802048c:	00000004 	.word	0x00000004

08020490 <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020490:	b510      	push	{r4, lr}
 8020492:	4613      	mov	r3, r2

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020494:	4a04      	ldr	r2, [pc, #16]	; (80204a8 <_txm_module_object_pointer_get+0x18>)
 8020496:	f859 2002 	ldr.w	r2, [r9, r2]
 802049a:	6814      	ldr	r4, [r2, #0]
 802049c:	460a      	mov	r2, r1
 802049e:	4601      	mov	r1, r0
 80204a0:	205d      	movs	r0, #93	; 0x5d
 80204a2:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 80204a4:	bd10      	pop	{r4, pc}
 80204a6:	bf00      	nop
 80204a8:	00000004 	.word	0x00000004

080204ac <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 80204ac:	b538      	push	{r3, r4, r5, lr}
 80204ae:	4605      	mov	r5, r0
 80204b0:	460c      	mov	r4, r1
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 80204b2:	69cb      	ldr	r3, [r1, #28]
 80204b4:	b983      	cbnz	r3, 80204d8 <_txm_module_thread_shell_entry+0x2c>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 80204b6:	69a3      	ldr	r3, [r4, #24]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80204b8:	b113      	cbz	r3, 80204c0 <_txm_module_thread_shell_entry+0x14>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80204ba:	2100      	movs	r1, #0
 80204bc:	4628      	mov	r0, r5
 80204be:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 80204c0:	6923      	ldr	r3, [r4, #16]
 80204c2:	6960      	ldr	r0, [r4, #20]
 80204c4:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 80204c6:	69a3      	ldr	r3, [r4, #24]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80204c8:	b113      	cbz	r3, 80204d0 <_txm_module_thread_shell_entry+0x24>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80204ca:	2101      	movs	r1, #1
 80204cc:	4628      	mov	r0, r5
 80204ce:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 80204d0:	4628      	mov	r0, r5
 80204d2:	f000 f817 	bl	8020504 <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80204d6:	bd38      	pop	{r3, r4, r5, pc}
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 80204d8:	68c8      	ldr	r0, [r1, #12]
 80204da:	f7ff fde1 	bl	80200a0 <_gcc_setup>
        _txm_module_entry_info =  thread_info;
 80204de:	4b07      	ldr	r3, [pc, #28]	; (80204fc <_txm_module_thread_shell_entry+0x50>)
 80204e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80204e4:	601c      	str	r4, [r3, #0]
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 80204e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80204e8:	4a05      	ldr	r2, [pc, #20]	; (8020500 <_txm_module_thread_shell_entry+0x54>)
 80204ea:	f859 2002 	ldr.w	r2, [r9, r2]
 80204ee:	6013      	str	r3, [r2, #0]
        while (!_txm_module_kernel_call_dispatcher)
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	d0fd      	beq.n	80204f0 <_txm_module_thread_shell_entry+0x44>
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 80204f4:	6a20      	ldr	r0, [r4, #32]
 80204f6:	f000 f881 	bl	80205fc <_txe_thread_resume>
 80204fa:	e7dc      	b.n	80204b6 <_txm_module_thread_shell_entry+0xa>
 80204fc:	00000008 	.word	0x00000008
 8020500:	00000004 	.word	0x00000004

08020504 <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020504:	b510      	push	{r4, lr}
 8020506:	4601      	mov	r1, r0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020508:	4b04      	ldr	r3, [pc, #16]	; (802051c <_txm_module_thread_system_suspend+0x18>)
 802050a:	f859 3003 	ldr.w	r3, [r9, r3]
 802050e:	681c      	ldr	r4, [r3, #0]
 8020510:	2300      	movs	r3, #0
 8020512:	461a      	mov	r2, r3
 8020514:	205c      	movs	r0, #92	; 0x5c
 8020516:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 8020518:	bd10      	pop	{r4, pc}
 802051a:	bf00      	nop
 802051c:	00000004 	.word	0x00000004

08020520 <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020520:	b510      	push	{r4, lr}
 8020522:	b084      	sub	sp, #16

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020524:	9200      	str	r2, [sp, #0]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020526:	9301      	str	r3, [sp, #4]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020528:	9b06      	ldr	r3, [sp, #24]
 802052a:	9302      	str	r3, [sp, #8]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 802052c:	9b07      	ldr	r3, [sp, #28]
 802052e:	9303      	str	r3, [sp, #12]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020530:	4b05      	ldr	r3, [pc, #20]	; (8020548 <_txe_queue_create+0x28>)
 8020532:	f859 3003 	ldr.w	r3, [r9, r3]
 8020536:	681c      	ldr	r4, [r3, #0]
 8020538:	466b      	mov	r3, sp
 802053a:	460a      	mov	r2, r1
 802053c:	4601      	mov	r1, r0
 802053e:	2022      	movs	r0, #34	; 0x22
 8020540:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 8020542:	b004      	add	sp, #16
 8020544:	bd10      	pop	{r4, pc}
 8020546:	bf00      	nop
 8020548:	00000004 	.word	0x00000004

0802054c <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 802054c:	b510      	push	{r4, lr}
 802054e:	4613      	mov	r3, r2

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8020550:	4a04      	ldr	r2, [pc, #16]	; (8020564 <_txe_queue_receive+0x18>)
 8020552:	f859 2002 	ldr.w	r2, [r9, r2]
 8020556:	6814      	ldr	r4, [r2, #0]
 8020558:	460a      	mov	r2, r1
 802055a:	4601      	mov	r1, r0
 802055c:	202a      	movs	r0, #42	; 0x2a
 802055e:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 8020560:	bd10      	pop	{r4, pc}
 8020562:	bf00      	nop
 8020564:	00000004 	.word	0x00000004

08020568 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020568:	b510      	push	{r4, lr}
 802056a:	4613      	mov	r3, r2

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 802056c:	4a04      	ldr	r2, [pc, #16]	; (8020580 <_txe_queue_send+0x18>)
 802056e:	f859 2002 	ldr.w	r2, [r9, r2]
 8020572:	6814      	ldr	r4, [r2, #0]
 8020574:	460a      	mov	r2, r1
 8020576:	4601      	mov	r1, r0
 8020578:	202b      	movs	r0, #43	; 0x2b
 802057a:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 802057c:	bd10      	pop	{r4, pc}
 802057e:	bf00      	nop
 8020580:	00000004 	.word	0x00000004

08020584 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8020584:	b510      	push	{r4, lr}
 8020586:	b08a      	sub	sp, #40	; 0x28

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 8020588:	9201      	str	r2, [sp, #4]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 802058a:	9302      	str	r3, [sp, #8]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 802058c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802058e:	9303      	str	r3, [sp, #12]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 8020590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020592:	9304      	str	r3, [sp, #16]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 8020594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020596:	9305      	str	r3, [sp, #20]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 8020598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802059a:	9306      	str	r3, [sp, #24]
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 802059c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802059e:	9307      	str	r3, [sp, #28]
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80205a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80205a2:	9308      	str	r3, [sp, #32]
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80205a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80205a6:	9309      	str	r3, [sp, #36]	; 0x24

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80205a8:	4b05      	ldr	r3, [pc, #20]	; (80205c0 <_txe_thread_create+0x3c>)
 80205aa:	f859 3003 	ldr.w	r3, [r9, r3]
 80205ae:	681c      	ldr	r4, [r3, #0]
 80205b0:	ab01      	add	r3, sp, #4
 80205b2:	460a      	mov	r2, r1
 80205b4:	4601      	mov	r1, r0
 80205b6:	2037      	movs	r0, #55	; 0x37
 80205b8:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 80205ba:	b00a      	add	sp, #40	; 0x28
 80205bc:	bd10      	pop	{r4, pc}
 80205be:	bf00      	nop
 80205c0:	00000004 	.word	0x00000004

080205c4 <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 80205c4:	b510      	push	{r4, lr}
 80205c6:	460a      	mov	r2, r1

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 80205c8:	4b04      	ldr	r3, [pc, #16]	; (80205dc <_txe_thread_entry_exit_notify+0x18>)
 80205ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80205ce:	681c      	ldr	r4, [r3, #0]
 80205d0:	2300      	movs	r3, #0
 80205d2:	4601      	mov	r1, r0
 80205d4:	2039      	movs	r0, #57	; 0x39
 80205d6:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 80205d8:	bd10      	pop	{r4, pc}
 80205da:	bf00      	nop
 80205dc:	00000004 	.word	0x00000004

080205e0 <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 80205e0:	b510      	push	{r4, lr}
 80205e2:	4601      	mov	r1, r0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80205e4:	4b04      	ldr	r3, [pc, #16]	; (80205f8 <_txe_thread_reset+0x18>)
 80205e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80205ea:	681c      	ldr	r4, [r3, #0]
 80205ec:	2300      	movs	r3, #0
 80205ee:	461a      	mov	r2, r3
 80205f0:	2041      	movs	r0, #65	; 0x41
 80205f2:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 80205f4:	bd10      	pop	{r4, pc}
 80205f6:	bf00      	nop
 80205f8:	00000004 	.word	0x00000004

080205fc <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80205fc:	b510      	push	{r4, lr}
 80205fe:	4601      	mov	r1, r0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020600:	4b04      	ldr	r3, [pc, #16]	; (8020614 <_txe_thread_resume+0x18>)
 8020602:	f859 3003 	ldr.w	r3, [r9, r3]
 8020606:	681c      	ldr	r4, [r3, #0]
 8020608:	2300      	movs	r3, #0
 802060a:	461a      	mov	r2, r3
 802060c:	2042      	movs	r0, #66	; 0x42
 802060e:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 8020610:	bd10      	pop	{r4, pc}
 8020612:	bf00      	nop
 8020614:	00000004 	.word	0x00000004

08020618 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8020618:	b510      	push	{r4, lr}
 802061a:	4601      	mov	r1, r0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 802061c:	4b04      	ldr	r3, [pc, #16]	; (8020630 <_tx_thread_sleep+0x18>)
 802061e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020622:	681c      	ldr	r4, [r3, #0]
 8020624:	2300      	movs	r3, #0
 8020626:	461a      	mov	r2, r3
 8020628:	2043      	movs	r0, #67	; 0x43
 802062a:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 802062c:	bd10      	pop	{r4, pc}
 802062e:	bf00      	nop
 8020630:	00000004 	.word	0x00000004

08020634 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8020634:	b510      	push	{r4, lr}
 8020636:	4613      	mov	r3, r2

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 8020638:	4a04      	ldr	r2, [pc, #16]	; (802064c <_txe_thread_time_slice_change+0x18>)
 802063a:	f859 2002 	ldr.w	r2, [r9, r2]
 802063e:	6814      	ldr	r4, [r2, #0]
 8020640:	460a      	mov	r2, r1
 8020642:	4601      	mov	r1, r0
 8020644:	2047      	movs	r0, #71	; 0x47
 8020646:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 8020648:	bd10      	pop	{r4, pc}
 802064a:	bf00      	nop
 802064c:	00000004 	.word	0x00000004

08020650 <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8020650:	b510      	push	{r4, lr}
 8020652:	b086      	sub	sp, #24

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 8020654:	9200      	str	r2, [sp, #0]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 8020656:	9301      	str	r3, [sp, #4]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 8020658:	9b08      	ldr	r3, [sp, #32]
 802065a:	9302      	str	r3, [sp, #8]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 802065c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802065e:	9303      	str	r3, [sp, #12]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 8020660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020662:	9304      	str	r3, [sp, #16]
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 8020664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020666:	9305      	str	r3, [sp, #20]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020668:	4b05      	ldr	r3, [pc, #20]	; (8020680 <_txe_timer_create+0x30>)
 802066a:	f859 3003 	ldr.w	r3, [r9, r3]
 802066e:	681c      	ldr	r4, [r3, #0]
 8020670:	466b      	mov	r3, sp
 8020672:	460a      	mov	r2, r1
 8020674:	4601      	mov	r1, r0
 8020676:	204d      	movs	r0, #77	; 0x4d
 8020678:	47a0      	blx	r4

    /* Return value to the caller.  */
    return(return_value);
}
 802067a:	b006      	add	sp, #24
 802067c:	bd10      	pop	{r4, pc}
 802067e:	bf00      	nop
 8020680:	00000004 	.word	0x00000004
