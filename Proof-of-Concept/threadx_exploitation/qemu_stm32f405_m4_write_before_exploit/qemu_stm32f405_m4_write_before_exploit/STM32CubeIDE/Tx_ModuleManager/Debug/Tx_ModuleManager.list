
Tx_ModuleManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a7c  080001c0  080001c0  000101c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08015c3c  08015c3c  00025c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016020  08016020  00030078  2**0
                  CONTENTS
  4 .ARM          00000000  08016020  08016020  00030078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016020  08016020  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016020  08016020  00026020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016024  08016024  00026024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08016028  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f780  20000078  080160a0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f7f8  080160a0  0003f7f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY
 13 .debug_line   00070d18  00000000  00000000  000300e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000340  00000000  00000000  000a0e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00062e65  00000000  00000000  000a1141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000122b8  00000000  00000000  00103fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002998  00000000  00000000  00116260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4330  00000000  00000000  00118bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001be5  00000000  00000000  0020cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00038e44  00000000  00000000  0020eb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007594  00000000  00000000  00247954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015c24 	.word	0x08015c24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	08015c24 	.word	0x08015c24

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4918      	ldr	r1, [pc, #96]	; (8000268 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4817      	ldr	r0, [pc, #92]	; (800026c <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4916      	ldr	r1, [pc, #88]	; (8000268 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4816      	ldr	r0, [pc, #88]	; (8000270 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4914      	ldr	r1, [pc, #80]	; (8000274 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490e      	ldr	r1, [pc, #56]	; (8000278 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800024c:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800024e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000252:	4770      	bx	lr

08000254 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000254:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000256:	f000 f9f3 	bl	8000640 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800025e:	4770      	bx	lr

08000260 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000260:	f7ff bffe 	b.w	8000260 <__tx_NMIHandler>

08000264 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000268:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800026c:	2000ef48 	.word	0x2000ef48
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000270:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000274:	0019a27f 	.word	0x0019a27f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000278:	40ff0000 	.word	0x40ff0000
 800027c:	00000000 	.word	0x00000000

08000280 <_tx_thread_interrupt_control>:
#ifdef TX_PORT_USE_BASEPRI
    MRS     r1, BASEPRI                         // Pickup current interrupt posture
    MSR     BASEPRI, r0                         // Apply the new interrupt posture
    MOV     r0, r1                              // Transfer old to return register
#else
    MRS     r1, PRIMASK                         // Pickup current interrupt lockout
 8000280:	f3ef 8110 	mrs	r1, PRIMASK
    MSR     PRIMASK, r0                         // Apply the new interrupt lockout
 8000284:	f380 8810 	msr	PRIMASK, r0
    MOV     r0, r1                              // Transfer old to return register
 8000288:	4608      	mov	r0, r1
#endif
    BX      lr                                  // Return to caller
 800028a:	4770      	bx	lr
	...

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4ac5      	ldr	r2, [pc, #788]	; (80005bc <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable memory fault registers.  */
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 80002b4:	48c2      	ldr	r0, [pc, #776]	; (80005c0 <tx_thread_fpu_disable+0x6>)
    LDR     r1, =0x70000                            // Enable Usage, Bus, and MemManage faults
 80002b6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    STR     r1, [r0]                                //
 80002ba:	6001      	str	r1, [r0, #0]

    /* Enable interrupts */
    CPSIE   i
 80002bc:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002c6:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002ca:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002ce:	f3bf 8f6f 	isb	sy

080002d2 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002d2:	e7fe      	b.n	80002d2 <__tx_wait_here>

080002d4 <BusFault_Handler>:
    .thumb_func
BusFault_Handler:
    .thumb_func
UsageFault_Handler:

    CPSID   i                                       // Disable interrupts
 80002d4:	b672      	cpsid	i

    /* Now pickup and store all the fault related information.  */

    LDR     r12,=_txm_module_manager_memory_fault_info  // Pickup fault info struct
 80002d6:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 80005c4 <tx_thread_fpu_disable+0xa>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002da:	48bb      	ldr	r0, [pc, #748]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80002dc:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #0]                           // Save current thread pointer in fault info structure
 80002de:	f8cc 1000 	str.w	r1, [ip]
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 80002e2:	48b7      	ldr	r0, [pc, #732]	; (80005c0 <tx_thread_fpu_disable+0x6>)
    LDR     r1, [r0]                                // Pickup SHCSR
 80002e4:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #8]                           // Save SHCSR
 80002e6:	f8cc 1008 	str.w	r1, [ip, #8]
    LDR     r0, =0xE000ED28                         // Build CFSR address
 80002ea:	48b8      	ldr	r0, [pc, #736]	; (80005cc <tx_thread_fpu_disable+0x12>)
    LDR     r1, [r0]                                // Pickup CFSR
 80002ec:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #12]                          // Save CFSR
 80002ee:	f8cc 100c 	str.w	r1, [ip, #12]
    LDR     r0, =0xE000ED34                         // Build MMFAR address
 80002f2:	48b7      	ldr	r0, [pc, #732]	; (80005d0 <tx_thread_fpu_disable+0x16>)
    LDR     r1, [r0]                                // Pickup MMFAR
 80002f4:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #16]                          // Save MMFAR
 80002f6:	f8cc 1010 	str.w	r1, [ip, #16]
    LDR     r0, =0xE000ED38                         // Build BFAR address
 80002fa:	48b6      	ldr	r0, [pc, #728]	; (80005d4 <tx_thread_fpu_disable+0x1a>)
    LDR     r1, [r0]                                // Pickup BFAR
 80002fc:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #20]                          // Save BFAR
 80002fe:	f8cc 1014 	str.w	r1, [ip, #20]
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000302:	f3ef 8014 	mrs	r0, CONTROL
    STR     r0, [r12, #24]                          // Save CONTROL
 8000306:	f8cc 0018 	str.w	r0, [ip, #24]
    MRS     r1, PSP                                 // Pickup thread stack pointer
 800030a:	f3ef 8109 	mrs	r1, PSP
    STR     r1, [r12, #28]                          // Save thread stack pointer
 800030e:	f8cc 101c 	str.w	r1, [ip, #28]
    LDR     r0, [r1]                                // Pickup saved r0
 8000312:	6808      	ldr	r0, [r1, #0]
    STR     r0, [r12, #32]                          // Save r0
 8000314:	f8cc 0020 	str.w	r0, [ip, #32]
    LDR     r0, [r1, #4]                            // Pickup saved r1
 8000318:	6848      	ldr	r0, [r1, #4]
    STR     r0, [r12, #36]                          // Save r1
 800031a:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
    STR     r2, [r12, #40]                          // Save r2
 800031e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    STR     r3, [r12, #44]                          // Save r3
 8000322:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    STR     r4, [r12, #48]                          // Save r4
 8000326:	f8cc 4030 	str.w	r4, [ip, #48]	; 0x30
    STR     r5, [r12, #52]                          // Save r5
 800032a:	f8cc 5034 	str.w	r5, [ip, #52]	; 0x34
    STR     r6, [r12, #56]                          // Save r6
 800032e:	f8cc 6038 	str.w	r6, [ip, #56]	; 0x38
    STR     r7, [r12, #60]                          // Save r7
 8000332:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
    STR     r8, [r12, #64]                          // Save r8
 8000336:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
    STR     r9, [r12, #68]                          // Save r9
 800033a:	f8cc 9044 	str.w	r9, [ip, #68]	; 0x44
    STR     r10,[r12, #72]                          // Save r10
 800033e:	f8cc a048 	str.w	sl, [ip, #72]	; 0x48
    STR     r11,[r12, #76]                          // Save r11
 8000342:	f8cc b04c 	str.w	fp, [ip, #76]	; 0x4c
    LDR     r0, [r1, #16]                           // Pickup saved r12
 8000346:	6908      	ldr	r0, [r1, #16]
    STR     r0, [r12, #80]                          // Save r12
 8000348:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
    LDR     r0, [r1, #20]                           // Pickup saved lr
 800034c:	6948      	ldr	r0, [r1, #20]
    STR     r0, [r12, #84]                          // Save lr
 800034e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    LDR     r0, [r1, #24]                           // Pickup instruction address at point of fault
 8000352:	6988      	ldr	r0, [r1, #24]
    STR     r0, [r12, #4]                           // Save point of fault
 8000354:	f8cc 0004 	str.w	r0, [ip, #4]
    LDR     r0, [r1, #28]                           // Pickup xPSR
 8000358:	69c8      	ldr	r0, [r1, #28]
    STR     r0, [r12, #88]                          // Save xPSR
 800035a:	f8cc 0058 	str.w	r0, [ip, #88]	; 0x58

    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800035e:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #1                              // Clear the UNPRIV bit
 8000362:	f020 0001 	bic.w	r0, r0, #1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000366:	f380 8814 	msr	CONTROL, r0

    LDR     r0, =0xE000ED28                         // Build the Memory Management Fault Status Register (MMFSR)
 800036a:	4898      	ldr	r0, [pc, #608]	; (80005cc <tx_thread_fpu_disable+0x12>)
    LDRB    r1, [r0]                                // Pickup the MMFSR, with the following bit definitions:
 800036c:	7801      	ldrb	r1, [r0, #0]
                                                    //     Bit 0 = 1 -> Instruction address violation
                                                    //     Bit 1 = 1 -> Load/store address violation
                                                    //     Bit 7 = 1 -> MMFAR is valid
    STRB    r1, [r0]                                // Clear the MMFSR
 800036e:	7001      	strb	r1, [r0, #0]

#ifdef __ARM_FP
    LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
 8000370:	4899      	ldr	r0, [pc, #612]	; (80005d8 <tx_thread_fpu_disable+0x1e>)
    LDR     r1, [r0]                                // Load FPCCR
 8000372:	6801      	ldr	r1, [r0, #0]
    BIC     r1, r1, #1                              // Clear the lazy preservation active bit
 8000374:	f021 0101 	bic.w	r1, r1, #1
    STR     r1, [r0]                                // Store the value
 8000378:	6001      	str	r1, [r0, #0]
#endif

    BL      _txm_module_manager_memory_fault_handler    // Call memory manager fault handler
 800037a:	f012 fa4d 	bl	8012818 <_txm_module_manager_memory_fault_handler>
    CPSID   i                                       // Disable interrupts
    BL      _tx_execution_thread_exit               // Call the thread exit function
    CPSIE   i                                       // Enable interrupts
#endif

    MOV     r1, #0                                  // Build NULL value
 800037e:	f04f 0100 	mov.w	r1, #0
    LDR     r0, =_tx_thread_current_ptr             // Pickup address of current thread pointer
 8000382:	4891      	ldr	r0, [pc, #580]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    STR     r1, [r0]                                // Clear current thread pointer
 8000384:	6001      	str	r1, [r0, #0]

    // Return from MemManage_Handler exception
    LDR     r0, =0xE000ED04                         // Load ICSR
 8000386:	4895      	ldr	r0, [pc, #596]	; (80005dc <tx_thread_fpu_disable+0x22>)
    LDR     r1, =0x10000000                         // Set PENDSVSET bit
 8000388:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     r1, [r0]                                // Store ICSR
 800038c:	6001      	str	r1, [r0, #0]
    DSB                                             // Wait for memory access to complete
 800038e:	f3bf 8f4f 	dsb	sy
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
    MOV     lr, #0xFFFFFFFD                         // Load exception return code
 8000394:	f06f 0e02 	mvn.w	lr, #2
    BX      lr                                      // Return from exception
 8000398:	4770      	bx	lr

0800039a <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800039a:	488b      	ldr	r0, [pc, #556]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800039c:	4a90      	ldr	r2, [pc, #576]	; (80005e0 <tx_thread_fpu_disable+0x26>)
    MOV     r3, #0                                  // Build NULL value
 800039e:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003a2:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003a4:	b191      	cbz	r1, 80003cc <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003a6:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003a8:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ac:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003b0:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003b4:	d101      	bne.n	80003ba <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003b6:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ba <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ba:	4c8a      	ldr	r4, [pc, #552]	; (80005e4 <tx_thread_fpu_disable+0x2a>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003bc:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003c0:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003c2:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003c6:	b10d      	cbz	r5, 80003cc <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003c8:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003ca:	6023      	str	r3, [r4, #0]

080003cc <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80003cc:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003ce:	6811      	ldr	r1, [r2, #0]
    CBNZ    r1, __tx_ts_restore                     // Yes, schedule it
 80003d0:	b951      	cbnz	r1, 80003e8 <__tx_ts_restore>

080003d2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80003d2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003d4:	6811      	ldr	r1, [r2, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003d6:	b909      	cbnz	r1, 80003dc <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             // Ensure no outstanding memory transactions
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif
    CPSIE   i                                       // Enable interrupts
 80003d8:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80003da:	e7fa      	b.n	80003d2 <__tx_ts_wait>

080003dc <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003dc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003e0:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e4:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

080003e8 <__tx_ts_restore>:
__tx_ts_restore:

    /* A thread is ready, make the current thread the new thread
       and enable interrupts.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003e8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80003ea:	b662      	cpsie	i

    /* Increment the thread run count.  */

    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003ec:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ee:	4c7d      	ldr	r4, [pc, #500]	; (80005e4 <tx_thread_fpu_disable+0x2a>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003f0:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003f2:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003f6:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003f8:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003fa:	f8d1 c008 	ldr.w	ip, [r1, #8]

    MRS     r5, CONTROL                             // Pickup current CONTROL register
 80003fe:	f3ef 8514 	mrs	r5, CONTROL
    LDR     r4, [r1, #0x98]                         // Pickup current user mode flag
 8000402:	f8d1 4098 	ldr.w	r4, [r1, #152]	; 0x98
    BIC     r5, r5, #1                              // Clear the UNPRIV bit
 8000406:	f025 0501 	bic.w	r5, r5, #1
    ORR     r4, r4, r5                              // Build new CONTROL register
 800040a:	ea44 0405 	orr.w	r4, r4, r5
    MSR     CONTROL, r4                             // Setup new CONTROL register
 800040e:	f384 8814 	msr	CONTROL, r4

    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 8000412:	4875      	ldr	r0, [pc, #468]	; (80005e8 <tx_thread_fpu_disable+0x2e>)
    MOV     r3, #0                                  // Build disable value
 8000414:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r0]                                // Disable MPU
 8000418:	6003      	str	r3, [r0, #0]
    LDR     r0, [r1, #0x90]                         // Pickup the module instance pointer
 800041a:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    CBZ     r0, skip_mpu_setup                      // Is this thread owned by a module? No, skip MPU setup
 800041e:	b180      	cbz	r0, 8000442 <skip_mpu_setup>
    LDR     r1, [r0, #0x64]                         // Pickup MPU register[0]
 8000420:	6e41      	ldr	r1, [r0, #100]	; 0x64
    CBZ     r1, skip_mpu_setup                      // Is protection required for this module? No, skip MPU setup
 8000422:	b171      	cbz	r1, 8000442 <skip_mpu_setup>
    LDR     r1, =0xE000ED9C                         // Build address of MPU base register
 8000424:	4971      	ldr	r1, [pc, #452]	; (80005ec <tx_thread_fpu_disable+0x32>)

    // Use alias registers to quickly load MPU
    ADD     r0, r0, #100                            // Build address of MPU register start in thread control block
 8000426:	f100 0064 	add.w	r0, r0, #100	; 0x64
    LDM     r0!,{r2-r9}                             // Load MPU regions 8-11
    STM     r1,{r2-r9}                              // Store MPU regions 8-11
    LDM     r0,{r2-r9}                              // Load MPU regions 12-15
    STM     r1,{r2-r9}                              // Store MPU regions 12-15
#else
    LDM     r0!,{r2-r9}                             // Load first four MPU regions
 800042a:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store first four MPU regions
 800042e:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
    LDM     r0,{r2-r9}                              // Load second four MPU regions
 8000432:	e890 03fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store second four MPU regions
 8000436:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
#endif
    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 800043a:	486b      	ldr	r0, [pc, #428]	; (80005e8 <tx_thread_fpu_disable+0x2e>)
    MOV     r1, #5                                  // Build enable value with background region enabled
 800043c:	f04f 0105 	mov.w	r1, #5
    STR     r1, [r0]                                // Enable MPU
 8000440:	6001      	str	r1, [r0, #0]

08000442 <skip_mpu_setup>:
skip_mpu_setup:
    LDMIA   r12!, {LR}                              // Pickup LR
 8000442:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000446:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800044a:	d101      	bne.n	8000450 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800044c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000450 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000450:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000454:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000458:	4770      	bx	lr

0800045a <SVC_Handler>:
    .thumb_func
SVC_Handler:
    .thumb_func
__tx_SVCallHandler:

    MRS     r0, PSP                                 // Pickup the PSP stack
 800045a:	f3ef 8009 	mrs	r0, PSP
    LDR     r1, [r0, #24]                           // Pickup the point of interrupt
 800045e:	6981      	ldr	r1, [r0, #24]
    LDRB    r2, [r1, #-2]                           // Pickup the SVC parameter
 8000460:	f811 2c02 	ldrb.w	r2, [r1, #-2]

    /* Determine which SVC trap we are processing */

    CMP     r2, #1                                  // Is it the entry into ThreadX?
 8000464:	2a01      	cmp	r2, #1
    BNE     _tx_thread_user_return                  // No, return to user mode
 8000466:	d143      	bne.n	80004f0 <_tx_thread_user_return>

    /* At this point we have an SVC 1, which means we are entering
       the kernel from a module thread with user mode selected. */

    LDR     r2, =_txm_module_priv                   // Load address of where we should have come from
 8000468:	4a61      	ldr	r2, [pc, #388]	; (80005f0 <tx_thread_fpu_disable+0x36>)
    CMP     r1, r2                                  // Did we come from user_mode_entry?
 800046a:	4291      	cmp	r1, r2
    IT      NE                                      // If no (not equal), then...
 800046c:	bf18      	it	ne
    BXNE    lr                                      // return from where we came.
 800046e:	4770      	bxne	lr

    LDR     r3, [r0, #20]                           // This is the saved LR
 8000470:	6943      	ldr	r3, [r0, #20]
    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 8000472:	4955      	ldr	r1, [pc, #340]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 8000474:	680a      	ldr	r2, [r1, #0]
    MOV     r1, #0                                  // Build clear value
 8000476:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r2, #0x98]                         // Clear the current user mode selection for thread
 800047a:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    STR     r3, [r2, #0xA0]                         // Save the original LR in thread control block
 800047e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /* If there is memory protection, use kernel stack */
    LDR     r0, [r2, #0x90]                         // Load the module instance ptr
 8000482:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    LDR     r0, [r0, #0x0C]                         // Load the module property flags
 8000486:	68c0      	ldr	r0, [r0, #12]
    TST     r0, #2                                  // Check if memory protected
 8000488:	f010 0f02 	tst.w	r0, #2
    BEQ     _tx_skip_kernel_stack_enter
 800048c:	d029      	beq.n	80004e2 <_tx_skip_kernel_stack_enter>

    /* Switch to the module thread's kernel stack */
    LDR     r0, [r2, #0xA8]                         // Load the module kernel stack end
 800048e:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
#ifndef TXM_MODULE_KERNEL_STACK_MAINTENANCE_DISABLE
    LDR     r1, [r2, #0xA4]                         // Load the module kernel stack start
 8000492:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    LDR     r3, [r2, #0xAC]                         // Load the module kernel stack size
 8000496:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    STR     r1, [r2, #12]                           // Set stack start
 800049a:	60d1      	str	r1, [r2, #12]
    STR     r0, [r2, #16]                           // Set stack end
 800049c:	6110      	str	r0, [r2, #16]
    STR     r3, [r2, #20]                           // Set stack size
 800049e:	6153      	str	r3, [r2, #20]
#endif

    MRS     r3, PSP                                 // Pickup thread stack pointer
 80004a0:	f3ef 8309 	mrs	r3, PSP
#ifdef __ARM_FP
    TST     lr, #0x10                               // Test for extended module stack
 80004a4:	f01e 0f10 	tst.w	lr, #16
    ITT     EQ
 80004a8:	bf04      	itt	eq
    ORREQ   r3, r3, #1                              // If so, set LSB in thread stack pointer to indicate extended frame
 80004aa:	f043 0301 	orreq.w	r3, r3, #1
    ORREQ   lr, lr, #0x10                           // Set bit, return with standard frame
 80004ae:	f04e 0e10 	orreq.w	lr, lr, #16
#endif
    STR     r3, [r2, #0xB0]                         // Save thread stack pointer
 80004b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
#ifdef __ARM_FP
    BIC     r3, #1                                  // Clear possibly OR'd bit
 80004b6:	f023 0301 	bic.w	r3, r3, #1
#endif

    /* Build kernel stack by copying thread stack two registers at a time */
    ADD     r3, r3, #32                             // Start at bottom of hardware stack
 80004ba:	f103 0320 	add.w	r3, r3, #32
    LDMDB   r3!, {r1-r2}
 80004be:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80004c2:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 80004c6:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80004ca:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 80004ce:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80004d2:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 80004d6:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80004da:	e920 0006 	stmdb	r0!, {r1, r2}

    MSR     PSP, r0                                 // Set kernel stack pointer
 80004de:	f380 8809 	msr	PSP, r0

080004e2 <_tx_skip_kernel_stack_enter>:

_tx_skip_kernel_stack_enter:
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80004e2:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #1                              // Clear the UNPRIV bit
 80004e6:	f020 0001 	bic.w	r0, r0, #1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80004ea:	f380 8814 	msr	CONTROL, r0
    BX      lr                                      // Return to thread
 80004ee:	4770      	bx	lr

080004f0 <_tx_thread_user_return>:

_tx_thread_user_return:
    LDR     r2, =_txm_module_user_mode_exit         // Load address of where we should have come from
 80004f0:	4a40      	ldr	r2, [pc, #256]	; (80005f4 <tx_thread_fpu_disable+0x3a>)
    CMP     r1, r2                                  // Did we come from user_mode_exit?
 80004f2:	4291      	cmp	r1, r2
    IT      NE                                      // If no (not equal), then...
 80004f4:	bf18      	it	ne
    BXNE    lr                                      // return from where we came
 80004f6:	4770      	bxne	lr

    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 80004f8:	4933      	ldr	r1, [pc, #204]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 80004fa:	680a      	ldr	r2, [r1, #0]
    LDR     r1, [r2, #0x9C]                         // Pick up user mode
 80004fc:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
    STR     r1, [r2, #0x98]                         // Set the current user mode selection for thread
 8000500:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98

    /* If there is memory protection, use kernel stack */
    LDR     r0, [r2, #0x90]                         // Load the module instance ptr
 8000504:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    LDR     r0, [r0, #0x0C]                         // Load the module property flags
 8000508:	68c0      	ldr	r0, [r0, #12]
    TST     r0, #2                                  // Check if memory protected
 800050a:	f010 0f02 	tst.w	r0, #2
    BEQ     _tx_skip_kernel_stack_exit
 800050e:	d038      	beq.n	8000582 <_tx_skip_kernel_stack_exit>

#ifndef TXM_MODULE_KERNEL_STACK_MAINTENANCE_DISABLE
    LDR     r0, [r2, #0xB4]                         // Load the module thread stack start
 8000510:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    LDR     r1, [r2, #0xB8]                         // Load the module thread stack end
 8000514:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
    LDR     r3, [r2, #0xBC]                         // Load the module thread stack size
 8000518:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
    STR     r0, [r2, #12]                           // Set stack start
 800051c:	60d0      	str	r0, [r2, #12]
    STR     r1, [r2, #16]                           // Set stack end
 800051e:	6111      	str	r1, [r2, #16]
    STR     r3, [r2, #20]                           // Set stack size
 8000520:	6153      	str	r3, [r2, #20]

#ifdef __ARM_FP
    /* If lazy stacking is pending, check if it can be cleared.
       if(LSPACT && tx_thread_module_stack_start < FPCAR && FPCAR < tx_thread_module_stack_end)
       then clear LSPACT. */
    LDR     r3, =0xE000EF34                         // Address of FPCCR
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <tx_thread_fpu_disable+0x1e>)
    LDR     r3, [r3]                                // Load FPCCR
 8000524:	681b      	ldr	r3, [r3, #0]
    TST     r3, #1                                  // Check if LSPACT is set
 8000526:	f013 0f01 	tst.w	r3, #1
    BEQ     _tx_no_lazy_clear                       // if clear, move on
 800052a:	d00d      	beq.n	8000548 <_tx_no_lazy_clear>
    LDR     r1, =0xE000EF38                         // Address of FPCAR
 800052c:	4932      	ldr	r1, [pc, #200]	; (80005f8 <tx_thread_fpu_disable+0x3e>)
    LDR     r1, [r1]                                // Load FPCAR
 800052e:	6809      	ldr	r1, [r1, #0]
    LDR     r0, [r2, #0xA4]                         // Load kernel stack start
 8000530:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
    CMP     r1, r0                                  // If FPCAR < start, move on
 8000534:	4281      	cmp	r1, r0
    BLO     _tx_no_lazy_clear
 8000536:	d307      	bcc.n	8000548 <_tx_no_lazy_clear>
    LDR     r0, [r2, #0xA8]                         // Load kernel stack end
 8000538:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    CMP     r0, r1                                  // If end < FPCAR, move on
 800053c:	4288      	cmp	r0, r1
    BLO     _tx_no_lazy_clear
 800053e:	d303      	bcc.n	8000548 <_tx_no_lazy_clear>
    BIC     r3, #1                                  // Clear LSPACT
 8000540:	f023 0301 	bic.w	r3, r3, #1
    LDR     r1, =0xE000EF34                         // Address of FPCCR
 8000544:	4924      	ldr	r1, [pc, #144]	; (80005d8 <tx_thread_fpu_disable+0x1e>)
    STR     r3, [r1]                                // Save updated FPCCR
 8000546:	600b      	str	r3, [r1, #0]

08000548 <_tx_no_lazy_clear>:
_tx_no_lazy_clear:
#endif

    LDR     r0, [r2, #0xB0]                         // Load the module thread stack pointer
 8000548:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
    MRS     r3, PSP                                 // Pickup kernel stack pointer
 800054c:	f3ef 8309 	mrs	r3, PSP
#ifdef __ARM_FP
    TST     r0, #1                                  // Is module stack extended?
 8000550:	f010 0f01 	tst.w	r0, #1
    ITTE    NE                                      // If so...
 8000554:	bf1a      	itte	ne
    BICNE   lr, #0x10                               // Clear bit, return with extended frame
 8000556:	f02e 0e10 	bicne.w	lr, lr, #16
    BICNE   r0, #1                                  // Clear bit that indicates extended module frame
 800055a:	f020 0001 	bicne.w	r0, r0, #1
    ORREQ   lr, lr, #0x10                           // Else set bit, return with standard frame
 800055e:	f04e 0e10 	orreq.w	lr, lr, #16
#endif

    /* Copy kernel hardware stack to module thread stack. */
    LDM     r3!, {r1-r2}
 8000562:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 8000564:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}
 8000566:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 8000568:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}
 800056a:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 800056c:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}
 800056e:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 8000570:	c006      	stmia	r0!, {r1, r2}
    SUB     r0, r0, #32                             // Subtract 32 to get back to top of stack
 8000572:	f1a0 0020 	sub.w	r0, r0, #32
    MSR     PSP, r0                                 // Set thread stack pointer
 8000576:	f380 8809 	msr	PSP, r0

    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 800057a:	4913      	ldr	r1, [pc, #76]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 800057c:	680a      	ldr	r2, [r1, #0]
    LDR     r1, [r2, #0x9C]                         // Pick up user mode
 800057e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c

08000582 <_tx_skip_kernel_stack_exit>:

_tx_skip_kernel_stack_exit:
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000582:	f3ef 8014 	mrs	r0, CONTROL
    ORR     r0, r0, r1                              // OR in the user mode bit
 8000586:	ea40 0001 	orr.w	r0, r0, r1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 800058a:	f380 8814 	msr	CONTROL, r0
    BX      lr                                      // Return to thread
 800058e:	4770      	bx	lr
 8000590:	f3af 8000 	nop.w
 8000594:	f3af 8000 	nop.w
 8000598:	f3af 8000 	nop.w
 800059c:	f3af 8000 	nop.w

080005a0 <_txm_module_manager_user_mode_entry>:
// VOID   _txm_module_manager_user_mode_entry(VOID)
// {
    .global  _txm_module_manager_user_mode_entry
    .thumb_func
_txm_module_manager_user_mode_entry:
    SVC     1                                       // Enter kernel
 80005a0:	df01      	svc	1

080005a2 <_txm_module_priv>:
_txm_module_priv:
    /* At this point, we are out of user mode. The original LR has been saved in the
       thread control block. Simply call the kernel dispatch function. */
    BL      _txm_module_manager_kernel_dispatch
 80005a2:	f011 fd99 	bl	80120d8 <_txm_module_manager_kernel_dispatch>

    /* Pickup the original LR value while still in privileged mode */
    LDR     r2, =_tx_thread_current_ptr             // Build current thread pointer address
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <tx_thread_fpu_disable+0xe>)
    LDR     r3, [r2]                                // Pickup current thread pointer
 80005a8:	6813      	ldr	r3, [r2, #0]
    LDR     lr, [r3, #0xA0]                         // Pickup saved LR from original call
 80005aa:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0

    SVC     2                                       // Exit kernel and return to user mode
 80005ae:	df02      	svc	2

080005b0 <_txm_module_user_mode_exit>:
_txm_module_user_mode_exit:
    BX      lr                                      // Return to the caller
 80005b0:	4770      	bx	lr
    NOP
 80005b2:	bf00      	nop
    NOP
 80005b4:	bf00      	nop
    NOP
 80005b6:	bf00      	nop
    NOP
 80005b8:	bf00      	nop

080005ba <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 80005ba:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80005bc:	2000efe8 	.word	0x2000efe8
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 80005c0:	e000ed24 	.word	0xe000ed24
    LDR     r12,=_txm_module_manager_memory_fault_info  // Pickup fault info struct
 80005c4:	2000f650 	.word	0x2000f650
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80005c8:	2000ef4c 	.word	0x2000ef4c
    LDR     r0, =0xE000ED28                         // Build CFSR address
 80005cc:	e000ed28 	.word	0xe000ed28
    LDR     r0, =0xE000ED34                         // Build MMFAR address
 80005d0:	e000ed34 	.word	0xe000ed34
    LDR     r0, =0xE000ED38                         // Build BFAR address
 80005d4:	e000ed38 	.word	0xe000ed38
    LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
 80005d8:	e000ef34 	.word	0xe000ef34
    LDR     r0, =0xE000ED04                         // Load ICSR
 80005dc:	e000ed04 	.word	0xe000ed04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80005e0:	2000ef50 	.word	0x2000ef50
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80005e4:	2000f58c 	.word	0x2000f58c
    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 80005e8:	e000ed94 	.word	0xe000ed94
    LDR     r1, =0xE000ED9C                         // Build address of MPU base register
 80005ec:	e000ed9c 	.word	0xe000ed9c
    LDR     r2, =_txm_module_priv                   // Load address of where we should have come from
 80005f0:	080005a2 	.word	0x080005a2
    LDR     r2, =_txm_module_user_mode_exit         // Load address of where we should have come from
 80005f4:	080005b0 	.word	0x080005b0
    LDR     r1, =0xE000EF38                         // Address of FPCAR
 80005f8:	e000ef38 	.word	0xe000ef38
 80005fc:	00000000 	.word	0x00000000

08000600 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000600:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000602:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000606:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800060a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800060e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000610:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000614:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000616:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000618:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800061a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800061c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800061e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000620:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000622:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000624:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000626:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000628:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800062c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000632:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000634:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800063a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800063c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800063e:	4770      	bx	lr

08000640 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000640:	4922      	ldr	r1, [pc, #136]	; (80006cc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000642:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000644:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000648:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800064c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800064e:	b13a      	cbz	r2, 8000660 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000650:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000654:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000656:	b91a      	cbnz	r2, 8000660 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800065a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800065e:	6018      	str	r0, [r3, #0]

08000660 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000660:	491d      	ldr	r1, [pc, #116]	; (80006d8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000662:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000664:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000666:	b122      	cbz	r2, 8000672 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800066a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800066e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000670:	e008      	b.n	8000684 <__tx_timer_done>

08000672 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000672:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000678:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800067a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800067c:	d101      	bne.n	8000682 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000680:	6818      	ldr	r0, [r3, #0]

08000682 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000682:	6008      	str	r0, [r1, #0]

08000684 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000686:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000688:	b912      	cbnz	r2, 8000690 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800068a:	4914      	ldr	r1, [pc, #80]	; (80006dc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800068c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800068e:	b1d0      	cbz	r0, 80006c6 <__tx_timer_nothing_expired>

08000690 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000690:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000694:	4911      	ldr	r1, [pc, #68]	; (80006dc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000696:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000698:	b108      	cbz	r0, 800069e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800069a:	f006 fe0b 	bl	80072b4 <_tx_timer_expiration_process>

0800069e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80006a0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80006a2:	b172      	cbz	r2, 80006c2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80006a4:	f006 fafe 	bl	8006ca4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80006a8:	480f      	ldr	r0, [pc, #60]	; (80006e8 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80006aa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80006ac:	b949      	cbnz	r1, 80006c2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80006ae:	480f      	ldr	r0, [pc, #60]	; (80006ec <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80006b0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80006b4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80006b6:	480f      	ldr	r0, [pc, #60]	; (80006f4 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80006b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80006bc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80006be:	d000      	beq.n	80006c2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80006c0:	6002      	str	r2, [r0, #0]

080006c2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80006c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080006c6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80006c6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80006ca:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80006cc:	2000eff4 	.word	0x2000eff4
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80006d0:	2000f58c 	.word	0x2000f58c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80006d4:	2000eff8 	.word	0x2000eff8
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80006d8:	2000f084 	.word	0x2000f084
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80006dc:	2000f088 	.word	0x2000f088
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80006e0:	2000f080 	.word	0x2000f080
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80006e4:	2000f07c 	.word	0x2000f07c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80006e8:	2000efe8 	.word	0x2000efe8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80006ec:	2000ef4c 	.word	0x2000ef4c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80006f0:	2000ef50 	.word	0x2000ef50
    LDR     r0, =0xE000ED04                         // Build address of control register
 80006f4:	e000ed04 	.word	0xe000ed04
	...

08000700 <_txm_module_manager_thread_stack_build>:
                    pc          Initial value for pc
                    xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                       // Pickup end of stack area
 8000700:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                        // Align frame
 8000702:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                         // Subtract frame size
 8000706:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                     // Build initial LR value
 800070a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                        // Save on the stack
 800070e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                              // Build initial register value
 8000710:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                        // Store initial r4
 8000714:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                        // Store initial r5
 8000716:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                       // Store initial r6
 8000718:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                       // Store initial r7
 800071a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                       // Store initial r8
 800071c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #28]                       // Store initial r10
 800071e:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                       // Store initial r11
 8000720:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r0, [r2, #36]                       // Store initial r0, which is the thread control block
 8000722:	6250      	str	r0, [r2, #36]	; 0x24

    LDR     r3, [r0, #8]                        // Pickup thread entry info pointer,which is in the stack pointer position of the thread control block.
 8000724:	6883      	ldr	r3, [r0, #8]
                                                //   It was setup in the txm_module_manager_thread_create function. It will be overwritten later in this
                                                //   function with the actual, initial stack pointer.
    STR     r3, [r2, #40]                       // Store initial r1, which is the module entry information.
 8000726:	6293      	str	r3, [r2, #40]	; 0x28
    LDR     r3, [r3, #8]                        // Pickup data base register from the module information
 8000728:	689b      	ldr	r3, [r3, #8]
    STR     r3, [r2, #24]                       // Store initial r9 (data base register)
 800072a:	6193      	str	r3, [r2, #24]
    MOV     r3, #0                              // Clear r3 again
 800072c:	f04f 0300 	mov.w	r3, #0

    STR     r3, [r2, #44]                       // Store initial r2
 8000730:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                       // Store initial r3
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                       // Store initial r12
 8000734:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                     // Poison EXC_RETURN value
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                       // Store initial lr
 800073a:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                       // Store initial pc
 800073c:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                     // Only T-bit need be set
 800073e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                       // Store initial xPSR
 8000742:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                        // Save stack pointer in thread's control block
 8000744:	6082      	str	r2, [r0, #8]
    BX      lr                                  // Return to caller
 8000746:	4770      	bx	lr
	...

08000750 <memchr>:
 8000750:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000754:	2a10      	cmp	r2, #16
 8000756:	db2b      	blt.n	80007b0 <memchr+0x60>
 8000758:	f010 0f07 	tst.w	r0, #7
 800075c:	d008      	beq.n	8000770 <memchr+0x20>
 800075e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000762:	3a01      	subs	r2, #1
 8000764:	428b      	cmp	r3, r1
 8000766:	d02d      	beq.n	80007c4 <memchr+0x74>
 8000768:	f010 0f07 	tst.w	r0, #7
 800076c:	b342      	cbz	r2, 80007c0 <memchr+0x70>
 800076e:	d1f6      	bne.n	800075e <memchr+0xe>
 8000770:	b4f0      	push	{r4, r5, r6, r7}
 8000772:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000776:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800077a:	f022 0407 	bic.w	r4, r2, #7
 800077e:	f07f 0700 	mvns.w	r7, #0
 8000782:	2300      	movs	r3, #0
 8000784:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000788:	3c08      	subs	r4, #8
 800078a:	ea85 0501 	eor.w	r5, r5, r1
 800078e:	ea86 0601 	eor.w	r6, r6, r1
 8000792:	fa85 f547 	uadd8	r5, r5, r7
 8000796:	faa3 f587 	sel	r5, r3, r7
 800079a:	fa86 f647 	uadd8	r6, r6, r7
 800079e:	faa5 f687 	sel	r6, r5, r7
 80007a2:	b98e      	cbnz	r6, 80007c8 <memchr+0x78>
 80007a4:	d1ee      	bne.n	8000784 <memchr+0x34>
 80007a6:	bcf0      	pop	{r4, r5, r6, r7}
 80007a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80007ac:	f002 0207 	and.w	r2, r2, #7
 80007b0:	b132      	cbz	r2, 80007c0 <memchr+0x70>
 80007b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80007b6:	3a01      	subs	r2, #1
 80007b8:	ea83 0301 	eor.w	r3, r3, r1
 80007bc:	b113      	cbz	r3, 80007c4 <memchr+0x74>
 80007be:	d1f8      	bne.n	80007b2 <memchr+0x62>
 80007c0:	2000      	movs	r0, #0
 80007c2:	4770      	bx	lr
 80007c4:	3801      	subs	r0, #1
 80007c6:	4770      	bx	lr
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	bf06      	itte	eq
 80007cc:	4635      	moveq	r5, r6
 80007ce:	3803      	subeq	r0, #3
 80007d0:	3807      	subne	r0, #7
 80007d2:	f015 0f01 	tst.w	r5, #1
 80007d6:	d107      	bne.n	80007e8 <memchr+0x98>
 80007d8:	3001      	adds	r0, #1
 80007da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80007de:	bf02      	ittt	eq
 80007e0:	3001      	addeq	r0, #1
 80007e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80007e6:	3001      	addeq	r0, #1
 80007e8:	bcf0      	pop	{r4, r5, r6, r7}
 80007ea:	3801      	subs	r0, #1
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop

080007f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f6:	490e      	ldr	r1, [pc, #56]	; (8000830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800080c:	4c0b      	ldr	r4, [pc, #44]	; (800083c <LoopFillZerobss+0x26>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800081a:	f000 fbe1 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081e:	f014 fcbd 	bl	801519c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000822:	f000 fa07 	bl	8000c34 <main>
  bx  lr
 8000826:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000828:	20014000 	.word	0x20014000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000834:	08016028 	.word	0x08016028
  ldr r2, =_sbss
 8000838:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800083c:	2000f7f8 	.word	0x2000f7f8

08000840 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <tx_application_define>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval none
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af08      	add	r7, sp, #32
 800084a:	6078      	str	r0, [r7, #4]
  CHAR *pointer;

  if (tx_byte_pool_create(&ModuleManagerBytePool, "Module Manager Byte Pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <tx_application_define+0xb4>)
 8000856:	4929      	ldr	r1, [pc, #164]	; (80008fc <tx_application_define+0xb8>)
 8000858:	4829      	ldr	r0, [pc, #164]	; (8000900 <tx_application_define+0xbc>)
 800085a:	f007 fa11 	bl	8007c80 <_txe_byte_pool_create>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 8000864:	f000 f9ee 	bl	8000c44 <Error_Handler>
                        pointer, 16 * sizeof(ULONG)) != TX_SUCCESS)
    {
      Error_Handler();
    }
  }
}
 8000868:	e041      	b.n	80008ee <tx_application_define+0xaa>
    if (tx_byte_allocate(&ModuleManagerBytePool, (VOID **) &pointer,
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	2300      	movs	r3, #0
 8000870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000874:	4822      	ldr	r0, [pc, #136]	; (8000900 <tx_application_define+0xbc>)
 8000876:	f007 f98f 	bl	8007b98 <_txe_byte_allocate>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <tx_application_define+0x40>
      Error_Handler();
 8000880:	f000 f9e0 	bl	8000c44 <Error_Handler>
    if (tx_thread_create(&ModuleManager, "Module Manager Thread", module_manager_entry, 0,
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	22e8      	movs	r2, #232	; 0xe8
 8000888:	9206      	str	r2, [sp, #24]
 800088a:	2201      	movs	r2, #1
 800088c:	9205      	str	r2, [sp, #20]
 800088e:	2200      	movs	r2, #0
 8000890:	9204      	str	r2, [sp, #16]
 8000892:	2204      	movs	r2, #4
 8000894:	9203      	str	r2, [sp, #12]
 8000896:	2204      	movs	r2, #4
 8000898:	9202      	str	r2, [sp, #8]
 800089a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089e:	9201      	str	r2, [sp, #4]
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2300      	movs	r3, #0
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <tx_application_define+0xc0>)
 80008a6:	4918      	ldr	r1, [pc, #96]	; (8000908 <tx_application_define+0xc4>)
 80008a8:	4818      	ldr	r0, [pc, #96]	; (800090c <tx_application_define+0xc8>)
 80008aa:	f008 fa9d 	bl	8008de8 <_txe_thread_create>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <tx_application_define+0x74>
      Error_Handler();
 80008b4:	f000 f9c6 	bl	8000c44 <Error_Handler>
    if (tx_byte_allocate(&ModuleManagerBytePool, (VOID **) &pointer,
 80008b8:	f107 010c 	add.w	r1, r7, #12
 80008bc:	2300      	movs	r3, #0
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <tx_application_define+0xbc>)
 80008c2:	f007 f969 	bl	8007b98 <_txe_byte_allocate>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <tx_application_define+0x8c>
      Error_Handler();
 80008cc:	f000 f9ba 	bl	8000c44 <Error_Handler>
    if (tx_queue_create(&ResidentQueue, "Resident Queue", TX_1_ULONG,
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2244      	movs	r2, #68	; 0x44
 80008d4:	9201      	str	r2, [sp, #4]
 80008d6:	2240      	movs	r2, #64	; 0x40
 80008d8:	9200      	str	r2, [sp, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <tx_application_define+0xcc>)
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <tx_application_define+0xd0>)
 80008e0:	f007 fe78 	bl	80085d4 <_txe_queue_create>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <tx_application_define+0xaa>
      Error_Handler();
 80008ea:	f000 f9ab 	bl	8000c44 <Error_Handler>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000c64c 	.word	0x2000c64c
 80008fc:	08015c3c 	.word	0x08015c3c
 8000900:	2000ee4c 	.word	0x2000ee4c
 8000904:	08000925 	.word	0x08000925
 8000908:	08015c58 	.word	0x08015c58
 800090c:	20000094 	.word	0x20000094
 8000910:	08015c70 	.word	0x08015c70
 8000914:	20000604 	.word	0x20000604

08000918 <MX_AZURE_RTOS_Init>:
   * @brief  MX_AZURE_RTOS_Init
   * @param  None
   * @retval None
   */
void MX_AZURE_RTOS_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800091c:	f002 fee8 	bl	80036f0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <module_manager_entry>:
  * @brief  Module Manager main thread.
  * @param  thread_input: thread id
  * @retval none
  */
VOID module_manager_entry(ULONG thread_input)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	; 0x58
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  UINT   status;
  CHAR   p_msg[64];
  ULONG  r_msg = PROCESSING_NOT_STARTED;
 800092c:	2363      	movs	r3, #99	; 0x63
 800092e:	613b      	str	r3, [r7, #16]
  ULONG  module_properties;

  /* Initialize the module manager. */
  status = txm_module_manager_initialize((VOID *) module_data_area, MODULE_DATA_SIZE);
 8000930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000934:	486f      	ldr	r0, [pc, #444]	; (8000af4 <module_manager_entry+0x1d0>)
 8000936:	f009 fa27 	bl	8009d88 <_txm_module_manager_initialize>
 800093a:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 800093c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <module_manager_entry+0x22>
  {
    Error_Handler();
 8000942:	f000 f97f 	bl	8000c44 <Error_Handler>
  }

  /* Create a pool for module objects. */
  status = txm_module_manager_object_pool_create(object_memory, OBJECT_MEM_SIZE);
 8000946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094a:	486b      	ldr	r0, [pc, #428]	; (8000af8 <module_manager_entry+0x1d4>)
 800094c:	f012 fc70 	bl	8013230 <_txm_module_manager_object_pool_create>
 8000950:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <module_manager_entry+0x38>
  {
    Error_Handler();
 8000958:	f000 f974 	bl	8000c44 <Error_Handler>
  }

  /* Register a fault handler. */
  status = txm_module_manager_memory_fault_notify(module_fault_handler);
 800095c:	4867      	ldr	r0, [pc, #412]	; (8000afc <module_manager_entry+0x1d8>)
 800095e:	f011 ff81 	bl	8012864 <_txm_module_manager_memory_fault_notify>
 8000962:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <module_manager_entry+0x4a>
  {
    Error_Handler();
 800096a:	f000 f96b 	bl	8000c44 <Error_Handler>
  }

  /* Load the module from the specified address */
  status = txm_module_manager_in_place_load(&my_module, "my module", (VOID *) MODULE_FLASH_ADDRESS);
 800096e:	4a64      	ldr	r2, [pc, #400]	; (8000b00 <module_manager_entry+0x1dc>)
 8000970:	4964      	ldr	r1, [pc, #400]	; (8000b04 <module_manager_entry+0x1e0>)
 8000972:	4865      	ldr	r0, [pc, #404]	; (8000b08 <module_manager_entry+0x1e4>)
 8000974:	f009 f9c8 	bl	8009d08 <_txm_module_manager_in_place_load>
 8000978:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 800097a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <module_manager_entry+0x60>
  {
    Error_Handler();
 8000980:	f000 f960 	bl	8000c44 <Error_Handler>
  }

  /* Enable shared memory region for module with read-only access permission. */
  status = txm_module_manager_external_memory_enable(&my_module, (void*)READONLY_REGION, SHARED_MEM_SIZE, 0);
 8000984:	2300      	movs	r3, #0
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	4960      	ldr	r1, [pc, #384]	; (8000b0c <module_manager_entry+0x1e8>)
 800098a:	485f      	ldr	r0, [pc, #380]	; (8000b08 <module_manager_entry+0x1e4>)
 800098c:	f009 f932 	bl	8009bf4 <_txm_module_manager_external_memory_enable>
 8000990:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <module_manager_entry+0x78>
  {
    Error_Handler();
 8000998:	f000 f954 	bl	8000c44 <Error_Handler>
  }

  /* Enable shared memory region for module with read and write access permission. */
  status = txm_module_manager_external_memory_enable(&my_module, (void*)READWRITE_REGION, SHARED_MEM_SIZE, TXM_MODULE_MANAGER_SHARED_ATTRIBUTE_WRITE);
 800099c:	2301      	movs	r3, #1
 800099e:	22ff      	movs	r2, #255	; 0xff
 80009a0:	495b      	ldr	r1, [pc, #364]	; (8000b10 <module_manager_entry+0x1ec>)
 80009a2:	4859      	ldr	r0, [pc, #356]	; (8000b08 <module_manager_entry+0x1e4>)
 80009a4:	f009 f926 	bl	8009bf4 <_txm_module_manager_external_memory_enable>
 80009a8:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 80009aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <module_manager_entry+0x90>
  {
    Error_Handler();
 80009b0:	f000 f948 	bl	8000c44 <Error_Handler>
  }

  /* Get module properties. */
  status = txm_module_manager_properties_get(&my_module, &module_properties);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4853      	ldr	r0, [pc, #332]	; (8000b08 <module_manager_entry+0x1e4>)
 80009bc:	f012 fc52 	bl	8013264 <_txm_module_manager_properties_get>
 80009c0:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 80009c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <module_manager_entry+0xa8>
  {
    Error_Handler();
 80009c8:	f000 f93c 	bl	8000c44 <Error_Handler>
  }

  /* Print loaded module info */
  printf("Module <%s> is loaded from address 0x%08X\n", my_module.txm_module_instance_name, MODULE_FLASH_ADDRESS);
 80009cc:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <module_manager_entry+0x1e4>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4a4b      	ldr	r2, [pc, #300]	; (8000b00 <module_manager_entry+0x1dc>)
 80009d2:	4619      	mov	r1, r3
 80009d4:	484f      	ldr	r0, [pc, #316]	; (8000b14 <module_manager_entry+0x1f0>)
 80009d6:	f014 fa47 	bl	8014e68 <iprintf>
  printf("Module code section size: %i bytes, data section size: %i\n", (int)my_module.txm_module_instance_code_size, (int)my_module.txm_module_instance_data_size);
 80009da:	4b4b      	ldr	r3, [pc, #300]	; (8000b08 <module_manager_entry+0x1e4>)
 80009dc:	6a1b      	ldr	r3, [r3, #32]
 80009de:	4619      	mov	r1, r3
 80009e0:	4b49      	ldr	r3, [pc, #292]	; (8000b08 <module_manager_entry+0x1e4>)
 80009e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e4:	461a      	mov	r2, r3
 80009e6:	484c      	ldr	r0, [pc, #304]	; (8000b18 <module_manager_entry+0x1f4>)
 80009e8:	f014 fa3e 	bl	8014e68 <iprintf>
  printf("Module Attributes:\n");
 80009ec:	484b      	ldr	r0, [pc, #300]	; (8000b1c <module_manager_entry+0x1f8>)
 80009ee:	f014 faa1 	bl	8014f34 <puts>
  printf("  - Compiled for %s compiler\n", ((module_properties >> 25) == 1)? "CubeIDE (GNU)" : ((module_properties >> 24) == 1)? "ARM KEIL" : "IAR EW");
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	0e5b      	lsrs	r3, r3, #25
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d007      	beq.n	8000a0a <module_manager_entry+0xe6>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	0e1b      	lsrs	r3, r3, #24
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d101      	bne.n	8000a06 <module_manager_entry+0xe2>
 8000a02:	4b47      	ldr	r3, [pc, #284]	; (8000b20 <module_manager_entry+0x1fc>)
 8000a04:	e002      	b.n	8000a0c <module_manager_entry+0xe8>
 8000a06:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <module_manager_entry+0x200>)
 8000a08:	e000      	b.n	8000a0c <module_manager_entry+0xe8>
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <module_manager_entry+0x204>)
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4847      	ldr	r0, [pc, #284]	; (8000b2c <module_manager_entry+0x208>)
 8000a10:	f014 fa2a 	bl	8014e68 <iprintf>
  printf("  - Shared/external memory access is %s\n", ((module_properties & 0x04) == 0)? "Disabled" : "Enabled");
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <module_manager_entry+0xfe>
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <module_manager_entry+0x20c>)
 8000a20:	e000      	b.n	8000a24 <module_manager_entry+0x100>
 8000a22:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <module_manager_entry+0x210>)
 8000a24:	4619      	mov	r1, r3
 8000a26:	4844      	ldr	r0, [pc, #272]	; (8000b38 <module_manager_entry+0x214>)
 8000a28:	f014 fa1e 	bl	8014e68 <iprintf>
  printf("  - MPU protection is %s\n", ((module_properties & 0x02) == 0)? "Disabled" : "Enabled");
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <module_manager_entry+0x116>
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <module_manager_entry+0x20c>)
 8000a38:	e000      	b.n	8000a3c <module_manager_entry+0x118>
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <module_manager_entry+0x210>)
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	483f      	ldr	r0, [pc, #252]	; (8000b3c <module_manager_entry+0x218>)
 8000a40:	f014 fa12 	bl	8014e68 <iprintf>
  printf("  - %s mode execution is enabled for the module\n\n", ((module_properties & 0x01) == 0)? "Privileged" : "User");
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <module_manager_entry+0x12e>
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	; (8000b40 <module_manager_entry+0x21c>)
 8000a50:	e000      	b.n	8000a54 <module_manager_entry+0x130>
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <module_manager_entry+0x220>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	483c      	ldr	r0, [pc, #240]	; (8000b48 <module_manager_entry+0x224>)
 8000a58:	f014 fa06 	bl	8014e68 <iprintf>

  /* Start the modules. */
  status = txm_module_manager_start(&my_module);
 8000a5c:	482a      	ldr	r0, [pc, #168]	; (8000b08 <module_manager_entry+0x1e4>)
 8000a5e:	f012 fcdd 	bl	801341c <_txm_module_manager_start>
 8000a62:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <module_manager_entry+0x14a>
  {
    Error_Handler();
 8000a6a:	f000 f8eb 	bl	8000c44 <Error_Handler>
  }

  printf("Module execution is started\n");
 8000a6e:	4837      	ldr	r0, [pc, #220]	; (8000b4c <module_manager_entry+0x228>)
 8000a70:	f014 fa60 	bl	8014f34 <puts>

  /* Get Module's progress messages */
  while(r_msg != PROCESSING_FINISHED)
 8000a74:	e021      	b.n	8000aba <module_manager_entry+0x196>
  {
    if(tx_queue_receive(&ResidentQueue, &r_msg, TX_TIMER_TICKS_PER_SECOND) == TX_SUCCESS)
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	2264      	movs	r2, #100	; 0x64
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4834      	ldr	r0, [pc, #208]	; (8000b50 <module_manager_entry+0x22c>)
 8000a80:	f007 ff42 	bl	8008908 <_txe_queue_receive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d117      	bne.n	8000aba <module_manager_entry+0x196>
    {
      /* Convert the message to a user friendly string */
      pretty_msg(p_msg, r_msg);
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f876 	bl	8000b84 <pretty_msg>

      printf("Module is executing: %s\n", p_msg);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482d      	ldr	r0, [pc, #180]	; (8000b54 <module_manager_entry+0x230>)
 8000aa0:	f014 f9e2 	bl	8014e68 <iprintf>

      /* Check if the last executed operation resulted in memory violation */
      if(memory_faults)
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <module_manager_entry+0x234>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <module_manager_entry+0x196>
      {
        /* A memory access fault just occurred */
        printf("A memory fault occurred while module executed: %s\n", p_msg);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482a      	ldr	r0, [pc, #168]	; (8000b5c <module_manager_entry+0x238>)
 8000ab4:	f014 f9d8 	bl	8014e68 <iprintf>
        break;
 8000ab8:	e002      	b.n	8000ac0 <module_manager_entry+0x19c>
  while(r_msg != PROCESSING_FINISHED)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b2c      	cmp	r3, #44	; 0x2c
 8000abe:	d1da      	bne.n	8000a76 <module_manager_entry+0x152>
      }
    }
  }

  /* Stop the modules. */
  status = txm_module_manager_stop(&my_module);
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <module_manager_entry+0x1e4>)
 8000ac2:	f012 fd99 	bl	80135f8 <_txm_module_manager_stop>
 8000ac6:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <module_manager_entry+0x1ae>
  {
    Error_Handler();
 8000ace:	f000 f8b9 	bl	8000c44 <Error_Handler>
  }

  /* Unload the modules. */
  status = txm_module_manager_unload(&my_module);
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <module_manager_entry+0x1e4>)
 8000ad4:	f013 fb7a 	bl	80141cc <_txm_module_manager_unload>
 8000ad8:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <module_manager_entry+0x1c0>
  {
    Error_Handler();
 8000ae0:	f000 f8b0 	bl	8000c44 <Error_Handler>
  }

  /* Toggle green LED to indicated success of operations */
  while(1) {
    BSP_LED_Toggle(LED_GREEN);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fa61 	bl	8000fac <BSP_LED_Toggle>
    tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 8000aea:	2032      	movs	r0, #50	; 0x32
 8000aec:	f005 fc46 	bl	800637c <_tx_thread_sleep>
    BSP_LED_Toggle(LED_GREEN);
 8000af0:	e7f8      	b.n	8000ae4 <module_manager_entry+0x1c0>
 8000af2:	bf00      	nop
 8000af4:	20000648 	.word	0x20000648
 8000af8:	20008648 	.word	0x20008648
 8000afc:	08000b61 	.word	0x08000b61
 8000b00:	08020000 	.word	0x08020000
 8000b04:	08015c80 	.word	0x08015c80
 8000b08:	2000017c 	.word	0x2000017c
 8000b0c:	20010000 	.word	0x20010000
 8000b10:	20010100 	.word	0x20010100
 8000b14:	08015c8c 	.word	0x08015c8c
 8000b18:	08015cb8 	.word	0x08015cb8
 8000b1c:	08015cf4 	.word	0x08015cf4
 8000b20:	08015d08 	.word	0x08015d08
 8000b24:	08015d14 	.word	0x08015d14
 8000b28:	08015d1c 	.word	0x08015d1c
 8000b2c:	08015d2c 	.word	0x08015d2c
 8000b30:	08015d4c 	.word	0x08015d4c
 8000b34:	08015d58 	.word	0x08015d58
 8000b38:	08015d60 	.word	0x08015d60
 8000b3c:	08015d8c 	.word	0x08015d8c
 8000b40:	08015da8 	.word	0x08015da8
 8000b44:	08015db4 	.word	0x08015db4
 8000b48:	08015dbc 	.word	0x08015dbc
 8000b4c:	08015df0 	.word	0x08015df0
 8000b50:	20000604 	.word	0x20000604
 8000b54:	08015e0c 	.word	0x08015e0c
 8000b58:	2000c648 	.word	0x2000c648
 8000b5c:	08015e28 	.word	0x08015e28

08000b60 <module_fault_handler>:
  }
}

VOID module_fault_handler(TX_THREAD *thread, TXM_MODULE_INSTANCE *module)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
    /* Just increment the fault counter.   */
    memory_faults++;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <module_fault_handler+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <module_fault_handler+0x20>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	2000c648 	.word	0x2000c648

08000b84 <pretty_msg>:

VOID pretty_msg(char *p_msg, ULONG r_msg)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  memset(p_msg, 0, 64);
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f014 faae 	bl	80150f4 <memset>

  switch(r_msg)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b58      	cmp	r3, #88	; 0x58
 8000b9c:	d015      	beq.n	8000bca <pretty_msg+0x46>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b58      	cmp	r3, #88	; 0x58
 8000ba2:	d830      	bhi.n	8000c06 <pretty_msg+0x82>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ba8:	d015      	beq.n	8000bd6 <pretty_msg+0x52>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2b4d      	cmp	r3, #77	; 0x4d
 8000bae:	d82a      	bhi.n	8000c06 <pretty_msg+0x82>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b42      	cmp	r3, #66	; 0x42
 8000bb4:	d015      	beq.n	8000be2 <pretty_msg+0x5e>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b42      	cmp	r3, #66	; 0x42
 8000bba:	d824      	bhi.n	8000c06 <pretty_msg+0x82>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b2c      	cmp	r3, #44	; 0x2c
 8000bc0:	d01b      	beq.n	8000bfa <pretty_msg+0x76>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b37      	cmp	r3, #55	; 0x37
 8000bc6:	d012      	beq.n	8000bee <pretty_msg+0x6a>
 8000bc8:	e01d      	b.n	8000c06 <pretty_msg+0x82>
  {
  case WRITING_TO_READWRITE:
    memcpy(p_msg, "Writing to ReadWrite Region", 27);
 8000bca:	221b      	movs	r2, #27
 8000bcc:	4913      	ldr	r1, [pc, #76]	; (8000c1c <pretty_msg+0x98>)
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f014 fb0b 	bl	80151ea <memcpy>
    break;
 8000bd4:	e01d      	b.n	8000c12 <pretty_msg+0x8e>
  case WRITING_TO_READONLY:
    memcpy(p_msg, "Writing to ReadOnly Region", 26);
 8000bd6:	221a      	movs	r2, #26
 8000bd8:	4911      	ldr	r1, [pc, #68]	; (8000c20 <pretty_msg+0x9c>)
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f014 fb05 	bl	80151ea <memcpy>
    break;
 8000be0:	e017      	b.n	8000c12 <pretty_msg+0x8e>
  case READING_FROM_READWRITE:
    memcpy(p_msg, "Reading from ReadWrite Region", 29);
 8000be2:	221d      	movs	r2, #29
 8000be4:	490f      	ldr	r1, [pc, #60]	; (8000c24 <pretty_msg+0xa0>)
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f014 faff 	bl	80151ea <memcpy>
    break;
 8000bec:	e011      	b.n	8000c12 <pretty_msg+0x8e>
  case READING_FROM_READONLY:
    memcpy(p_msg, "Reading from ReadOnly Region", 28);
 8000bee:	221c      	movs	r2, #28
 8000bf0:	490d      	ldr	r1, [pc, #52]	; (8000c28 <pretty_msg+0xa4>)
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f014 faf9 	bl	80151ea <memcpy>
    break;
 8000bf8:	e00b      	b.n	8000c12 <pretty_msg+0x8e>
  case PROCESSING_FINISHED:
    memcpy(p_msg, "All operations were done", 24);
 8000bfa:	2218      	movs	r2, #24
 8000bfc:	490b      	ldr	r1, [pc, #44]	; (8000c2c <pretty_msg+0xa8>)
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f014 faf3 	bl	80151ea <memcpy>
    break;
 8000c04:	e005      	b.n	8000c12 <pretty_msg+0x8e>
  default:
    memcpy(p_msg, "Invalid option", 14);
 8000c06:	220e      	movs	r2, #14
 8000c08:	4909      	ldr	r1, [pc, #36]	; (8000c30 <pretty_msg+0xac>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f014 faed 	bl	80151ea <memcpy>
    break;
 8000c10:	bf00      	nop
  }
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08015e5c 	.word	0x08015e5c
 8000c20:	08015e78 	.word	0x08015e78
 8000c24:	08015e94 	.word	0x08015e94
 8000c28:	08015eb4 	.word	0x08015eb4
 8000c2c:	08015ed4 	.word	0x08015ed4
 8000c30:	08015ef0 	.word	0x08015ef0

08000c34 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* STM32F4xx HAL library initialization */
  HAL_Init();
 8000c38:	f000 f9e4 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call ThreadX entry function */
  MX_AZURE_RTOS_Init();
 8000c3c:	f7ff fe6c 	bl	8000918 <MX_AZURE_RTOS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <main+0xc>
	...

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  printf(" Error \n");
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <Error_Handler+0x20>)
 8000c4a:	f014 f973 	bl	8014f34 <puts>
  BSP_LED_Off(LED_GREEN);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f992 	bl	8000f78 <BSP_LED_Off>
  while(1)
  {
    /* Toggle LED_RED: Error */
    BSP_LED_Toggle(LED_RED);
 8000c54:	2002      	movs	r0, #2
 8000c56:	f000 f9a9 	bl	8000fac <BSP_LED_Toggle>
    HAL_Delay(400);
 8000c5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c5e:	f000 fa13 	bl	8001088 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 8000c62:	e7f7      	b.n	8000c54 <Error_Handler+0x10>
 8000c64:	08015f00 	.word	0x08015f00

08000c68 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c70:	1d39      	adds	r1, r7, #4
 8000c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c76:	2201      	movs	r2, #1
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <__io_putchar+0x20>)
 8000c7a:	f000 fe3f 	bl	80018fc <HAL_UART_Transmit>

  return ch;
 8000c7e:	687b      	ldr	r3, [r7, #4]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000ee80 	.word	0x2000ee80

08000c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9e:	f000 f9d3 	bl	8001048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40001000 	.word	0x40001000

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_InitTick+0xe4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <HAL_InitTick+0xe4>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <HAL_InitTick+0xe4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 0210 	add.w	r2, r7, #16
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fb00 	bl	800133c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d103      	bne.n	8000d4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d46:	f000 fae5 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 8000d4a:	6378      	str	r0, [r7, #52]	; 0x34
 8000d4c:	e004      	b.n	8000d58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d4e:	f000 fae1 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 8000d52:	4603      	mov	r3, r0
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <HAL_InitTick+0xe8>)
 8000d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d60:	0c9b      	lsrs	r3, r3, #18
 8000d62:	3b01      	subs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <HAL_InitTick+0xec>)
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <HAL_InitTick+0xf0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_InitTick+0xec>)
 8000d6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_InitTick+0xec>)
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_InitTick+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_InitTick+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_InitTick+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d8c:	4817      	ldr	r0, [pc, #92]	; (8000dec <HAL_InitTick+0xec>)
 8000d8e:	f000 fb07 	bl	80013a0 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d11b      	bne.n	8000dd8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <HAL_InitTick+0xec>)
 8000da2:	f000 fb57 	bl	8001454 <HAL_TIM_Base_Start_IT>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d111      	bne.n	8000dd8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db4:	2036      	movs	r0, #54	; 0x36
 8000db6:	f000 fa5f 	bl	8001278 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d808      	bhi.n	8000dd2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2036      	movs	r0, #54	; 0x36
 8000dc6:	f000 fa3b 	bl	8001240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_InitTick+0xf4>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e002      	b.n	8000dd8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3738      	adds	r7, #56	; 0x38
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	431bde83 	.word	0x431bde83
 8000dec:	2000eec4 	.word	0x2000eec4
 8000df0:	40001000 	.word	0x40001000
 8000df4:	20000010 	.word	0x20000010

08000df8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM6_DAC_IRQHandler+0x10>)
 8000e22:	f000 fb87 	bl	8001534 <HAL_TIM_IRQHandler>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000eec4 	.word	0x2000eec4

08000e30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e00a      	b.n	8000e58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e42:	f3af 8000 	nop.w
 8000e46:	4601      	mov	r1, r0
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf0      	blt.n	8000e42 <_read+0x12>
	}

return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e009      	b.n	8000e90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff feef 	bl	8000c68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf1      	blt.n	8000e7c <_write+0x12>
	}
	return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_close>:

int _close(int file)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eca:	605a      	str	r2, [r3, #4]
	return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_isatty>:

int _isatty(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f014 f928 	bl	8015190 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20014000 	.word	0x20014000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	2000ef0c 	.word	0x2000ef0c
 8000f74:	2000f7f8 	.word	0x2000f7f8

08000f78 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <BSP_LED_Off+0x2c>)
 8000f86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <BSP_LED_Off+0x30>)
 8000f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	f000 f97d 	bl	8001294 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	08015fdc 	.word	0x08015fdc

08000fac <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <BSP_LED_Toggle+0x2c>)
 8000fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <BSP_LED_Toggle+0x30>)
 8000fc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4610      	mov	r0, r2
 8000fca:	f000 f97c 	bl	80012c6 <HAL_GPIO_TogglePin>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	08015fdc 	.word	0x08015fdc

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f8fc 	bl	800122a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fe64 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fe3a 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000014 	.word	0x20000014
 800106c:	2000ef10 	.word	0x2000ef10

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000ef10 	.word	0x2000ef10

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000014 	.word	0x20000014

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff4c 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001252:	f7ff ff61 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff ffb1 	bl	80011c4 <NVIC_EncodePriority>
 8001262:	4602      	mov	r2, r0
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff80 	bl	8001170 <__NVIC_SetPriority>
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff54 	bl	8001134 <__NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	041a      	lsls	r2, r3, #16
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	400b      	ands	r3, r1
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_RCC_GetHCLKFreq+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000000c 	.word	0x2000000c

08001314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001318:	f7ff fff0 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4903      	ldr	r1, [pc, #12]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	08015fe4 	.word	0x08015fe4

0800133c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220f      	movs	r2, #15
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_RCC_GetClockConfig+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e041      	b.n	8001436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f839 	bl	800143e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3304      	adds	r3, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4610      	mov	r0, r2
 80013e0:	f000 f9d8 	bl	8001794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d001      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e04e      	b.n	800150a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_TIM_Base_Start_IT+0xc4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d022      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001496:	d01d      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_TIM_Base_Start_IT+0xc8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d018      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_TIM_Base_Start_IT+0xcc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d013      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <HAL_TIM_Base_Start_IT+0xd0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00e      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_TIM_Base_Start_IT+0xd4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d009      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_TIM_Base_Start_IT+0xd8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d004      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x80>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_TIM_Base_Start_IT+0xdc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d111      	bne.n	80014f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d010      	beq.n	8001508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f6:	e007      	b.n	8001508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40010000 	.word	0x40010000
 800151c:	40000400 	.word	0x40000400
 8001520:	40000800 	.word	0x40000800
 8001524:	40000c00 	.word	0x40000c00
 8001528:	40010400 	.word	0x40010400
 800152c:	40014000 	.word	0x40014000
 8001530:	40001800 	.word	0x40001800

08001534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b02      	cmp	r3, #2
 8001548:	d122      	bne.n	8001590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b02      	cmp	r3, #2
 8001556:	d11b      	bne.n	8001590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0202 	mvn.w	r2, #2
 8001560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f8ee 	bl	8001758 <HAL_TIM_IC_CaptureCallback>
 800157c:	e005      	b.n	800158a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f8e0 	bl	8001744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f8f1 	bl	800176c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b04      	cmp	r3, #4
 800159c:	d122      	bne.n	80015e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d11b      	bne.n	80015e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0204 	mvn.w	r2, #4
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2202      	movs	r2, #2
 80015ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f8c4 	bl	8001758 <HAL_TIM_IC_CaptureCallback>
 80015d0:	e005      	b.n	80015de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f8b6 	bl	8001744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8c7 	bl	800176c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d122      	bne.n	8001638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d11b      	bne.n	8001638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0208 	mvn.w	r2, #8
 8001608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f89a 	bl	8001758 <HAL_TIM_IC_CaptureCallback>
 8001624:	e005      	b.n	8001632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f88c 	bl	8001744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f89d 	bl	800176c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b10      	cmp	r3, #16
 8001644:	d122      	bne.n	800168c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b10      	cmp	r3, #16
 8001652:	d11b      	bne.n	800168c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0210 	mvn.w	r2, #16
 800165c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2208      	movs	r2, #8
 8001662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f870 	bl	8001758 <HAL_TIM_IC_CaptureCallback>
 8001678:	e005      	b.n	8001686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f862 	bl	8001744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f873 	bl	800176c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10e      	bne.n	80016b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0201 	mvn.w	r2, #1
 80016b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff faea 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	2b80      	cmp	r3, #128	; 0x80
 80016c4:	d10e      	bne.n	80016e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d0:	2b80      	cmp	r3, #128	; 0x80
 80016d2:	d107      	bne.n	80016e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f902 	bl	80018e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	2b40      	cmp	r3, #64	; 0x40
 80016f0:	d10e      	bne.n	8001710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	2b40      	cmp	r3, #64	; 0x40
 80016fe:	d107      	bne.n	8001710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f838 	bl	8001780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b20      	cmp	r3, #32
 800171c:	d10e      	bne.n	800173c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	2b20      	cmp	r3, #32
 800172a:	d107      	bne.n	800173c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 0220 	mvn.w	r2, #32
 8001734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8cc 	bl	80018d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a40      	ldr	r2, [pc, #256]	; (80018a8 <TIM_Base_SetConfig+0x114>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <TIM_Base_SetConfig+0x40>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b2:	d00f      	beq.n	80017d4 <TIM_Base_SetConfig+0x40>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <TIM_Base_SetConfig+0x118>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00b      	beq.n	80017d4 <TIM_Base_SetConfig+0x40>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3c      	ldr	r2, [pc, #240]	; (80018b0 <TIM_Base_SetConfig+0x11c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <TIM_Base_SetConfig+0x40>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <TIM_Base_SetConfig+0x120>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d003      	beq.n	80017d4 <TIM_Base_SetConfig+0x40>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <TIM_Base_SetConfig+0x124>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d108      	bne.n	80017e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <TIM_Base_SetConfig+0x114>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d02b      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f4:	d027      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <TIM_Base_SetConfig+0x118>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d023      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <TIM_Base_SetConfig+0x11c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a2a      	ldr	r2, [pc, #168]	; (80018b4 <TIM_Base_SetConfig+0x120>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01b      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <TIM_Base_SetConfig+0x124>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d017      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <TIM_Base_SetConfig+0x128>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <TIM_Base_SetConfig+0x12c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00f      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <TIM_Base_SetConfig+0x130>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00b      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <TIM_Base_SetConfig+0x134>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a24      	ldr	r2, [pc, #144]	; (80018cc <TIM_Base_SetConfig+0x138>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d003      	beq.n	8001846 <TIM_Base_SetConfig+0xb2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <TIM_Base_SetConfig+0x13c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d108      	bne.n	8001858 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800184c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <TIM_Base_SetConfig+0x114>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d003      	beq.n	800188c <TIM_Base_SetConfig+0xf8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <TIM_Base_SetConfig+0x124>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d103      	bne.n	8001894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	615a      	str	r2, [r3, #20]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40000800 	.word	0x40000800
 80018b4:	40000c00 	.word	0x40000c00
 80018b8:	40010400 	.word	0x40010400
 80018bc:	40014000 	.word	0x40014000
 80018c0:	40014400 	.word	0x40014400
 80018c4:	40014800 	.word	0x40014800
 80018c8:	40001800 	.word	0x40001800
 80018cc:	40001c00 	.word	0x40001c00
 80018d0:	40002000 	.word	0x40002000

080018d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b20      	cmp	r3, #32
 800191a:	d17c      	bne.n	8001a16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_UART_Transmit+0x2c>
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e075      	b.n	8001a18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_UART_Transmit+0x3e>
 8001936:	2302      	movs	r3, #2
 8001938:	e06e      	b.n	8001a18 <HAL_UART_Transmit+0x11c>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2221      	movs	r2, #33	; 0x21
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001950:	f7ff fb8e 	bl	8001070 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196a:	d108      	bne.n	800197e <HAL_UART_Transmit+0x82>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d104      	bne.n	800197e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e003      	b.n	8001986 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800198e:	e02a      	b.n	80019e6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2200      	movs	r2, #0
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f840 	bl	8001a20 <UART_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e036      	b.n	8001a18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019be:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	3302      	adds	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	e007      	b.n	80019d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1cf      	bne.n	8001990 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2200      	movs	r2, #0
 80019f8:	2140      	movs	r1, #64	; 0x40
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f810 	bl	8001a20 <UART_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e006      	b.n	8001a18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
  }
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b090      	sub	sp, #64	; 0x40
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a30:	e050      	b.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d04c      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a40:	f7ff fb16 	bl	8001070 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d241      	bcs.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	330c      	adds	r3, #12
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	e853 3f00 	ldrex	r3, [r3]
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a70:	637a      	str	r2, [r7, #52]	; 0x34
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a78:	e841 2300 	strex	r3, r2, [r1]
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e5      	bne.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3314      	adds	r3, #20
 8001a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	e853 3f00 	ldrex	r3, [r3]
 8001a92:	613b      	str	r3, [r7, #16]
   return(result);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3314      	adds	r3, #20
 8001aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa4:	623a      	str	r2, [r7, #32]
 8001aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa8:	69f9      	ldr	r1, [r7, #28]
 8001aaa:	6a3a      	ldr	r2, [r7, #32]
 8001aac:	e841 2300 	strex	r3, r2, [r1]
 8001ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e5      	bne.n	8001a84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e00f      	b.n	8001af4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4013      	ands	r3, r2
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d09f      	beq.n	8001a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3740      	adds	r7, #64	; 0x40
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_tx_block_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	; 0x50
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001b08:	f3ef 8310 	mrs	r3, PRIMASK
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001b0e:	b672      	cpsid	i
    return(primask_value);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
ULONG                       lower_tbu;
#endif


    /* Disable interrupts to get a block from the pool.  */
    TX_DISABLE
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Determine if there is an available block.  */
    if (pool_ptr -> tx_block_pool_available != ((UINT) 0))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d022      	beq.n	8001b62 <_tx_block_allocate+0x66>
    {

        /* Yes, a block is available.  Decrement the available count.  */
        pool_ptr -> tx_block_pool_available--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Pickup the current block pointer.  */
        work_ptr =  pool_ptr -> tx_block_pool_available_list;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Return the first available block to the caller.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	3304      	adds	r3, #4
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        return_ptr =  TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
        *return_ptr =  temp_ptr;
 8001b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Modify the available list to point at the next block in the pool. */
        next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
        pool_ptr -> tx_block_pool_available_list =  *next_block_ptr;
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	611a      	str	r2, [r3, #16]

        /* Save the pool's address in the block for when it is released!  */
        temp_ptr =  TX_BLOCK_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        *next_block_ptr =  temp_ptr;
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b50:	601a      	str	r2, [r3, #0]
        /* Store the address of the allocated block.  */
        *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
#endif

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8001b52:	2300      	movs	r3, #0
 8001b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b58:	623b      	str	r3, [r7, #32]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f383 8810 	msr	PRIMASK, r3
}
 8001b60:	e071      	b.n	8001c46 <_tx_block_allocate+0x14a>
    }
    else
    {

        /* Default the return pointer to NULL.  */
        return_ptr =   TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	647b      	str	r3, [r7, #68]	; 0x44
        *return_ptr =  TX_NULL;
 8001b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d061      	beq.n	8001c36 <_tx_block_allocate+0x13a>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <_tx_block_allocate+0x154>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <_tx_block_allocate+0x8e>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_MEMORY;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f383 8810 	msr	PRIMASK, r3
}
 8001b88:	e05d      	b.n	8001c46 <_tx_block_allocate+0x14a>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_block_pool_performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <_tx_block_allocate+0x158>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_block_pool_cleanup);
 8001b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b92:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <_tx_block_allocate+0x15c>)
 8001b94:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return block pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) block_ptr;
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	67da      	str	r2, [r3, #124]	; 0x7c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Increment the number of suspended threads.  */
                (pool_ptr -> tx_block_pool_suspended_count)++;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8001bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <_tx_block_allocate+0xde>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_block_pool_suspension_list =     thread_ptr;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bca:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8001bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bd0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8001bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bd6:	675a      	str	r2, [r3, #116]	; 0x74
 8001bd8:	e011      	b.n	8001bfe <_tx_block_allocate+0x102>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_block_pool_suspension_list;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8001be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8001bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8001bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bf6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bfc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BLOCK_MEMORY;
 8001bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c00:	2208      	movs	r2, #8
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8001c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c06:	2201      	movs	r2, #1
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8001c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <_tx_block_allocate+0x154>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <_tx_block_allocate+0x154>)
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f383 8810 	msr	PRIMASK, r3
}
 8001c24:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8001c26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c28:	f004 fdf4 	bl	8006814 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8001c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	e007      	b.n	8001c46 <_tx_block_allocate+0x14a>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8001c36:	2310      	movs	r3, #16
 8001c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f383 8810 	msr	PRIMASK, r3
}
 8001c44:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8001c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2000efe8 	.word	0x2000efe8
 8001c54:	2000ef4c 	.word	0x2000ef4c
 8001c58:	08001c5d 	.word	0x08001c5d

08001c5c <_tx_block_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_block_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001c66:	f3ef 8310 	mrs	r3, PRIMASK
 8001c6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001c6c:	b672      	cpsid	i
    return(primask_value);
 8001c6e:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the block pool.  */
    TX_DISABLE
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_block_pool_cleanup))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c76:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <_tx_block_pool_cleanup+0xe4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d156      	bne.n	8001d2a <_tx_block_pool_cleanup+0xce>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d150      	bne.n	8001d2a <_tx_block_pool_cleanup+0xce>
        {

            /* Setup pointer to block pool control block.  */
            pool_ptr =  TX_VOID_TO_BLOCK_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d04a      	beq.n	8001d2a <_tx_block_pool_cleanup+0xce>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_block_pool_id == TX_BLOCK_POOL_ID)
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <_tx_block_pool_cleanup+0xe8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d145      	bne.n	8001d2a <_tx_block_pool_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_block_pool_suspended_count != TX_NO_SUSPENSIONS)
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d041      	beq.n	8001d2a <_tx_block_pool_cleanup+0xce>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        pool_ptr -> tx_block_pool_suspended_count--;
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <_tx_block_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
 8001cc8:	e013      	b.n	8001cf2 <_tx_block_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd4:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d102      	bne.n	8001cf2 <_tx_block_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_block_pool_suspension_list =     next_thread;
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	6a3a      	ldr	r2, [r7, #32]
 8001cf0:	621a      	str	r2, [r3, #32]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BLOCK_MEMORY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d117      	bne.n	8001d2a <_tx_block_pool_cleanup+0xce>
                            /* Increment the number of timeouts on this block pool.  */
                            pool_ptr -> tx_block_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else
                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_tx_block_pool_cleanup+0xec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <_tx_block_pool_cleanup+0xec>)
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f383 8810 	msr	PRIMASK, r3
}
 8001d16:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f004 fc69 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d22:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001d24:	b672      	cpsid	i
    return(primask_value);
 8001d26:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f383 8810 	msr	PRIMASK, r3
}
 8001d34:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	; 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08001c5d 	.word	0x08001c5d
 8001d44:	424c4f43 	.word	0x424c4f43
 8001d48:	2000efe8 	.word	0x2000efe8

08001d4c <_tx_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b090      	sub	sp, #64	; 0x40
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
TX_BLOCK_POOL       *next_pool;
TX_BLOCK_POOL       *previous_pool;


    /* Initialize block pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BLOCK_POOL)));
 8001d5a:	2230      	movs	r2, #48	; 0x30
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f013 f9c8 	bl	80150f4 <memset>

    /* Round the block size up to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG). This helps guarantee proper alignment.  */
    block_size =  (((block_size + (sizeof(ALIGN_TYPE))) - ((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3303      	adds	r3, #3
 8001d68:	f023 0303 	bic.w	r3, r3, #3
 8001d6c:	607b      	str	r3, [r7, #4]

    /* Round the pool size down to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG).  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8001d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d70:	f023 0303 	bic.w	r3, r3, #3
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Setup the basic block pool fields.  */
    pool_ptr -> tx_block_pool_name =             name_ptr;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	605a      	str	r2, [r3, #4]
    pool_ptr -> tx_block_pool_start =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	615a      	str	r2, [r3, #20]
    pool_ptr -> tx_block_pool_size =             pool_size;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d86:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_block_pool_block_size =       (UINT) block_size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	61da      	str	r2, [r3, #28]

    /* Calculate the total number of blocks.  */
    total_blocks =  pool_size/(block_size + (sizeof(UCHAR *)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Walk through the pool area, setting up the available block list.  */
    blocks =            ((UINT) 0);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    block_ptr =         TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    next_block_ptr =    TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001da8:	4413      	add	r3, r2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8001dac:	e00e      	b.n	8001dcc <_tx_block_pool_create+0x80>
    {

        /* Yes, we have another block.  Increment the block count.  */
        blocks++;
 8001dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db0:	3301      	adds	r3, #1
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup the link to the next block.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  next_block_ptr;
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Advance to the next block.  */
        block_ptr =   next_block_ptr;
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Update the next block pointer.  */
        next_block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dc8:	4413      	add	r3, r2
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8001dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3ec      	bcc.n	8001dae <_tx_block_pool_create+0x62>
    }

    /* Save the remaining information in the pool control block.  */
    pool_ptr -> tx_block_pool_available =  blocks;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd8:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_block_pool_total =      blocks;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dde:	60da      	str	r2, [r3, #12]

    /* Quickly check to make sure at least one block is in the pool.  */
    if (blocks != ((UINT) 0))
 8001de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d045      	beq.n	8001e72 <_tx_block_pool_create+0x126>
    {

        /* Backup to the last block in the pool.  */
        block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr,(block_size + (sizeof(UCHAR *))));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	f06f 0303 	mvn.w	r3, #3
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df0:	4413      	add	r3, r2
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the last block's forward pointer to NULL.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8001df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  TX_NULL;
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Setup the starting pool address.  */
        pool_ptr -> tx_block_pool_available_list =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001e04:	f3ef 8310 	mrs	r3, PRIMASK
 8001e08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001e0a:	b672      	cpsid	i
    return(primask_value);
 8001e0c:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts to place the block pool on the created list.  */
        TX_DISABLE
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Setup the block pool ID to make it valid.  */
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <_tx_block_pool_create+0x134>)
 8001e14:	601a      	str	r2, [r3, #0]

        /* Place the block pool on the list of created block pools.  First,
           check for an empty list.  */
        if (_tx_block_pool_created_count == TX_EMPTY)
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <_tx_block_pool_create+0x138>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <_tx_block_pool_create+0xe6>
        {

            /* The created block pool list is empty.  Add block pool to empty list.  */
            _tx_block_pool_created_ptr =                  pool_ptr;
 8001e1e:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <_tx_block_pool_create+0x13c>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6013      	str	r3, [r2, #0]
            pool_ptr -> tx_block_pool_created_next =      pool_ptr;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
            pool_ptr -> tx_block_pool_created_previous =  pool_ptr;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e30:	e011      	b.n	8001e56 <_tx_block_pool_create+0x10a>
        }
        else
        {

            /* This list is not NULL, add to the end of the list.  */
            next_pool =      _tx_block_pool_created_ptr;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <_tx_block_pool_create+0x13c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	623b      	str	r3, [r7, #32]
            previous_pool =  next_pool -> tx_block_pool_created_previous;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	61fb      	str	r3, [r7, #28]

            /* Place the new block pool in the list.  */
            next_pool -> tx_block_pool_created_previous =  pool_ptr;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
            previous_pool -> tx_block_pool_created_next =  pool_ptr;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28

            /* Setup this block pool's created links.  */
            pool_ptr -> tx_block_pool_created_previous =  previous_pool;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
            pool_ptr -> tx_block_pool_created_next =      next_pool;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a3a      	ldr	r2, [r7, #32]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /* Increment the created count.  */
        _tx_block_pool_created_count++;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <_tx_block_pool_create+0x138>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <_tx_block_pool_create+0x138>)
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return successful status.  */
        status =  TX_SUCCESS;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e70:	e001      	b.n	8001e76 <_tx_block_pool_create+0x12a>
    }
    else
    {

        /* Not enough memory for one block, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8001e72:	2305      	movs	r3, #5
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Return completion status.  */
    return(status);
 8001e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3740      	adds	r7, #64	; 0x40
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	424c4f43 	.word	0x424c4f43
 8001e84:	2000ef38 	.word	0x2000ef38
 8001e88:	2000ef34 	.word	0x2000ef34

08001e8c <_tx_block_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001e94:	f3ef 8310 	mrs	r3, PRIMASK
 8001e98:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001e9a:	b672      	cpsid	i
    return(primask_value);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
TX_BLOCK_POOL   *next_pool;
TX_BLOCK_POOL   *previous_pool;


    /* Disable interrupts to remove the block pool from the created list.  */
    TX_DISABLE
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If trace is enabled, unregister this object.  */
    TX_TRACE_OBJECT_UNREGISTER(pool_ptr)

    /* Clear the block pool ID to make it invalid.  */
    pool_ptr -> tx_block_pool_id =  TX_CLEAR_ID;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Decrement the number of block pools.  */
    _tx_block_pool_created_count--;
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <_tx_block_pool_delete+0x108>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <_tx_block_pool_delete+0x108>)
 8001eae:	6013      	str	r3, [r2, #0]

    /* See if the block pool is the only one on the list.  */
    if (_tx_block_pool_created_count == TX_EMPTY)
 8001eb0:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <_tx_block_pool_delete+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <_tx_block_pool_delete+0x34>
    {

        /* Only created block pool, just set the created list to NULL.  */
        _tx_block_pool_created_ptr =  TX_NULL;
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <_tx_block_pool_delete+0x10c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e013      	b.n	8001ee8 <_tx_block_pool_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                    pool_ptr -> tx_block_pool_created_next;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_pool =                                pool_ptr -> tx_block_pool_created_previous;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
        next_pool -> tx_block_pool_created_previous =  previous_pool;
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
        previous_pool -> tx_block_pool_created_next =  next_pool;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28

        /* See if we have to update the created list head pointer.  */
        if (_tx_block_pool_created_ptr == pool_ptr)
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <_tx_block_pool_delete+0x10c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d102      	bne.n	8001ee8 <_tx_block_pool_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_block_pool_created_ptr =  next_pool;
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <_tx_block_pool_delete+0x10c>)
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <_tx_block_pool_delete+0x110>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <_tx_block_pool_delete+0x110>)
 8001ef0:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                 pool_ptr -> tx_block_pool_suspension_list;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
    suspended_count =                            pool_ptr -> tx_block_pool_suspended_count;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
    pool_ptr -> tx_block_pool_suspended_count =  TX_NO_SUSPENSIONS;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
 8001f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f383 8810 	msr	PRIMASK, r3
}
 8001f14:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the block pool suspension list to resume any and all threads suspended
       on this block pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8001f16:	e022      	b.n	8001f5e <_tx_block_pool_delete+0xd2>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f22:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001f24:	b672      	cpsid	i
    return(primask_value);
 8001f26:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	2201      	movs	r2, #1
 8001f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <_tx_block_pool_delete+0x110>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <_tx_block_pool_delete+0x110>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f383 8810 	msr	PRIMASK, r3
}
 8001f52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8001f54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f56:	f004 fb4b 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1d9      	bne.n	8001f18 <_tx_block_pool_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001f64:	f3ef 8310 	mrs	r3, PRIMASK
 8001f68:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001f6a:	b672      	cpsid	i
    return(primask_value);
 8001f6c:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BLOCK_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <_tx_block_pool_delete+0x110>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <_tx_block_pool_delete+0x110>)
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f383 8810 	msr	PRIMASK, r3
}
 8001f84:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8001f86:	f004 faf9 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3738      	adds	r7, #56	; 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000ef38 	.word	0x2000ef38
 8001f98:	2000ef34 	.word	0x2000ef34
 8001f9c:	2000efe8 	.word	0x2000efe8

08001fa0 <_tx_block_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks,
                    ULONG *total_blocks, TX_THREAD **first_suspended,
                    ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001fae:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001fb4:	b672      	cpsid	i
    return(primask_value);
 8001fb6:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8001fb8:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the block pool.  */
    if (name != TX_NULL)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <_tx_block_pool_info_get+0x28>
    {

        *name =  pool_ptr -> tx_block_pool_name;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of available blocks in the block pool.  */
    if (available_blocks != TX_NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <_tx_block_pool_info_get+0x36>
    {

        *available_blocks =  (ULONG) pool_ptr -> tx_block_pool_available;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the total number of blocks in the block pool.  */
    if (total_blocks != TX_NULL)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <_tx_block_pool_info_get+0x44>
    {

        *total_blocks =  (ULONG) pool_ptr -> tx_block_pool_total;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this block pool.  */
    if (first_suspended != TX_NULL)
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <_tx_block_pool_info_get+0x52>
    {

        *first_suspended =  pool_ptr -> tx_block_pool_suspension_list;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this block pool.  */
    if (suspended_count != TX_NULL)
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <_tx_block_pool_info_get+0x60>
    {

        *suspended_count =  (ULONG) pool_ptr -> tx_block_pool_suspended_count;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next block pool created.  */
    if (next_pool != TX_NULL)
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <_tx_block_pool_info_get+0x6e>
    {

        *next_pool =  pool_ptr -> tx_block_pool_created_next;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f383 8810 	msr	PRIMASK, r3
}
 8002018:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3724      	adds	r7, #36	; 0x24
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_tx_block_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002030:	f3ef 8310 	mrs	r3, PRIMASK
 8002034:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002036:	b672      	cpsid	i
    return(primask_value);
 8002038:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts.  */
    TX_DISABLE
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_BLOCK_POOL_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d805      	bhi.n	8002054 <_tx_block_pool_prioritize+0x2c>
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f383 8810 	msr	PRIMASK, r3
}
 8002052:	e090      	b.n	8002176 <_tx_block_pool_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this block memory pool.  */
    else if (suspended_count == ((UINT) 2))
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	2b02      	cmp	r3, #2
 8002058:	d114      	bne.n	8002084 <_tx_block_pool_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  pool_ptr -> tx_block_pool_suspension_list;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	429a      	cmp	r2, r3
 8002070:	d202      	bcs.n	8002078 <_tx_block_pool_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	621a      	str	r2, [r3, #32]
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f383 8810 	msr	PRIMASK, r3
}
 8002082:	e078      	b.n	8002176 <_tx_block_pool_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   pool_ptr -> tx_block_pool_suspension_list;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <_tx_block_pool_prioritize+0x158>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a39      	ldr	r2, [pc, #228]	; (8002180 <_tx_block_pool_prioritize+0x158>)
 800209c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800209e:	2300      	movs	r3, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d201      	bcs.n	80020b2 <_tx_block_pool_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80020ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f383 8810 	msr	PRIMASK, r3
}
 80020bc:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80020be:	f3ef 8310 	mrs	r3, PRIMASK
 80020c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80020c4:	b672      	cpsid	i
    return(primask_value);
 80020c6:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80020c8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != pool_ptr -> tx_block_pool_suspension_list)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d002      	beq.n	80020da <_tx_block_pool_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d8:	e006      	b.n	80020e8 <_tx_block_pool_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != pool_ptr -> tx_block_pool_suspended_count)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <_tx_block_pool_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <_tx_block_pool_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80020ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f4:	e00c      	b.n	8002110 <_tx_block_pool_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   pool_ptr -> tx_block_pool_suspension_list;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800210c:	2300      	movs	r3, #0
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8002110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	429a      	cmp	r2, r3
 8002116:	d1c4      	bne.n	80020a2 <_tx_block_pool_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <_tx_block_pool_prioritize+0x158>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3b01      	subs	r3, #1
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <_tx_block_pool_prioritize+0x158>)
 8002120:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8002122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	429a      	cmp	r2, r3
 8002128:	d01d      	beq.n	8002166 <_tx_block_pool_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002134:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002146:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800214c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002158:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            pool_ptr -> tx_block_pool_suspension_list =  priority_thread_ptr;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002164:	621a      	str	r2, [r3, #32]
 8002166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002168:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002172:	f004 fa03 	bl	800657c <_tx_thread_system_preempt_check>
    }

    /* Return successful status.  */
    return(TX_SUCCESS);
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3740      	adds	r7, #64	; 0x40
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000efe8 	.word	0x2000efe8

08002184 <_tx_block_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_release(VOID *block_ptr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800218c:	f3ef 8310 	mrs	r3, PRIMASK
 8002190:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002192:	b672      	cpsid	i
    return(primask_value);
 8002194:	693b      	ldr	r3, [r7, #16]
TX_THREAD           *next_thread;
TX_THREAD           *previous_thread;


    /* Disable interrupts to put this block back in the pool.  */
    TX_DISABLE
 8002196:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the pool pointer which is just previous to the starting
       address of the block that the caller sees.  */
    work_ptr =        TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
    work_ptr =        TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	3b04      	subs	r3, #4
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
    next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pool_ptr =        TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT((*next_block_ptr));
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_BLOCK_RELEASE_INSERT

    /* Determine if there are any threads suspended on the block pool.  */
    thread_ptr =  pool_ptr -> tx_block_pool_suspension_list;
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (thread_ptr != TX_NULL)
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03b      	beq.n	8002230 <_tx_block_release+0xac>
    {

        /* Remove the suspended thread from the list.  */

        /* Decrement the number of threads suspended.  */
        (pool_ptr -> tx_block_pool_suspended_count)--;
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Pickup the suspended count.  */
        suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	623b      	str	r3, [r7, #32]

        /* See if this is the only suspended thread on the list.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <_tx_block_release+0x52>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
 80021d4:	e00e      	b.n	80021f4 <_tx_block_release+0x70>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                thread_ptr -> tx_thread_suspended_next;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	61fb      	str	r3, [r7, #28]
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	621a      	str	r2, [r3, #32]

            /* Update the links of the adjacent threads.  */
            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	2200      	movs	r2, #0
 80021f8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        return_block_ptr =  TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fe:	617b      	str	r3, [r7, #20]
        work_ptr =          TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
        *return_block_ptr =  work_ptr;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002208:	601a      	str	r2, [r3, #0]

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	2200      	movs	r2, #0
 800220e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_tx_block_release+0xdc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <_tx_block_release+0xdc>)
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f383 8810 	msr	PRIMASK, r3
}
 8002226:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8002228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800222a:	f004 f9e1 	bl	80065f0 <_tx_thread_system_resume>
 800222e:	e011      	b.n	8002254 <_tx_block_release+0xd0>
    {

        /* No thread is suspended for a memory block.  */

        /* Put the block back in the available list.  */
        *next_block_ptr =  pool_ptr -> tx_block_pool_available_list;
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	601a      	str	r2, [r3, #0]

        /* Adjust the head pointer.  */
        pool_ptr -> tx_block_pool_available_list =  work_ptr;
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223c:	611a      	str	r2, [r3, #16]

        /* Increment the count of available blocks.  */
        pool_ptr -> tx_block_pool_available++;
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f383 8810 	msr	PRIMASK, r3
}
 8002252:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return successful completion status.  */
    return(TX_SUCCESS);
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3738      	adds	r7, #56	; 0x38
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000efe8 	.word	0x2000efe8

08002264 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b094      	sub	sp, #80	; 0x50
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3303      	adds	r3, #3
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800227c:	f3ef 8310 	mrs	r3, PRIMASK
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002282:	b672      	cpsid	i
    return(primask_value);
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002288:	4b54      	ldr	r3, [pc, #336]	; (80023dc <_tx_byte_allocate+0x178>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800228e:	2300      	movs	r3, #0
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002296:	621a      	str	r2, [r3, #32]
 8002298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	f383 8810 	msr	PRIMASK, r3
}
 80022a2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb26 	bl	80028f8 <_tx_byte_pool_search>
 80022ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80022ae:	f3ef 8310 	mrs	r3, PRIMASK
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80022b4:	b672      	cpsid	i
    return(primask_value);
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80022ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <_tx_byte_allocate+0x62>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80022c0:	2301      	movs	r3, #1
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
 80022c4:	e006      	b.n	80022d4 <_tx_byte_allocate+0x70>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d101      	bne.n	80022d4 <_tx_byte_allocate+0x70>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0db      	beq.n	8002292 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022de:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <_tx_byte_allocate+0x94>
 80022e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e8:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	f383 8810 	msr	PRIMASK, r3
}
 80022f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80022f2:	2300      	movs	r3, #0
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80022f6:	e06c      	b.n	80023d2 <_tx_byte_allocate+0x16e>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d061      	beq.n	80023c2 <_tx_byte_allocate+0x15e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <_tx_byte_allocate+0x17c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <_tx_byte_allocate+0xb2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8002306:	2310      	movs	r3, #16
 8002308:	64bb      	str	r3, [r7, #72]	; 0x48
 800230a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f383 8810 	msr	PRIMASK, r3
}
 8002314:	e05d      	b.n	80023d2 <_tx_byte_allocate+0x16e>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	4a32      	ldr	r2, [pc, #200]	; (80023e4 <_tx_byte_allocate+0x180>)
 800231a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800231c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8002322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8002328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800232e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002330:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002338:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <_tx_byte_allocate+0x102>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8002358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800235c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002362:	675a      	str	r2, [r3, #116]	; 0x74
 8002364:	e011      	b.n	800238a <_tx_byte_allocate+0x126>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002370:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002382:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002388:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800238a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238c:	2209      	movs	r2, #9
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002392:	2201      	movs	r2, #1
 8002394:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8002396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <_tx_byte_allocate+0x17c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <_tx_byte_allocate+0x17c>)
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f383 8810 	msr	PRIMASK, r3
}
 80023b0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80023b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80023b4:	f004 fa2e 	bl	8006814 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c0:	e007      	b.n	80023d2 <_tx_byte_allocate+0x16e>
 80023c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f383 8810 	msr	PRIMASK, r3
}
 80023cc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80023ce:	2310      	movs	r3, #16
 80023d0:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 80023d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3750      	adds	r7, #80	; 0x50
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000ef4c 	.word	0x2000ef4c
 80023e0:	2000efe8 	.word	0x2000efe8
 80023e4:	080023e9 	.word	0x080023e9

080023e8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80023f2:	f3ef 8310 	mrs	r3, PRIMASK
 80023f6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80023f8:	b672      	cpsid	i
    return(primask_value);
 80023fa:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002402:	4a32      	ldr	r2, [pc, #200]	; (80024cc <_tx_byte_pool_cleanup+0xe4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d156      	bne.n	80024b6 <_tx_byte_pool_cleanup+0xce>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d150      	bne.n	80024b6 <_tx_byte_pool_cleanup+0xce>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04a      	beq.n	80024b6 <_tx_byte_pool_cleanup+0xce>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <_tx_byte_pool_cleanup+0xe8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d145      	bne.n	80024b6 <_tx_byte_pool_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	d041      	beq.n	80024b6 <_tx_byte_pool_cleanup+0xce>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	1e5a      	subs	r2, r3, #1
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
 8002454:	e013      	b.n	800247e <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002460:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d102      	bne.n	800247e <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	6a3a      	ldr	r2, [r7, #32]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	2b09      	cmp	r3, #9
 8002484:	d117      	bne.n	80024b6 <_tx_byte_pool_cleanup+0xce>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2210      	movs	r2, #16
 800248a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <_tx_byte_pool_cleanup+0xec>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <_tx_byte_pool_cleanup+0xec>)
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f383 8810 	msr	PRIMASK, r3
}
 80024a2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f004 f8a3 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80024aa:	f3ef 8310 	mrs	r3, PRIMASK
 80024ae:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80024b0:	b672      	cpsid	i
    return(primask_value);
 80024b2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f383 8810 	msr	PRIMASK, r3
}
 80024c0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80024c2:	bf00      	nop
 80024c4:	3730      	adds	r7, #48	; 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	080023e9 	.word	0x080023e9
 80024d0:	42595445 	.word	0x42595445
 80024d4:	2000efe8 	.word	0x2000efe8

080024d8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08e      	sub	sp, #56	; 0x38
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80024e6:	2234      	movs	r2, #52	; 0x34
 80024e8:	2100      	movs	r1, #0
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f012 fe02 	bl	80150f4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f023 0303 	bic.w	r3, r3, #3
 80024f6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1a3 0208 	sub.w	r2, r3, #8
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2202      	movs	r2, #2
 8002524:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800252a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002534:	3b04      	subs	r3, #4
 8002536:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002544:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	3b04      	subs	r3, #4
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002562:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	3304      	adds	r3, #4
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <_tx_byte_pool_create+0x118>)
 8002576:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800257e:	f3ef 8310 	mrs	r3, PRIMASK
 8002582:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002584:	b672      	cpsid	i
    return(primask_value);
 8002586:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002588:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <_tx_byte_pool_create+0x11c>)
 800258e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <_tx_byte_pool_create+0x120>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <_tx_byte_pool_create+0x124>)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	e011      	b.n	80025d0 <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_tx_byte_pool_create+0x124>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <_tx_byte_pool_create+0x120>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <_tx_byte_pool_create+0x120>)
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f383 8810 	msr	PRIMASK, r3
}
 80025e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3738      	adds	r7, #56	; 0x38
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	ffffeeee 	.word	0xffffeeee
 80025f4:	42595445 	.word	0x42595445
 80025f8:	2000ef40 	.word	0x2000ef40
 80025fc:	2000ef3c 	.word	0x2000ef3c

08002600 <_tx_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08e      	sub	sp, #56	; 0x38
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002608:	f3ef 8310 	mrs	r3, PRIMASK
 800260c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800260e:	b672      	cpsid	i
    return(primask_value);
 8002610:	69fb      	ldr	r3, [r7, #28]
TX_BYTE_POOL    *next_pool;
TX_BYTE_POOL    *previous_pool;


    /* Disable interrupts to remove the byte pool from the created list.  */
    TX_DISABLE
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_BYTE_POOL_DELETE_INSERT

    /* Clear the byte pool ID to make it invalid.  */
    pool_ptr -> tx_byte_pool_id =  TX_CLEAR_ID;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

    /* Decrement the number of byte pools created.  */
    _tx_byte_pool_created_count--;
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <_tx_byte_pool_delete+0x108>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	4a39      	ldr	r2, [pc, #228]	; (8002708 <_tx_byte_pool_delete+0x108>)
 8002622:	6013      	str	r3, [r2, #0]

    /* See if the byte pool is the only one on the list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002624:	4b38      	ldr	r3, [pc, #224]	; (8002708 <_tx_byte_pool_delete+0x108>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d103      	bne.n	8002634 <_tx_byte_pool_delete+0x34>
    {

        /* Only created byte pool, just set the created list to NULL.  */
        _tx_byte_pool_created_ptr =  TX_NULL;
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <_tx_byte_pool_delete+0x10c>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e013      	b.n	800265c <_tx_byte_pool_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                   pool_ptr -> tx_byte_pool_created_next;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_pool =                               pool_ptr -> tx_byte_pool_created_previous;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
        next_pool -> tx_byte_pool_created_previous =  previous_pool;
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  next_pool;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* See if we have to update the created list head pointer.  */
        if (_tx_byte_pool_created_ptr == pool_ptr)
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <_tx_byte_pool_delete+0x10c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d102      	bne.n	800265c <_tx_byte_pool_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_byte_pool_created_ptr =  next_pool;
 8002656:	4a2d      	ldr	r2, [pc, #180]	; (800270c <_tx_byte_pool_delete+0x10c>)
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <_tx_byte_pool_delete+0x110>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	4a2b      	ldr	r2, [pc, #172]	; (8002710 <_tx_byte_pool_delete+0x110>)
 8002664:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                pool_ptr -> tx_byte_pool_suspension_list;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
    pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    suspended_count =                           pool_ptr -> tx_byte_pool_suspended_count;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
    pool_ptr -> tx_byte_pool_suspended_count =  TX_NO_SUSPENSIONS;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f383 8810 	msr	PRIMASK, r3
}
 8002688:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the byte pool list to resume any and all threads suspended
       on this byte pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800268a:	e022      	b.n	80026d2 <_tx_byte_pool_delete+0xd2>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	3b01      	subs	r3, #1
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002692:	f3ef 8310 	mrs	r3, PRIMASK
 8002696:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002698:	b672      	cpsid	i
    return(primask_value);
 800269a:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a0:	2200      	movs	r2, #0
 80026a2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	2201      	movs	r2, #1
 80026a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <_tx_byte_pool_delete+0x110>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <_tx_byte_pool_delete+0x110>)
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f383 8810 	msr	PRIMASK, r3
}
 80026c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80026c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026ca:	f003 ff91 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1d9      	bne.n	800268c <_tx_byte_pool_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80026d8:	f3ef 8310 	mrs	r3, PRIMASK
 80026dc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80026de:	b672      	cpsid	i
    return(primask_value);
 80026e0:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BYTE_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <_tx_byte_pool_delete+0x110>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <_tx_byte_pool_delete+0x110>)
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f383 8810 	msr	PRIMASK, r3
}
 80026f8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80026fa:	f003 ff3f 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000ef40 	.word	0x2000ef40
 800270c:	2000ef3c 	.word	0x2000ef3c
 8002710:	2000efe8 	.word	0x2000efe8

08002714 <_tx_byte_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes,
                    ULONG *fragments, TX_THREAD **first_suspended,
                    ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002722:	f3ef 8310 	mrs	r3, PRIMASK
 8002726:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002728:	b672      	cpsid	i
    return(primask_value);
 800272a:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800272c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the byte pool.  */
    if (name != TX_NULL)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <_tx_byte_pool_info_get+0x28>
    {

        *name =  pool_ptr -> tx_byte_pool_name;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of available bytes in the byte pool.  */
    if (available_bytes != TX_NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <_tx_byte_pool_info_get+0x36>
    {

        *available_bytes =  pool_ptr -> tx_byte_pool_available;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the total number of bytes in the byte pool.  */
    if (fragments != TX_NULL)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <_tx_byte_pool_info_get+0x44>
    {

        *fragments =  (ULONG) pool_ptr -> tx_byte_pool_fragments;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this byte pool.  */
    if (first_suspended != TX_NULL)
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <_tx_byte_pool_info_get+0x52>
    {

        *first_suspended =  pool_ptr -> tx_byte_pool_suspension_list;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this byte pool.  */
    if (suspended_count != TX_NULL)
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <_tx_byte_pool_info_get+0x60>
    {

        *suspended_count =  (ULONG) pool_ptr -> tx_byte_pool_suspended_count;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next byte pool created.  */
    if (next_pool != TX_NULL)
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <_tx_byte_pool_info_get+0x6e>
    {

        *next_pool =  pool_ptr -> tx_byte_pool_created_next;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3724      	adds	r7, #36	; 0x24
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_tx_byte_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b090      	sub	sp, #64	; 0x40
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80027a4:	f3ef 8310 	mrs	r3, PRIMASK
 80027a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80027aa:	b672      	cpsid	i
    return(primask_value);
 80027ac:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts.  */
    TX_DISABLE
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_BYTE_POOL_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d805      	bhi.n	80027c8 <_tx_byte_pool_prioritize+0x2c>
 80027bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	e090      	b.n	80028ea <_tx_byte_pool_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this byte memory pool.  */
    else if (suspended_count == ((UINT) 2))
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d114      	bne.n	80027f8 <_tx_byte_pool_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d202      	bcs.n	80027ec <_tx_byte_pool_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            pool_ptr -> tx_byte_pool_suspension_list =  next_thread;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f383 8810 	msr	PRIMASK, r3
}
 80027f6:	e078      	b.n	80028ea <_tx_byte_pool_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   pool_ptr -> tx_byte_pool_suspension_list;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <_tx_byte_pool_prioritize+0x158>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a39      	ldr	r2, [pc, #228]	; (80028f4 <_tx_byte_pool_prioritize+0x158>)
 8002810:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	429a      	cmp	r2, r3
 8002820:	d201      	bcs.n	8002826 <_tx_byte_pool_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
 8002826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002828:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f383 8810 	msr	PRIMASK, r3
}
 8002830:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002832:	f3ef 8310 	mrs	r3, PRIMASK
 8002836:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002838:	b672      	cpsid	i
    return(primask_value);
 800283a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != pool_ptr -> tx_byte_pool_suspension_list)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002844:	429a      	cmp	r2, r3
 8002846:	d002      	beq.n	800284e <_tx_byte_pool_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
 800284c:	e006      	b.n	800285c <_tx_byte_pool_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != pool_ptr -> tx_byte_pool_suspended_count)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <_tx_byte_pool_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8002858:	2301      	movs	r3, #1
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <_tx_byte_pool_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
 8002868:	e00c      	b.n	8002884 <_tx_byte_pool_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   pool_ptr -> tx_byte_pool_suspension_list;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8002884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	429a      	cmp	r2, r3
 800288a:	d1c4      	bne.n	8002816 <_tx_byte_pool_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <_tx_byte_pool_prioritize+0x158>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <_tx_byte_pool_prioritize+0x158>)
 8002894:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8002896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	429a      	cmp	r2, r3
 800289c:	d01d      	beq.n	80028da <_tx_byte_pool_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800289e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a8:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c0:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028cc:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d2:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            pool_ptr -> tx_byte_pool_suspension_list =  priority_thread_ptr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80028e6:	f003 fe49 	bl	800657c <_tx_thread_system_preempt_check>
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3740      	adds	r7, #64	; 0x40
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000efe8 	.word	0x2000efe8

080028f8 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b095      	sub	sp, #84	; 0x54
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8002902:	2300      	movs	r3, #0
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002906:	f3ef 8310 	mrs	r3, PRIMASK
 800290a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800290c:	b672      	cpsid	i
    return(primask_value);
 800290e:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8002910:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	3b02      	subs	r3, #2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	429a      	cmp	r2, r3
 8002928:	d308      	bcc.n	800293c <_tx_byte_pool_search+0x44>
 800292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f383 8810 	msr	PRIMASK, r3
}
 8002934:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	64bb      	str	r3, [r7, #72]	; 0x48
 800293a:	e0db      	b.n	8002af4 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800293c:	4b71      	ldr	r3, [pc, #452]	; (8002b04 <_tx_byte_pool_search+0x20c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002946:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	3301      	adds	r3, #1
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 8002956:	2300      	movs	r3, #0
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800295a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800295c:	3304      	adds	r3, #4
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <_tx_byte_pool_search+0x210>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d143      	bne.n	80029f6 <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d104      	bne.n	800297e <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002978:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800297a:	2301      	movs	r3, #1
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800297e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8002990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002992:	3b08      	subs	r3, #8
 8002994:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8002996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d255      	bcs.n	8002a4a <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800299e:	2300      	movs	r3, #0
 80029a0:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3304      	adds	r3, #4
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <_tx_byte_pool_search+0x210>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d114      	bne.n	8002a00 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	e010      	b.n	8002a00 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80029e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 80029ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f0:	3b01      	subs	r3, #1
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
 80029f4:	e004      	b.n	8002a00 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80029f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 8002a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002a18:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002a1e:	b672      	cpsid	i
    return(primask_value);
 8002a20:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d009      	beq.n	8002a42 <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a40:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8002a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d188      	bne.n	800295a <_tx_byte_pool_search+0x62>
 8002a48:	e000      	b.n	8002a4c <_tx_byte_pool_search+0x154>
                    break;
 8002a4a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8002a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d048      	beq.n	8002ae4 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8002a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b13      	cmp	r3, #19
 8002a5a:	d91e      	bls.n	8002a9a <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	3308      	adds	r3, #8
 8002a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a62:	4413      	add	r3, r2
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	3304      	adds	r3, #4
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <_tx_byte_pool_search+0x210>)
 8002a84:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f1a3 0208 	sub.w	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d105      	bne.n	8002ad0 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	615a      	str	r2, [r3, #20]
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f383 8810 	msr	PRIMASK, r3
}
 8002ada:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	3308      	adds	r3, #8
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae2:	e007      	b.n	8002af4 <_tx_byte_pool_search+0x1fc>
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f383 8810 	msr	PRIMASK, r3
}
 8002aee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8002af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3754      	adds	r7, #84	; 0x54
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000ef4c 	.word	0x2000ef4c
 8002b08:	ffffeeee 	.word	0xffffeeee

08002b0c <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b09a      	sub	sp, #104	; 0x68
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 8002b14:	2300      	movs	r3, #0
 8002b16:	663b      	str	r3, [r7, #96]	; 0x60

    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002b22:	b672      	cpsid	i
    return(primask_value);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Lockout interrupts.  */
    TX_DISABLE
 8002b26:	667b      	str	r3, [r7, #100]	; 0x64

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (work_ptr != TX_NULL)
 8002b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d027      	beq.n	8002b82 <_tx_byte_release+0x76>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8002b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b34:	3b08      	subs	r3, #8
 8002b36:	65bb      	str	r3, [r7, #88]	; 0x58

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8002b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	653b      	str	r3, [r7, #80]	; 0x50
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 8002b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7c      	ldr	r2, [pc, #496]	; (8002d38 <_tx_byte_release+0x22c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d017      	beq.n	8002b7c <_tx_byte_release+0x70>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8002b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4e:	3304      	adds	r3, #4
 8002b50:	657b      	str	r3, [r7, #84]	; 0x54
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 8002b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b54:	64fb      	str	r3, [r7, #76]	; 0x4c
            pool_ptr =  *byte_pool_ptr;
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <_tx_byte_release+0x5c>
            {

                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 8002b62:	2303      	movs	r3, #3
 8002b64:	663b      	str	r3, [r7, #96]	; 0x60
 8002b66:	e00e      	b.n	8002b86 <_tx_byte_release+0x7a>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8002b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <_tx_byte_release+0x230>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <_tx_byte_release+0x7a>
                {

                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 8002b72:	2303      	movs	r3, #3
 8002b74:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7a:	e004      	b.n	8002b86 <_tx_byte_release+0x7a>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b80:	e001      	b.n	8002b86 <_tx_byte_release+0x7a>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 8002b82:	2303      	movs	r3, #3
 8002b84:	663b      	str	r3, [r7, #96]	; 0x60
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 8002b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <_tx_byte_release+0x8c>
 8002b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f383 8810 	msr	PRIMASK, r3
}
 8002b96:	e0c9      	b.n	8002d2c <_tx_byte_release+0x220>
    {

        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8002b98:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <_tx_byte_release+0x234>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ba2:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8002ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8002baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bac:	653b      	str	r3, [r7, #80]	; 0x50
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 8002bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb0:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <_tx_byte_release+0x22c>)
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb6:	647b      	str	r3, [r7, #68]	; 0x44
        next_block_ptr =  *block_link_ptr;
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
        pool_ptr -> tx_byte_pool_available =
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bc6:	1a8a      	subs	r2, r1, r2
 8002bc8:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =
 8002bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d202      	bcs.n	8002bde <_tx_byte_release+0xd2>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 8002bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bdc:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8002bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 809c 	beq.w	8002d20 <_tx_byte_release+0x214>
        {

            /* Now examine the suspension list to find threads waiting for
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8002be8:	e08a      	b.n	8002d00 <_tx_byte_release+0x1f4>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 8002bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f383 8810 	msr	PRIMASK, r3
}
 8002c00:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8002c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c06:	f7ff fe77 	bl	80028f8 <_tx_byte_pool_search>
 8002c0a:	65b8      	str	r0, [r7, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c10:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002c12:	b672      	cpsid	i
    return(primask_value);
 8002c14:	69fb      	ldr	r3, [r7, #28]

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 8002c16:	667b      	str	r3, [r7, #100]	; 0x64

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c1c:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 8002c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d073      	beq.n	8002d0c <_tx_byte_release+0x200>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 8002c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d145      	bne.n	8002cba <_tx_byte_release+0x1ae>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d140      	bne.n	8002cba <_tx_byte_release+0x1ae>
                    {

                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8002c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8002c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <_tx_byte_release+0x14a>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8002c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
 8002c54:	e00e      	b.n	8002c74 <_tx_byte_release+0x168>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6c:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c72:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c76:	2200      	movs	r2, #0
 8002c78:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
                        *suspend_info_ptr =  work_ptr;
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c84:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <_tx_byte_release+0x238>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <_tx_byte_release+0x238>)
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f383 8810 	msr	PRIMASK, r3
}
 8002ca6:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 8002ca8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002caa:	f003 fca1 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002cae:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002cb4:	b672      	cpsid	i
    return(primask_value);
 8002cb6:	697b      	ldr	r3, [r7, #20]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 8002cb8:	667b      	str	r3, [r7, #100]	; 0x64
                    }
                }

                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 8002cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01f      	beq.n	8002d00 <_tx_byte_release+0x1f4>

                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc2:	3b08      	subs	r3, #8
 8002cc4:	65bb      	str	r3, [r7, #88]	; 0x58
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	3304      	adds	r3, #4
 8002cca:	657b      	str	r3, [r7, #84]	; 0x54
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cce:	653b      	str	r3, [r7, #80]	; 0x50
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd2:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <_tx_byte_release+0x22c>)
 8002cd4:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
                    next_block_ptr =  *block_link_ptr;
 8002cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40
                    pool_ptr -> tx_byte_pool_available =
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8002ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ce8:	1a8a      	subs	r2, r1, r2
 8002cea:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =
 8002cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cee:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8002cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d202      	bcs.n	8002d00 <_tx_byte_release+0x1f4>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cfe:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8002d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f af70 	bne.w	8002bea <_tx_byte_release+0xde>
 8002d0a:	e000      	b.n	8002d0e <_tx_byte_release+0x202>
                    break;
 8002d0c:	bf00      	nop
 8002d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 8002d1a:	f003 fc2f 	bl	800657c <_tx_thread_system_preempt_check>
 8002d1e:	e005      	b.n	8002d2c <_tx_byte_release+0x220>
 8002d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8002d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3768      	adds	r7, #104	; 0x68
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	ffffeeee 	.word	0xffffeeee
 8002d3c:	42595445 	.word	0x42595445
 8002d40:	2000ef4c 	.word	0x2000ef4c
 8002d44:	2000efe8 	.word	0x2000efe8

08002d48 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002d52:	f3ef 8310 	mrs	r3, PRIMASK
 8002d56:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002d58:	b672      	cpsid	i
    return(primask_value);
 8002d5a:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d62:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <_tx_event_flags_cleanup+0xf8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d160      	bne.n	8002e2a <_tx_event_flags_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d15a      	bne.n	8002e2a <_tx_event_flags_cleanup+0xe2>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d054      	beq.n	8002e2a <_tx_event_flags_cleanup+0xe2>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <_tx_event_flags_cleanup+0xfc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d14f      	bne.n	8002e2a <_tx_event_flags_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d04b      	beq.n	8002e2a <_tx_event_flags_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	3b01      	subs	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
 8002dc2:	e016      	b.n	8002df2 <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d106      	bne.n	8002df2 <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e002      	b.n	8002df2 <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2201      	movs	r2, #1
 8002df0:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	2b07      	cmp	r3, #7
 8002df8:	d117      	bne.n	8002e2a <_tx_event_flags_cleanup+0xe2>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <_tx_event_flags_cleanup+0x100>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <_tx_event_flags_cleanup+0x100>)
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f383 8810 	msr	PRIMASK, r3
}
 8002e16:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f003 fbe9 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e22:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e24:	b672      	cpsid	i
    return(primask_value);
 8002e26:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f383 8810 	msr	PRIMASK, r3
}
 8002e34:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8002e36:	bf00      	nop
 8002e38:	3730      	adds	r7, #48	; 0x30
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08002d49 	.word	0x08002d49
 8002e44:	4456444e 	.word	0x4456444e
 8002e48:	2000efe8 	.word	0x2000efe8

08002e4c <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8002e56:	2230      	movs	r2, #48	; 0x30
 8002e58:	2100      	movs	r1, #0
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f012 f94a 	bl	80150f4 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e66:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e6c:	b672      	cpsid	i
    return(primask_value);
 8002e6e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8002e70:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <_tx_event_flags_create+0x8c>)
 8002e76:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <_tx_event_flags_create+0x90>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <_tx_event_flags_create+0x48>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8002e80:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <_tx_event_flags_create+0x94>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	61da      	str	r2, [r3, #28]
 8002e92:	e011      	b.n	8002eb8 <_tx_event_flags_create+0x6c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <_tx_event_flags_create+0x94>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <_tx_event_flags_create+0x90>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <_tx_event_flags_create+0x90>)
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	4456444e 	.word	0x4456444e
 8002edc:	2000ef28 	.word	0x2000ef28
 8002ee0:	2000ef24 	.word	0x2000ef24

08002ee4 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08e      	sub	sp, #56	; 0x38
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002eec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002ef2:	b672      	cpsid	i
    return(primask_value);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <_tx_event_flags_delete+0x108>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <_tx_event_flags_delete+0x108>)
 8002f06:	6013      	str	r3, [r2, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8002f08:	4b38      	ldr	r3, [pc, #224]	; (8002fec <_tx_event_flags_delete+0x108>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <_tx_event_flags_delete+0x34>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <_tx_event_flags_delete+0x10c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e013      	b.n	8002f40 <_tx_event_flags_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2e:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 8002f30:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <_tx_event_flags_delete+0x10c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d102      	bne.n	8002f40 <_tx_event_flags_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <_tx_event_flags_delete+0x10c>)
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002f40:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <_tx_event_flags_delete+0x110>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <_tx_event_flags_delete+0x110>)
 8002f48:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f383 8810 	msr	PRIMASK, r3
}
 8002f6c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8002f6e:	e022      	b.n	8002fb6 <_tx_event_flags_delete+0xd2>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	3b01      	subs	r3, #1
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002f76:	f3ef 8310 	mrs	r3, PRIMASK
 8002f7a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002f7c:	b672      	cpsid	i
    return(primask_value);
 8002f7e:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	2200      	movs	r2, #0
 8002f86:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8002f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <_tx_event_flags_delete+0x110>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <_tx_event_flags_delete+0x110>)
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8002fac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fae:	f003 fb1f 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1d9      	bne.n	8002f70 <_tx_event_flags_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002fc2:	b672      	cpsid	i
    return(primask_value);
 8002fc4:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <_tx_event_flags_delete+0x110>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <_tx_event_flags_delete+0x110>)
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8002fde:	f003 facd 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3738      	adds	r7, #56	; 0x38
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000ef28 	.word	0x2000ef28
 8002ff0:	2000ef24 	.word	0x2000ef24
 8002ff4:	2000efe8 	.word	0x2000efe8

08002ff8 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b094      	sub	sp, #80	; 0x50
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003006:	f3ef 8310 	mrs	r3, PRIMASK
 800300a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800300c:	b672      	cpsid	i
    return(primask_value);
 800300e:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8003010:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	647b      	str	r3, [r7, #68]	; 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8003026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	43db      	mvns	r3, r3
 8003030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003032:	4013      	ands	r3, r2
 8003034:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	2b02      	cmp	r3, #2
 800303a:	d10a      	bne.n	8003052 <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800303c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8003044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d006      	beq.n	800305a <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800304c:	2300      	movs	r3, #0
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
 8003050:	e003      	b.n	800305a <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8003052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800305a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d029      	beq.n	80030b4 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003064:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d11c      	bne.n	80030ae <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8003074:	2300      	movs	r3, #0
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800308c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d106      	bne.n	80030a0 <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	621a      	str	r2, [r3, #32]
 800309e:	e006      	b.n	80030ae <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80030ae:	2300      	movs	r3, #0
 80030b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b2:	e06e      	b.n	8003192 <_tx_event_flags_get+0x19a>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80030b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d069      	beq.n	800318e <_tx_event_flags_get+0x196>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <_tx_event_flags_get+0x1b0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 80030c2:	2307      	movs	r3, #7
 80030c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c6:	e064      	b.n	8003192 <_tx_event_flags_get+0x19a>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <_tx_event_flags_get+0x1b4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	4a37      	ldr	r2, [pc, #220]	; (80031b0 <_tx_event_flags_get+0x1b8>)
 80030d2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310c:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003118:	675a      	str	r2, [r3, #116]	; 0x74
 800311a:	e011      	b.n	8003140 <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003126:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003138:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313e:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	2207      	movs	r2, #7
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	2201      	movs	r2, #1
 8003154:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800315a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <_tx_event_flags_get+0x1b0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <_tx_event_flags_get+0x1b0>)
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003168:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f383 8810 	msr	PRIMASK, r3
}
 8003170:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003174:	f003 fb4e 	bl	8006814 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800317e:	b672      	cpsid	i
    return(primask_value);
 8003180:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
 800318c:	e001      	b.n	8003192 <_tx_event_flags_get+0x19a>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800318e:	2307      	movs	r3, #7
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
 8003192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003194:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3750      	adds	r7, #80	; 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000efe8 	.word	0x2000efe8
 80031ac:	2000ef4c 	.word	0x2000ef4c
 80031b0:	08002d49 	.word	0x08002d49

080031b4 <_tx_event_flags_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_EVENT_FLAGS_GROUP **next_group)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80031c2:	f3ef 8310 	mrs	r3, PRIMASK
 80031c6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80031c8:	b672      	cpsid	i
    return(primask_value);
 80031ca:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80031cc:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the event flag group.  */
    if (name != TX_NULL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <_tx_event_flags_info_get+0x28>
    {

        *name =  group_ptr -> tx_event_flags_group_name;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current event flags in the event flag group.  */
    if (current_flags != TX_NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <_tx_event_flags_info_get+0x3e>
    {

        /* Pickup the current flags and apply delayed clearing.  */
        *current_flags =  group_ptr -> tx_event_flags_group_current &
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689a      	ldr	r2, [r3, #8]
                                                        ~group_ptr -> tx_event_flags_group_delayed_clear;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	43db      	mvns	r3, r3
        *current_flags =  group_ptr -> tx_event_flags_group_current &
 80031ec:	401a      	ands	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this event flag group.  */
    if (first_suspended != TX_NULL)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <_tx_event_flags_info_get+0x4c>
    {

        *first_suspended =  group_ptr -> tx_event_flags_group_suspension_list;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this event flag group.  */
    if (suspended_count != TX_NULL)
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <_tx_event_flags_info_get+0x5a>
    {

        *suspended_count =  (ULONG) group_ptr -> tx_event_flags_group_suspended_count;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next event flag group created.  */
    if (next_group != TX_NULL)
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <_tx_event_flags_info_get+0x68>
    {

        *next_group =  group_ptr -> tx_event_flags_group_created_next;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0a2      	sub	sp, #136	; 0x88
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" CPSID i" : : : "memory" );
 800324a:	b672      	cpsid	i
    return(primask_value);
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800324e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d023      	beq.n	80032a4 <_tx_event_flags_set+0x6c>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8003270:	2301      	movs	r3, #1
 8003272:	663b      	str	r3, [r7, #96]	; 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8003274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	43db      	mvns	r3, r3
 8003282:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	621a      	str	r2, [r3, #32]
 8003288:	e005      	b.n	8003296 <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	f383 8810 	msr	PRIMASK, r3
}
 80032a2:	e1c0      	b.n	8003626 <_tx_event_flags_set+0x3ee>
    {

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the notify callback routine for this event flag group.  */
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <_tx_event_flags_set+0x94>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 818a 	beq.w	80035f4 <_tx_event_flags_set+0x3bc>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 80032e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d167      	bne.n	80033b6 <_tx_event_flags_set+0x17e>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80032f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 80032fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003304:	653b      	str	r3, [r7, #80]	; 0x50

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003310:	2b02      	cmp	r3, #2
 8003312:	d10a      	bne.n	800332a <_tx_event_flags_set+0xf2>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8003314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	4013      	ands	r3, r2
 800331a:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800331c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003320:	429a      	cmp	r2, r3
 8003322:	d006      	beq.n	8003332 <_tx_event_flags_set+0xfa>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8003324:	2300      	movs	r3, #0
 8003326:	66bb      	str	r3, [r7, #104]	; 0x68
 8003328:	e003      	b.n	8003332 <_tx_event_flags_set+0xfa>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800332a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332e:	4013      	ands	r3, r2
 8003330:	66bb      	str	r3, [r7, #104]	; 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8003332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8164 	beq.w	8003602 <_tx_event_flags_set+0x3ca>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800333a:	2301      	movs	r3, #1
 800333c:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800333e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003344:	64bb      	str	r3, [r7, #72]	; 0x48
                    *suspend_info_ptr =  current_event_flags;
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003348:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800334a:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2b01      	cmp	r3, #1
 8003358:	d106      	bne.n	8003368 <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003378:	2200      	movs	r2, #0
 800337a:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800337c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003380:	2200      	movs	r2, #0
 8003382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8003386:	4b9a      	ldr	r3, [pc, #616]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a98      	ldr	r2, [pc, #608]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800339e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80033a2:	f003 f925 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 80033ac:	b672      	cpsid	i
    return(primask_value);
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 80033b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033b4:	e125      	b.n	8003602 <_tx_event_flags_set+0x3ca>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	677b      	str	r3, [r7, #116]	; 0x74
                thread_ptr =      suspended_list;
 80033bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	67fb      	str	r3, [r7, #124]	; 0x7c
                last_satisfied =  TX_NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 80033d6:	4b86      	ldr	r3, [pc, #536]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a84      	ldr	r2, [pc, #528]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80033f4:	b672      	cpsid	i
    return(primask_value);
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 80033f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <_tx_event_flags_set+0x1e8>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800340a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800341c:	4313      	orrs	r3, r2
 800341e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8003428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800342c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8003430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003438:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8003442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003444:	2b02      	cmp	r3, #2
 8003446:	d10a      	bne.n	800345e <_tx_event_flags_set+0x226>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8003448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	4013      	ands	r3, r2
 800344e:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8003450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003454:	429a      	cmp	r2, r3
 8003456:	d006      	beq.n	8003466 <_tx_event_flags_set+0x22e>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8003458:	2300      	movs	r3, #0
 800345a:	66bb      	str	r3, [r7, #104]	; 0x68
 800345c:	e003      	b.n	8003466 <_tx_event_flags_set+0x22e>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800345e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	4013      	ands	r3, r2
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8003466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	2b07      	cmp	r3, #7
 800346e:	d001      	beq.n	8003474 <_tx_event_flags_set+0x23c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8003470:	2301      	movs	r3, #1
 8003472:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8003474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <_tx_event_flags_set+0x30a>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	667b      	str	r3, [r7, #100]	; 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800347e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b07      	cmp	r3, #7
 8003486:	d11d      	bne.n	80034c4 <_tx_event_flags_set+0x28c>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8003488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800348c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
                            *suspend_info_ptr =  current_event_flags;
 8003490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003492:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003494:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8003496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	647b      	str	r3, [r7, #68]	; 0x44

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <_tx_event_flags_set+0x27a>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80034b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034b6:	2200      	movs	r2, #0
 80034b8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80034ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80034c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d102      	bne.n	80034d8 <_tx_event_flags_set+0x2a0>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	677b      	str	r3, [r7, #116]	; 0x74
 80034d6:	e016      	b.n	8003506 <_tx_event_flags_set+0x2ce>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80034d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80034e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80034e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ec:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034f2:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 80034f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d103      	bne.n	8003506 <_tx_event_flags_set+0x2ce>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 80034fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	1e5a      	subs	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8003510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <_tx_event_flags_set+0x2f4>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8003516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800351a:	67fb      	str	r3, [r7, #124]	; 0x7c
                            last_satisfied =  thread_ptr;
 800351c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003520:	67bb      	str	r3, [r7, #120]	; 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8003522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003526:	2200      	movs	r2, #0
 8003528:	671a      	str	r2, [r3, #112]	; 0x70
 800352a:	e00a      	b.n	8003542 <_tx_event_flags_set+0x30a>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800352c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800352e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003532:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8003534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003538:	2200      	movs	r2, #0
 800353a:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003540:	67bb      	str	r3, [r7, #120]	; 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8003542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8003548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800354a:	3b01      	subs	r3, #1
 800354c:	673b      	str	r3, [r7, #112]	; 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800354e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af45 	bne.w	80033e0 <_tx_event_flags_set+0x1a8>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800355a:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <_tx_event_flags_set+0x342>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800357e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8003588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800358a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                while(thread_ptr != TX_NULL)
 800358e:	e01d      	b.n	80035cc <_tx_event_flags_set+0x394>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800359e:	b672      	cpsid	i
    return(primask_value);
 80035a0:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 80035a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f383 8810 	msr	PRIMASK, r3
}
 80035bc:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 80035be:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80035c2:	f003 f815 	bl	80065f0 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 80035c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                while(thread_ptr != TX_NULL)
 80035cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1dd      	bne.n	8003590 <_tx_event_flags_set+0x358>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80035d4:	f3ef 8310 	mrs	r3, PRIMASK
 80035d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80035da:	b672      	cpsid	i
    return(primask_value);
 80035dc:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 80035de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 80035e2:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	4a01      	ldr	r2, [pc, #4]	; (80035f0 <_tx_event_flags_set+0x3b8>)
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e009      	b.n	8003602 <_tx_event_flags_set+0x3ca>
 80035ee:	bf00      	nop
 80035f0:	2000efe8 	.word	0x2000efe8
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <_tx_event_flags_set+0x3ca>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003606:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if a notify callback is required.  */
        if (events_set_notify != TX_NULL)
 8003610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <_tx_event_flags_set+0x3e4>
        {

            /* Call application event flags set notification.  */
            (events_set_notify)(group_ptr);
 8003616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	4798      	blx	r3
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <_tx_event_flags_set+0x3ee>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8003622:	f002 ffab 	bl	800657c <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3788      	adds	r7, #136	; 0x88
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_tx_event_flags_set_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *notify_group_ptr))
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800363a:	f3ef 8310 	mrs	r3, PRIMASK
 800363e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003640:	b672      	cpsid	i
    return(primask_value);
 8003642:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8003644:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_EVENT_FLAGS_SET_NOTIFY_INSERT

    /* Setup event flag group set notification callback function.  */
    group_ptr -> tx_event_flags_group_set_notify =  events_set_notify;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f383 8810 	msr	PRIMASK, r3
}
 8003656:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8003658:	2300      	movs	r3, #0
#endif
}
 800365a:	4618      	mov	r0, r3
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800366c:	f002 fbd8 	bl	8005e20 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8003670:	f003 fee4 	bl	800743c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <_tx_initialize_high_level+0x58>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <_tx_initialize_high_level+0x5c>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <_tx_initialize_high_level+0x60>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <_tx_initialize_high_level+0x64>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800368c:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <_tx_initialize_high_level+0x68>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <_tx_initialize_high_level+0x6c>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <_tx_initialize_high_level+0x70>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <_tx_initialize_high_level+0x74>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <_tx_initialize_high_level+0x78>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <_tx_initialize_high_level+0x7c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <_tx_initialize_high_level+0x80>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <_tx_initialize_high_level+0x84>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
#endif
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000ef14 	.word	0x2000ef14
 80036c4:	2000ef18 	.word	0x2000ef18
 80036c8:	2000ef1c 	.word	0x2000ef1c
 80036cc:	2000ef20 	.word	0x2000ef20
 80036d0:	2000ef24 	.word	0x2000ef24
 80036d4:	2000ef28 	.word	0x2000ef28
 80036d8:	2000ef34 	.word	0x2000ef34
 80036dc:	2000ef38 	.word	0x2000ef38
 80036e0:	2000ef3c 	.word	0x2000ef3c
 80036e4:	2000ef40 	.word	0x2000ef40
 80036e8:	2000ef2c 	.word	0x2000ef2c
 80036ec:	2000ef30 	.word	0x2000ef30

080036f0 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <_tx_initialize_kernel_enter+0x48>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80036fc:	d00c      	beq.n	8003718 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <_tx_initialize_kernel_enter+0x48>)
 8003700:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003704:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8003706:	f7fc fd7b 	bl	8000200 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800370a:	f7ff ffad 	bl	8003668 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <_tx_initialize_kernel_enter+0x4c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	4a09      	ldr	r2, [pc, #36]	; (800373c <_tx_initialize_kernel_enter+0x4c>)
 8003716:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8003718:	4b07      	ldr	r3, [pc, #28]	; (8003738 <_tx_initialize_kernel_enter+0x48>)
 800371a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800371e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <_tx_initialize_kernel_enter+0x50>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd f88d 	bl	8000844 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800372a:	4b03      	ldr	r3, [pc, #12]	; (8003738 <_tx_initialize_kernel_enter+0x48>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8003730:	f7fc fdb6 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000018 	.word	0x20000018
 800373c:	2000efe8 	.word	0x2000efe8
 8003740:	2000ef44 	.word	0x2000ef44

08003744 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800374e:	f3ef 8310 	mrs	r3, PRIMASK
 8003752:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003754:	b672      	cpsid	i
    return(primask_value);
 8003756:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800375e:	4a32      	ldr	r2, [pc, #200]	; (8003828 <_tx_mutex_cleanup+0xe4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d156      	bne.n	8003812 <_tx_mutex_cleanup+0xce>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d150      	bne.n	8003812 <_tx_mutex_cleanup+0xce>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d04a      	beq.n	8003812 <_tx_mutex_cleanup+0xce>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2a      	ldr	r2, [pc, #168]	; (800382c <_tx_mutex_cleanup+0xe8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d145      	bne.n	8003812 <_tx_mutex_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d041      	beq.n	8003812 <_tx_mutex_cleanup+0xce>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	1e5a      	subs	r2, r3, #1
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
 80037b0:	e013      	b.n	80037da <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037bc:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d102      	bne.n	80037da <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	6a3a      	ldr	r2, [r7, #32]
 80037d8:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	2b0d      	cmp	r3, #13
 80037e0:	d117      	bne.n	8003812 <_tx_mutex_cleanup+0xce>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	221d      	movs	r2, #29
 80037e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <_tx_mutex_cleanup+0xec>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <_tx_mutex_cleanup+0xec>)
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f002 fef5 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800380c:	b672      	cpsid	i
    return(primask_value);
 800380e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800381e:	bf00      	nop
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	08003745 	.word	0x08003745
 800382c:	4d555445 	.word	0x4d555445
 8003830:	2000efe8 	.word	0x2000efe8

08003834 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003842:	b672      	cpsid	i
    return(primask_value);
 8003844:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8003846:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <_tx_mutex_thread_release+0x7c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <_tx_mutex_thread_release+0x7c>)
 8003850:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003858:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <_tx_mutex_thread_release+0x58>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2201      	movs	r2, #1
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f383 8810 	msr	PRIMASK, r3
}
 8003870:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8003872:	69b8      	ldr	r0, [r7, #24]
 8003874:	f000 fbd6 	bl	8004024 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800387e:	b672      	cpsid	i
    return(primask_value);
 8003880:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8003882:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800388a:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1df      	bne.n	8003852 <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <_tx_mutex_thread_release+0x7c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <_tx_mutex_thread_release+0x7c>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80038a8:	bf00      	nop
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	2000efe8 	.word	0x2000efe8

080038b4 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80038c0:	2234      	movs	r2, #52	; 0x34
 80038c2:	2100      	movs	r1, #0
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f011 fc15 	bl	80150f4 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80038d6:	f3ef 8310 	mrs	r3, PRIMASK
 80038da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80038dc:	b672      	cpsid	i
    return(primask_value);
 80038de:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <_tx_mutex_create+0x9c>)
 80038e6:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <_tx_mutex_create+0xa0>)
 80038ea:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <_tx_mutex_create+0xa4>)
 80038ec:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <_tx_mutex_create+0xa8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <_tx_mutex_create+0x56>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80038f6:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <_tx_mutex_create+0xac>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
 8003908:	e011      	b.n	800392e <_tx_mutex_create+0x7a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <_tx_mutex_create+0xac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <_tx_mutex_create+0xa8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <_tx_mutex_create+0xa8>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	4d555445 	.word	0x4d555445
 8003954:	2000efec 	.word	0x2000efec
 8003958:	08003835 	.word	0x08003835
 800395c:	2000ef30 	.word	0x2000ef30
 8003960:	2000ef2c 	.word	0x2000ef2c

08003964 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b092      	sub	sp, #72	; 0x48
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800396c:	f3ef 8310 	mrs	r3, PRIMASK
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003972:	b672      	cpsid	i
    return(primask_value);
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8003976:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <_tx_mutex_delete+0x138>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a45      	ldr	r2, [pc, #276]	; (8003a9c <_tx_mutex_delete+0x138>)
 8003986:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8003988:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <_tx_mutex_delete+0x138>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <_tx_mutex_delete+0x34>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <_tx_mutex_delete+0x13c>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e013      	b.n	80039c0 <_tx_mutex_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ae:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <_tx_mutex_delete+0x13c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d102      	bne.n	80039c0 <_tx_mutex_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 80039ba:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <_tx_mutex_delete+0x13c>)
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80039c0:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <_tx_mutex_delete+0x140>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a37      	ldr	r2, [pc, #220]	; (8003aa4 <_tx_mutex_delete+0x140>)
 80039c8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d011      	beq.n	8003a12 <_tx_mutex_delete+0xae>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb0f 	bl	8004024 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a06:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003a0c:	b672      	cpsid	i
    return(primask_value);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
 8003a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a14:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8003a1e:	e022      	b.n	8003a66 <_tx_mutex_delete+0x102>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8003a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a22:	3b01      	subs	r3, #1
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a26:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003a2c:	b672      	cpsid	i
    return(primask_value);
 8003a2e:	697b      	ldr	r3, [r7, #20]

        /* Lockout interrupts.  */
        TX_DISABLE
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	2200      	movs	r2, #0
 8003a36:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8003a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <_tx_mutex_delete+0x140>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <_tx_mutex_delete+0x140>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a52:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f383 8810 	msr	PRIMASK, r3
}
 8003a5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003a5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a5e:	f002 fdc7 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	643b      	str	r3, [r7, #64]	; 0x40
    while (suspended_count != ((ULONG) 0))
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1d9      	bne.n	8003a20 <_tx_mutex_delete+0xbc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a70:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003a72:	b672      	cpsid	i
    return(primask_value);
 8003a74:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8003a76:	647b      	str	r3, [r7, #68]	; 0x44

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <_tx_mutex_delete+0x140>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <_tx_mutex_delete+0x140>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a84:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8003a8e:	f002 fd75 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3748      	adds	r7, #72	; 0x48
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	2000ef30 	.word	0x2000ef30
 8003aa0:	2000ef2c 	.word	0x2000ef2c
 8003aa4:	2000efe8 	.word	0x2000efe8

08003aa8 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b090      	sub	sp, #64	; 0x40
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003ab8:	b672      	cpsid	i
    return(primask_value);
 8003aba:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003abe:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <_tx_mutex_get+0x200>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d144      	bne.n	8003b56 <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad6:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d032      	beq.n	8003b44 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d106      	bne.n	8003af4 <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00f      	beq.n	8003b22 <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a3a      	ldr	r2, [r7, #32]
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b20:	e009      	b.n	8003b36 <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b54:	e0a2      	b.n	8003c9c <_tx_mutex_get+0x1f4>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d10d      	bne.n	8003b7c <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8003b76:	2300      	movs	r3, #0
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7a:	e08f      	b.n	8003c9c <_tx_mutex_get+0x1f4>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8084 	beq.w	8003c8c <_tx_mutex_get+0x1e4>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8003b84:	4b49      	ldr	r3, [pc, #292]	; (8003cac <_tx_mutex_get+0x204>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <_tx_mutex_get+0xf6>
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8003b98:	231d      	movs	r3, #29
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9c:	e07e      	b.n	8003c9c <_tx_mutex_get+0x1f4>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <_tx_mutex_get+0x208>)
 8003ba8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bca:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd6:	675a      	str	r2, [r3, #116]	; 0x74
 8003bd8:	e011      	b.n	8003bfe <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bfc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	220d      	movs	r2, #13
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	2201      	movs	r2, #1
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <_tx_mutex_get+0x204>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	4a22      	ldr	r2, [pc, #136]	; (8003cac <_tx_mutex_get+0x204>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d121      	bne.n	8003c7c <_tx_mutex_get+0x1d4>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d903      	bls.n	8003c4c <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d204      	bcs.n	8003c64 <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d905      	bls.n	8003c7c <_tx_mutex_get+0x1d4>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4619      	mov	r1, r3
 8003c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c78:	f000 f90e 	bl	8003e98 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003c7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c7e:	f002 fdc9 	bl	8006814 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8003c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	e007      	b.n	8003c9c <_tx_mutex_get+0x1f4>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8003c98:	231d      	movs	r3, #29
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3740      	adds	r7, #64	; 0x40
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000ef4c 	.word	0x2000ef4c
 8003cac:	2000efe8 	.word	0x2000efe8
 8003cb0:	08003745 	.word	0x08003745

08003cb4 <_tx_mutex_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_MUTEX **next_mutex)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003cc8:	b672      	cpsid	i
    return(primask_value);
 8003cca:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8003ccc:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the mutex.  */
    if (name != TX_NULL)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <_tx_mutex_info_get+0x28>
    {

        *name =  mutex_ptr -> tx_mutex_name;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current ownership count of the mutex.  */
    if (count != TX_NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <_tx_mutex_info_get+0x36>
    {

        *count =  ((ULONG) mutex_ptr -> tx_mutex_ownership_count);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current owner of the mutex.  */
    if (owner != TX_NULL)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <_tx_mutex_info_get+0x44>
    {

        *owner =  mutex_ptr -> tx_mutex_owner;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this mutex.  */
    if (first_suspended != TX_NULL)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <_tx_mutex_info_get+0x52>
    {

        *first_suspended =  mutex_ptr -> tx_mutex_suspension_list;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this mutex.  */
    if (suspended_count != TX_NULL)
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <_tx_mutex_info_get+0x60>
    {

        *suspended_count =  (ULONG) mutex_ptr -> tx_mutex_suspended_count;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next mutex created.  */
    if (next_mutex != TX_NULL)
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <_tx_mutex_info_get+0x6e>
    {

        *next_mutex =  mutex_ptr -> tx_mutex_created_next;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3724      	adds	r7, #36	; 0x24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b090      	sub	sp, #64	; 0x40
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003d44:	f3ef 8310 	mrs	r3, PRIMASK
 8003d48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003d4a:	b672      	cpsid	i
    return(primask_value);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d805      	bhi.n	8003d68 <_tx_mutex_prioritize+0x2c>
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	e090      	b.n	8003e8a <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d114      	bne.n	8003d98 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d202      	bcs.n	8003d8c <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	619a      	str	r2, [r3, #24]
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	e078      	b.n	8003e8a <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8003da8:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <_tx_mutex_prioritize+0x158>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a39      	ldr	r2, [pc, #228]	; (8003e94 <_tx_mutex_prioritize+0x158>)
 8003db0:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d201      	bcs.n	8003dc6 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f383 8810 	msr	PRIMASK, r3
}
 8003dd0:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003dd8:	b672      	cpsid	i
    return(primask_value);
 8003dda:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d002      	beq.n	8003dee <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dec:	e006      	b.n	8003dfc <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e08:	e00c      	b.n	8003e24 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8003e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1c4      	bne.n	8003db6 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <_tx_mutex_prioritize+0x158>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <_tx_mutex_prioritize+0x158>)
 8003e34:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8003e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d01d      	beq.n	8003e7a <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e60:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e72:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f383 8810 	msr	PRIMASK, r3
}
 8003e84:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003e86:	f002 fb79 	bl	800657c <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8003e8a:	2300      	movs	r3, #0
#endif
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3740      	adds	r7, #64	; 0x40
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000efe8 	.word	0x2000efe8

08003e98 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	; 0x38
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003ea8:	b672      	cpsid	i
    return(primask_value);
 8003eaa:	6a3b      	ldr	r3, [r7, #32]


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d905      	bls.n	8003ed4 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ed2:	e002      	b.n	8003eda <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	e092      	b.n	800400c <_tx_mutex_priority_change+0x174>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8003ee6:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <_tx_mutex_priority_change+0x17c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8003ef2:	4b49      	ldr	r3, [pc, #292]	; (8004018 <_tx_mutex_priority_change+0x180>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <_tx_mutex_priority_change+0x180>)
 8003efa:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	220e      	movs	r2, #14
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f002 fc7a 	bl	8006814 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003f20:	f3ef 8310 	mrs	r3, PRIMASK
 8003f24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003f26:	b672      	cpsid	i
    return(primask_value);
 8003f28:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts.  */
        TX_DISABLE
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d905      	bls.n	8003f4a <_tx_mutex_priority_change+0xb2>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f48:	e002      	b.n	8003f50 <_tx_mutex_priority_change+0xb8>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f002 fb47 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003f62:	f3ef 8310 	mrs	r3, PRIMASK
 8003f66:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003f68:	b672      	cpsid	i
    return(primask_value);
 8003f6a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <_tx_mutex_priority_change+0x17c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d041      	beq.n	8004000 <_tx_mutex_priority_change+0x168>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d13d      	bne.n	8004000 <_tx_mutex_priority_change+0x168>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d811      	bhi.n	8003fb4 <_tx_mutex_priority_change+0x11c>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d133      	bne.n	8004000 <_tx_mutex_priority_change+0x168>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8003f98:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <_tx_mutex_priority_change+0x17c>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8003f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d22c      	bcs.n	8004000 <_tx_mutex_priority_change+0x168>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	491c      	ldr	r1, [pc, #112]	; (800401c <_tx_mutex_priority_change+0x184>)
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003fb2:	e025      	b.n	8004000 <_tx_mutex_priority_change+0x168>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d21f      	bcs.n	8004000 <_tx_mutex_priority_change+0x168>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d80d      	bhi.n	8003fe8 <_tx_mutex_priority_change+0x150>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <_tx_mutex_priority_change+0x17c>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d212      	bcs.n	8004000 <_tx_mutex_priority_change+0x168>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	490f      	ldr	r1, [pc, #60]	; (800401c <_tx_mutex_priority_change+0x184>)
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003fe6:	e00b      	b.n	8004000 <_tx_mutex_priority_change+0x168>
                            TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                            _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                            /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                            TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <_tx_mutex_priority_change+0x188>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <_tx_mutex_priority_change+0x188>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800400c:	bf00      	nop
 800400e:	3738      	adds	r7, #56	; 0x38
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000ef50 	.word	0x2000ef50
 8004018:	2000efe8 	.word	0x2000efe8
 800401c:	2000ef68 	.word	0x2000ef68
 8004020:	2000ef60 	.word	0x2000ef60

08004024 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0a0      	sub	sp, #128	; 0x80
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800402c:	2320      	movs	r3, #32
 800402e:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004030:	f3ef 8310 	mrs	r3, PRIMASK
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004036:	b672      	cpsid	i
    return(primask_value);
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800403a:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 81c0 	beq.w	80043c6 <_tx_mutex_put+0x3a2>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800404c:	4b8b      	ldr	r3, [pc, #556]	; (800427c <_tx_mutex_put+0x258>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004058:	429a      	cmp	r2, r3
 800405a:	d00b      	beq.n	8004074 <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800405c:	4b88      	ldr	r3, [pc, #544]	; (8004280 <_tx_mutex_put+0x25c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <_tx_mutex_put+0x50>
 8004064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004066:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406a:	f383 8810 	msr	PRIMASK, r3
}
 800406e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8004070:	231e      	movs	r3, #30
 8004072:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8004074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 81ad 	bne.w	80043d6 <_tx_mutex_put+0x3b2>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <_tx_mutex_put+0x7c>
 800408e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800409a:	2300      	movs	r3, #0
 800409c:	673b      	str	r3, [r7, #112]	; 0x70
 800409e:	e19a      	b.n	80043d6 <_tx_mutex_put+0x3b2>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80040a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <_tx_mutex_put+0x94>
 80040a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80040b2:	2300      	movs	r3, #0
 80040b4:	673b      	str	r3, [r7, #112]	; 0x70
 80040b6:	e18e      	b.n	80043d6 <_tx_mutex_put+0x3b2>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80040b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80040c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 80040d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80040d8:	e015      	b.n	8004106 <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80040ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80040f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d103      	bne.n	8004106 <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80040fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004102:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10e      	bne.n	800412c <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8004128:	2300      	movs	r3, #0
 800412a:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800412c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800412e:	2b20      	cmp	r3, #32
 8004130:	f040 8151 	bne.w	80043d6 <_tx_mutex_put+0x3b2>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8004138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800413e:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d140      	bne.n	80041ca <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <_tx_mutex_put+0x25c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a4c      	ldr	r2, [pc, #304]	; (8004280 <_tx_mutex_put+0x25c>)
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	f383 8810 	msr	PRIMASK, r3
}
 800415c:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800415e:	2320      	movs	r3, #32
 8004160:	66bb      	str	r3, [r7, #104]	; 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8004162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004168:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800416a:	e016      	b.n	800419a <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8004174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800417a:	429a      	cmp	r2, r3
 800417c:	d902      	bls.n	8004184 <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800418a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004192:	429a      	cmp	r2, r3
 8004194:	d101      	bne.n	800419a <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80041a0:	f3ef 8310 	mrs	r3, PRIMASK
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80041a6:	b672      	cpsid	i
    return(primask_value);
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 80041aa:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 80041ac:	4b34      	ldr	r3, [pc, #208]	; (8004280 <_tx_mutex_put+0x25c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	4a33      	ldr	r2, [pc, #204]	; (8004280 <_tx_mutex_put+0x25c>)
 80041b4:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 80041b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 80041be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d201      	bcs.n	80041ca <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 80041c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c8:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d91c      	bls.n	800420c <_tx_mutex_put+0x1e8>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d118      	bne.n	800420c <_tx_mutex_put+0x1e8>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <_tx_mutex_put+0x25c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <_tx_mutex_put+0x25c>)
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	f383 8810 	msr	PRIMASK, r3
}
 80041ee:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff fda3 	bl	8003d3c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80041fc:	b672      	cpsid	i
    return(primask_value);
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8004200:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <_tx_mutex_put+0x25c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3b01      	subs	r3, #1
 8004208:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <_tx_mutex_put+0x25c>)
 800420a:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d137      	bne.n	8004284 <_tx_mutex_put+0x260>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <_tx_mutex_put+0x25c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	4a19      	ldr	r2, [pc, #100]	; (8004280 <_tx_mutex_put+0x25c>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004220:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004238:	429a      	cmp	r2, r3
 800423a:	d005      	beq.n	8004248 <_tx_mutex_put+0x224>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe28 	bl	8003e98 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800424e:	b672      	cpsid	i
    return(primask_value);
 8004250:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8004252:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <_tx_mutex_put+0x25c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3b01      	subs	r3, #1
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <_tx_mutex_put+0x25c>)
 800425c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004266:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8004270:	f002 f984 	bl	800657c <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8004274:	2300      	movs	r3, #0
 8004276:	673b      	str	r3, [r7, #112]	; 0x70
 8004278:	e0ad      	b.n	80043d6 <_tx_mutex_put+0x3b2>
 800427a:	bf00      	nop
 800427c:	2000ef4c 	.word	0x2000ef4c
 8004280:	2000efe8 	.word	0x2000efe8
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d109      	bne.n	80042a6 <_tx_mutex_put+0x282>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	67bb      	str	r3, [r7, #120]	; 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8004298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 80042a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80042ac:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 80042ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <_tx_mutex_put+0x2a6>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80042b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
 80042c8:	e012      	b.n	80042f0 <_tx_mutex_put+0x2cc>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80042ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80042d0:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80042d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80042de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80042f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042f6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004304:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	1e5a      	subs	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8004316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <_tx_mutex_put+0x300>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
 8004322:	e00e      	b.n	8004342 <_tx_mutex_put+0x31e>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8004324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800432e:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8004330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800433a:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800433c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004340:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004344:	2200      	movs	r2, #0
 8004346:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <_tx_mutex_put+0x3bc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <_tx_mutex_put+0x3bc>)
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800435c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d125      	bne.n	80043ba <_tx_mutex_put+0x396>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d018      	beq.n	80043a8 <_tx_mutex_put+0x384>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fce0 	bl	8003d3c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800437c:	f3ef 8310 	mrs	r3, PRIMASK
 8004380:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004382:	b672      	cpsid	i
    return(primask_value);
 8004384:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8004386:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <_tx_mutex_put+0x378>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
 800439c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800439e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80043a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d003      	beq.n	80043ba <_tx_mutex_put+0x396>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80043b2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80043b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80043b6:	f7ff fd6f 	bl	8003e98 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80043ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80043bc:	f002 f918 	bl	80065f0 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80043c0:	2300      	movs	r3, #0
 80043c2:	673b      	str	r3, [r7, #112]	; 0x70
 80043c4:	e007      	b.n	80043d6 <_tx_mutex_put+0x3b2>
 80043c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80043d2:	231e      	movs	r3, #30
 80043d4:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 80043d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3780      	adds	r7, #128	; 0x80
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000efe8 	.word	0x2000efe8

080043e4 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	; 0x30
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80043ee:	f3ef 8310 	mrs	r3, PRIMASK
 80043f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80043f4:	b672      	cpsid	i
    return(primask_value);
 80043f6:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043fe:	4a36      	ldr	r2, [pc, #216]	; (80044d8 <_tx_queue_cleanup+0xf4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d15f      	bne.n	80044c4 <_tx_queue_cleanup+0xe0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d159      	bne.n	80044c4 <_tx_queue_cleanup+0xe0>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d053      	beq.n	80044c4 <_tx_queue_cleanup+0xe0>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2e      	ldr	r2, [pc, #184]	; (80044dc <_tx_queue_cleanup+0xf8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d14e      	bne.n	80044c4 <_tx_queue_cleanup+0xe0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04a      	beq.n	80044c4 <_tx_queue_cleanup+0xe0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	2200      	movs	r2, #0
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
 8004450:	e013      	b.n	800447a <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d102      	bne.n	800447a <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	2b05      	cmp	r3, #5
 8004480:	d120      	bne.n	80044c4 <_tx_queue_cleanup+0xe0>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	220b      	movs	r2, #11
 800448e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004492:	e003      	b.n	800449c <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	220a      	movs	r2, #10
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800449c:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <_tx_queue_cleanup+0xfc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a0f      	ldr	r2, [pc, #60]	; (80044e0 <_tx_queue_cleanup+0xfc>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f383 8810 	msr	PRIMASK, r3
}
 80044b0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f002 f89c 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80044b8:	f3ef 8310 	mrs	r3, PRIMASK
 80044bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80044be:	b672      	cpsid	i
    return(primask_value);
 80044c0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f383 8810 	msr	PRIMASK, r3
}
 80044ce:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80044d0:	bf00      	nop
 80044d2:	3730      	adds	r7, #48	; 0x30
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	080043e5 	.word	0x080043e5
 80044dc:	51554555 	.word	0x51554555
 80044e0:	2000efe8 	.word	0x2000efe8

080044e4 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	; 0x30
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80044f2:	2244      	movs	r2, #68	; 0x44
 80044f4:	2100      	movs	r1, #0
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f010 fdfc 	bl	80150f4 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004542:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004548:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800454a:	f3ef 8310 	mrs	r3, PRIMASK
 800454e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004550:	b672      	cpsid	i
    return(primask_value);
 8004552:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8004554:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a18      	ldr	r2, [pc, #96]	; (80045bc <_tx_queue_create+0xd8>)
 800455a:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <_tx_queue_create+0xdc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <_tx_queue_create+0x94>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8004564:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <_tx_queue_create+0xe0>)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
 8004576:	e011      	b.n	800459c <_tx_queue_create+0xb8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <_tx_queue_create+0xe0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <_tx_queue_create+0xdc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <_tx_queue_create+0xdc>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	; 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	51554555 	.word	0x51554555
 80045c0:	2000ef20 	.word	0x2000ef20
 80045c4:	2000ef1c 	.word	0x2000ef1c

080045c8 <_tx_queue_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_delete(TX_QUEUE *queue_ptr)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	; 0x38
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80045d0:	f3ef 8310 	mrs	r3, PRIMASK
 80045d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80045d6:	b672      	cpsid	i
    return(primask_value);
 80045d8:	69fb      	ldr	r3, [r7, #28]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Disable interrupts to remove the queue from the created list.  */
    TX_DISABLE
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_QUEUE_DELETE_INSERT

    /* Clear the queue ID to make it invalid.  */
    queue_ptr -> tx_queue_id =  TX_CLEAR_ID;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created queues.  */
    _tx_queue_created_count--;
 80045e2:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <_tx_queue_delete+0x108>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	4a39      	ldr	r2, [pc, #228]	; (80046d0 <_tx_queue_delete+0x108>)
 80045ea:	6013      	str	r3, [r2, #0]

    /* See if the queue is the only one on the list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 80045ec:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <_tx_queue_delete+0x108>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <_tx_queue_delete+0x34>
    {

        /* Only created queue, just set the created list to NULL.  */
        _tx_queue_created_ptr =  TX_NULL;
 80045f4:	4b37      	ldr	r3, [pc, #220]	; (80046d4 <_tx_queue_delete+0x10c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e013      	b.n	8004624 <_tx_queue_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_queue =                               queue_ptr -> tx_queue_created_next;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_queue =                           queue_ptr -> tx_queue_created_previous;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
        next_queue -> tx_queue_created_previous =  previous_queue;
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  next_queue;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004612:	631a      	str	r2, [r3, #48]	; 0x30

        /* See if we have to update the created list head pointer.  */
        if (_tx_queue_created_ptr == queue_ptr)
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <_tx_queue_delete+0x10c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d102      	bne.n	8004624 <_tx_queue_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_queue_created_ptr =  next_queue;
 800461e:	4a2d      	ldr	r2, [pc, #180]	; (80046d4 <_tx_queue_delete+0x10c>)
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004624:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <_tx_queue_delete+0x110>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <_tx_queue_delete+0x110>)
 800462c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             queue_ptr -> tx_queue_suspension_list;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
    suspended_count =                        queue_ptr -> tx_queue_suspended_count;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	633b      	str	r3, [r7, #48]	; 0x30
    queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	62da      	str	r2, [r3, #44]	; 0x2c
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8004652:	e022      	b.n	800469a <_tx_queue_delete+0xd2>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	3b01      	subs	r3, #1
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800465a:	f3ef 8310 	mrs	r3, PRIMASK
 800465e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004660:	b672      	cpsid	i
    return(primask_value);
 8004662:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	2200      	movs	r2, #0
 800466a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	2201      	movs	r2, #1
 8004670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <_tx_queue_delete+0x110>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <_tx_queue_delete+0x110>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004690:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004692:	f001 ffad 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1d9      	bne.n	8004654 <_tx_queue_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80046a0:	f3ef 8310 	mrs	r3, PRIMASK
 80046a4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80046a6:	b672      	cpsid	i
    return(primask_value);
 80046a8:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_QUEUE_DELETE_PORT_COMPLETION(queue_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <_tx_queue_delete+0x110>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <_tx_queue_delete+0x110>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80046c2:	f001 ff5b 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3738      	adds	r7, #56	; 0x38
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000ef20 	.word	0x2000ef20
 80046d4:	2000ef1c 	.word	0x2000ef1c
 80046d8:	2000efe8 	.word	0x2000efe8

080046dc <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
    suspension_list =  TX_NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80046ec:	f3ef 8310 	mrs	r3, PRIMASK
 80046f0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80046f2:	b672      	cpsid	i
    return(primask_value);
 80046f4:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 80046f6:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d023      	beq.n	8004748 <_tx_queue_flush+0x6c>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d010      	beq.n	8004748 <_tx_queue_flush+0x6c>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800473e:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <_tx_queue_flush+0x10c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <_tx_queue_flush+0x10c>)
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d040      	beq.n	80047dc <_tx_queue_flush+0x100>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
        while (suspended_count != ((ULONG) 0))
 800475e:	e025      	b.n	80047ac <_tx_queue_flush+0xd0>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	3b01      	subs	r3, #1
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d023      	beq.n	80047b4 <_tx_queue_flush+0xd8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800476c:	f3ef 8310 	mrs	r3, PRIMASK
 8004770:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004772:	b672      	cpsid	i
    return(primask_value);
 8004774:	693b      	ldr	r3, [r7, #16]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 8004776:	623b      	str	r3, [r7, #32]

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2200      	movs	r2, #0
 800477c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2200      	movs	r2, #0
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <_tx_queue_flush+0x10c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <_tx_queue_flush+0x10c>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 ff22 	bl	80065f0 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d6      	bne.n	8004760 <_tx_queue_flush+0x84>
 80047b2:	e000      	b.n	80047b6 <_tx_queue_flush+0xda>
                break;
 80047b4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80047b6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80047bc:	b672      	cpsid	i
    return(primask_value);
 80047be:	68bb      	ldr	r3, [r7, #8]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80047c0:	623b      	str	r3, [r7, #32]

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <_tx_queue_flush+0x10c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <_tx_queue_flush+0x10c>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f383 8810 	msr	PRIMASK, r3
}
 80047d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80047d8:	f001 fed0 	bl	800657c <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3730      	adds	r7, #48	; 0x30
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000efe8 	.word	0x2000efe8

080047ec <_tx_queue_front_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b094      	sub	sp, #80	; 0x50
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80047f8:	2300      	movs	r3, #0
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80047fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004802:	b672      	cpsid	i
    return(primask_value);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_FRONT_SEND_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Now check for room in the queue for placing the new message in front.  */
    if (queue_ptr -> tx_queue_available_storage != ((UINT) 0))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80be 	beq.w	8004994 <_tx_queue_front_send+0x1a8>
    {

        /* Yes there is room in the queue. Now determine if there is a thread waiting
           for a message.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d155      	bne.n	80048ca <_tx_queue_front_send+0xde>

            /* Adjust the read pointer since we are adding to the front of the
               queue.  */

            /* See if the read pointer is at the beginning of the queue area.  */
            if (queue_ptr -> tx_queue_read == queue_ptr -> tx_queue_start)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d109      	bne.n	800483e <_tx_queue_front_send+0x52>
            {

                /* Adjust the read pointer to the last message at the end of the
                   queue.  */
                queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_end, queue_ptr -> tx_queue_message_size);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	425b      	negs	r3, r3
 8004836:	441a      	add	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]
 800483c:	e008      	b.n	8004850 <_tx_queue_front_send+0x64>
            }
            else
            {

                /* Not at the beginning of the queue, just move back one message.  */
                queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_read, queue_ptr -> tx_queue_message_size);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	425b      	negs	r3, r3
 800484a:	441a      	add	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	621a      	str	r2, [r3, #32]
            }

            /* Simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_read;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004876:	1d13      	adds	r3, r2, #4
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487c:	1d19      	adds	r1, r3, #4
 800487e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004886:	2b01      	cmp	r3, #1
 8004888:	d90e      	bls.n	80048a8 <_tx_queue_front_send+0xbc>
 800488a:	e007      	b.n	800489c <_tx_queue_front_send+0xb0>
 800488c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800488e:	1d13      	adds	r3, r2, #4
 8004890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	1d19      	adds	r1, r3, #4
 8004896:	64b9      	str	r1, [r7, #72]	; 0x48
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489e:	3b01      	subs	r3, #1
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
 80048a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f1      	bne.n	800488c <_tx_queue_front_send+0xa0>

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80e8 	beq.w	8004a92 <_tx_queue_front_send+0x2a6>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	4798      	blx	r3
 80048c8:	e0e3      	b.n	8004a92 <_tx_queue_front_send+0x2a6>
        else
        {

            /* Thread suspended waiting for a message.  Remove it and copy this message
               into its storage area.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	3b01      	subs	r3, #1
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <_tx_queue_front_send+0xf8>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
 80048e2:	e012      	b.n	800490a <_tx_queue_front_send+0x11e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004908:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004912:	2200      	movs	r2, #0
 8004914:	669a      	str	r2, [r3, #104]	; 0x68


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800492c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800492e:	1d13      	adds	r3, r2, #4
 8004930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	1d19      	adds	r1, r3, #4
 8004936:	64b9      	str	r1, [r7, #72]	; 0x48
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493e:	2b01      	cmp	r3, #1
 8004940:	d90e      	bls.n	8004960 <_tx_queue_front_send+0x174>
 8004942:	e007      	b.n	8004954 <_tx_queue_front_send+0x168>
 8004944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004946:	1d13      	adds	r3, r2, #4
 8004948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	3b01      	subs	r3, #1
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
 800495a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f1      	bne.n	8004944 <_tx_queue_front_send+0x158>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	2200      	movs	r2, #0
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004968:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <_tx_queue_front_send+0x2b0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a4b      	ldr	r2, [pc, #300]	; (8004a9c <_tx_queue_front_send+0x2b0>)
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f383 8810 	msr	PRIMASK, r3
}
 800497c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800497e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004980:	f001 fe36 	bl	80065f0 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8083 	beq.w	8004a92 <_tx_queue_front_send+0x2a6>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	4798      	blx	r3
 8004992:	e07e      	b.n	8004a92 <_tx_queue_front_send+0x2a6>
#endif
        }
    }

    /* Determine if the caller has requested suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d073      	beq.n	8004a82 <_tx_queue_front_send+0x296>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800499a:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <_tx_queue_front_send+0x2b0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <_tx_queue_front_send+0x1c8>
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80049ae:	230b      	movs	r3, #11
 80049b0:	643b      	str	r3, [r7, #64]	; 0x40
 80049b2:	e06e      	b.n	8004a92 <_tx_queue_front_send+0x2a6>
            /* Yes, suspension is requested.  */

            /* Prepare for suspension of this thread.  */

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80049b4:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <_tx_queue_front_send+0x2b4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	4a39      	ldr	r2, [pc, #228]	; (8004aa4 <_tx_queue_front_send+0x2b8>)
 80049be:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Set the flag to true to indicate a queue front send suspension.  */
            thread_ptr -> tx_thread_suspend_option =           TX_TRUE;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	2201      	movs	r2, #1
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Place this thread at the front of the suspension list, since it is a
               queue front send suspension.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <_tx_queue_front_send+0x210>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ec:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f8:	675a      	str	r2, [r3, #116]	; 0x74
 80049fa:	e014      	b.n	8004a26 <_tx_queue_front_send+0x23a>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a18:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1e:	675a      	str	r2, [r3, #116]	; 0x74

                /* Update the suspension list to put this thread in front, which will put
                   the message that was removed in the proper relative order when room is
                   made in the queue.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	2205      	movs	r2, #5
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <_tx_queue_front_send+0x2b0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <_tx_queue_front_send+0x2b0>)
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f383 8810 	msr	PRIMASK, r3
}
 8004a5a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004a5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a5e:	f001 fed9 	bl	8006814 <_tx_thread_system_suspend>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <_tx_queue_front_send+0x28c>
            {

                /* Check for a notify callback.  */
                if (queue_send_notify != TX_NULL)
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <_tx_queue_front_send+0x28c>
                {

                    /* Call application queue send notification.  */
                    (queue_send_notify)(queue_ptr);
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	4798      	blx	r3
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a80:	e007      	b.n	8004a92 <_tx_queue_front_send+0x2a6>
 8004a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a84:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* No room in queue and no suspension requested, return error completion.  */
        status =  TX_QUEUE_FULL;
 8004a8e:	230b      	movs	r3, #11
 8004a90:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8004a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3750      	adds	r7, #80	; 0x50
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000efe8 	.word	0x2000efe8
 8004aa0:	2000ef4c 	.word	0x2000ef4c
 8004aa4:	080043e5 	.word	0x080043e5

08004aa8 <_tx_queue_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage,
                    TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004abc:	b672      	cpsid	i
    return(primask_value);
 8004abe:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8004ac0:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the queue.  */
    if (name != TX_NULL)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <_tx_queue_info_get+0x28>
    {

        *name =  queue_ptr -> tx_queue_name;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of messages currently in the queue.  */
    if (enqueued != TX_NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <_tx_queue_info_get+0x36>
    {

        *enqueued =  (ULONG) queue_ptr -> tx_queue_enqueued;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of messages that will still fit in the queue.  */
    if (available_storage != TX_NULL)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <_tx_queue_info_get+0x44>
    {

        *available_storage =  (ULONG) queue_ptr -> tx_queue_available_storage;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this queue.  */
    if (first_suspended != TX_NULL)
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <_tx_queue_info_get+0x52>
    {

        *first_suspended =  queue_ptr -> tx_queue_suspension_list;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this queue.  */
    if (suspended_count != TX_NULL)
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <_tx_queue_info_get+0x60>
    {

        *suspended_count =  (ULONG) queue_ptr -> tx_queue_suspended_count;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next queue created.  */
    if (next_queue != TX_NULL)
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <_tx_queue_info_get+0x6e>
    {

        *next_queue =  queue_ptr -> tx_queue_created_next;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3724      	adds	r7, #36	; 0x24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <_tx_queue_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b090      	sub	sp, #64	; 0x40
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004b38:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004b3e:	b672      	cpsid	i
    return(primask_value);
 8004b40:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d805      	bhi.n	8004b5c <_tx_queue_prioritize+0x2c>
 8004b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b52:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	e090      	b.n	8004c7e <_tx_queue_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this queue.  */
    else if (suspended_count == ((UINT) 2))
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d114      	bne.n	8004b8c <_tx_queue_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  queue_ptr -> tx_queue_suspension_list;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d202      	bcs.n	8004b80 <_tx_queue_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            queue_ptr -> tx_queue_suspension_list =  next_thread;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b82:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	e078      	b.n	8004c7e <_tx_queue_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   queue_ptr -> tx_queue_suspension_list;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8004b9c:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <_tx_queue_prioritize+0x158>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <_tx_queue_prioritize+0x158>)
 8004ba4:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d201      	bcs.n	8004bba <_tx_queue_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bca:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004bcc:	b672      	cpsid	i
    return(primask_value);
 8004bce:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != queue_ptr -> tx_queue_suspension_list)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d002      	beq.n	8004be2 <_tx_queue_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be0:	e006      	b.n	8004bf0 <_tx_queue_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != queue_ptr -> tx_queue_suspended_count)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <_tx_queue_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <_tx_queue_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bfc:	e00c      	b.n	8004c18 <_tx_queue_prioritize+0xe8>
            }
            else
            {

                /* Save the suspension count and head pointer.  */
                head_ptr =   queue_ptr -> tx_queue_suspension_list;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8004c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1c4      	bne.n	8004baa <_tx_queue_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <_tx_queue_prioritize+0x158>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <_tx_queue_prioritize+0x158>)
 8004c28:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8004c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d01d      	beq.n	8004c6e <_tx_queue_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4e:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c54:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c60:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c66:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            queue_ptr -> tx_queue_suspension_list =  priority_thread_ptr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004c7a:	f001 fc7f 	bl	800657c <_tx_thread_system_preempt_check>
    }

    /* Return successful status.  */
    return(TX_SUCCESS);
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3740      	adds	r7, #64	; 0x40
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2000efe8 	.word	0x2000efe8

08004c8c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b094      	sub	sp, #80	; 0x50
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004ca2:	b672      	cpsid	i
    return(primask_value);
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8136 	beq.w	8004f24 <_tx_queue_receive+0x298>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d13c      	bne.n	8004d38 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004cce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd0:	1d13      	adds	r3, r2, #4
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	1d19      	adds	r1, r3, #4
 8004cd8:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d90e      	bls.n	8004d02 <_tx_queue_receive+0x76>
 8004ce4:	e007      	b.n	8004cf6 <_tx_queue_receive+0x6a>
 8004ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce8:	1d13      	adds	r3, r2, #4
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cee:	1d19      	adds	r1, r3, #4
 8004cf0:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f1      	bne.n	8004ce6 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d102      	bne.n	8004d12 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d16:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	1e5a      	subs	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	611a      	str	r2, [r3, #16]
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	e163      	b.n	8005000 <_tx_queue_receive+0x374>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d153      	bne.n	8004df0 <_tx_queue_receive+0x164>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5a:	1d13      	adds	r3, r2, #4
 8004d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d60:	1d19      	adds	r1, r3, #4
 8004d62:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d90e      	bls.n	8004d8c <_tx_queue_receive+0x100>
 8004d6e:	e007      	b.n	8004d80 <_tx_queue_receive+0xf4>
 8004d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d72:	1d13      	adds	r3, r2, #4
 8004d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d82:	3b01      	subs	r3, #1
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
 8004d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f1      	bne.n	8004d70 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d9e:	e00e      	b.n	8004dbe <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbc:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8004dd2:	4b8e      	ldr	r3, [pc, #568]	; (800500c <_tx_queue_receive+0x380>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	4a8c      	ldr	r2, [pc, #560]	; (800500c <_tx_queue_receive+0x380>)
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dde:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8004de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004dea:	f001 fc01 	bl	80065f0 <_tx_thread_system_resume>
 8004dee:	e107      	b.n	8005000 <_tx_queue_receive+0x374>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e02:	1d13      	adds	r3, r2, #4
 8004e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	1d19      	adds	r1, r3, #4
 8004e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d90e      	bls.n	8004e34 <_tx_queue_receive+0x1a8>
 8004e16:	e007      	b.n	8004e28 <_tx_queue_receive+0x19c>
 8004e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e1a:	1d13      	adds	r3, r2, #4
 8004e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	1d19      	adds	r1, r3, #4
 8004e22:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f1      	bne.n	8004e18 <_tx_queue_receive+0x18c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d102      	bne.n	8004e44 <_tx_queue_receive+0x1b8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e48:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8004e4a:	4b70      	ldr	r3, [pc, #448]	; (800500c <_tx_queue_receive+0x380>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	4a6e      	ldr	r2, [pc, #440]	; (800500c <_tx_queue_receive+0x380>)
 8004e52:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8004e54:	4b6d      	ldr	r3, [pc, #436]	; (800500c <_tx_queue_receive+0x380>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4a6c      	ldr	r2, [pc, #432]	; (800500c <_tx_queue_receive+0x380>)
 8004e5c:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e62:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e72:	1d13      	adds	r3, r2, #4
 8004e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d90e      	bls.n	8004ea4 <_tx_queue_receive+0x218>
 8004e86:	e007      	b.n	8004e98 <_tx_queue_receive+0x20c>
 8004e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e8a:	1d13      	adds	r3, r2, #4
 8004e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e90:	1d19      	adds	r1, r3, #4
 8004e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f1      	bne.n	8004e88 <_tx_queue_receive+0x1fc>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d102      	bne.n	8004eb4 <_tx_queue_receive+0x228>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <_tx_queue_receive+0x248>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed2:	e00e      	b.n	8004ef2 <_tx_queue_receive+0x266>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	2200      	movs	r2, #0
 8004efc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <_tx_queue_receive+0x380>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a3f      	ldr	r2, [pc, #252]	; (800500c <_tx_queue_receive+0x380>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8004f1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f1e:	f001 fb67 	bl	80065f0 <_tx_thread_system_resume>
 8004f22:	e06d      	b.n	8005000 <_tx_queue_receive+0x374>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d062      	beq.n	8004ff0 <_tx_queue_receive+0x364>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004f2a:	4b38      	ldr	r3, [pc, #224]	; (800500c <_tx_queue_receive+0x380>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <_tx_queue_receive+0x2b8>
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8004f3e:	230a      	movs	r3, #10
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
 8004f42:	e05d      	b.n	8005000 <_tx_queue_receive+0x374>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004f44:	4b32      	ldr	r3, [pc, #200]	; (8005010 <_tx_queue_receive+0x384>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4c:	4a31      	ldr	r2, [pc, #196]	; (8005014 <_tx_queue_receive+0x388>)
 8004f4e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <_tx_queue_receive+0x300>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7c:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f82:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f88:	675a      	str	r2, [r3, #116]	; 0x74
 8004f8a:	e011      	b.n	8004fb0 <_tx_queue_receive+0x324>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f96:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fae:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	2205      	movs	r2, #5
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <_tx_queue_receive+0x380>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a0e      	ldr	r2, [pc, #56]	; (800500c <_tx_queue_receive+0x380>)
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004fe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004fe2:	f001 fc17 	bl	8006814 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	643b      	str	r3, [r7, #64]	; 0x40
 8004fee:	e007      	b.n	8005000 <_tx_queue_receive+0x374>
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8005000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8005002:	4618      	mov	r0, r3
 8005004:	3750      	adds	r7, #80	; 0x50
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	2000efe8 	.word	0x2000efe8
 8005010:	2000ef4c 	.word	0x2000ef4c
 8005014:	080043e5 	.word	0x080043e5

08005018 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b094      	sub	sp, #80	; 0x50
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8005024:	2300      	movs	r3, #0
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005028:	f3ef 8310 	mrs	r3, PRIMASK
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800502e:	b672      	cpsid	i
    return(primask_value);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80af 	beq.w	80051a2 <_tx_queue_send+0x18a>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d147      	bne.n	80050da <_tx_queue_send+0xc2>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800506e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005070:	1d13      	adds	r3, r2, #4
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	1d19      	adds	r1, r3, #4
 8005078:	64b9      	str	r1, [r7, #72]	; 0x48
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005080:	2b01      	cmp	r3, #1
 8005082:	d90e      	bls.n	80050a2 <_tx_queue_send+0x8a>
 8005084:	e007      	b.n	8005096 <_tx_queue_send+0x7e>
 8005086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005088:	1d13      	adds	r3, r2, #4
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800508c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508e:	1d19      	adds	r1, r3, #4
 8005090:	64b9      	str	r1, [r7, #72]	; 0x48
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005098:	3b01      	subs	r3, #1
 800509a:	647b      	str	r3, [r7, #68]	; 0x44
 800509c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f1      	bne.n	8005086 <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d102      	bne.n	80050b2 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80e4 	beq.w	800529a <_tx_queue_send+0x282>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	4798      	blx	r3
 80050d8:	e0df      	b.n	800529a <_tx_queue_send+0x282>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	3b01      	subs	r3, #1
 80050e4:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <_tx_queue_send+0xdc>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
 80050f2:	e012      	b.n	800511a <_tx_queue_send+0x102>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80050fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005112:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005118:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	2200      	movs	r2, #0
 8005124:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8005136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005138:	1d13      	adds	r3, r2, #4
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513e:	1d19      	adds	r1, r3, #4
 8005140:	64b9      	str	r1, [r7, #72]	; 0x48
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005148:	2b01      	cmp	r3, #1
 800514a:	d90e      	bls.n	800516a <_tx_queue_send+0x152>
 800514c:	e007      	b.n	800515e <_tx_queue_send+0x146>
 800514e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005150:	1d13      	adds	r3, r2, #4
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005156:	1d19      	adds	r1, r3, #4
 8005158:	64b9      	str	r1, [r7, #72]	; 0x48
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005160:	3b01      	subs	r3, #1
 8005162:	647b      	str	r3, [r7, #68]	; 0x44
 8005164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f1      	bne.n	800514e <_tx_queue_send+0x136>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	2200      	movs	r2, #0
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8005178:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <_tx_queue_send+0x28c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	4a49      	ldr	r2, [pc, #292]	; (80052a4 <_tx_queue_send+0x28c>)
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f383 8810 	msr	PRIMASK, r3
}
 800518c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800518e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005190:	f001 fa2e 	bl	80065f0 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d07f      	beq.n	800529a <_tx_queue_send+0x282>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	4798      	blx	r3
 80051a0:	e07b      	b.n	800529a <_tx_queue_send+0x282>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d070      	beq.n	800528a <_tx_queue_send+0x272>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80051a8:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <_tx_queue_send+0x28c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <_tx_queue_send+0x1aa>
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f383 8810 	msr	PRIMASK, r3
}
 80051ba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80051bc:	230b      	movs	r3, #11
 80051be:	643b      	str	r3, [r7, #64]	; 0x40
 80051c0:	e06b      	b.n	800529a <_tx_queue_send+0x282>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80051c2:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <_tx_queue_send+0x290>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	4a38      	ldr	r2, [pc, #224]	; (80052ac <_tx_queue_send+0x294>)
 80051cc:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80051ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80051da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <_tx_queue_send+0x1f2>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005200:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8005202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005206:	675a      	str	r2, [r3, #116]	; 0x74
 8005208:	e011      	b.n	800522e <_tx_queue_send+0x216>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005214:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005220:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005226:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	2205      	movs	r2, #5
 800523a:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005244:	2201      	movs	r2, #1
 8005246:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <_tx_queue_send+0x28c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <_tx_queue_send+0x28c>)
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8005264:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005266:	f001 fad5 	bl	8006814 <_tx_thread_system_suspend>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <_tx_queue_send+0x268>
            {

                /* Determine if there is a notify callback.  */
                if (queue_send_notify != TX_NULL)
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <_tx_queue_send+0x268>
                {

                    /* Call application queue send notification.  */
                    (queue_send_notify)(queue_ptr);
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	4798      	blx	r3
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005286:	643b      	str	r3, [r7, #64]	; 0x40
 8005288:	e007      	b.n	800529a <_tx_queue_send+0x282>
 800528a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8005296:	230b      	movs	r3, #11
 8005298:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800529a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800529c:	4618      	mov	r0, r3
 800529e:	3750      	adds	r7, #80	; 0x50
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	2000efe8 	.word	0x2000efe8
 80052a8:	2000ef4c 	.word	0x2000ef4c
 80052ac:	080043e5 	.word	0x080043e5

080052b0 <_tx_queue_send_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80052c0:	b672      	cpsid	i
    return(primask_value);
 80052c2:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80052c4:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_QUEUE_SEND_NOTIFY_INSERT

    /* Setup queue send notification callback function.  */
    queue_ptr -> tx_queue_send_notify =  queue_send_notify;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f383 8810 	msr	PRIMASK, r3
}
 80052d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 80052d8:	2300      	movs	r3, #0
#endif
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80052f2:	2300      	movs	r3, #0
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80052f6:	f3ef 8310 	mrs	r3, PRIMASK
 80052fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80052fc:	b672      	cpsid	i
    return(primask_value);
 80052fe:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8005300:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d124      	bne.n	8005358 <_tx_semaphore_ceiling_put+0x70>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d808      	bhi.n	800532a <_tx_semaphore_ceiling_put+0x42>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 8005324:	2321      	movs	r3, #33	; 0x21
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	e053      	b.n	80053d2 <_tx_semaphore_ceiling_put+0xea>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the application notify function.  */
            semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f383 8810 	msr	PRIMASK, r3
}
 8005344:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if notification is required.  */
            if (semaphore_put_notify != TX_NULL)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <_tx_semaphore_ceiling_put+0x6a>
            {

                /* Yes, call the appropriate notify callback function.  */
                (semaphore_put_notify)(semaphore_ptr);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 8005352:	2300      	movs	r3, #0
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
 8005356:	e03c      	b.n	80053d2 <_tx_semaphore_ceiling_put+0xea>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	3b01      	subs	r3, #1
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <_tx_semaphore_ceiling_put+0x8a>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	60da      	str	r2, [r3, #12]
 8005370:	e00e      	b.n	8005390 <_tx_semaphore_ceiling_put+0xa8>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005382:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005394:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	2200      	movs	r2, #0
 800539a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	61fb      	str	r3, [r7, #28]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <_tx_semaphore_ceiling_put+0xf4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <_tx_semaphore_ceiling_put+0xf4>)
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80053c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c2:	f001 f915 	bl	80065f0 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <_tx_semaphore_ceiling_put+0xea>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3738      	adds	r7, #56	; 0x38
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	2000efe8 	.word	0x2000efe8

080053e0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08c      	sub	sp, #48	; 0x30
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80053ea:	f3ef 8310 	mrs	r3, PRIMASK
 80053ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80053f0:	b672      	cpsid	i
    return(primask_value);
 80053f2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053fa:	4a32      	ldr	r2, [pc, #200]	; (80054c4 <_tx_semaphore_cleanup+0xe4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d156      	bne.n	80054ae <_tx_semaphore_cleanup+0xce>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d150      	bne.n	80054ae <_tx_semaphore_cleanup+0xce>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d04a      	beq.n	80054ae <_tx_semaphore_cleanup+0xce>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2a      	ldr	r2, [pc, #168]	; (80054c8 <_tx_semaphore_cleanup+0xe8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d145      	bne.n	80054ae <_tx_semaphore_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d041      	beq.n	80054ae <_tx_semaphore_cleanup+0xce>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2200      	movs	r2, #0
 800544a:	60da      	str	r2, [r3, #12]
 800544c:	e013      	b.n	8005476 <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005458:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d102      	bne.n	8005476 <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	2b06      	cmp	r3, #6
 800547c:	d117      	bne.n	80054ae <_tx_semaphore_cleanup+0xce>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	220d      	movs	r2, #13
 8005482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8005486:	4b11      	ldr	r3, [pc, #68]	; (80054cc <_tx_semaphore_cleanup+0xec>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	4a0f      	ldr	r2, [pc, #60]	; (80054cc <_tx_semaphore_cleanup+0xec>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 f8a7 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80054a2:	f3ef 8310 	mrs	r3, PRIMASK
 80054a6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80054a8:	b672      	cpsid	i
    return(primask_value);
 80054aa:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f383 8810 	msr	PRIMASK, r3
}
 80054b8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80054ba:	bf00      	nop
 80054bc:	3730      	adds	r7, #48	; 0x30
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	080053e1 	.word	0x080053e1
 80054c8:	53454d41 	.word	0x53454d41
 80054cc:	2000efe8 	.word	0x2000efe8

080054d0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80054dc:	2228      	movs	r2, #40	; 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f00f fe07 	bl	80150f4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80054f2:	f3ef 8310 	mrs	r3, PRIMASK
 80054f6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80054f8:	b672      	cpsid	i
    return(primask_value);
 80054fa:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <_tx_semaphore_create+0x94>)
 8005502:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8005504:	4b18      	ldr	r3, [pc, #96]	; (8005568 <_tx_semaphore_create+0x98>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <_tx_semaphore_create+0x50>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800550c:	4a17      	ldr	r2, [pc, #92]	; (800556c <_tx_semaphore_create+0x9c>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	619a      	str	r2, [r3, #24]
 800551e:	e011      	b.n	8005544 <_tx_semaphore_create+0x74>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8005520:	4b12      	ldr	r3, [pc, #72]	; (800556c <_tx_semaphore_create+0x9c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <_tx_semaphore_create+0x98>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <_tx_semaphore_create+0x98>)
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f383 8810 	msr	PRIMASK, r3
}
 8005558:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3728      	adds	r7, #40	; 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	53454d41 	.word	0x53454d41
 8005568:	2000ef18 	.word	0x2000ef18
 800556c:	2000ef14 	.word	0x2000ef14

08005570 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	; 0x38
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005578:	f3ef 8310 	mrs	r3, PRIMASK
 800557c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800557e:	b672      	cpsid	i
    return(primask_value);
 8005580:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800558a:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <_tx_semaphore_delete+0x108>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3b01      	subs	r3, #1
 8005590:	4a39      	ldr	r2, [pc, #228]	; (8005678 <_tx_semaphore_delete+0x108>)
 8005592:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8005594:	4b38      	ldr	r3, [pc, #224]	; (8005678 <_tx_semaphore_delete+0x108>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800559c:	4b37      	ldr	r3, [pc, #220]	; (800567c <_tx_semaphore_delete+0x10c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e013      	b.n	80055cc <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ba:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <_tx_semaphore_delete+0x10c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d102      	bne.n	80055cc <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80055c6:	4a2d      	ldr	r2, [pc, #180]	; (800567c <_tx_semaphore_delete+0x10c>)
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80055cc:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <_tx_semaphore_delete+0x110>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <_tx_semaphore_delete+0x110>)
 80055d4:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	633b      	str	r3, [r7, #48]	; 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f383 8810 	msr	PRIMASK, r3
}
 80055f8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80055fa:	e022      	b.n	8005642 <_tx_semaphore_delete+0xd2>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	3b01      	subs	r3, #1
 8005600:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005602:	f3ef 8310 	mrs	r3, PRIMASK
 8005606:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005608:	b672      	cpsid	i
    return(primask_value);
 800560a:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	2200      	movs	r2, #0
 8005612:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	2201      	movs	r2, #1
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <_tx_semaphore_delete+0x110>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	4a15      	ldr	r2, [pc, #84]	; (8005680 <_tx_semaphore_delete+0x110>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f383 8810 	msr	PRIMASK, r3
}
 8005636:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005638:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800563a:	f000 ffd9 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1d9      	bne.n	80055fc <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005648:	f3ef 8310 	mrs	r3, PRIMASK
 800564c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800564e:	b672      	cpsid	i
    return(primask_value);
 8005650:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <_tx_semaphore_delete+0x110>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	4a09      	ldr	r2, [pc, #36]	; (8005680 <_tx_semaphore_delete+0x110>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800566a:	f000 ff87 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3738      	adds	r7, #56	; 0x38
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2000ef18 	.word	0x2000ef18
 800567c:	2000ef14 	.word	0x2000ef14
 8005680:	2000efe8 	.word	0x2000efe8

08005684 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08c      	sub	sp, #48	; 0x30
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800568e:	2300      	movs	r3, #0
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005692:	f3ef 8310 	mrs	r3, PRIMASK
 8005696:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005698:	b672      	cpsid	i
    return(primask_value);
 800569a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f383 8810 	msr	PRIMASK, r3
}
 80056ba:	e068      	b.n	800578e <_tx_semaphore_get+0x10a>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d05d      	beq.n	800577e <_tx_semaphore_get+0xfa>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80056c2:	4b35      	ldr	r3, [pc, #212]	; (8005798 <_tx_semaphore_get+0x114>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <_tx_semaphore_get+0x58>
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f383 8810 	msr	PRIMASK, r3
}
 80056d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80056d6:	230d      	movs	r3, #13
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056da:	e058      	b.n	800578e <_tx_semaphore_get+0x10a>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <_tx_semaphore_get+0x118>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	4a2e      	ldr	r2, [pc, #184]	; (80057a0 <_tx_semaphore_get+0x11c>)
 80056e6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005714:	675a      	str	r2, [r3, #116]	; 0x74
 8005716:	e011      	b.n	800573c <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	6a3a      	ldr	r2, [r7, #32]
 8005722:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005728:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2206      	movs	r2, #6
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	2201      	movs	r2, #1
 8005750:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <_tx_semaphore_get+0x114>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3301      	adds	r3, #1
 800575e:	4a0e      	ldr	r2, [pc, #56]	; (8005798 <_tx_semaphore_get+0x114>)
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800576e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005770:	f001 f850 	bl	8006814 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577c:	e007      	b.n	800578e <_tx_semaphore_get+0x10a>
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f383 8810 	msr	PRIMASK, r3
}
 8005788:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800578a:	230d      	movs	r3, #13
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005790:	4618      	mov	r0, r3
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2000efe8 	.word	0x2000efe8
 800579c:	2000ef4c 	.word	0x2000ef4c
 80057a0:	080053e1 	.word	0x080053e1

080057a4 <_tx_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80057b2:	f3ef 8310 	mrs	r3, PRIMASK
 80057b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80057b8:	b672      	cpsid	i
    return(primask_value);
 80057ba:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80057bc:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the semaphore.  */
    if (name != TX_NULL)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <_tx_semaphore_info_get+0x28>
    {

        *name =  semaphore_ptr -> tx_semaphore_name;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current value of the semaphore.  */
    if (current_value != TX_NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <_tx_semaphore_info_get+0x36>
    {

        *current_value =  semaphore_ptr -> tx_semaphore_count;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this semaphore.  */
    if (first_suspended != TX_NULL)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <_tx_semaphore_info_get+0x44>
    {

        *first_suspended =  semaphore_ptr -> tx_semaphore_suspension_list;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this semaphore.  */
    if (suspended_count != TX_NULL)
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <_tx_semaphore_info_get+0x52>
    {

        *suspended_count =  (ULONG) semaphore_ptr -> tx_semaphore_suspended_count;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next semaphore created.  */
    if (next_semaphore != TX_NULL)
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <_tx_semaphore_info_get+0x60>
    {

        *next_semaphore =  semaphore_ptr -> tx_semaphore_created_next;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <_tx_semaphore_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b090      	sub	sp, #64	; 0x40
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005828:	f3ef 8310 	mrs	r3, PRIMASK
 800582c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800582e:	b672      	cpsid	i
    return(primask_value);
 8005830:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts.  */
    TX_DISABLE
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d805      	bhi.n	800584c <_tx_semaphore_prioritize+0x2c>
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f383 8810 	msr	PRIMASK, r3
}
 800584a:	e090      	b.n	800596e <_tx_semaphore_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this semaphore.  */
    else if (suspended_count == ((UINT) 2))
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	2b02      	cmp	r3, #2
 8005850:	d114      	bne.n	800587c <_tx_semaphore_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	429a      	cmp	r2, r3
 8005868:	d202      	bcs.n	8005870 <_tx_semaphore_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  next_thread;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	60da      	str	r2, [r3, #12]
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f383 8810 	msr	PRIMASK, r3
}
 800587a:	e078      	b.n	800596e <_tx_semaphore_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   semaphore_ptr -> tx_semaphore_suspension_list;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800588c:	4b3a      	ldr	r3, [pc, #232]	; (8005978 <_tx_semaphore_prioritize+0x158>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	4a39      	ldr	r2, [pc, #228]	; (8005978 <_tx_semaphore_prioritize+0x158>)
 8005894:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d201      	bcs.n	80058aa <_tx_semaphore_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80058b6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80058bc:	b672      	cpsid	i
    return(primask_value);
 80058be:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80058c0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != semaphore_ptr -> tx_semaphore_suspension_list)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d002      	beq.n	80058d2 <_tx_semaphore_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d0:	e006      	b.n	80058e0 <_tx_semaphore_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != semaphore_ptr -> tx_semaphore_suspended_count)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <_tx_semaphore_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <_tx_semaphore_prioritize+0xce>
            {

                /* Yes, everything is the same... move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ec:	e00c      	b.n	8005908 <_tx_semaphore_prioritize+0xe8>
            {

                /* No, the list is been modified so we need to start the search over.  */

                /* Save the suspension count and head pointer.  */
                head_ptr =   semaphore_ptr -> tx_semaphore_suspension_list;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8005908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	429a      	cmp	r2, r3
 800590e:	d1c4      	bne.n	800589a <_tx_semaphore_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <_tx_semaphore_prioritize+0x158>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3b01      	subs	r3, #1
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <_tx_semaphore_prioritize+0x158>)
 8005918:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800591a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	429a      	cmp	r2, r3
 8005920:	d01d      	beq.n	800595e <_tx_semaphore_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592c:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593e:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005944:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005950:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005956:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  priority_thread_ptr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005960:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f383 8810 	msr	PRIMASK, r3
}
 8005968:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800596a:	f000 fe07 	bl	800657c <_tx_thread_system_preempt_check>
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3740      	adds	r7, #64	; 0x40
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	2000efe8 	.word	0x2000efe8

0800597c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	; 0x30
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005984:	f3ef 8310 	mrs	r3, PRIMASK
 8005988:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800598a:	b672      	cpsid	i
    return(primask_value);
 800598c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d114      	bne.n	80059c6 <_tx_semaphore_put+0x4a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f383 8810 	msr	PRIMASK, r3
}
 80059b6:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d040      	beq.n	8005a40 <_tx_semaphore_put+0xc4>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
 80059c4:	e03c      	b.n	8005a40 <_tx_semaphore_put+0xc4>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <_tx_semaphore_put+0x64>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	e00e      	b.n	80059fe <_tx_semaphore_put+0x82>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a02:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	2200      	movs	r2, #0
 8005a08:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <_tx_semaphore_put+0xd0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <_tx_semaphore_put+0xd0>)
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f383 8810 	msr	PRIMASK, r3
}
 8005a2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a30:	f000 fdde 	bl	80065f0 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <_tx_semaphore_put+0xc4>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3730      	adds	r7, #48	; 0x30
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2000efe8 	.word	0x2000efe8

08005a50 <_tx_semaphore_put_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005a60:	b672      	cpsid	i
    return(primask_value);
 8005a62:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005a64:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_SEMAPHORE_PUT_NOTIFY_INSERT

    /* Setup semaphore put notification callback function.  */
    semaphore_ptr -> tx_semaphore_put_notify =  semaphore_put_notify;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	61da      	str	r2, [r3, #28]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8005a78:	2300      	movs	r3, #0
#endif
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b090      	sub	sp, #64	; 0x40
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8005a96:	2300      	movs	r3, #0
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9c:	21ef      	movs	r1, #239	; 0xef
 8005a9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005aa0:	f00f fb28 	bl	80150f4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8005aa4:	22e8      	movs	r2, #232	; 0xe8
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f00f fb23 	bl	80150f4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aca:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ad6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ade:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ae4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	3b01      	subs	r3, #1
 8005af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af8:	4413      	add	r3, r2
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b00:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b06:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b0c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2203      	movs	r2, #3
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a46      	ldr	r2, [pc, #280]	; (8005c34 <_tx_thread_create+0x1ac>)
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005b22:	4945      	ldr	r1, [pc, #276]	; (8005c38 <_tx_thread_create+0x1b0>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7fa fd6b 	bl	8000600 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005b30:	b672      	cpsid	i
    return(primask_value);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8005b34:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a40      	ldr	r2, [pc, #256]	; (8005c3c <_tx_thread_create+0x1b4>)
 8005b3a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8005b3c:	4b40      	ldr	r3, [pc, #256]	; (8005c40 <_tx_thread_create+0x1b8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <_tx_thread_create+0xd4>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8005b44:	4a3f      	ldr	r2, [pc, #252]	; (8005c44 <_tx_thread_create+0x1bc>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005b5a:	e016      	b.n	8005b8a <_tx_thread_create+0x102>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8005b5c:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <_tx_thread_create+0x1bc>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8005b8a:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <_tx_thread_create+0x1b8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <_tx_thread_create+0x1b8>)
 8005b92:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <_tx_thread_create+0x1c0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <_tx_thread_create+0x1c0>)
 8005b9c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8005b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d129      	bne.n	8005bf8 <_tx_thread_create+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ba4:	f3ef 8305 	mrs	r3, IPSR
 8005ba8:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8005baa:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8005bac:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <_tx_thread_create+0x1c4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005bb6:	d30d      	bcc.n	8005bd4 <_tx_thread_create+0x14c>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <_tx_thread_create+0x1c8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <_tx_thread_create+0x150>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8005bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bd2:	e001      	b.n	8005bd8 <_tx_thread_create+0x150>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f383 8810 	msr	PRIMASK, r3
}
 8005be2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fd03 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01c      	beq.n	8005c2a <_tx_thread_create+0x1a2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bf6:	e018      	b.n	8005c2a <_tx_thread_create+0x1a2>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f383 8810 	msr	PRIMASK, r3
}
 8005c02:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005c04:	f3ef 8310 	mrs	r3, PRIMASK
 8005c08:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005c0a:	b672      	cpsid	i
    return(primask_value);
 8005c0c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <_tx_thread_create+0x1c0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <_tx_thread_create+0x1c0>)
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005c26:	f000 fca9 	bl	800657c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3740      	adds	r7, #64	; 0x40
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	08006da9 	.word	0x08006da9
 8005c38:	080062c1 	.word	0x080062c1
 8005c3c:	54485244 	.word	0x54485244
 8005c40:	2000ef58 	.word	0x2000ef58
 8005c44:	2000ef54 	.word	0x2000ef54
 8005c48:	2000efe8 	.word	0x2000efe8
 8005c4c:	20000018 	.word	0x20000018
 8005c50:	2000ef50 	.word	0x2000ef50

08005c54 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b08b      	sub	sp, #44	; 0x2c
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005c66:	b672      	cpsid	i
    return(primask_value);
 8005c68:	697b      	ldr	r3, [r7, #20]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8005c6a:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d00b      	beq.n	8005c8c <_tx_thread_delete+0x38>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d007      	beq.n	8005c8c <_tx_thread_delete+0x38>
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8005c88:	2311      	movs	r3, #17
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d12d      	bne.n	8005cee <_tx_thread_delete+0x9a>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8005c98:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <_tx_thread_delete+0xa8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <_tx_thread_delete+0xa8>)
 8005ca0:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <_tx_thread_delete+0xa8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <_tx_thread_delete+0x5e>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8005caa:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <_tx_thread_delete+0xac>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e017      	b.n	8005ce2 <_tx_thread_delete+0x8e>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb8:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc0:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <_tx_thread_delete+0xac>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d102      	bne.n	8005ce2 <_tx_thread_delete+0x8e>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <_tx_thread_delete+0xac>)
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f383 8810 	msr	PRIMASK, r3
}
 8005cec:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	372c      	adds	r7, #44	; 0x2c
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	2000ef58 	.word	0x2000ef58
 8005d00:	2000ef54 	.word	0x2000ef54

08005d04 <_tx_thread_entry_exit_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT id))
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d14:	b672      	cpsid	i
    return(primask_value);
 8005d16:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005d18:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_THREAD_ENTRY_EXIT_NOTIFY_INSERT

    /* Setup thread entry/exit notification callback function.  */
    thread_ptr -> tx_thread_entry_exit_notify =  thread_entry_exit_notify;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8005d2e:	2300      	movs	r3, #0
#endif
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d42:	f3ef 8310 	mrs	r3, PRIMASK
 8005d46:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d48:	b672      	cpsid	i
    return(primask_value);
 8005d4a:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8005d4c:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005d4e:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <_tx_thread_identify+0x34>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8005d60:	68bb      	ldr	r3, [r7, #8]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	2000ef4c 	.word	0x2000ef4c

08005d74 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005d82:	f3ef 8310 	mrs	r3, PRIMASK
 8005d86:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005d88:	b672      	cpsid	i
    return(primask_value);
 8005d8a:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005d8c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f383 8810 	msr	PRIMASK, r3
}
 8005e0e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3724      	adds	r7, #36	; 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <_tx_thread_initialize+0x54>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <_tx_thread_initialize+0x58>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <_tx_thread_initialize+0x5c>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <_tx_thread_initialize+0x60>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005e3c:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <_tx_thread_initialize+0x64>)
 8005e3e:	2220      	movs	r2, #32
 8005e40:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	2100      	movs	r1, #0
 8005e46:	4810      	ldr	r0, [pc, #64]	; (8005e88 <_tx_thread_initialize+0x68>)
 8005e48:	f00f f954 	bl	80150f4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <_tx_thread_initialize+0x6c>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8005e52:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <_tx_thread_initialize+0x70>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <_tx_thread_initialize+0x74>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <_tx_thread_initialize+0x78>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <_tx_thread_initialize+0x7c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 8005e6c:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <_tx_thread_initialize+0x7c>)
 8005e6e:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	2000ef4c 	.word	0x2000ef4c
 8005e78:	2000ef50 	.word	0x2000ef50
 8005e7c:	2000ef5c 	.word	0x2000ef5c
 8005e80:	2000ef60 	.word	0x2000ef60
 8005e84:	2000ef64 	.word	0x2000ef64
 8005e88:	2000ef68 	.word	0x2000ef68
 8005e8c:	2000ef54 	.word	0x2000ef54
 8005e90:	2000ef58 	.word	0x2000ef58
 8005e94:	2000efe8 	.word	0x2000efe8
 8005e98:	2000efec 	.word	0x2000efec
 8005e9c:	2000eff0 	.word	0x2000eff0

08005ea0 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08c      	sub	sp, #48	; 0x30
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005eac:	2300      	movs	r3, #0
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb4:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005eb6:	b672      	cpsid	i
    return(primask_value);
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d902      	bls.n	8005ece <_tx_thread_preemption_change+0x2e>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8005ec8:	2318      	movs	r3, #24
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ecc:	e069      	b.n	8005fa2 <_tx_thread_preemption_change+0x102>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d114      	bne.n	8005f04 <_tx_thread_preemption_change+0x64>
        {

            /* Determine if this thread is at the head of the list.  */
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	4a36      	ldr	r2, [pc, #216]	; (8005fb8 <_tx_thread_preemption_change+0x118>)
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d10c      	bne.n	8005f04 <_tx_thread_preemption_change+0x64>
                map_index =  (thread_ptr -> tx_thread_priority)/((UINT) 32);
#endif

                /* Yes, this thread is at the front of the list.  Make sure
                   the preempted bit is cleared for this thread.  */
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	2201      	movs	r2, #1
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8005ef6:	4b31      	ldr	r3, [pc, #196]	; (8005fbc <_tx_thread_preemption_change+0x11c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	43db      	mvns	r3, r3
 8005efe:	4013      	ands	r3, r2
 8005f00:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <_tx_thread_preemption_change+0x11c>)
 8005f02:	6013      	str	r3, [r2, #0]
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d203      	bcs.n	8005f2a <_tx_thread_preemption_change+0x8a>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f28:	e004      	b.n	8005f34 <_tx_thread_preemption_change+0x94>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <_tx_thread_preemption_change+0x120>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d930      	bls.n	8005fa2 <_tx_thread_preemption_change+0x102>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8005f40:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <_tx_thread_preemption_change+0x120>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d92b      	bls.n	8005fa2 <_tx_thread_preemption_change+0x102>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8005f4a:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <_tx_thread_preemption_change+0x124>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d126      	bne.n	8005fa2 <_tx_thread_preemption_change+0x102>
                    /* Preemption needs to take place.  */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                    /* Determine if this thread has preemption threshold set.  */
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d00b      	beq.n	8005f78 <_tx_thread_preemption_change+0xd8>
                        TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                        _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                        /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	2201      	movs	r2, #1
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8005f6c:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <_tx_thread_preemption_change+0x11c>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	4313      	orrs	r3, r2
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <_tx_thread_preemption_change+0x11c>)
 8005f76:	6013      	str	r3, [r2, #0]
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <_tx_thread_preemption_change+0x120>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <_tx_thread_preemption_change+0x118>)
 8005f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f82:	4a10      	ldr	r2, [pc, #64]	; (8005fc4 <_tx_thread_preemption_change+0x124>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f383 8810 	msr	PRIMASK, r3
}
 8005f90:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8005f92:	f000 faf3 	bl	800657c <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005f96:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005f9c:	b672      	cpsid	i
    return(primask_value);
 8005f9e:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3730      	adds	r7, #48	; 0x30
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	2000ef68 	.word	0x2000ef68
 8005fbc:	2000ef60 	.word	0x2000ef60
 8005fc0:	2000ef64 	.word	0x2000ef64
 8005fc4:	2000ef50 	.word	0x2000ef50

08005fc8 <_tx_thread_priority_change>:
/*                                            _tx_thread_system_suspend,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	; 0x38
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005fda:	b672      	cpsid	i
    return(primask_value);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
TX_THREAD       *next_execute_ptr;
UINT            original_priority;


    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34

    /* Save the previous priority.  */
    *old_priority =  thread_ptr -> tx_thread_user_priority;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]

    /* Log this kernel call.  */
    TX_EL_THREAD_PRIORITY_CHANGE_INSERT

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d024      	beq.n	800603c <_tx_thread_priority_change+0x74>
    {

        /* Setup the user priority and threshold in the thread's control
           block.  */
        thread_ptr -> tx_thread_user_priority =               new_priority;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        thread_ptr -> tx_thread_user_preempt_threshold =      new_priority;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Determine if the actual thread priority should be setup, which is the
           case if the new priority is higher than the priority inheritance.  */
        if (new_priority < thread_ptr -> tx_thread_inherit_priority)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	d206      	bcs.n	800601c <_tx_thread_priority_change+0x54>
        {

            /* Change thread priority to the new user's priority.  */
            thread_ptr -> tx_thread_priority =           new_priority;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	63da      	str	r2, [r3, #60]	; 0x3c
 800601a:	e009      	b.n	8006030 <_tx_thread_priority_change+0x68>
        }
        else
        {

            /* Change thread priority to the priority inheritance.  */
            thread_ptr -> tx_thread_priority =           thread_ptr -> tx_thread_inherit_priority;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	f383 8810 	msr	PRIMASK, r3
}
 800603a:	e073      	b.n	8006124 <_tx_thread_priority_change+0x15c>
    }
    else
    {

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	220e      	movs	r2, #14
 8006040:	631a      	str	r2, [r3, #48]	; 0x30

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8006042:	4b3b      	ldr	r3, [pc, #236]	; (8006130 <_tx_thread_priority_change+0x168>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c

#else

        /* Increment the preempt disable flag by 2 to prevent system suspend from
           returning to the system.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 3);
 800604e:	4b39      	ldr	r3, [pc, #228]	; (8006134 <_tx_thread_priority_change+0x16c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3303      	adds	r3, #3
 8006054:	4a37      	ldr	r2, [pc, #220]	; (8006134 <_tx_thread_priority_change+0x16c>)
 8006056:	6013      	str	r3, [r2, #0]

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	64da      	str	r2, [r3, #76]	; 0x4c
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f383 8810 	msr	PRIMASK, r3
}
 800606e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fbcf 	bl	8006814 <_tx_thread_system_suspend>

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Setup the new priority for this thread.  */
        thread_ptr -> tx_thread_user_priority =           new_priority;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        thread_ptr -> tx_thread_user_preempt_threshold =  new_priority;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Determine if the actual thread priority should be setup, which is the
           case if the new priority is higher than the priority inheritance.  */
        if (new_priority < thread_ptr -> tx_thread_inherit_priority)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	d206      	bcs.n	80060a0 <_tx_thread_priority_change+0xd8>
        {

            /* Change thread priority to the new user's priority.  */
            thread_ptr -> tx_thread_priority =           new_priority;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c
 800609e:	e009      	b.n	80060b4 <_tx_thread_priority_change+0xec>
        }
        else
        {

            /* Change thread priority to the priority inheritance.  */
            thread_ptr -> tx_thread_priority =           thread_ptr -> tx_thread_inherit_priority;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fa9b 	bl	80065f0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80060c0:	b672      	cpsid	i
    return(primask_value);
 80060c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts.  */
        TX_DISABLE
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <_tx_thread_priority_change+0x16c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	4a19      	ldr	r2, [pc, #100]	; (8006134 <_tx_thread_priority_change+0x16c>)
 80060ce:	6013      	str	r3, [r2, #0]

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 80060d0:	4b17      	ldr	r3, [pc, #92]	; (8006130 <_tx_thread_priority_change+0x168>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	429a      	cmp	r2, r3
 80060dc:	d01a      	beq.n	8006114 <_tx_thread_priority_change+0x14c>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d116      	bne.n	8006114 <_tx_thread_priority_change+0x14c>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d810      	bhi.n	8006114 <_tx_thread_priority_change+0x14c>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d10c      	bne.n	8006114 <_tx_thread_priority_change+0x14c>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80060fa:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <_tx_thread_priority_change+0x168>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8006100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d205      	bcs.n	8006114 <_tx_thread_priority_change+0x14c>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	490a      	ldr	r1, [pc, #40]	; (8006138 <_tx_thread_priority_change+0x170>)
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006120:	f000 fa2c 	bl	800657c <_tx_thread_system_preempt_check>
    }

    /* Return success if we get here!  */
    return(TX_SUCCESS);
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3738      	adds	r7, #56	; 0x38
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2000ef50 	.word	0x2000ef50
 8006134:	2000efe8 	.word	0x2000efe8
 8006138:	2000ef68 	.word	0x2000ef68

0800613c <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800613c:	b480      	push	{r7}
 800613e:	b08b      	sub	sp, #44	; 0x2c
 8006140:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <_tx_thread_relinquish+0xb0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006148:	f3ef 8310 	mrs	r3, PRIMASK
 800614c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800614e:	b672      	cpsid	i
    return(primask_value);
 8006150:	69bb      	ldr	r3, [r7, #24]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8006152:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <_tx_thread_relinquish+0xb4>)
 800615a:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	429a      	cmp	r2, r3
 800616a:	d009      	beq.n	8006180 <_tx_thread_relinquish+0x44>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	4920      	ldr	r1, [pc, #128]	; (80061f4 <_tx_thread_relinquish+0xb8>)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <_tx_thread_relinquish+0xbc>)
 800617e:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <_tx_thread_relinquish+0xc0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	429a      	cmp	r2, r3
 8006188:	d906      	bls.n	8006198 <_tx_thread_relinquish+0x5c>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800618a:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <_tx_thread_relinquish+0xc0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <_tx_thread_relinquish+0xb8>)
 8006190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006194:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <_tx_thread_relinquish+0xbc>)
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f383 8810 	msr	PRIMASK, r3
}
 80061a2:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 80061a4:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <_tx_thread_relinquish+0xbc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d017      	beq.n	80061de <_tx_thread_relinquish+0xa2>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <_tx_thread_relinquish+0xc4>)
 80061b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80061b6:	f3ef 8305 	mrs	r3, IPSR
 80061ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80061bc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10c      	bne.n	80061dc <_tx_thread_relinquish+0xa0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80061c2:	f3ef 8310 	mrs	r3, PRIMASK
 80061c6:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 80061c8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 80061ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80061cc:	b662      	cpsie	i
}
 80061ce:	bf00      	nop
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f383 8810 	msr	PRIMASK, r3
}
 80061da:	bf00      	nop
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 80061dc:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 80061de:	bf00      	nop
 80061e0:	372c      	adds	r7, #44	; 0x2c
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	2000ef4c 	.word	0x2000ef4c
 80061f0:	2000f58c 	.word	0x2000f58c
 80061f4:	2000ef68 	.word	0x2000ef68
 80061f8:	2000ef50 	.word	0x2000ef50
 80061fc:	2000ef64 	.word	0x2000ef64
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006216:	b672      	cpsid	i
    return(primask_value);
 8006218:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800621a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	2b03      	cmp	r3, #3
 8006222:	d12f      	bne.n	8006284 <_tx_thread_resume+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006224:	f3ef 8305 	mrs	r3, IPSR
 8006228:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800622a:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800622c:	4b21      	ldr	r3, [pc, #132]	; (80062b4 <_tx_thread_resume+0xb0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006236:	d30d      	bcc.n	8006254 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8006238:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <_tx_thread_resume+0xb4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	63da      	str	r2, [r3, #60]	; 0x3c
 8006252:	e001      	b.n	8006258 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8006258:	4b18      	ldr	r3, [pc, #96]	; (80062bc <_tx_thread_resume+0xb8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <_tx_thread_resume+0xb8>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f383 8810 	msr	PRIMASK, r3
}
 800626c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9be 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <_tx_thread_resume+0x7c>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8006280:	2300      	movs	r3, #0
 8006282:	e012      	b.n	80062aa <_tx_thread_resume+0xa6>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <_tx_thread_resume+0x94>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8006292:	2319      	movs	r3, #25
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
 8006296:	e001      	b.n	800629c <_tx_thread_resume+0x98>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8006298:	2312      	movs	r3, #18
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f383 8810 	msr	PRIMASK, r3
}
 80062a6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3728      	adds	r7, #40	; 0x28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000018 	.word	0x20000018
 80062b8:	2000ef50 	.word	0x2000ef50
 80062bc:	2000efe8 	.word	0x2000efe8

080062c0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80062c6:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <_tx_thread_shell_entry+0xb0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80062cc:	f3ef 8310 	mrs	r3, PRIMASK
 80062d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80062d2:	b672      	cpsid	i
    return(primask_value);
 80062d4:	68fb      	ldr	r3, [r7, #12]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 80062d6:	61bb      	str	r3, [r7, #24]

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f383 8810 	msr	PRIMASK, r3
}
 80062ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <_tx_thread_shell_entry+0x3a>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2100      	movs	r1, #0
 80062f6:	69f8      	ldr	r0, [r7, #28]
 80062f8:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006302:	4610      	mov	r0, r2
 8006304:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8006306:	4b1b      	ldr	r3, [pc, #108]	; (8006374 <_tx_thread_shell_entry+0xb4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <_tx_thread_shell_entry+0x56>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <_tx_thread_shell_entry+0xb4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69f8      	ldr	r0, [r7, #28]
 8006314:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006316:	f3ef 8310 	mrs	r3, PRIMASK
 800631a:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800631c:	b672      	cpsid	i
    return(primask_value);
 800631e:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8006320:	61bb      	str	r3, [r7, #24]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006328:	617b      	str	r3, [r7, #20]
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2201      	movs	r2, #1
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2201      	movs	r2, #1
 8006334:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2200      	movs	r2, #0
 800633a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <_tx_thread_shell_entry+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a0d      	ldr	r2, [pc, #52]	; (8006378 <_tx_thread_shell_entry+0xb8>)
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f383 8810 	msr	PRIMASK, r3
}
 8006350:	bf00      	nop
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <_tx_thread_shell_entry+0xa0>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2101      	movs	r1, #1
 800635c:	69f8      	ldr	r0, [r7, #28]
 800635e:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8006360:	69f8      	ldr	r0, [r7, #28]
 8006362:	f000 fa57 	bl	8006814 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006366:	bf00      	nop
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	2000ef4c 	.word	0x2000ef4c
 8006374:	2000efec 	.word	0x2000efec
 8006378:	2000efe8 	.word	0x2000efe8

0800637c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08e      	sub	sp, #56	; 0x38
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006384:	f3ef 8310 	mrs	r3, PRIMASK
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800638a:	b672      	cpsid	i
    return(primask_value);
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800638e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006390:	4b35      	ldr	r3, [pc, #212]	; (8006468 <_tx_thread_sleep+0xec>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <_tx_thread_sleep+0x32>
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	f383 8810 	msr	PRIMASK, r3
}
 80063a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80063a8:	2313      	movs	r3, #19
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
 80063ac:	e056      	b.n	800645c <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80063ae:	f3ef 8305 	mrs	r3, IPSR
 80063b2:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 80063b4:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80063b6:	4b2d      	ldr	r3, [pc, #180]	; (800646c <_tx_thread_sleep+0xf0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <_tx_thread_sleep+0x56>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80063cc:	2313      	movs	r3, #19
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	e044      	b.n	800645c <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	4a26      	ldr	r2, [pc, #152]	; (8006470 <_tx_thread_sleep+0xf4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <_tx_thread_sleep+0x70>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	f383 8810 	msr	PRIMASK, r3
}
 80063e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80063e6:	2313      	movs	r3, #19
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	e037      	b.n	800645c <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d108      	bne.n	8006404 <_tx_thread_sleep+0x88>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80063fe:	2300      	movs	r3, #0
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	e02b      	b.n	800645c <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <_tx_thread_sleep+0xf8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <_tx_thread_sleep+0xa2>
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f383 8810 	msr	PRIMASK, r3
}
 8006416:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8006418:	2313      	movs	r3, #19
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
 800641c:	e01e      	b.n	800645c <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	2204      	movs	r2, #4
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2201      	movs	r2, #1
 8006428:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	2200      	movs	r2, #0
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <_tx_thread_sleep+0xf8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <_tx_thread_sleep+0xf8>)
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f383 8810 	msr	PRIMASK, r3
}
 800644c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800644e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006450:	f000 f9e0 	bl	8006814 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800645e:	4618      	mov	r0, r3
 8006460:	3738      	adds	r7, #56	; 0x38
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	2000ef4c 	.word	0x2000ef4c
 800646c:	20000018 	.word	0x20000018
 8006470:	2000f098 	.word	0x2000f098
 8006474:	2000efe8 	.word	0x2000efe8

08006478 <_tx_thread_stack_error_notify>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Access input argument just for the sake of lint, MISRA, etc.  */
    if (stack_error_handler != TX_NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <_tx_thread_stack_error_notify+0x14>
    {

        /* Stack checking is not enabled, just return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8006486:	23ff      	movs	r3, #255	; 0xff
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e001      	b.n	8006490 <_tx_thread_stack_error_notify+0x18>
    }
    else
    {

        /* Stack checking is not enabled, just return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 800648c:	23ff      	movs	r3, #255	; 0xff
 800648e:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8006490:	68fb      	ldr	r3, [r7, #12]
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
#endif
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80064a8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80064ae:	b672      	cpsid	i
    return(primask_value);
 80064b0:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80064b2:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80064b4:	4b2e      	ldr	r3, [pc, #184]	; (8006570 <_tx_thread_suspend+0xd0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d130      	bne.n	8006524 <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064c6:	f3ef 8305 	mrs	r3, IPSR
 80064ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80064cc:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80064ce:	4b29      	ldr	r3, [pc, #164]	; (8006574 <_tx_thread_suspend+0xd4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <_tx_thread_suspend+0x4c>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d105      	bne.n	80064ec <_tx_thread_suspend+0x4c>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80064e0:	4b25      	ldr	r3, [pc, #148]	; (8006578 <_tx_thread_suspend+0xd8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <_tx_thread_suspend+0x4c>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 80064e8:	2314      	movs	r3, #20
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d132      	bne.n	8006558 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2203      	movs	r2, #3
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006504:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <_tx_thread_suspend+0xd8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <_tx_thread_suspend+0xd8>)
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f383 8810 	msr	PRIMASK, r3
}
 8006518:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f97a 	bl	8006814 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8006520:	2300      	movs	r3, #0
 8006522:	e020      	b.n	8006566 <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	2b02      	cmp	r3, #2
 800652a:	d102      	bne.n	8006532 <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 800652c:	2314      	movs	r3, #20
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
 8006530:	e012      	b.n	8006558 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	2b01      	cmp	r3, #1
 8006538:	d102      	bne.n	8006540 <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 800653a:	2314      	movs	r3, #20
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
 800653e:	e00b      	b.n	8006558 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	2b03      	cmp	r3, #3
 8006546:	d102      	bne.n	800654e <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
 800654c:	e004      	b.n	8006558 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8006554:	2300      	movs	r3, #0
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f383 8810 	msr	PRIMASK, r3
}
 8006562:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8006566:	4618      	mov	r0, r3
 8006568:	3728      	adds	r7, #40	; 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	2000ef4c 	.word	0x2000ef4c
 8006574:	20000018 	.word	0x20000018
 8006578:	2000efe8 	.word	0x2000efe8

0800657c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006582:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <_tx_thread_system_preempt_check+0x64>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d121      	bne.n	80065d2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800658e:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <_tx_thread_system_preempt_check+0x68>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8006594:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <_tx_thread_system_preempt_check+0x6c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d017      	beq.n	80065d2 <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <_tx_thread_system_preempt_check+0x70>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80065aa:	f3ef 8305 	mrs	r3, IPSR
 80065ae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80065b0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10c      	bne.n	80065d0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 80065bc:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_primask_value();
 80065be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80065c0:	b662      	cpsie	i
}
 80065c2:	bf00      	nop
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f383 8810 	msr	PRIMASK, r3
}
 80065ce:	bf00      	nop
}
 80065d0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80065d2:	bf00      	nop
 80065d4:	3724      	adds	r7, #36	; 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	2000efe8 	.word	0x2000efe8
 80065e4:	2000ef4c 	.word	0x2000ef4c
 80065e8:	2000ef50 	.word	0x2000ef50
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b096      	sub	sp, #88	; 0x58
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80065f8:	f3ef 8310 	mrs	r3, PRIMASK
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 80065fe:	b672      	cpsid	i
    return(primask_value);
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006602:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	334c      	adds	r3, #76	; 0x4c
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fff1 	bl	80075f8 <_tx_timer_system_deactivate>
 8006616:	e002      	b.n	800661e <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800661e:	4b75      	ldr	r3, [pc, #468]	; (80067f4 <_tx_thread_system_resume+0x204>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	4a73      	ldr	r2, [pc, #460]	; (80067f4 <_tx_thread_system_resume+0x204>)
 8006626:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8096 	bne.w	800675e <_tx_thread_system_resume+0x16e>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80aa 	beq.w	8006790 <_tx_thread_system_resume+0x1a0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8085 	bne.w	8006750 <_tx_thread_system_resume+0x160>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8006652:	4a69      	ldr	r2, [pc, #420]	; (80067f8 <_tx_thread_system_resume+0x208>)
 8006654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d166      	bne.n	8006730 <_tx_thread_system_resume+0x140>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8006662:	4965      	ldr	r1, [pc, #404]	; (80067f8 <_tx_thread_system_resume+0x208>)
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006678:	2201      	movs	r2, #1
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8006682:	4b5e      	ldr	r3, [pc, #376]	; (80067fc <_tx_thread_system_resume+0x20c>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006688:	4313      	orrs	r3, r2
 800668a:	4a5c      	ldr	r2, [pc, #368]	; (80067fc <_tx_thread_system_resume+0x20c>)
 800668c:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800668e:	4b5c      	ldr	r3, [pc, #368]	; (8006800 <_tx_thread_system_resume+0x210>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006694:	429a      	cmp	r2, r3
 8006696:	d27b      	bcs.n	8006790 <_tx_thread_system_resume+0x1a0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8006698:	4a59      	ldr	r2, [pc, #356]	; (8006800 <_tx_thread_system_resume+0x210>)
 800669a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669c:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800669e:	4b59      	ldr	r3, [pc, #356]	; (8006804 <_tx_thread_system_resume+0x214>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80066a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80066aa:	4a56      	ldr	r2, [pc, #344]	; (8006804 <_tx_thread_system_resume+0x214>)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e06e      	b.n	8006790 <_tx_thread_system_resume+0x1a0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d269      	bcs.n	8006790 <_tx_thread_system_resume+0x1a0>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 80066bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d00b      	beq.n	80066e0 <_tx_thread_system_resume+0xf0>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 80066c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	2201      	movs	r2, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80066d4:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <_tx_thread_system_resume+0x218>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066da:	4313      	orrs	r3, r2
 80066dc:	4a4a      	ldr	r2, [pc, #296]	; (8006808 <_tx_thread_system_resume+0x218>)
 80066de:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80066e0:	4a48      	ldr	r2, [pc, #288]	; (8006804 <_tx_thread_system_resume+0x214>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	f383 8810 	msr	PRIMASK, r3
}
 80066f0:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80066f2:	4b40      	ldr	r3, [pc, #256]	; (80067f4 <_tx_thread_system_resume+0x204>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80066f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d174      	bne.n	80067e8 <_tx_thread_system_resume+0x1f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80066fe:	4b43      	ldr	r3, [pc, #268]	; (800680c <_tx_thread_system_resume+0x21c>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006706:	f3ef 8305 	mrs	r3, IPSR
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <_tx_thread_system_resume+0x13c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800671c:	b662      	cpsie	i
}
 800671e:	bf00      	nop
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f383 8810 	msr	PRIMASK, r3
}
 800672a:	bf00      	nop
}
 800672c:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800672e:	e05b      	b.n	80067e8 <_tx_thread_system_resume+0x1f8>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8006736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800673c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006746:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800674c:	621a      	str	r2, [r3, #32]
 800674e:	e01f      	b.n	8006790 <_tx_thread_system_resume+0x1a0>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2203      	movs	r2, #3
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
 800675c:	e018      	b.n	8006790 <_tx_thread_system_resume+0x1a0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	2b01      	cmp	r3, #1
 8006764:	d014      	beq.n	8006790 <_tx_thread_system_resume+0x1a0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	2b02      	cmp	r3, #2
 800676c:	d010      	beq.n	8006790 <_tx_thread_system_resume+0x1a0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <_tx_thread_system_resume+0x194>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
 8006782:	e005      	b.n	8006790 <_tx_thread_system_resume+0x1a0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2203      	movs	r2, #3
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006790:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <_tx_thread_system_resume+0x220>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
 8006796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006798:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f383 8810 	msr	PRIMASK, r3
}
 80067a0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80067a2:	4b18      	ldr	r3, [pc, #96]	; (8006804 <_tx_thread_system_resume+0x214>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d020      	beq.n	80067ee <_tx_thread_system_resume+0x1fe>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80067ac:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <_tx_thread_system_resume+0x204>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11a      	bne.n	80067ee <_tx_thread_system_resume+0x1fe>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80067b8:	4b14      	ldr	r3, [pc, #80]	; (800680c <_tx_thread_system_resume+0x21c>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80067c0:	f3ef 8305 	mrs	r3, IPSR
 80067c4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80067c6:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10f      	bne.n	80067ec <_tx_thread_system_resume+0x1fc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80067cc:	f3ef 8310 	mrs	r3, PRIMASK
 80067d0:	617b      	str	r3, [r7, #20]
    return(primask_value);
 80067d2:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 80067d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80067d6:	b662      	cpsie	i
}
 80067d8:	bf00      	nop
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f383 8810 	msr	PRIMASK, r3
}
 80067e4:	bf00      	nop
}
 80067e6:	e001      	b.n	80067ec <_tx_thread_system_resume+0x1fc>
                                return;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <_tx_thread_system_resume+0x1fe>
 80067ec:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80067ee:	3758      	adds	r7, #88	; 0x58
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	2000efe8 	.word	0x2000efe8
 80067f8:	2000ef68 	.word	0x2000ef68
 80067fc:	2000ef5c 	.word	0x2000ef5c
 8006800:	2000ef64 	.word	0x2000ef64
 8006804:	2000ef50 	.word	0x2000ef50
 8006808:	2000ef60 	.word	0x2000ef60
 800680c:	e000ed04 	.word	0xe000ed04
 8006810:	2000ef4c 	.word	0x2000ef4c

08006814 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b09e      	sub	sp, #120	; 0x78
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800681c:	4b59      	ldr	r3, [pc, #356]	; (8006984 <_tx_thread_system_suspend+0x170>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006822:	f3ef 8310 	mrs	r3, PRIMASK
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006828:	b672      	cpsid	i
    return(primask_value);
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800682c:	677b      	str	r3, [r7, #116]	; 0x74

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006832:	429a      	cmp	r2, r3
 8006834:	d112      	bne.n	800685c <_tx_thread_system_suspend+0x48>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800683c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <_tx_thread_system_suspend+0x40>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8006842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d004      	beq.n	8006854 <_tx_thread_system_suspend+0x40>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	334c      	adds	r3, #76	; 0x4c
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fe70 	bl	8007534 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	4a4b      	ldr	r2, [pc, #300]	; (8006988 <_tx_thread_system_suspend+0x174>)
 800685a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800685c:	4b4b      	ldr	r3, [pc, #300]	; (800698c <_tx_thread_system_suspend+0x178>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3b01      	subs	r3, #1
 8006862:	4a4a      	ldr	r2, [pc, #296]	; (800698c <_tx_thread_system_suspend+0x178>)
 8006864:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	2b01      	cmp	r3, #1
 800686c:	f040 8120 	bne.w	8006ab0 <_tx_thread_system_suspend+0x29c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8006882:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	429a      	cmp	r2, r3
 8006888:	d027      	beq.n	80068da <_tx_thread_system_suspend+0xc6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8006890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006892:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006894:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8006896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006898:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800689a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800689c:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <_tx_thread_system_suspend+0x17c>)
 800689e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	f040 808b 	bne.w	80069c2 <_tx_thread_system_suspend+0x1ae>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80068ac:	4938      	ldr	r1, [pc, #224]	; (8006990 <_tx_thread_system_suspend+0x17c>)
 80068ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80068b6:	4b37      	ldr	r3, [pc, #220]	; (8006994 <_tx_thread_system_suspend+0x180>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8081 	beq.w	80069c2 <_tx_thread_system_suspend+0x1ae>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80068c0:	2201      	movs	r2, #1
 80068c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	663b      	str	r3, [r7, #96]	; 0x60
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80068ca:	4b32      	ldr	r3, [pc, #200]	; (8006994 <_tx_thread_system_suspend+0x180>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d0:	43db      	mvns	r3, r3
 80068d2:	4013      	ands	r3, r2
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <_tx_thread_system_suspend+0x180>)
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e073      	b.n	80069c2 <_tx_thread_system_suspend+0x1ae>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <_tx_thread_system_suspend+0x17c>)
 80068dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068de:	2100      	movs	r1, #0
 80068e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80068e4:	2201      	movs	r2, #1
 80068e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80068ee:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <_tx_thread_system_suspend+0x184>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f4:	43db      	mvns	r3, r3
 80068f6:	4013      	ands	r3, r2
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <_tx_thread_system_suspend+0x184>)
 80068fa:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80068fc:	4b25      	ldr	r3, [pc, #148]	; (8006994 <_tx_thread_system_suspend+0x180>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <_tx_thread_system_suspend+0x108>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8006904:	2201      	movs	r2, #1
 8006906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	663b      	str	r3, [r7, #96]	; 0x60
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800690e:	4b21      	ldr	r3, [pc, #132]	; (8006994 <_tx_thread_system_suspend+0x180>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006914:	43db      	mvns	r3, r3
 8006916:	4013      	ands	r3, r2
 8006918:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <_tx_thread_system_suspend+0x180>)
 800691a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800691c:	2300      	movs	r3, #0
 800691e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <_tx_thread_system_suspend+0x184>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8006926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006928:	2b00      	cmp	r3, #0
 800692a:	d13d      	bne.n	80069a8 <_tx_thread_system_suspend+0x194>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <_tx_thread_system_suspend+0x188>)
 800692e:	2220      	movs	r2, #32
 8006930:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8006932:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <_tx_thread_system_suspend+0x18c>)
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800693c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800693e:	f383 8810 	msr	PRIMASK, r3
}
 8006942:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006944:	4b11      	ldr	r3, [pc, #68]	; (800698c <_tx_thread_system_suspend+0x178>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800694a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 80d9 	bne.w	8006b04 <_tx_thread_system_suspend+0x2f0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <_tx_thread_system_suspend+0x190>)
 8006954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006958:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800695a:	f3ef 8305 	mrs	r3, IPSR
 800695e:	647b      	str	r3, [r7, #68]	; 0x44
    return(ipsr_value);
 8006960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    if (__get_ipsr_value() == 0)
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10c      	bne.n	8006980 <_tx_thread_system_suspend+0x16c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006966:	f3ef 8310 	mrs	r3, PRIMASK
 800696a:	643b      	str	r3, [r7, #64]	; 0x40
    return(primask_value);
 800696c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        interrupt_save = __get_primask_value();
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006970:	b662      	cpsie	i
}
 8006972:	bf00      	nop
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	f383 8810 	msr	PRIMASK, r3
}
 800697e:	bf00      	nop
}
 8006980:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8006982:	e0bf      	b.n	8006b04 <_tx_thread_system_suspend+0x2f0>
 8006984:	2000ef4c 	.word	0x2000ef4c
 8006988:	2000f58c 	.word	0x2000f58c
 800698c:	2000efe8 	.word	0x2000efe8
 8006990:	2000ef68 	.word	0x2000ef68
 8006994:	2000ef60 	.word	0x2000ef60
 8006998:	2000ef5c 	.word	0x2000ef5c
 800699c:	2000ef64 	.word	0x2000ef64
 80069a0:	2000ef50 	.word	0x2000ef50
 80069a4:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80069a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069aa:	fa93 f3a3 	rbit	r3, r3
 80069ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b2:	fab3 f383 	clz	r3, r3
 80069b6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80069b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069bc:	4413      	add	r3, r2
 80069be:	4a55      	ldr	r2, [pc, #340]	; (8006b14 <_tx_thread_system_suspend+0x300>)
 80069c0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80069c2:	4b55      	ldr	r3, [pc, #340]	; (8006b18 <_tx_thread_system_suspend+0x304>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d171      	bne.n	8006ab0 <_tx_thread_system_suspend+0x29c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80069cc:	4b51      	ldr	r3, [pc, #324]	; (8006b14 <_tx_thread_system_suspend+0x300>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a52      	ldr	r2, [pc, #328]	; (8006b1c <_tx_thread_system_suspend+0x308>)
 80069d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d6:	4a50      	ldr	r2, [pc, #320]	; (8006b18 <_tx_thread_system_suspend+0x304>)
 80069d8:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80069da:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <_tx_thread_system_suspend+0x30c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d041      	beq.n	8006a66 <_tx_thread_system_suspend+0x252>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80069e2:	4b50      	ldr	r3, [pc, #320]	; (8006b24 <_tx_thread_system_suspend+0x310>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	4a4e      	ldr	r2, [pc, #312]	; (8006b24 <_tx_thread_system_suspend+0x310>)
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	f383 8810 	msr	PRIMASK, r3
}
 80069f6:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069f8:	f3ef 8310 	mrs	r3, PRIMASK
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069fe:	b672      	cpsid	i
    return(primask_value);
 8006a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8006a02:	677b      	str	r3, [r7, #116]	; 0x74

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8006a04:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <_tx_thread_system_suspend+0x310>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	4a46      	ldr	r2, [pc, #280]	; (8006b24 <_tx_thread_system_suspend+0x310>)
 8006a0c:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8006a12:	4b43      	ldr	r3, [pc, #268]	; (8006b20 <_tx_thread_system_suspend+0x30c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8006a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a1a:	fa93 f3a3 	rbit	r3, r3
 8006a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a22:	fab3 f383 	clz	r3, r3
 8006a26:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8006a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2c:	4413      	add	r3, r2
 8006a2e:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8006a30:	4a3a      	ldr	r2, [pc, #232]	; (8006b1c <_tx_thread_system_suspend+0x308>)
 8006a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3a:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <_tx_thread_system_suspend+0x300>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d811      	bhi.n	8006a66 <_tx_thread_system_suspend+0x252>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8006a42:	4a36      	ldr	r2, [pc, #216]	; (8006b1c <_tx_thread_system_suspend+0x308>)
 8006a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a4a:	4a33      	ldr	r2, [pc, #204]	; (8006b18 <_tx_thread_system_suspend+0x304>)
 8006a4c:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	663b      	str	r3, [r7, #96]	; 0x60
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006a58:	4b31      	ldr	r3, [pc, #196]	; (8006b20 <_tx_thread_system_suspend+0x30c>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	4013      	ands	r3, r2
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <_tx_thread_system_suspend+0x30c>)
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	f383 8810 	msr	PRIMASK, r3
}
 8006a70:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006a72:	4b2c      	ldr	r3, [pc, #176]	; (8006b24 <_tx_thread_system_suspend+0x310>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8006a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d144      	bne.n	8006b08 <_tx_thread_system_suspend+0x2f4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006a7e:	4b2a      	ldr	r3, [pc, #168]	; (8006b28 <_tx_thread_system_suspend+0x314>)
 8006a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a84:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006a86:	f3ef 8305 	mrs	r3, IPSR
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10c      	bne.n	8006aac <_tx_thread_system_suspend+0x298>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a92:	f3ef 8310 	mrs	r3, PRIMASK
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8006a9a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006a9c:	b662      	cpsie	i
}
 8006a9e:	bf00      	nop
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f383 8810 	msr	PRIMASK, r3
}
 8006aaa:	bf00      	nop
}
 8006aac:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8006aae:	e02b      	b.n	8006b08 <_tx_thread_system_suspend+0x2f4>
 8006ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f383 8810 	msr	PRIMASK, r3
}
 8006aba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006abc:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <_tx_thread_system_suspend+0x304>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d022      	beq.n	8006b0c <_tx_thread_system_suspend+0x2f8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <_tx_thread_system_suspend+0x310>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8006acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11c      	bne.n	8006b0c <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <_tx_thread_system_suspend+0x314>)
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006ada:	f3ef 8305 	mrs	r3, IPSR
 8006ade:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006ae0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <_tx_thread_system_suspend+0x2ec>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aea:	613b      	str	r3, [r7, #16]
    return(primask_value);
 8006aec:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 8006aee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006af0:	b662      	cpsie	i
}
 8006af2:	bf00      	nop
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f383 8810 	msr	PRIMASK, r3
}
 8006afe:	bf00      	nop
}
 8006b00:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8006b02:	e003      	b.n	8006b0c <_tx_thread_system_suspend+0x2f8>
                return;
 8006b04:	bf00      	nop
 8006b06:	e002      	b.n	8006b0e <_tx_thread_system_suspend+0x2fa>
            return;
 8006b08:	bf00      	nop
 8006b0a:	e000      	b.n	8006b0e <_tx_thread_system_suspend+0x2fa>
    return;
 8006b0c:	bf00      	nop
}
 8006b0e:	3778      	adds	r7, #120	; 0x78
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	2000ef64 	.word	0x2000ef64
 8006b18:	2000ef50 	.word	0x2000ef50
 8006b1c:	2000ef68 	.word	0x2000ef68
 8006b20:	2000ef60 	.word	0x2000ef60
 8006b24:	2000efe8 	.word	0x2000efe8
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b094      	sub	sp, #80	; 0x50
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 8006b34:	2300      	movs	r3, #0
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b38:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b3e:	b672      	cpsid	i
    return(primask_value);
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 8006b42:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	334c      	adds	r3, #76	; 0x4c
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fd55 	bl	80075f8 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d108      	bne.n	8006b68 <_tx_thread_terminate+0x3c>
 8006b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 8006b62:	2300      	movs	r3, #0
 8006b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b66:	e091      	b.n	8006c8c <_tx_thread_terminate+0x160>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f000 8087 	beq.w	8006c80 <_tx_thread_terminate+0x154>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8006b72:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <_tx_thread_terminate+0x170>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	4a48      	ldr	r2, [pc, #288]	; (8006c9c <_tx_thread_terminate+0x170>)
 8006b7a:	6013      	str	r3, [r2, #0]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b82:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d124      	bne.n	8006bd6 <_tx_thread_terminate+0xaa>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 8006b9e:	4b3f      	ldr	r3, [pc, #252]	; (8006c9c <_tx_thread_terminate+0x170>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a3d      	ldr	r2, [pc, #244]	; (8006c9c <_tx_thread_terminate+0x170>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	f383 8810 	msr	PRIMASK, r3
}
 8006bb2:	bf00      	nop
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 8006bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <_tx_thread_terminate+0x96>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8006bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fe26 	bl	8006814 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006bce:	b672      	cpsid	i
    return(primask_value);
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Disable interrupts.  */
            TX_DISABLE
 8006bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd4:	e035      	b.n	8006c42 <_tx_thread_terminate+0x116>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	f383 8810 	msr	PRIMASK, r3
}
 8006bfa:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <_tx_thread_terminate+0xde>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c10:	b672      	cpsid	i
    return(primask_value);
 8006c12:	6a3b      	ldr	r3, [r7, #32]
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8006c14:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	f383 8810 	msr	PRIMASK, r3
}
 8006c26:	bf00      	nop
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <_tx_thread_terminate+0x10a>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c30:	2101      	movs	r1, #1
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c36:	f3ef 8310 	mrs	r3, PRIMASK
 8006c3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c3c:	b672      	cpsid	i
    return(primask_value);
 8006c3e:	69fb      	ldr	r3, [r7, #28]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8006c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f383 8810 	msr	PRIMASK, r3
}
 8006c4c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <_tx_thread_terminate+0x174>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <_tx_thread_terminate+0x132>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 8006c56:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <_tx_thread_terminate+0x174>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c62:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c64:	b672      	cpsid	i
    return(primask_value);
 8006c66:	693b      	ldr	r3, [r7, #16]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8006c68:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <_tx_thread_terminate+0x170>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <_tx_thread_terminate+0x170>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c76:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f383 8810 	msr	PRIMASK, r3
}
 8006c7e:	e005      	b.n	8006c8c <_tx_thread_terminate+0x160>
 8006c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c82:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f383 8810 	msr	PRIMASK, r3
}
 8006c8a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006c8c:	f7ff fc76 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 8006c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3750      	adds	r7, #80	; 0x50
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	2000efe8 	.word	0x2000efe8
 8006ca0:	2000efec 	.word	0x2000efec

08006ca4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006caa:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <_tx_thread_time_slice+0x88>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb4:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006cb6:	b672      	cpsid	i
    return(primask_value);
 8006cb8:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8006cba:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006cbc:	4b1c      	ldr	r3, [pc, #112]	; (8006d30 <_tx_thread_time_slice+0x8c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d024      	beq.n	8006d12 <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d120      	bne.n	8006d12 <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <_tx_thread_time_slice+0x90>)
 8006cde:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d013      	beq.n	8006d12 <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d10d      	bne.n	8006d12 <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	6a12      	ldr	r2, [r2, #32]
 8006cfe:	490e      	ldr	r1, [pc, #56]	; (8006d38 <_tx_thread_time_slice+0x94>)
 8006d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <_tx_thread_time_slice+0x98>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a0b      	ldr	r2, [pc, #44]	; (8006d38 <_tx_thread_time_slice+0x94>)
 8006d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0e:	4a0c      	ldr	r2, [pc, #48]	; (8006d40 <_tx_thread_time_slice+0x9c>)
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f383 8810 	msr	PRIMASK, r3
}
 8006d1c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	2000ef4c 	.word	0x2000ef4c
 8006d30:	2000eff8 	.word	0x2000eff8
 8006d34:	2000f58c 	.word	0x2000f58c
 8006d38:	2000ef68 	.word	0x2000ef68
 8006d3c:	2000ef64 	.word	0x2000ef64
 8006d40:	2000ef50 	.word	0x2000ef50

08006d44 <_tx_thread_time_slice_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b089      	sub	sp, #36	; 0x24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d50:	f3ef 8310 	mrs	r3, PRIMASK
 8006d54:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d56:	b672      	cpsid	i
    return(primask_value);
 8006d58:	697b      	ldr	r3, [r7, #20]

TX_THREAD       *current_thread;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006d5a:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_TIME_SLICE_CHANGE_INSERT

    /* Return the old time slice.  */
    *old_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]

    /* Setup the new time-slice.  */
    thread_ptr -> tx_thread_time_slice =      new_time_slice;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =  new_time_slice;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	61da      	str	r2, [r3, #28]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <_tx_thread_time_slice_change+0x5c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	61bb      	str	r3, [r7, #24]

    /* Determine if this thread is the currently executing thread.  */
    if (thread_ptr == current_thread)
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d102      	bne.n	8006d84 <_tx_thread_time_slice_change+0x40>
    {

        /* Yes, update the time-slice countdown variable.  */
        _tx_timer_time_slice =  new_time_slice;
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <_tx_thread_time_slice_change+0x60>)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f383 8810 	msr	PRIMASK, r3
}
 8006d8e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3724      	adds	r7, #36	; 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	2000ef4c 	.word	0x2000ef4c
 8006da4:	2000f58c 	.word	0x2000f58c

08006da8 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006db4:	f3ef 8310 	mrs	r3, PRIMASK
 8006db8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006dba:	b672      	cpsid	i
    return(primask_value);
 8006dbc:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8006dbe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d10e      	bne.n	8006de6 <_tx_thread_timeout+0x3e>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <_tx_thread_timeout+0x70>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <_tx_thread_timeout+0x70>)
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f383 8810 	msr	PRIMASK, r3
}
 8006ddc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006de0:	f7ff fc06 	bl	80065f0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8006de4:	e013      	b.n	8006e0e <_tx_thread_timeout+0x66>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dea:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f383 8810 	msr	PRIMASK, r3
}
 8006dfe:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <_tx_thread_timeout+0x66>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e0c:	4798      	blx	r3
}
 8006e0e:	bf00      	nop
 8006e10:	3728      	adds	r7, #40	; 0x28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	2000efe8 	.word	0x2000efe8

08006e1c <_tx_thread_wait_abort>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_wait_abort(TX_THREAD  *thread_ptr)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08c      	sub	sp, #48	; 0x30
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006e24:	f3ef 8310 	mrs	r3, PRIMASK
 8006e28:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006e2a:	b672      	cpsid	i
    return(primask_value);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
UINT            status;
ULONG           suspension_sequence;


    /* Disable interrupts.  */
    TX_DISABLE
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_THREAD_WAIT_ABORT_INSERT

    /* Determine if the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state < TX_SLEEP)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d808      	bhi.n	8006e4a <_tx_thread_wait_abort+0x2e>
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with an error message to indicate that
           nothing was done.  */
        status =  TX_WAIT_ABORT_ERROR;
 8006e44:	231b      	movs	r3, #27
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e48:	e056      	b.n	8006ef8 <_tx_thread_wait_abort+0xdc>
    }
    else
    {

        /* Check for a sleep condition.  */
        if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d114      	bne.n	8006e7c <_tx_thread_wait_abort+0x60>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2203      	movs	r2, #3
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the TX_WAIT_ABORTED status in the thread that is
               sleeping.  */
            thread_ptr -> tx_thread_suspend_status =  TX_WAIT_ABORTED;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	221a      	movs	r2, #26
 8006e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Make sure there isn't a suspend cleanup routine.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the disable preemption flag.  */
            _tx_thread_preempt_disable++;
 8006e66:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <_tx_thread_wait_abort+0xe8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <_tx_thread_wait_abort+0xe8>)
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	e01f      	b.n	8006ebc <_tx_thread_wait_abort+0xa0>
        {

            /* Process all other suspension timeouts.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2203      	movs	r2, #3
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e8e:	623b      	str	r3, [r7, #32]
            suspension_sequence =  ((ULONG) 0);
#endif

            /* Set the TX_WAIT_ABORTED status in the thread that was
               suspended.  */
            thread_ptr -> tx_thread_suspend_status =  TX_WAIT_ABORTED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	221a      	movs	r2, #26
 8006e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the disable preemption flag.  */
            _tx_thread_preempt_disable++;
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <_tx_thread_wait_abort+0xe8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <_tx_thread_wait_abort+0xe8>)
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f383 8810 	msr	PRIMASK, r3
}
 8006eac:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <_tx_thread_wait_abort+0xa0>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	6a39      	ldr	r1, [r7, #32]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
            }
        }

        /* If the abort of the thread wait was successful, if so resume the thread.  */
        if (thread_ptr -> tx_thread_suspend_status == TX_WAIT_ABORTED)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec2:	2b1a      	cmp	r3, #26
 8006ec4:	d105      	bne.n	8006ed2 <_tx_thread_wait_abort+0xb6>
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Lift the suspension on the previously waiting thread.  */
            _tx_thread_system_resume(thread_ptr);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fb92 	bl	80065f0 <_tx_thread_system_resume>
#endif

            /* Return a successful status.  */
            status =  TX_SUCCESS;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed0:	e012      	b.n	8006ef8 <_tx_thread_wait_abort+0xdc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ed8:	b672      	cpsid	i
    return(primask_value);
 8006eda:	68bb      	ldr	r3, [r7, #8]
            TX_RESTORE

#else

            /* Disable interrupts.  */
            TX_DISABLE
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Decrement the disable preemption flag.  */
            _tx_thread_preempt_disable--;
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <_tx_thread_wait_abort+0xe8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	4a07      	ldr	r2, [pc, #28]	; (8006f04 <_tx_thread_wait_abort+0xe8>)
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f383 8810 	msr	PRIMASK, r3
}
 8006ef2:	bf00      	nop
            TX_RESTORE
#endif

            /* Return with an error message to indicate that
               nothing was done.  */
            status =  TX_WAIT_ABORT_ERROR;
 8006ef4:	231b      	movs	r3, #27
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    /* Return completion status.  */
    return(status);
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3730      	adds	r7, #48	; 0x30
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	2000efe8 	.word	0x2000efe8

08006f08 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f12:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f14:	b672      	cpsid	i
    return(primask_value);
 8006f16:	683b      	ldr	r3, [r7, #0]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8006f18:	60fb      	str	r3, [r7, #12]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8006f1a:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <_tx_time_get+0x34>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60bb      	str	r3, [r7, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000eff4 	.word	0x2000eff4

08006f40 <_tx_time_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_time_set(ULONG new_time)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f4e:	b672      	cpsid	i
    return(primask_value);
 8006f50:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8006f52:	617b      	str	r3, [r7, #20]

    /* Log this kernel call.  */
    TX_EL_TIME_SET_INSERT

    /* Set the system clock time.  */
    _tx_timer_system_clock =  new_time;
 8006f54:	4a07      	ldr	r2, [pc, #28]	; (8006f74 <_tx_time_set+0x34>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f383 8810 	msr	PRIMASK, r3
}
 8006f64:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	2000eff4 	.word	0x2000eff4

08006f78 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f86:	b672      	cpsid	i
    return(primask_value);
 8006f88:	68fb      	ldr	r3, [r7, #12]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8006f8a:	613b      	str	r3, [r7, #16]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <_tx_timer_activate+0x22>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 8006f94:	2317      	movs	r3, #23
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e00d      	b.n	8006fb6 <_tx_timer_activate+0x3e>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <_tx_timer_activate+0x30>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 8006fa2:	2317      	movs	r3, #23
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e006      	b.n	8006fb6 <_tx_timer_activate+0x3e>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3308      	adds	r3, #8
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fac1 	bl	8007534 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f383 8810 	msr	PRIMASK, r3
}
 8006fc0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8006fc2:	697b      	ldr	r3, [r7, #20]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b089      	sub	sp, #36	; 0x24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fdc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006fde:	b672      	cpsid	i
    return(primask_value);
 8006fe0:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8006fe2:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <_tx_timer_change+0x2c>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3724      	adds	r7, #36	; 0x24
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8007022:	2234      	movs	r2, #52	; 0x34
 8007024:	2100      	movs	r1, #0
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f00e f864 	bl	80150f4 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	615a      	str	r2, [r3, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800704a:	f3ef 8310 	mrs	r3, PRIMASK
 800704e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007050:	b672      	cpsid	i
    return(primask_value);
 8007052:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8007054:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <_tx_timer_create+0xb8>)
 800705a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <_tx_timer_create+0xbc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <_tx_timer_create+0x64>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <_tx_timer_create+0xc0>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	629a      	str	r2, [r3, #40]	; 0x28
 8007076:	e011      	b.n	800709c <_tx_timer_create+0x88>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8007078:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <_tx_timer_create+0xc0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a3a      	ldr	r2, [r7, #32]
 800709a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800709c:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <_tx_timer_create+0xbc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <_tx_timer_create+0xbc>)
 80070a4:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d104      	bne.n	80070b6 <_tx_timer_create+0xa2>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3308      	adds	r3, #8
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fa3f 	bl	8007534 <_tx_timer_system_activate>
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f383 8810 	msr	PRIMASK, r3
}
 80070c0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3728      	adds	r7, #40	; 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	4154494d 	.word	0x4154494d
 80070d0:	2000f090 	.word	0x2000f090
 80070d4:	2000f08c 	.word	0x2000f08c

080070d8 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 80070d8:	b480      	push	{r7}
 80070da:	b08d      	sub	sp, #52	; 0x34
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3308      	adds	r3, #8
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80070e6:	f3ef 8310 	mrs	r3, PRIMASK
 80070ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80070ec:	b672      	cpsid	i
    return(primask_value);
 80070ee:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 80070f0:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d07f      	beq.n	80071fe <_tx_timer_deactivate+0x126>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 8007102:	4b45      	ldr	r3, [pc, #276]	; (8007218 <_tx_timer_deactivate+0x140>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	429a      	cmp	r2, r3
 800710a:	d306      	bcc.n	800711a <_tx_timer_deactivate+0x42>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800710c:	4b43      	ldr	r3, [pc, #268]	; (800721c <_tx_timer_deactivate+0x144>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	429a      	cmp	r2, r3
 8007114:	d201      	bcs.n	800711a <_tx_timer_deactivate+0x42>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	2b01      	cmp	r3, #1
 800711e:	d12e      	bne.n	800717e <_tx_timer_deactivate+0xa6>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 8007120:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <_tx_timer_deactivate+0x148>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	429a      	cmp	r2, r3
 8007128:	d307      	bcc.n	800713a <_tx_timer_deactivate+0x62>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800712a:	4b3d      	ldr	r3, [pc, #244]	; (8007220 <_tx_timer_deactivate+0x148>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	109b      	asrs	r3, r3, #2
 8007134:	3301      	adds	r3, #1
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007138:	e010      	b.n	800715c <_tx_timer_deactivate+0x84>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800713a:	4b37      	ldr	r3, [pc, #220]	; (8007218 <_tx_timer_deactivate+0x140>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	109b      	asrs	r3, r3, #2
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 8007146:	4b35      	ldr	r3, [pc, #212]	; (800721c <_tx_timer_deactivate+0x144>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b35      	ldr	r3, [pc, #212]	; (8007220 <_tx_timer_deactivate+0x148>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	109b      	asrs	r3, r3, #2
 8007152:	461a      	mov	r2, r3
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	4413      	add	r3, r2
 8007158:	3301      	adds	r3, #1
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b20      	cmp	r3, #32
 8007162:	d908      	bls.n	8007176 <_tx_timer_deactivate+0x9e>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	4413      	add	r3, r2
 800716c:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e01c      	b.n	80071b0 <_tx_timer_deactivate+0xd8>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	e018      	b.n	80071b0 <_tx_timer_deactivate+0xd8>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800717e:	4b29      	ldr	r3, [pc, #164]	; (8007224 <_tx_timer_deactivate+0x14c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	429a      	cmp	r2, r3
 8007186:	d00f      	beq.n	80071a8 <_tx_timer_deactivate+0xd0>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b20      	cmp	r3, #32
 800718e:	d906      	bls.n	800719e <_tx_timer_deactivate+0xc6>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e008      	b.n	80071b0 <_tx_timer_deactivate+0xd8>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e003      	b.n	80071b0 <_tx_timer_deactivate+0xd8>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 80071b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d108      	bne.n	80071d0 <_tx_timer_deactivate+0xf8>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d117      	bne.n	80071f8 <_tx_timer_deactivate+0x120>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e013      	b.n	80071f8 <_tx_timer_deactivate+0x120>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d105      	bne.n	80071f8 <_tx_timer_deactivate+0x120>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	619a      	str	r2, [r3, #24]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3734      	adds	r7, #52	; 0x34
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	2000f07c 	.word	0x2000f07c
 800721c:	2000f080 	.word	0x2000f080
 8007220:	2000f084 	.word	0x2000f084
 8007224:	2000f094 	.word	0x2000f094

08007228 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007230:	f3ef 8310 	mrs	r3, PRIMASK
 8007234:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007236:	b672      	cpsid	i
    return(primask_value);
 8007238:	693b      	ldr	r3, [r7, #16]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 800723a:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <_tx_timer_delete+0x26>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3308      	adds	r3, #8
 8007248:	4618      	mov	r0, r3
 800724a:	f000 f9d5 	bl	80075f8 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 8007254:	4b15      	ldr	r3, [pc, #84]	; (80072ac <_tx_timer_delete+0x84>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	4a14      	ldr	r2, [pc, #80]	; (80072ac <_tx_timer_delete+0x84>)
 800725c:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <_tx_timer_delete+0x84>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <_tx_timer_delete+0x46>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <_tx_timer_delete+0x88>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e013      	b.n	8007296 <_tx_timer_delete+0x6e>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <_tx_timer_delete+0x88>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d102      	bne.n	8007296 <_tx_timer_delete+0x6e>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 8007290:	4a07      	ldr	r2, [pc, #28]	; (80072b0 <_tx_timer_delete+0x88>)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f383 8810 	msr	PRIMASK, r3
}
 80072a0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000f090 	.word	0x2000f090
 80072b0:	2000f08c 	.word	0x2000f08c

080072b4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072ba:	f3ef 8310 	mrs	r3, PRIMASK
 80072be:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80072c0:	b672      	cpsid	i
    return(primask_value);
 80072c2:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80072c4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <_tx_timer_expiration_process+0x38>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	4a07      	ldr	r2, [pc, #28]	; (80072ec <_tx_timer_expiration_process+0x38>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f383 8810 	msr	PRIMASK, r3
}
 80072da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80072dc:	4804      	ldr	r0, [pc, #16]	; (80072f0 <_tx_timer_expiration_process+0x3c>)
 80072de:	f7ff f987 	bl	80065f0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	2000efe8 	.word	0x2000efe8
 80072f0:	2000f098 	.word	0x2000f098

080072f4 <_tx_timer_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks,
                ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b08d      	sub	sp, #52	; 0x34
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007302:	f3ef 8310 	mrs	r3, PRIMASK
 8007306:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007308:	b672      	cpsid	i
    return(primask_value);
 800730a:	697b      	ldr	r3, [r7, #20]
UINT                timer_active;
UINT                active_timer_list;


    /* Disable interrupts.  */
    TX_DISABLE
 800730c:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_INFO_GET_INSERT

    /* Retrieve the name of the timer.  */
    if (name != TX_NULL)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <_tx_timer_info_get+0x28>
    {

        *name =  timer_ptr -> tx_timer_name;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup address of internal timer structure.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3308      	adds	r3, #8
 8007320:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Default active to false.  */
    timer_active =  TX_FALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Default the ticks left to the remaining ticks.  */
    ticks_left =  internal_ptr -> tx_timer_internal_remaining_ticks;
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the timer is still active.  */
    if (internal_ptr -> tx_timer_internal_list_head != TX_NULL)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d053      	beq.n	80073dc <_tx_timer_info_get+0xe8>
    {

        /* Indicate this timer is active.  */
        timer_active =  TX_TRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the timer is still active.  */
        if (internal_ptr -> tx_timer_internal_list_head >= _tx_timer_list_start)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	4b3a      	ldr	r3, [pc, #232]	; (800742c <_tx_timer_info_get+0x138>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d307      	bcc.n	8007358 <_tx_timer_info_get+0x64>
        {

            /* Determine if the list head is before the end of the list.  */
            if (internal_ptr -> tx_timer_internal_list_head < _tx_timer_list_end)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	4b38      	ldr	r3, [pc, #224]	; (8007430 <_tx_timer_info_get+0x13c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d201      	bcs.n	8007358 <_tx_timer_info_get+0x64>
            {

                /* This timer is active and has not yet expired.  */
                active_timer_list =  TX_TRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }

        /* Determine if the timer is on the active timer list.  */
        if (active_timer_list == TX_TRUE)
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	2b01      	cmp	r3, #1
 800735c:	d12c      	bne.n	80073b8 <_tx_timer_info_get+0xc4>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Setup the list head pointer.  */
            list_head =  internal_ptr -> tx_timer_internal_list_head;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	61bb      	str	r3, [r7, #24]

            /* Is this timer's entry after the current timer pointer?  */
            if (internal_ptr -> tx_timer_internal_list_head >= _tx_timer_current_ptr)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	4b32      	ldr	r3, [pc, #200]	; (8007434 <_tx_timer_info_get+0x140>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d307      	bcc.n	8007380 <_tx_timer_info_get+0x8c>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  ((TX_TIMER_POINTER_DIF(list_head, _tx_timer_current_ptr)) + ((ULONG) 1));
 8007370:	4b30      	ldr	r3, [pc, #192]	; (8007434 <_tx_timer_info_get+0x140>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	109b      	asrs	r3, r3, #2
 800737a:	3301      	adds	r3, #1
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737e:	e010      	b.n	80073a2 <_tx_timer_info_get+0xae>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  ((TX_TIMER_POINTER_DIF(list_head, _tx_timer_list_start)));
 8007380:	4b2a      	ldr	r3, [pc, #168]	; (800742c <_tx_timer_info_get+0x138>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	109b      	asrs	r3, r3, #2
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c

                ticks_left =  ticks_left + ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800738c:	4b28      	ldr	r3, [pc, #160]	; (8007430 <_tx_timer_info_get+0x13c>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b28      	ldr	r3, [pc, #160]	; (8007434 <_tx_timer_info_get+0x140>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	109b      	asrs	r3, r3, #2
 8007398:	461a      	mov	r2, r3
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	4413      	add	r3, r2
 800739e:	3301      	adds	r3, #1
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	d918      	bls.n	80073dc <_tx_timer_info_get+0xe8>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                ticks_left =  (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	4413      	add	r3, r2
 80073b2:	3b20      	subs	r3, #32
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b6:	e011      	b.n	80073dc <_tx_timer_info_get+0xe8>

            /* The timer is not on the actual timer list so it must either be being processed
               or on a temporary list to be processed.   */

            /* Check to see if this timer is the timer currently being processed.  */
            if (_tx_timer_expired_timer_ptr == internal_ptr)
 80073b8:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <_tx_timer_info_get+0x144>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d102      	bne.n	80073c8 <_tx_timer_info_get+0xd4>
            {

                /* Timer dispatch routine is executing, waiting to execute, or just finishing. No more remaining ticks for this expiration.  */
                ticks_left =  ((ULONG) 0);
 80073c2:	2300      	movs	r3, #0
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c6:	e009      	b.n	80073dc <_tx_timer_info_get+0xe8>

                /* Timer is not the one being processed, which means it must be on the temporary expiration list
                   waiting to be processed.  */

                /* Calculate the remaining ticks for a timer in the process of expiring.  */
                if (ticks_left > TX_TIMER_ENTRIES)
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d904      	bls.n	80073d8 <_tx_timer_info_get+0xe4>
                {

                    /* Calculate the number of ticks remaining.  */
                    ticks_left =  internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b20      	subs	r3, #32
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d6:	e001      	b.n	80073dc <_tx_timer_info_get+0xe8>
                }
                else
                {

                    /* Timer dispatch routine is waiting to execute, no more remaining ticks for this expiration.  */
                    ticks_left =  ((ULONG) 0);
 80073d8:	2300      	movs	r3, #0
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }
    }

    /* Setup return values for an inactive timer.  */
    if (active != TX_NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <_tx_timer_info_get+0xf4>
    {

       /* Setup the timer active indication.  */
       *active =  timer_active;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e6:	601a      	str	r2, [r3, #0]
    }
    if (remaining_ticks != TX_NULL)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <_tx_timer_info_get+0x100>
    {

        /* Setup the default remaining ticks value.  */
        *remaining_ticks =  ticks_left;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f2:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the reschedule ticks value.  */
    if (reschedule_ticks != TX_NULL)
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <_tx_timer_info_get+0x10e>
    {

        *reschedule_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created application timer.  */
    if (next_timer != TX_NULL)
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <_tx_timer_info_get+0x11c>
    {

        *next_timer =  timer_ptr -> tx_timer_created_next;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800740c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f383 8810 	msr	PRIMASK, r3
}
 800741a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3734      	adds	r7, #52	; 0x34
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	2000f07c 	.word	0x2000f07c
 8007430:	2000f080 	.word	0x2000f080
 8007434:	2000f084 	.word	0x2000f084
 8007438:	2000f094 	.word	0x2000f094

0800743c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800743c:	b590      	push	{r4, r7, lr}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007442:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <_tx_timer_initialize+0xa8>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007448:	4b27      	ldr	r3, [pc, #156]	; (80074e8 <_tx_timer_initialize+0xac>)
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800744e:	4b27      	ldr	r3, [pc, #156]	; (80074ec <_tx_timer_initialize+0xb0>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007454:	4b26      	ldr	r3, [pc, #152]	; (80074f0 <_tx_timer_initialize+0xb4>)
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800745a:	4b26      	ldr	r3, [pc, #152]	; (80074f4 <_tx_timer_initialize+0xb8>)
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007460:	2280      	movs	r2, #128	; 0x80
 8007462:	2100      	movs	r1, #0
 8007464:	4824      	ldr	r0, [pc, #144]	; (80074f8 <_tx_timer_initialize+0xbc>)
 8007466:	f00d fe45 	bl	80150f4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800746a:	4b24      	ldr	r3, [pc, #144]	; (80074fc <_tx_timer_initialize+0xc0>)
 800746c:	4a22      	ldr	r2, [pc, #136]	; (80074f8 <_tx_timer_initialize+0xbc>)
 800746e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007470:	4b23      	ldr	r3, [pc, #140]	; (8007500 <_tx_timer_initialize+0xc4>)
 8007472:	4a21      	ldr	r2, [pc, #132]	; (80074f8 <_tx_timer_initialize+0xbc>)
 8007474:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007476:	4b23      	ldr	r3, [pc, #140]	; (8007504 <_tx_timer_initialize+0xc8>)
 8007478:	4a23      	ldr	r2, [pc, #140]	; (8007508 <_tx_timer_initialize+0xcc>)
 800747a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800747c:	4b21      	ldr	r3, [pc, #132]	; (8007504 <_tx_timer_initialize+0xc8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	4a20      	ldr	r2, [pc, #128]	; (8007504 <_tx_timer_initialize+0xc8>)
 8007484:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007486:	4b21      	ldr	r3, [pc, #132]	; (800750c <_tx_timer_initialize+0xd0>)
 8007488:	4a21      	ldr	r2, [pc, #132]	; (8007510 <_tx_timer_initialize+0xd4>)
 800748a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <_tx_timer_initialize+0xd8>)
 800748e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007492:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007494:	4b20      	ldr	r3, [pc, #128]	; (8007518 <_tx_timer_initialize+0xdc>)
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800749a:	4b1c      	ldr	r3, [pc, #112]	; (800750c <_tx_timer_initialize+0xd0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <_tx_timer_initialize+0xd8>)
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	491d      	ldr	r1, [pc, #116]	; (8007518 <_tx_timer_initialize+0xdc>)
 80074a4:	6809      	ldr	r1, [r1, #0]
 80074a6:	481c      	ldr	r0, [pc, #112]	; (8007518 <_tx_timer_initialize+0xdc>)
 80074a8:	6800      	ldr	r0, [r0, #0]
 80074aa:	2400      	movs	r4, #0
 80074ac:	9405      	str	r4, [sp, #20]
 80074ae:	2400      	movs	r4, #0
 80074b0:	9404      	str	r4, [sp, #16]
 80074b2:	9003      	str	r0, [sp, #12]
 80074b4:	9102      	str	r1, [sp, #8]
 80074b6:	9201      	str	r2, [sp, #4]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <_tx_timer_initialize+0xe0>)
 80074bc:	4a18      	ldr	r2, [pc, #96]	; (8007520 <_tx_timer_initialize+0xe4>)
 80074be:	4919      	ldr	r1, [pc, #100]	; (8007524 <_tx_timer_initialize+0xe8>)
 80074c0:	4819      	ldr	r0, [pc, #100]	; (8007528 <_tx_timer_initialize+0xec>)
 80074c2:	f7fe fae1 	bl	8005a88 <_tx_thread_create>
 80074c6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e5      	bne.n	800749a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80074ce:	4b17      	ldr	r3, [pc, #92]	; (800752c <_tx_timer_initialize+0xf0>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80074d4:	4b16      	ldr	r3, [pc, #88]	; (8007530 <_tx_timer_initialize+0xf4>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd90      	pop	{r4, r7, pc}
 80074e2:	bf00      	nop
 80074e4:	2000eff4 	.word	0x2000eff4
 80074e8:	2000f58c 	.word	0x2000f58c
 80074ec:	2000eff8 	.word	0x2000eff8
 80074f0:	2000f088 	.word	0x2000f088
 80074f4:	2000f094 	.word	0x2000f094
 80074f8:	2000effc 	.word	0x2000effc
 80074fc:	2000f07c 	.word	0x2000f07c
 8007500:	2000f084 	.word	0x2000f084
 8007504:	2000f080 	.word	0x2000f080
 8007508:	2000f078 	.word	0x2000f078
 800750c:	2000f180 	.word	0x2000f180
 8007510:	2000f18c 	.word	0x2000f18c
 8007514:	2000f184 	.word	0x2000f184
 8007518:	2000f188 	.word	0x2000f188
 800751c:	4154494d 	.word	0x4154494d
 8007520:	08007669 	.word	0x08007669
 8007524:	08015f08 	.word	0x08015f08
 8007528:	2000f098 	.word	0x2000f098
 800752c:	2000f08c 	.word	0x2000f08c
 8007530:	2000f090 	.word	0x2000f090

08007534 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007534:	b480      	push	{r7}
 8007536:	b089      	sub	sp, #36	; 0x24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d04a      	beq.n	80075de <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d046      	beq.n	80075de <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d142      	bne.n	80075de <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b20      	cmp	r3, #32
 800755c:	d902      	bls.n	8007564 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800755e:	231f      	movs	r3, #31
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	e002      	b.n	800756a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	3b01      	subs	r3, #1
 8007568:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800756a:	4b20      	ldr	r3, [pc, #128]	; (80075ec <_tx_timer_system_activate+0xb8>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8007576:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <_tx_timer_system_activate+0xbc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d30b      	bcc.n	8007598 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007580:	4b1b      	ldr	r3, [pc, #108]	; (80075f0 <_tx_timer_system_activate+0xbc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	109b      	asrs	r3, r3, #2
 800758a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800758c:	4b19      	ldr	r3, [pc, #100]	; (80075f4 <_tx_timer_system_activate+0xc0>)
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e011      	b.n	80075d8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80075de:	bf00      	nop
 80075e0:	3724      	adds	r7, #36	; 0x24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	2000f084 	.word	0x2000f084
 80075f0:	2000f080 	.word	0x2000f080
 80075f4:	2000f07c 	.word	0x2000f07c

080075f8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d026      	beq.n	800765a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d108      	bne.n	800762c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d117      	bne.n	8007654 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e013      	b.n	8007654 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d105      	bne.n	8007654 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	619a      	str	r2, [r3, #24]
    }
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b094      	sub	sp, #80	; 0x50
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007670:	2300      	movs	r3, #0
 8007672:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a6e      	ldr	r2, [pc, #440]	; (8007830 <_tx_timer_thread_entry+0x1c8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	f040 80d5 	bne.w	8007828 <_tx_timer_thread_entry+0x1c0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800767e:	f3ef 8310 	mrs	r3, PRIMASK
 8007682:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007684:	b672      	cpsid	i
    return(primask_value);
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007688:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800768a:	4b6a      	ldr	r3, [pc, #424]	; (8007834 <_tx_timer_thread_entry+0x1cc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f107 020c 	add.w	r2, r7, #12
 800769e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80076a0:	4b64      	ldr	r3, [pc, #400]	; (8007834 <_tx_timer_thread_entry+0x1cc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80076a8:	4b62      	ldr	r3, [pc, #392]	; (8007834 <_tx_timer_thread_entry+0x1cc>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4a61      	ldr	r2, [pc, #388]	; (8007834 <_tx_timer_thread_entry+0x1cc>)
 80076b0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80076b2:	4b60      	ldr	r3, [pc, #384]	; (8007834 <_tx_timer_thread_entry+0x1cc>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b60      	ldr	r3, [pc, #384]	; (8007838 <_tx_timer_thread_entry+0x1d0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d103      	bne.n	80076c6 <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80076be:	4b5f      	ldr	r3, [pc, #380]	; (800783c <_tx_timer_thread_entry+0x1d4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a5c      	ldr	r2, [pc, #368]	; (8007834 <_tx_timer_thread_entry+0x1cc>)
 80076c4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80076c6:	4b5e      	ldr	r3, [pc, #376]	; (8007840 <_tx_timer_thread_entry+0x1d8>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	f383 8810 	msr	PRIMASK, r3
}
 80076d6:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80076d8:	f3ef 8310 	mrs	r3, PRIMASK
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80076de:	b672      	cpsid	i
    return(primask_value);
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80076e2:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80076e4:	e07b      	b.n	80077de <_tx_timer_thread_entry+0x176>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80076f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d102      	bne.n	8007702 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	e00e      	b.n	8007720 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8007702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800770c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007712:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	f107 020c 	add.w	r2, r7, #12
 800771a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8007720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b20      	cmp	r3, #32
 8007726:	d911      	bls.n	800774c <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8007730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007732:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8007734:	2300      	movs	r3, #0
 8007736:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773a:	f107 0208 	add.w	r2, r7, #8
 800773e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8007740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007744:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	e01a      	b.n	8007782 <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8007758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	f107 0208 	add.w	r2, r7, #8
 800776e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8007770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007774:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8007776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	e002      	b.n	8007782 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800777c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777e:	2200      	movs	r2, #0
 8007780:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8007782:	4a30      	ldr	r2, [pc, #192]	; (8007844 <_tx_timer_thread_entry+0x1dc>)
 8007784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f383 8810 	msr	PRIMASK, r3
}
 8007792:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <_tx_timer_thread_entry+0x138>
                {

                    (timeout_function) (timeout_param);
 800779a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800779e:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80077a0:	f3ef 8310 	mrs	r3, PRIMASK
 80077a4:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80077a6:	b672      	cpsid	i
    return(primask_value);
 80077a8:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80077aa:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80077ac:	4b25      	ldr	r3, [pc, #148]	; (8007844 <_tx_timer_thread_entry+0x1dc>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d105      	bne.n	80077c6 <_tx_timer_thread_entry+0x15e>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	2200      	movs	r2, #0
 80077be:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80077c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80077c2:	f7ff feb7 	bl	8007534 <_tx_timer_system_activate>
 80077c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80077d2:	f3ef 8310 	mrs	r3, PRIMASK
 80077d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80077d8:	b672      	cpsid	i
    return(primask_value);
 80077da:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80077dc:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d180      	bne.n	80076e6 <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80077e4:	4b16      	ldr	r3, [pc, #88]	; (8007840 <_tx_timer_thread_entry+0x1d8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d116      	bne.n	800781a <_tx_timer_thread_entry+0x1b2>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80077ec:	4b16      	ldr	r3, [pc, #88]	; (8007848 <_tx_timer_thread_entry+0x1e0>)
 80077ee:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80077f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f2:	2203      	movs	r2, #3
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	2201      	movs	r2, #1
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80077fc:	4b13      	ldr	r3, [pc, #76]	; (800784c <_tx_timer_thread_entry+0x1e4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	4a12      	ldr	r2, [pc, #72]	; (800784c <_tx_timer_thread_entry+0x1e4>)
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007808:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f383 8810 	msr	PRIMASK, r3
}
 8007810:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007812:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007814:	f7fe fffe 	bl	8006814 <_tx_thread_system_suspend>
 8007818:	e731      	b.n	800767e <_tx_timer_thread_entry+0x16>
 800781a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	bf00      	nop
            TX_DISABLE
 8007826:	e72a      	b.n	800767e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8007828:	bf00      	nop
 800782a:	3750      	adds	r7, #80	; 0x50
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	4154494d 	.word	0x4154494d
 8007834:	2000f084 	.word	0x2000f084
 8007838:	2000f080 	.word	0x2000f080
 800783c:	2000f07c 	.word	0x2000f07c
 8007840:	2000f088 	.word	0x2000f088
 8007844:	2000f094 	.word	0x2000f094
 8007848:	2000f098 	.word	0x2000f098
 800784c:	2000efe8 	.word	0x2000efe8

08007850 <_txe_block_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]

TX_THREAD       *current_thread;
#endif

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <_txe_block_allocate+0x1c>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007866:	2302      	movs	r3, #2
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e025      	b.n	80078b8 <_txe_block_allocate+0x68>
    }

    /* Check for an invalid pool pointer.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <_txe_block_allocate+0x84>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d002      	beq.n	800787c <_txe_block_allocate+0x2c>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007876:	2302      	movs	r3, #2
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	e01d      	b.n	80078b8 <_txe_block_allocate+0x68>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (block_ptr == TX_NULL)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <_txe_block_allocate+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8007882:	2303      	movs	r3, #3
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	e017      	b.n	80078b8 <_txe_block_allocate+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d014      	beq.n	80078b8 <_txe_block_allocate+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007894:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007896:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <_txe_block_allocate+0x88>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4313      	orrs	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <_txe_block_allocate+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80078a0:	2304      	movs	r3, #4
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	e008      	b.n	80078b8 <_txe_block_allocate+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80078a6:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <_txe_block_allocate+0x8c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	4a0c      	ldr	r2, [pc, #48]	; (80078e0 <_txe_block_allocate+0x90>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d101      	bne.n	80078b8 <_txe_block_allocate+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80078b4:	2304      	movs	r3, #4
 80078b6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d105      	bne.n	80078ca <_txe_block_allocate+0x7a>
    {

        /* Call actual block allocate function.  */
        status =  _tx_block_allocate(pool_ptr, block_ptr, wait_option);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7fa f91a 	bl	8001afc <_tx_block_allocate>
 80078c8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80078ca:	69fb      	ldr	r3, [r7, #28]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	424c4f43 	.word	0x424c4f43
 80078d8:	20000018 	.word	0x20000018
 80078dc:	2000ef4c 	.word	0x2000ef4c
 80078e0:	2000f098 	.word	0x2000f098

080078e4 <_txe_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b092      	sub	sp, #72	; 0x48
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <_txe_block_pool_create+0x1e>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80078fc:	2302      	movs	r3, #2
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007900:	e077      	b.n	80079f2 <_txe_block_pool_create+0x10e>
    }

    /* Check for invalid control block size.  */
    else if (pool_control_block_size != (sizeof(TX_BLOCK_POOL)))
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	2b30      	cmp	r3, #48	; 0x30
 8007906:	d002      	beq.n	800790e <_txe_block_pool_create+0x2a>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007908:	2302      	movs	r3, #2
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790c:	e071      	b.n	80079f2 <_txe_block_pool_create+0x10e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800790e:	f3ef 8310 	mrs	r3, PRIMASK
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007914:	b672      	cpsid	i
    return(primask_value);
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007918:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800791a:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <_txe_block_pool_create+0x130>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	4a3c      	ldr	r2, [pc, #240]	; (8007a14 <_txe_block_pool_create+0x130>)
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f383 8810 	msr	PRIMASK, r3
}
 800792e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_block_pool_created_ptr;
 8007930:	4b39      	ldr	r3, [pc, #228]	; (8007a18 <_txe_block_pool_create+0x134>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8007936:	2300      	movs	r3, #0
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
 800793a:	e009      	b.n	8007950 <_txe_block_pool_create+0x6c>
        {

            /* Determine if this block pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	429a      	cmp	r2, r3
 8007942:	d00b      	beq.n	800795c <_txe_block_pool_create+0x78>
                break;
            }
            else
            {
                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_block_pool_created_next;
 8007944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	3301      	adds	r3, #1
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007950:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <_txe_block_pool_create+0x138>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007956:	429a      	cmp	r2, r3
 8007958:	d3f0      	bcc.n	800793c <_txe_block_pool_create+0x58>
 800795a:	e000      	b.n	800795e <_txe_block_pool_create+0x7a>
                break;
 800795c:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800795e:	f3ef 8310 	mrs	r3, PRIMASK
 8007962:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007964:	b672      	cpsid	i
    return(primask_value);
 8007966:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007968:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800796a:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <_txe_block_pool_create+0x130>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3b01      	subs	r3, #1
 8007970:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <_txe_block_pool_create+0x130>)
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	f383 8810 	msr	PRIMASK, r3
}
 800797e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007980:	f7fe fdfc 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	429a      	cmp	r2, r3
 800798a:	d102      	bne.n	8007992 <_txe_block_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800798c:	2302      	movs	r3, #2
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007990:	e02f      	b.n	80079f2 <_txe_block_pool_create+0x10e>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <_txe_block_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8007998:	2303      	movs	r3, #3
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799c:	e029      	b.n	80079f2 <_txe_block_pool_create+0x10e>
        }
        else
        {

            /* Check for invalid pool size.  */
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) >
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f023 0303 	bic.w	r3, r3, #3
 80079a4:	1d1a      	adds	r2, r3, #4
                                            ((pool_size/(sizeof(void *)))*(sizeof(void *))))
 80079a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079a8:	f023 0303 	bic.w	r3, r3, #3
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) >
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d902      	bls.n	80079b6 <_txe_block_pool_create+0xd2>
            {

                /* Not enough memory for one block, return appropriate error.  */
                status =  TX_SIZE_ERROR;
 80079b0:	2305      	movs	r3, #5
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b4:	e01d      	b.n	80079f2 <_txe_block_pool_create+0x10e>
            {

#ifndef TX_TIMER_PROCESS_IN_ISR

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <_txe_block_pool_create+0x13c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check for invalid caller of this function.  First check for a calling thread.  */
                if (thread_ptr == &_tx_timer_thread)
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <_txe_block_pool_create+0x140>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d101      	bne.n	80079c8 <_txe_block_pool_create+0xe4>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80079c4:	2313      	movs	r3, #19
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80079c8:	f3ef 8305 	mrs	r3, IPSR
 80079cc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80079ce:	69ba      	ldr	r2, [r7, #24]
                }
#endif

                /* Check for interrupt call.  */
                if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80079d0:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <_txe_block_pool_create+0x144>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00b      	beq.n	80079f2 <_txe_block_pool_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80079da:	f3ef 8305 	mrs	r3, IPSR
 80079de:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80079e0:	697a      	ldr	r2, [r7, #20]
                {

                    /* Now, make sure the call is from an interrupt and not initialization.  */
                    if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <_txe_block_pool_create+0x144>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80079ec:	d201      	bcs.n	80079f2 <_txe_block_pool_create+0x10e>
                    {

                        /* Invalid caller of this function, return appropriate error code.  */
                        status =  TX_CALLER_ERROR;
 80079ee:	2313      	movs	r3, #19
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d108      	bne.n	8007a0a <_txe_block_pool_create+0x126>
    {

        /* Call actual block pool create function.  */
        status =  _tx_block_pool_create(pool_ptr, name_ptr, block_size, pool_start, pool_size);
 80079f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7fa f9a2 	bl	8001d4c <_tx_block_pool_create>
 8007a08:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3740      	adds	r7, #64	; 0x40
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	2000efe8 	.word	0x2000efe8
 8007a18:	2000ef34 	.word	0x2000ef34
 8007a1c:	2000ef38 	.word	0x2000ef38
 8007a20:	2000ef4c 	.word	0x2000ef4c
 8007a24:	2000f098 	.word	0x2000f098
 8007a28:	20000018 	.word	0x20000018

08007a2c <_txe_block_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT    _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <_txe_block_pool_delete+0x18>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e023      	b.n	8007a8c <_txe_block_pool_delete+0x60>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <_txe_block_pool_delete+0x6c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d002      	beq.n	8007a54 <_txe_block_pool_delete+0x28>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e01b      	b.n	8007a8c <_txe_block_pool_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a54:	f3ef 8305 	mrs	r3, IPSR
 8007a58:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8007a5a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the call from an ISR or initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <_txe_block_pool_delete+0x70>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <_txe_block_pool_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8007a66:	2313      	movs	r3, #19
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e00f      	b.n	8007a8c <_txe_block_pool_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <_txe_block_pool_delete+0x74>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	613b      	str	r3, [r7, #16]

        /* Is the call from the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	4a0b      	ldr	r2, [pc, #44]	; (8007aa4 <_txe_block_pool_delete+0x78>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d101      	bne.n	8007a7e <_txe_block_pool_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007a7a:	2313      	movs	r3, #19
 8007a7c:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <_txe_block_pool_delete+0x60>
        {
#endif

            /* Call actual block pool delete function.  */
            status =  _tx_block_pool_delete(pool_ptr);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fa fa01 	bl	8001e8c <_tx_block_pool_delete>
 8007a8a:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8007a8c:	697b      	ldr	r3, [r7, #20]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	424c4f43 	.word	0x424c4f43
 8007a9c:	20000018 	.word	0x20000018
 8007aa0:	2000ef4c 	.word	0x2000ef4c
 8007aa4:	2000f098 	.word	0x2000f098

08007aa8 <_txe_block_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks,
                    ULONG *total_blocks, TX_THREAD **first_suspended,
                    ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	; 0x28
 8007aac:	af04      	add	r7, sp, #16
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid block pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <_txe_block_pool_info_get+0x1a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007abc:	2302      	movs	r3, #2
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e014      	b.n	8007aec <_txe_block_pool_info_get+0x44>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <_txe_block_pool_info_get+0x50>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d002      	beq.n	8007ad2 <_txe_block_pool_info_get+0x2a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007acc:	2302      	movs	r3, #2
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e00c      	b.n	8007aec <_txe_block_pool_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual block pool information get service.  */
        status =  _tx_block_pool_info_get(pool_ptr, name, available_blocks,
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	9302      	str	r3, [sp, #8]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7fa fa5b 	bl	8001fa0 <_tx_block_pool_info_get>
 8007aea:	6178      	str	r0, [r7, #20]
                        total_blocks, first_suspended, suspended_count, next_pool);
    }

    /* Return completion status.  */
    return(status);
 8007aec:	697b      	ldr	r3, [r7, #20]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	424c4f43 	.word	0x424c4f43

08007afc <_txe_block_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid block memory pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <_txe_block_pool_prioritize+0x14>
    {

        /* Block memory pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	e00b      	b.n	8007b28 <_txe_block_pool_prioritize+0x2c>
    }

    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <_txe_block_pool_prioritize+0x38>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d002      	beq.n	8007b20 <_txe_block_pool_prioritize+0x24>
    {

        /* Block memory pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e003      	b.n	8007b28 <_txe_block_pool_prioritize+0x2c>
    }
    else
    {

        /* Call actual block pool prioritize function.  */
        status =  _tx_block_pool_prioritize(pool_ptr);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fa fa81 	bl	8002028 <_tx_block_pool_prioritize>
 8007b26:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	424c4f43 	.word	0x424c4f43

08007b38 <_txe_block_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_release(VOID *block_ptr)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
UCHAR               **indirect_ptr;
UCHAR               *work_ptr;


    /* First check the supplied pointer.  */
    if (block_ptr == TX_NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <_txe_block_release+0x14>
    {

        /* The block pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 8007b46:	2303      	movs	r3, #3
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	e01d      	b.n	8007b88 <_txe_block_release+0x50>
    else
    {

        /* Pickup the pool pointer which is just previous to the starting
           address of block that the caller sees.  */
        work_ptr =      TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	613b      	str	r3, [r7, #16]
        work_ptr =      TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3b04      	subs	r3, #4
 8007b54:	613b      	str	r3, [r7, #16]
        indirect_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	60fb      	str	r3, [r7, #12]
        work_ptr =      *indirect_ptr;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	613b      	str	r3, [r7, #16]
        pool_ptr =      TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT(work_ptr);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	60bb      	str	r3, [r7, #8]

        /* Check for an invalid pool pointer.  */
        if (pool_ptr == TX_NULL)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <_txe_block_release+0x38>
        {

            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e00b      	b.n	8007b88 <_txe_block_release+0x50>
        }

        /* Now check for invalid pool ID.  */
        else if  (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <_txe_block_release+0x5c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d002      	beq.n	8007b80 <_txe_block_release+0x48>
        {

            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	e003      	b.n	8007b88 <_txe_block_release+0x50>
        }
        else
        {

            /* Call actual block release function.  */
            status =  _tx_block_release(block_ptr);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7fa faff 	bl	8002184 <_tx_block_release>
 8007b86:	6178      	str	r0, [r7, #20]
        }
    }

    /* Return completion status.  */
    return(status);
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	424c4f43 	.word	0x424c4f43

08007b98 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb4:	e029      	b.n	8007c0a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2d      	ldr	r2, [pc, #180]	; (8007c70 <_txe_byte_allocate+0xd8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d002      	beq.n	8007bc6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc4:	e021      	b.n	8007c0a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd0:	e01b      	b.n	8007c0a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007bd8:	2305      	movs	r3, #5
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
 8007bdc:	e015      	b.n	8007c0a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d902      	bls.n	8007bee <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007be8:	2305      	movs	r3, #5
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
 8007bec:	e00d      	b.n	8007c0a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007bf4:	f3ef 8305 	mrs	r3, IPSR
 8007bf8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007bfa:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	; (8007c74 <_txe_byte_allocate+0xdc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8007c06:	2304      	movs	r3, #4
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d108      	bne.n	8007c22 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007c10:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <_txe_byte_allocate+0xe0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	4a18      	ldr	r2, [pc, #96]	; (8007c7c <_txe_byte_allocate+0xe4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d101      	bne.n	8007c22 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007c1e:	2313      	movs	r3, #19
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d114      	bne.n	8007c52 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007c28:	f3ef 8305 	mrs	r3, IPSR
 8007c2c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007c2e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007c30:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <_txe_byte_allocate+0xdc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007c3a:	f3ef 8305 	mrs	r3, IPSR
 8007c3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007c40:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <_txe_byte_allocate+0xdc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007c4c:	d201      	bcs.n	8007c52 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007c4e:	2313      	movs	r3, #19
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d106      	bne.n	8007c66 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7fa fb00 	bl	8002264 <_tx_byte_allocate>
 8007c64:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3728      	adds	r7, #40	; 0x28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	42595445 	.word	0x42595445
 8007c74:	20000018 	.word	0x20000018
 8007c78:	2000ef4c 	.word	0x2000ef4c
 8007c7c:	2000f098 	.word	0x2000f098

08007c80 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b090      	sub	sp, #64	; 0x40
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9c:	e071      	b.n	8007d82 <_txe_byte_pool_create+0x102>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8007c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca0:	2b34      	cmp	r3, #52	; 0x34
 8007ca2:	d002      	beq.n	8007caa <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca8:	e06b      	b.n	8007d82 <_txe_byte_pool_create+0x102>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007caa:	f3ef 8310 	mrs	r3, PRIMASK
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007cb0:	b672      	cpsid	i
    return(primask_value);
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8007cb6:	4b3a      	ldr	r3, [pc, #232]	; (8007da0 <_txe_byte_pool_create+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a38      	ldr	r2, [pc, #224]	; (8007da0 <_txe_byte_pool_create+0x120>)
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f383 8810 	msr	PRIMASK, r3
}
 8007cca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8007ccc:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <_txe_byte_pool_create+0x124>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd6:	e009      	b.n	8007cec <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d00b      	beq.n	8007cf8 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	3301      	adds	r3, #1
 8007cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cec:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <_txe_byte_pool_create+0x128>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d3f0      	bcc.n	8007cd8 <_txe_byte_pool_create+0x58>
 8007cf6:	e000      	b.n	8007cfa <_txe_byte_pool_create+0x7a>
                break;
 8007cf8:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d00:	b672      	cpsid	i
    return(primask_value);
 8007d02:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007d04:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8007d06:	4b26      	ldr	r3, [pc, #152]	; (8007da0 <_txe_byte_pool_create+0x120>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	4a24      	ldr	r2, [pc, #144]	; (8007da0 <_txe_byte_pool_create+0x120>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f383 8810 	msr	PRIMASK, r3
}
 8007d1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007d1c:	f7fe fc2e 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d102      	bne.n	8007d2e <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d2c:	e029      	b.n	8007d82 <_txe_byte_pool_create+0x102>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8007d34:	2303      	movs	r3, #3
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d38:	e023      	b.n	8007d82 <_txe_byte_pool_create+0x102>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b63      	cmp	r3, #99	; 0x63
 8007d3e:	d802      	bhi.n	8007d46 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8007d40:	2305      	movs	r3, #5
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d44:	e01d      	b.n	8007d82 <_txe_byte_pool_create+0x102>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007d46:	4b19      	ldr	r3, [pc, #100]	; (8007dac <_txe_byte_pool_create+0x12c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <_txe_byte_pool_create+0x130>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d101      	bne.n	8007d58 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007d54:	2313      	movs	r3, #19
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007d58:	f3ef 8305 	mrs	r3, IPSR
 8007d5c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007d5e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007d60:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <_txe_byte_pool_create+0x134>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <_txe_byte_pool_create+0x102>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007d6a:	f3ef 8305 	mrs	r3, IPSR
 8007d6e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007d70:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <_txe_byte_pool_create+0x134>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007d7c:	d201      	bcs.n	8007d82 <_txe_byte_pool_create+0x102>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8007d7e:	2313      	movs	r3, #19
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7fa fba2 	bl	80024d8 <_tx_byte_pool_create>
 8007d94:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8007d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3740      	adds	r7, #64	; 0x40
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	2000efe8 	.word	0x2000efe8
 8007da4:	2000ef3c 	.word	0x2000ef3c
 8007da8:	2000ef40 	.word	0x2000ef40
 8007dac:	2000ef4c 	.word	0x2000ef4c
 8007db0:	2000f098 	.word	0x2000f098
 8007db4:	20000018 	.word	0x20000018

08007db8 <_txe_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <_txe_byte_pool_delete+0x18>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007dca:	2302      	movs	r3, #2
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	e023      	b.n	8007e18 <_txe_byte_pool_delete+0x60>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <_txe_byte_pool_delete+0x6c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d002      	beq.n	8007de0 <_txe_byte_pool_delete+0x28>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	e01b      	b.n	8007e18 <_txe_byte_pool_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007de0:	f3ef 8305 	mrs	r3, IPSR
 8007de4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8007de6:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for interrupt or initialization.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007de8:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <_txe_byte_pool_delete+0x70>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <_txe_byte_pool_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8007df2:	2313      	movs	r3, #19
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	e00f      	b.n	8007e18 <_txe_byte_pool_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <_txe_byte_pool_delete+0x74>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	4a0b      	ldr	r2, [pc, #44]	; (8007e30 <_txe_byte_pool_delete+0x78>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d101      	bne.n	8007e0a <_txe_byte_pool_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007e06:	2313      	movs	r3, #19
 8007e08:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <_txe_byte_pool_delete+0x60>
        {
#endif

            /* Call actual byte pool delete function.  */
            status =  _tx_byte_pool_delete(pool_ptr);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fa fbf5 	bl	8002600 <_tx_byte_pool_delete>
 8007e16:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8007e18:	697b      	ldr	r3, [r7, #20]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	42595445 	.word	0x42595445
 8007e28:	20000018 	.word	0x20000018
 8007e2c:	2000ef4c 	.word	0x2000ef4c
 8007e30:	2000f098 	.word	0x2000f098

08007e34 <_txe_byte_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes,
                    ULONG *fragments, TX_THREAD **first_suspended,
                    ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af04      	add	r7, sp, #16
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <_txe_byte_pool_info_get+0x1a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e014      	b.n	8007e78 <_txe_byte_pool_info_get+0x44>
    }

    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a0c      	ldr	r2, [pc, #48]	; (8007e84 <_txe_byte_pool_info_get+0x50>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d002      	beq.n	8007e5e <_txe_byte_pool_info_get+0x2a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007e58:	2302      	movs	r3, #2
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e00c      	b.n	8007e78 <_txe_byte_pool_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual byte pool information get service.  */
        status =  _tx_byte_pool_info_get(pool_ptr, name, available_bytes,
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	9302      	str	r3, [sp, #8]
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7fa fc4f 	bl	8002714 <_tx_byte_pool_info_get>
 8007e76:	6178      	str	r0, [r7, #20]
                            fragments, first_suspended, suspended_count, next_pool);
    }

    /* Return completion status.  */
    return(status);
 8007e78:	697b      	ldr	r3, [r7, #20]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	42595445 	.word	0x42595445

08007e88 <_txe_byte_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid byte memory pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <_txe_byte_pool_prioritize+0x14>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007e96:	2302      	movs	r3, #2
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	e00b      	b.n	8007eb4 <_txe_byte_pool_prioritize+0x2c>
    }

    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a07      	ldr	r2, [pc, #28]	; (8007ec0 <_txe_byte_pool_prioritize+0x38>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d002      	beq.n	8007eac <_txe_byte_pool_prioritize+0x24>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e003      	b.n	8007eb4 <_txe_byte_pool_prioritize+0x2c>
    }
    else
    {

        /* Call actual byte pool prioritize function.  */
        status =  _tx_byte_pool_prioritize(pool_ptr);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fa fc75 	bl	800279c <_tx_byte_pool_prioritize>
 8007eb2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	42595445 	.word	0x42595445

08007ec4 <_txe_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_release(VOID *memory_ptr)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]

    /* First check the supplied memory pointer.  */
    if (memory_ptr == TX_NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d102      	bne.n	8007edc <_txe_byte_release+0x18>
    {

        /* The byte memory pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	e01d      	b.n	8007f18 <_txe_byte_release+0x54>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007edc:	4b14      	ldr	r3, [pc, #80]	; (8007f30 <_txe_byte_release+0x6c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	4a13      	ldr	r2, [pc, #76]	; (8007f34 <_txe_byte_release+0x70>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d101      	bne.n	8007eee <_txe_byte_release+0x2a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007eea:	2313      	movs	r3, #19
 8007eec:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007eee:	f3ef 8305 	mrs	r3, IPSR
 8007ef2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8007ef4:	68fa      	ldr	r2, [r7, #12]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <_txe_byte_release+0x74>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <_txe_byte_release+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007f00:	f3ef 8305 	mrs	r3, IPSR
 8007f04:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8007f06:	68ba      	ldr	r2, [r7, #8]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <_txe_byte_release+0x74>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007f12:	d201      	bcs.n	8007f18 <_txe_byte_release+0x54>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007f14:	2313      	movs	r3, #19
 8007f16:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d103      	bne.n	8007f26 <_txe_byte_release+0x62>
    {

        /* Call actual byte release function.  */
        status =  _tx_byte_release(memory_ptr);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fa fdf4 	bl	8002b0c <_tx_byte_release>
 8007f24:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8007f26:	697b      	ldr	r3, [r7, #20]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	2000ef4c 	.word	0x2000ef4c
 8007f34:	2000f098 	.word	0x2000f098
 8007f38:	20000018 	.word	0x20000018

08007f3c <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b090      	sub	sp, #64	; 0x40
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8007f52:	2306      	movs	r3, #6
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f56:	e065      	b.n	8008024 <_txe_event_flags_create+0xe8>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b30      	cmp	r3, #48	; 0x30
 8007f5c:	d002      	beq.n	8007f64 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8007f5e:	2306      	movs	r3, #6
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f62:	e05f      	b.n	8008024 <_txe_event_flags_create+0xe8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007f64:	f3ef 8310 	mrs	r3, PRIMASK
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007f6a:	b672      	cpsid	i
    return(primask_value);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007f6e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8007f70:	4b33      	ldr	r3, [pc, #204]	; (8008040 <_txe_event_flags_create+0x104>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a32      	ldr	r2, [pc, #200]	; (8008040 <_txe_event_flags_create+0x104>)
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8007f86:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <_txe_event_flags_create+0x108>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f90:	e009      	b.n	8007fa6 <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d00b      	beq.n	8007fb2 <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa6:	4b28      	ldr	r3, [pc, #160]	; (8008048 <_txe_event_flags_create+0x10c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d3f0      	bcc.n	8007f92 <_txe_event_flags_create+0x56>
 8007fb0:	e000      	b.n	8007fb4 <_txe_event_flags_create+0x78>
                break;
 8007fb2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fb8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007fba:	b672      	cpsid	i
    return(primask_value);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8007fc0:	4b1f      	ldr	r3, [pc, #124]	; (8008040 <_txe_event_flags_create+0x104>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a1e      	ldr	r2, [pc, #120]	; (8008040 <_txe_event_flags_create+0x104>)
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	f383 8810 	msr	PRIMASK, r3
}
 8007fd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007fd6:	f7fe fad1 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d102      	bne.n	8007fe8 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8007fe2:	2306      	movs	r3, #6
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe6:	e01d      	b.n	8008024 <_txe_event_flags_create+0xe8>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007fe8:	4b18      	ldr	r3, [pc, #96]	; (800804c <_txe_event_flags_create+0x110>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	4a17      	ldr	r2, [pc, #92]	; (8008050 <_txe_event_flags_create+0x114>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d101      	bne.n	8007ffa <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007ff6:	2313      	movs	r3, #19
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007ffa:	f3ef 8305 	mrs	r3, IPSR
 8007ffe:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008000:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <_txe_event_flags_create+0x118>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4313      	orrs	r3, r2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <_txe_event_flags_create+0xe8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800800c:	f3ef 8305 	mrs	r3, IPSR
 8008010:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008012:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <_txe_event_flags_create+0x118>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4313      	orrs	r3, r2
 800801a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800801e:	d201      	bcs.n	8008024 <_txe_event_flags_create+0xe8>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008020:	2313      	movs	r3, #19
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <_txe_event_flags_create+0xf8>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7fa ff0d 	bl	8002e4c <_tx_event_flags_create>
 8008032:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8008034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008036:	4618      	mov	r0, r3
 8008038:	3740      	adds	r7, #64	; 0x40
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	2000efe8 	.word	0x2000efe8
 8008044:	2000ef24 	.word	0x2000ef24
 8008048:	2000ef28 	.word	0x2000ef28
 800804c:	2000ef4c 	.word	0x2000ef4c
 8008050:	2000f098 	.word	0x2000f098
 8008054:	20000018 	.word	0x20000018

08008058 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d102      	bne.n	8008070 <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800806a:	2306      	movs	r3, #6
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	e023      	b.n	80080b8 <_txe_event_flags_delete+0x60>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <_txe_event_flags_delete+0x6c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d002      	beq.n	8008080 <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800807a:	2306      	movs	r3, #6
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	e01b      	b.n	80080b8 <_txe_event_flags_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008080:	f3ef 8305 	mrs	r3, IPSR
 8008084:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008086:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008088:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <_txe_event_flags_delete+0x70>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4313      	orrs	r3, r2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <_txe_event_flags_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8008092:	2313      	movs	r3, #19
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e00f      	b.n	80080b8 <_txe_event_flags_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008098:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <_txe_event_flags_delete+0x74>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4a0b      	ldr	r2, [pc, #44]	; (80080d0 <_txe_event_flags_delete+0x78>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <_txe_event_flags_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80080a6:	2313      	movs	r3, #19
 80080a8:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <_txe_event_flags_delete+0x60>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fa ff17 	bl	8002ee4 <_tx_event_flags_delete>
 80080b6:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 80080b8:	697b      	ldr	r3, [r7, #20]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	4456444e 	.word	0x4456444e
 80080c8:	20000018 	.word	0x20000018
 80080cc:	2000ef4c 	.word	0x2000ef4c
 80080d0:	2000f098 	.word	0x2000f098

080080d4 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	; 0x28
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80080ec:	2306      	movs	r3, #6
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e025      	b.n	800813e <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <_txe_event_flags_get+0x9c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d002      	beq.n	8008102 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80080fc:	2306      	movs	r3, #6
 80080fe:	61fb      	str	r3, [r7, #28]
 8008100:	e01d      	b.n	800813e <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8008108:	2303      	movs	r3, #3
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e017      	b.n	800813e <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	2b00      	cmp	r3, #0
 8008112:	d014      	beq.n	800813e <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008114:	f3ef 8305 	mrs	r3, IPSR
 8008118:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800811a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800811c:	4b15      	ldr	r3, [pc, #84]	; (8008174 <_txe_event_flags_get+0xa0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4313      	orrs	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008126:	2304      	movs	r3, #4
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	e008      	b.n	800813e <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800812c:	4b12      	ldr	r3, [pc, #72]	; (8008178 <_txe_event_flags_get+0xa4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <_txe_event_flags_get+0xa8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d101      	bne.n	800813e <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800813a:	2304      	movs	r3, #4
 800813c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b03      	cmp	r3, #3
 8008148:	d901      	bls.n	800814e <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800814a:	2308      	movs	r3, #8
 800814c:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d108      	bne.n	8008166 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7fa ff4a 	bl	8002ff8 <_tx_event_flags_get>
 8008164:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008166:	69fb      	ldr	r3, [r7, #28]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	4456444e 	.word	0x4456444e
 8008174:	20000018 	.word	0x20000018
 8008178:	2000ef4c 	.word	0x2000ef4c
 800817c:	2000f098 	.word	0x2000f098

08008180 <_txe_event_flags_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_EVENT_FLAGS_GROUP **next_group)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af02      	add	r7, sp, #8
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <_txe_event_flags_info_get+0x1a>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8008194:	2306      	movs	r3, #6
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e012      	b.n	80081c0 <_txe_event_flags_info_get+0x40>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <_txe_event_flags_info_get+0x4c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d002      	beq.n	80081aa <_txe_event_flags_info_get+0x2a>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80081a4:	2306      	movs	r3, #6
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e00a      	b.n	80081c0 <_txe_event_flags_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual event flags group information get service.  */
        status =  _tx_event_flags_info_get(group_ptr, name, current_flags, first_suspended,
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7fa fffb 	bl	80031b4 <_tx_event_flags_info_get>
 80081be:	6178      	str	r0, [r7, #20]
                                                            suspended_count, next_group);
    }

    /* Return completion status.  */
    return(status);
 80081c0:	697b      	ldr	r3, [r7, #20]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	4456444e 	.word	0x4456444e

080081d0 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80081e6:	2306      	movs	r3, #6
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e00f      	b.n	800820c <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <_txe_event_flags_set+0x58>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d002      	beq.n	80081fc <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80081f6:	2306      	movs	r3, #6
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e007      	b.n	800820c <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d004      	beq.n	800820c <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8008208:	2308      	movs	r3, #8
 800820a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d105      	bne.n	800821e <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	68b9      	ldr	r1, [r7, #8]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7fb f80e 	bl	8003238 <_tx_event_flags_set>
 800821c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800821e:	697b      	ldr	r3, [r7, #20]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	4456444e 	.word	0x4456444e

0800822c <_txe_event_flags_set_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *notify_group_ptr))
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid group pointer.  */
    if (group_ptr == TX_NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <_txe_event_flags_set_notify+0x16>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800823c:	2306      	movs	r3, #6
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e00c      	b.n	800825c <_txe_event_flags_set_notify+0x30>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a08      	ldr	r2, [pc, #32]	; (8008268 <_txe_event_flags_set_notify+0x3c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d002      	beq.n	8008252 <_txe_event_flags_set_notify+0x26>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800824c:	2306      	movs	r3, #6
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e004      	b.n	800825c <_txe_event_flags_set_notify+0x30>
    }
    else
    {

        /* Call actual event flags set notify function.  */
        status =  _tx_event_flags_set_notify(group_ptr, events_set_notify);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7fb f9eb 	bl	8003630 <_tx_event_flags_set_notify>
 800825a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800825c:	68fb      	ldr	r3, [r7, #12]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	4456444e 	.word	0x4456444e

0800826c <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b090      	sub	sp, #64	; 0x40
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008284:	231c      	movs	r3, #28
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008288:	e04f      	b.n	800832a <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b34      	cmp	r3, #52	; 0x34
 800828e:	d002      	beq.n	8008296 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008290:	231c      	movs	r3, #28
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008294:	e049      	b.n	800832a <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008296:	f3ef 8310 	mrs	r3, PRIMASK
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800829c:	b672      	cpsid	i
    return(primask_value);
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80082a2:	4b39      	ldr	r3, [pc, #228]	; (8008388 <_txe_mutex_create+0x11c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	4a37      	ldr	r2, [pc, #220]	; (8008388 <_txe_mutex_create+0x11c>)
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	f383 8810 	msr	PRIMASK, r3
}
 80082b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 80082b8:	4b34      	ldr	r3, [pc, #208]	; (800838c <_txe_mutex_create+0x120>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80082c2:	e009      	b.n	80082d8 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d00b      	beq.n	80082e4 <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	3301      	adds	r3, #1
 80082d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80082d8:	4b2d      	ldr	r3, [pc, #180]	; (8008390 <_txe_mutex_create+0x124>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082de:	429a      	cmp	r2, r3
 80082e0:	d3f0      	bcc.n	80082c4 <_txe_mutex_create+0x58>
 80082e2:	e000      	b.n	80082e6 <_txe_mutex_create+0x7a>
                break;
 80082e4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80082e6:	f3ef 8310 	mrs	r3, PRIMASK
 80082ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80082ec:	b672      	cpsid	i
    return(primask_value);
 80082ee:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80082f0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80082f2:	4b25      	ldr	r3, [pc, #148]	; (8008388 <_txe_mutex_create+0x11c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	4a23      	ldr	r2, [pc, #140]	; (8008388 <_txe_mutex_create+0x11c>)
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	f383 8810 	msr	PRIMASK, r3
}
 8008306:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008308:	f7fe f938 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008310:	429a      	cmp	r2, r3
 8008312:	d102      	bne.n	800831a <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8008314:	231c      	movs	r3, #28
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008318:	e007      	b.n	800832a <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d004      	beq.n	800832a <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8008326:	231f      	movs	r3, #31
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11d      	bne.n	800836c <_txe_mutex_create+0x100>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008330:	4b18      	ldr	r3, [pc, #96]	; (8008394 <_txe_mutex_create+0x128>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	4a17      	ldr	r2, [pc, #92]	; (8008398 <_txe_mutex_create+0x12c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d101      	bne.n	8008342 <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800833e:	2313      	movs	r3, #19
 8008340:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008342:	f3ef 8305 	mrs	r3, IPSR
 8008346:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008348:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800834a:	4b14      	ldr	r3, [pc, #80]	; (800839c <_txe_mutex_create+0x130>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4313      	orrs	r3, r2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <_txe_mutex_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008354:	f3ef 8305 	mrs	r3, IPSR
 8008358:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800835a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800835c:	4b0f      	ldr	r3, [pc, #60]	; (800839c <_txe_mutex_create+0x130>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4313      	orrs	r3, r2
 8008362:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008366:	d201      	bcs.n	800836c <_txe_mutex_create+0x100>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008368:	2313      	movs	r3, #19
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800836c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <_txe_mutex_create+0x112>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7fb fa9c 	bl	80038b4 <_tx_mutex_create>
 800837c:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800837e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008380:	4618      	mov	r0, r3
 8008382:	3740      	adds	r7, #64	; 0x40
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	2000efe8 	.word	0x2000efe8
 800838c:	2000ef2c 	.word	0x2000ef2c
 8008390:	2000ef30 	.word	0x2000ef30
 8008394:	2000ef4c 	.word	0x2000ef4c
 8008398:	2000f098 	.word	0x2000f098
 800839c:	20000018 	.word	0x20000018

080083a0 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80083b2:	231c      	movs	r3, #28
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e023      	b.n	8008400 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a13      	ldr	r2, [pc, #76]	; (800840c <_txe_mutex_delete+0x6c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d002      	beq.n	80083c8 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80083c2:	231c      	movs	r3, #28
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	e01b      	b.n	8008400 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80083c8:	f3ef 8305 	mrs	r3, IPSR
 80083cc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80083ce:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80083d0:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <_txe_mutex_delete+0x70>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80083da:	2313      	movs	r3, #19
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	e00f      	b.n	8008400 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <_txe_mutex_delete+0x74>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <_txe_mutex_delete+0x78>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d101      	bne.n	80083f2 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80083ee:	2313      	movs	r3, #19
 80083f0:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7fb fab3 	bl	8003964 <_tx_mutex_delete>
 80083fe:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8008400:	697b      	ldr	r3, [r7, #20]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	4d555445 	.word	0x4d555445
 8008410:	20000018 	.word	0x20000018
 8008414:	2000ef4c 	.word	0x2000ef4c
 8008418:	2000f098 	.word	0x2000f098

0800841c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008430:	231c      	movs	r3, #28
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	e01f      	b.n	8008476 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a21      	ldr	r2, [pc, #132]	; (80084c0 <_txe_mutex_get+0xa4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d002      	beq.n	8008446 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008440:	231c      	movs	r3, #28
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	e017      	b.n	8008476 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d014      	beq.n	8008476 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800844c:	f3ef 8305 	mrs	r3, IPSR
 8008450:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008452:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <_txe_mutex_get+0xa8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4313      	orrs	r3, r2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800845e:	2304      	movs	r3, #4
 8008460:	61fb      	str	r3, [r7, #28]
 8008462:	e008      	b.n	8008476 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8008464:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <_txe_mutex_get+0xac>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <_txe_mutex_get+0xb0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d101      	bne.n	8008476 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008472:	2304      	movs	r3, #4
 8008474:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d114      	bne.n	80084a6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800847c:	f3ef 8305 	mrs	r3, IPSR
 8008480:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008482:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <_txe_mutex_get+0xa8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4313      	orrs	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00b      	beq.n	80084a6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800848e:	f3ef 8305 	mrs	r3, IPSR
 8008492:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008494:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <_txe_mutex_get+0xa8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4313      	orrs	r3, r2
 800849c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80084a0:	d201      	bcs.n	80084a6 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80084a2:	2313      	movs	r3, #19
 80084a4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fb fafa 	bl	8003aa8 <_tx_mutex_get>
 80084b4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80084b6:	69fb      	ldr	r3, [r7, #28]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	4d555445 	.word	0x4d555445
 80084c4:	20000018 	.word	0x20000018
 80084c8:	2000ef4c 	.word	0x2000ef4c
 80084cc:	2000f098 	.word	0x2000f098

080084d0 <_txe_mutex_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_MUTEX **next_mutex)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08a      	sub	sp, #40	; 0x28
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <_txe_mutex_info_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80084e4:	231c      	movs	r3, #28
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e014      	b.n	8008514 <_txe_mutex_info_get+0x44>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a0c      	ldr	r2, [pc, #48]	; (8008520 <_txe_mutex_info_get+0x50>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d002      	beq.n	80084fa <_txe_mutex_info_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80084f4:	231c      	movs	r3, #28
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	e00c      	b.n	8008514 <_txe_mutex_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual mutex information get service.  */
        status =  _tx_mutex_info_get(mutex_ptr, name, count, owner, first_suspended,
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	9302      	str	r3, [sp, #8]
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7fb fbd1 	bl	8003cb4 <_tx_mutex_info_get>
 8008512:	6178      	str	r0, [r7, #20]
                                                            suspended_count, next_mutex);
    }

    /* Return completion status.  */
    return(status);
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	4d555445 	.word	0x4d555445

08008524 <_txe_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d102      	bne.n	8008538 <_txe_mutex_prioritize+0x14>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008532:	231c      	movs	r3, #28
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	e00b      	b.n	8008550 <_txe_mutex_prioritize+0x2c>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a07      	ldr	r2, [pc, #28]	; (800855c <_txe_mutex_prioritize+0x38>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d002      	beq.n	8008548 <_txe_mutex_prioritize+0x24>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008542:	231c      	movs	r3, #28
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e003      	b.n	8008550 <_txe_mutex_prioritize+0x2c>
    }
    else
    {

        /* Call actual mutex prioritize function.  */
        status =  _tx_mutex_prioritize(mutex_ptr);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7fb fbf7 	bl	8003d3c <_tx_mutex_prioritize>
 800854e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8008550:	68fb      	ldr	r3, [r7, #12]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	4d555445 	.word	0x4d555445

08008560 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008572:	231c      	movs	r3, #28
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e01c      	b.n	80085b2 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a13      	ldr	r2, [pc, #76]	; (80085cc <_txe_mutex_put+0x6c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d002      	beq.n	8008588 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008582:	231c      	movs	r3, #28
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e014      	b.n	80085b2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008588:	f3ef 8305 	mrs	r3, IPSR
 800858c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800858e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008590:	4b0f      	ldr	r3, [pc, #60]	; (80085d0 <_txe_mutex_put+0x70>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4313      	orrs	r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800859a:	f3ef 8305 	mrs	r3, IPSR
 800859e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80085a0:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80085a2:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <_txe_mutex_put+0x70>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80085ac:	d201      	bcs.n	80085b2 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80085ae:	2313      	movs	r3, #19
 80085b0:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d103      	bne.n	80085c0 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7fb fd33 	bl	8004024 <_tx_mutex_put>
 80085be:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80085c0:	697b      	ldr	r3, [r7, #20]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	4d555445 	.word	0x4d555445
 80085d0:	20000018 	.word	0x20000018

080085d4 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b092      	sub	sp, #72	; 0x48
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80085ec:	2309      	movs	r3, #9
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f0:	e07f      	b.n	80086f2 <_txe_queue_create+0x11e>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80085f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f4:	2b44      	cmp	r3, #68	; 0x44
 80085f6:	d002      	beq.n	80085fe <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80085f8:	2309      	movs	r3, #9
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085fc:	e079      	b.n	80086f2 <_txe_queue_create+0x11e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80085fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008604:	b672      	cpsid	i
    return(primask_value);
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008608:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800860a:	4b42      	ldr	r3, [pc, #264]	; (8008714 <_txe_queue_create+0x140>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	4a40      	ldr	r2, [pc, #256]	; (8008714 <_txe_queue_create+0x140>)
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	f383 8810 	msr	PRIMASK, r3
}
 800861e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8008620:	4b3d      	ldr	r3, [pc, #244]	; (8008718 <_txe_queue_create+0x144>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8008626:	2300      	movs	r3, #0
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38
 800862a:	e009      	b.n	8008640 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008630:	429a      	cmp	r2, r3
 8008632:	d00b      	beq.n	800864c <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	3301      	adds	r3, #1
 800863e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008640:	4b36      	ldr	r3, [pc, #216]	; (800871c <_txe_queue_create+0x148>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008646:	429a      	cmp	r2, r3
 8008648:	d3f0      	bcc.n	800862c <_txe_queue_create+0x58>
 800864a:	e000      	b.n	800864e <_txe_queue_create+0x7a>
                break;
 800864c:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800864e:	f3ef 8310 	mrs	r3, PRIMASK
 8008652:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008654:	b672      	cpsid	i
    return(primask_value);
 8008656:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008658:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800865a:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <_txe_queue_create+0x140>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	4a2c      	ldr	r2, [pc, #176]	; (8008714 <_txe_queue_create+0x140>)
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	f383 8810 	msr	PRIMASK, r3
}
 800866e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008670:	f7fd ff84 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	429a      	cmp	r2, r3
 800867a:	d102      	bne.n	8008682 <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800867c:	2309      	movs	r3, #9
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008680:	e037      	b.n	80086f2 <_txe_queue_create+0x11e>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8008688:	2303      	movs	r3, #3
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868c:	e031      	b.n	80086f2 <_txe_queue_create+0x11e>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8008694:	2305      	movs	r3, #5
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008698:	e02b      	b.n	80086f2 <_txe_queue_create+0x11e>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b10      	cmp	r3, #16
 800869e:	d902      	bls.n	80086a6 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80086a0:	2305      	movs	r3, #5
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a4:	e025      	b.n	80086f2 <_txe_queue_create+0x11e>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80086a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a8:	089b      	lsrs	r3, r3, #2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d902      	bls.n	80086b6 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80086b0:	2305      	movs	r3, #5
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b4:	e01d      	b.n	80086f2 <_txe_queue_create+0x11e>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <_txe_queue_create+0x14c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	4a19      	ldr	r2, [pc, #100]	; (8008724 <_txe_queue_create+0x150>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d101      	bne.n	80086c8 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80086c4:	2313      	movs	r3, #19
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80086c8:	f3ef 8305 	mrs	r3, IPSR
 80086cc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80086ce:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80086d0:	4b15      	ldr	r3, [pc, #84]	; (8008728 <_txe_queue_create+0x154>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <_txe_queue_create+0x11e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80086da:	f3ef 8305 	mrs	r3, IPSR
 80086de:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80086e0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80086e2:	4b11      	ldr	r3, [pc, #68]	; (8008728 <_txe_queue_create+0x154>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80086ec:	d201      	bcs.n	80086f2 <_txe_queue_create+0x11e>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80086ee:	2313      	movs	r3, #19
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d108      	bne.n	800870a <_txe_queue_create+0x136>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80086f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7fb feee 	bl	80044e4 <_tx_queue_create>
 8008708:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800870c:	4618      	mov	r0, r3
 800870e:	3740      	adds	r7, #64	; 0x40
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	2000efe8 	.word	0x2000efe8
 8008718:	2000ef1c 	.word	0x2000ef1c
 800871c:	2000ef20 	.word	0x2000ef20
 8008720:	2000ef4c 	.word	0x2000ef4c
 8008724:	2000f098 	.word	0x2000f098
 8008728:	20000018 	.word	0x20000018

0800872c <_txe_queue_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <_txe_queue_delete+0x18>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800873e:	2309      	movs	r3, #9
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e01c      	b.n	800877e <_txe_queue_delete+0x52>
    }

    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a13      	ldr	r2, [pc, #76]	; (8008798 <_txe_queue_delete+0x6c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d002      	beq.n	8008754 <_txe_queue_delete+0x28>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800874e:	2309      	movs	r3, #9
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e014      	b.n	800877e <_txe_queue_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008754:	f3ef 8305 	mrs	r3, IPSR
 8008758:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800875a:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800875c:	4b0f      	ldr	r3, [pc, #60]	; (800879c <_txe_queue_delete+0x70>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4313      	orrs	r3, r2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <_txe_queue_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008766:	2313      	movs	r3, #19
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	e008      	b.n	800877e <_txe_queue_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800876c:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <_txe_queue_delete+0x74>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4a0b      	ldr	r2, [pc, #44]	; (80087a4 <_txe_queue_delete+0x78>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d101      	bne.n	800877e <_txe_queue_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800877a:	2313      	movs	r3, #19
 800877c:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <_txe_queue_delete+0x60>
    {

        /* Call actual queue delete function.  */
        status =  _tx_queue_delete(queue_ptr);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fb ff1f 	bl	80045c8 <_tx_queue_delete>
 800878a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800878c:	697b      	ldr	r3, [r7, #20]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	51554555 	.word	0x51554555
 800879c:	20000018 	.word	0x20000018
 80087a0:	2000ef4c 	.word	0x2000ef4c
 80087a4:	2000f098 	.word	0x2000f098

080087a8 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80087b6:	2309      	movs	r3, #9
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e00b      	b.n	80087d4 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a07      	ldr	r2, [pc, #28]	; (80087e0 <_txe_queue_flush+0x38>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d002      	beq.n	80087cc <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80087c6:	2309      	movs	r3, #9
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	e003      	b.n	80087d4 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7fb ff85 	bl	80046dc <_tx_queue_flush>
 80087d2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80087d4:	68fb      	ldr	r3, [r7, #12]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	51554555 	.word	0x51554555

080087e4 <_txe_queue_front_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80087f0:	2300      	movs	r3, #0
 80087f2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <_txe_queue_front_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80087fa:	2309      	movs	r3, #9
 80087fc:	61fb      	str	r3, [r7, #28]
 80087fe:	e025      	b.n	800884c <_txe_queue_front_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a18      	ldr	r2, [pc, #96]	; (8008868 <_txe_queue_front_send+0x84>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d002      	beq.n	8008810 <_txe_queue_front_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800880a:	2309      	movs	r3, #9
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e01d      	b.n	800884c <_txe_queue_front_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <_txe_queue_front_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8008816:	2303      	movs	r3, #3
 8008818:	61fb      	str	r3, [r7, #28]
 800881a:	e017      	b.n	800884c <_txe_queue_front_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d014      	beq.n	800884c <_txe_queue_front_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008822:	f3ef 8305 	mrs	r3, IPSR
 8008826:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008828:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <_txe_queue_front_send+0x88>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4313      	orrs	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <_txe_queue_front_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008834:	2304      	movs	r3, #4
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	e008      	b.n	800884c <_txe_queue_front_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <_txe_queue_front_send+0x8c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	4a0c      	ldr	r2, [pc, #48]	; (8008874 <_txe_queue_front_send+0x90>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d101      	bne.n	800884c <_txe_queue_front_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008848:	2304      	movs	r3, #4
 800884a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <_txe_queue_front_send+0x7a>
    {

        /* Call actual queue front send function.  */
        status =  _tx_queue_front_send(queue_ptr, source_ptr, wait_option);
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7fb ffc8 	bl	80047ec <_tx_queue_front_send>
 800885c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800885e:	69fb      	ldr	r3, [r7, #28]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	51554555 	.word	0x51554555
 800886c:	20000018 	.word	0x20000018
 8008870:	2000ef4c 	.word	0x2000ef4c
 8008874:	2000f098 	.word	0x2000f098

08008878 <_txe_queue_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage,
                    TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af04      	add	r7, sp, #16
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <_txe_queue_info_get+0x1a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800888c:	2309      	movs	r3, #9
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	e014      	b.n	80088bc <_txe_queue_info_get+0x44>
    }

    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <_txe_queue_info_get+0x50>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d002      	beq.n	80088a2 <_txe_queue_info_get+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800889c:	2309      	movs	r3, #9
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e00c      	b.n	80088bc <_txe_queue_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual queue information get service.  */
        status =  _tx_queue_info_get(queue_ptr, name, enqueued, available_storage, first_suspended,
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7fc f8f7 	bl	8004aa8 <_tx_queue_info_get>
 80088ba:	6178      	str	r0, [r7, #20]
                                                                    suspended_count, next_queue);
    }

    /* Return completion status.  */
    return(status);
 80088bc:	697b      	ldr	r3, [r7, #20]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	51554555 	.word	0x51554555

080088cc <_txe_queue_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d102      	bne.n	80088e0 <_txe_queue_prioritize+0x14>
    {
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80088da:	2309      	movs	r3, #9
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	e00b      	b.n	80088f8 <_txe_queue_prioritize+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a07      	ldr	r2, [pc, #28]	; (8008904 <_txe_queue_prioritize+0x38>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d002      	beq.n	80088f0 <_txe_queue_prioritize+0x24>
    {
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80088ea:	2309      	movs	r3, #9
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e003      	b.n	80088f8 <_txe_queue_prioritize+0x2c>
    }
    else
    {

        /* Call actual queue prioritize function.  */
        status =  _tx_queue_prioritize(queue_ptr);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fc f91d 	bl	8004b30 <_tx_queue_prioritize>
 80088f6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80088f8:	68fb      	ldr	r3, [r7, #12]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	51554555 	.word	0x51554555

08008908 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800891e:	2309      	movs	r3, #9
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	e025      	b.n	8008970 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a18      	ldr	r2, [pc, #96]	; (800898c <_txe_queue_receive+0x84>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d002      	beq.n	8008934 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800892e:	2309      	movs	r3, #9
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	e01d      	b.n	8008970 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800893a:	2303      	movs	r3, #3
 800893c:	61fb      	str	r3, [r7, #28]
 800893e:	e017      	b.n	8008970 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d014      	beq.n	8008970 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008946:	f3ef 8305 	mrs	r3, IPSR
 800894a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800894c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800894e:	4b10      	ldr	r3, [pc, #64]	; (8008990 <_txe_queue_receive+0x88>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4313      	orrs	r3, r2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008958:	2304      	movs	r3, #4
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e008      	b.n	8008970 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <_txe_queue_receive+0x8c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	4a0c      	ldr	r2, [pc, #48]	; (8008998 <_txe_queue_receive+0x90>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d101      	bne.n	8008970 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800896c:	2304      	movs	r3, #4
 800896e:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	68b9      	ldr	r1, [r7, #8]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f7fc f986 	bl	8004c8c <_tx_queue_receive>
 8008980:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008982:	69fb      	ldr	r3, [r7, #28]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	51554555 	.word	0x51554555
 8008990:	20000018 	.word	0x20000018
 8008994:	2000ef4c 	.word	0x2000ef4c
 8008998:	2000f098 	.word	0x2000f098

0800899c <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80089b2:	2309      	movs	r3, #9
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	e025      	b.n	8008a04 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <_txe_queue_send+0x84>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d002      	beq.n	80089c8 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80089c2:	2309      	movs	r3, #9
 80089c4:	61fb      	str	r3, [r7, #28]
 80089c6:	e01d      	b.n	8008a04 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80089ce:	2303      	movs	r3, #3
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	e017      	b.n	8008a04 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d014      	beq.n	8008a04 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80089da:	f3ef 8305 	mrs	r3, IPSR
 80089de:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80089e0:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80089e2:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <_txe_queue_send+0x88>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80089ec:	2304      	movs	r3, #4
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e008      	b.n	8008a04 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <_txe_queue_send+0x8c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	4a0c      	ldr	r2, [pc, #48]	; (8008a2c <_txe_queue_send+0x90>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d101      	bne.n	8008a04 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008a00:	2304      	movs	r3, #4
 8008a02:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7fc fb02 	bl	8005018 <_tx_queue_send>
 8008a14:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008a16:	69fb      	ldr	r3, [r7, #28]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	51554555 	.word	0x51554555
 8008a24:	20000018 	.word	0x20000018
 8008a28:	2000ef4c 	.word	0x2000ef4c
 8008a2c:	2000f098 	.word	0x2000f098

08008a30 <_txe_queue_send_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <_txe_queue_send_notify+0x16>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8008a40:	2309      	movs	r3, #9
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e00c      	b.n	8008a60 <_txe_queue_send_notify+0x30>
    }

    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <_txe_queue_send_notify+0x3c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d002      	beq.n	8008a56 <_txe_queue_send_notify+0x26>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8008a50:	2309      	movs	r3, #9
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e004      	b.n	8008a60 <_txe_queue_send_notify+0x30>
    }
    else
    {

        /* Call actual queue send notify function.  */
        status =  _tx_queue_send_notify(queue_ptr, queue_send_notify);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7fc fc29 	bl	80052b0 <_tx_queue_send_notify>
 8008a5e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	51554555 	.word	0x51554555

08008a70 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d102      	bne.n	8008a86 <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008a80:	230c      	movs	r3, #12
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e012      	b.n	8008aac <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a0b      	ldr	r2, [pc, #44]	; (8008ab8 <_txe_semaphore_ceiling_put+0x48>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d002      	beq.n	8008a96 <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008a90:	230c      	movs	r3, #12
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e00a      	b.n	8008aac <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 8008a9c:	2322      	movs	r3, #34	; 0x22
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e004      	b.n	8008aac <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fc fc1f 	bl	80052e8 <_tx_semaphore_ceiling_put>
 8008aaa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	53454d41 	.word	0x53454d41

08008abc <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b090      	sub	sp, #64	; 0x40
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ad8:	e050      	b.n	8008b7c <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b28      	cmp	r3, #40	; 0x28
 8008ade:	d002      	beq.n	8008ae6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae4:	e04a      	b.n	8008b7c <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008aec:	b672      	cpsid	i
    return(primask_value);
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008af0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008af2:	4b35      	ldr	r3, [pc, #212]	; (8008bc8 <_txe_semaphore_create+0x10c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	4a33      	ldr	r2, [pc, #204]	; (8008bc8 <_txe_semaphore_create+0x10c>)
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	f383 8810 	msr	PRIMASK, r3
}
 8008b06:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8008b08:	4b30      	ldr	r3, [pc, #192]	; (8008bcc <_txe_semaphore_create+0x110>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b12:	e009      	b.n	8008b28 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d00b      	beq.n	8008b34 <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	3301      	adds	r3, #1
 8008b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b28:	4b29      	ldr	r3, [pc, #164]	; (8008bd0 <_txe_semaphore_create+0x114>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d3f0      	bcc.n	8008b14 <_txe_semaphore_create+0x58>
 8008b32:	e000      	b.n	8008b36 <_txe_semaphore_create+0x7a>
                break;
 8008b34:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008b36:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008b3c:	b672      	cpsid	i
    return(primask_value);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008b40:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008b42:	4b21      	ldr	r3, [pc, #132]	; (8008bc8 <_txe_semaphore_create+0x10c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	4a1f      	ldr	r2, [pc, #124]	; (8008bc8 <_txe_semaphore_create+0x10c>)
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	f383 8810 	msr	PRIMASK, r3
}
 8008b56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008b58:	f7fd fd10 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d102      	bne.n	8008b6a <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8008b64:	230c      	movs	r3, #12
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b68:	e008      	b.n	8008b7c <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008b6a:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <_txe_semaphore_create+0x118>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	4a19      	ldr	r2, [pc, #100]	; (8008bd8 <_txe_semaphore_create+0x11c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d101      	bne.n	8008b7c <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008b78:	2313      	movs	r3, #19
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d114      	bne.n	8008bac <_txe_semaphore_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008b82:	f3ef 8305 	mrs	r3, IPSR
 8008b86:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008b88:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008b8a:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <_txe_semaphore_create+0x120>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <_txe_semaphore_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008b94:	f3ef 8305 	mrs	r3, IPSR
 8008b98:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008b9a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <_txe_semaphore_create+0x120>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008ba6:	d201      	bcs.n	8008bac <_txe_semaphore_create+0xf0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008ba8:	2313      	movs	r3, #19
 8008baa:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <_txe_semaphore_create+0x102>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7fc fc8a 	bl	80054d0 <_tx_semaphore_create>
 8008bbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3740      	adds	r7, #64	; 0x40
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	2000efe8 	.word	0x2000efe8
 8008bcc:	2000ef14 	.word	0x2000ef14
 8008bd0:	2000ef18 	.word	0x2000ef18
 8008bd4:	2000ef4c 	.word	0x2000ef4c
 8008bd8:	2000f098 	.word	0x2000f098
 8008bdc:	20000018 	.word	0x20000018

08008be0 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e01c      	b.n	8008c32 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <_txe_semaphore_delete+0x6c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d002      	beq.n	8008c08 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008c02:	230c      	movs	r3, #12
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	e014      	b.n	8008c32 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c08:	f3ef 8305 	mrs	r3, IPSR
 8008c0c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008c0e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <_txe_semaphore_delete+0x70>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008c1a:	2313      	movs	r3, #19
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e008      	b.n	8008c32 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008c20:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <_txe_semaphore_delete+0x74>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4a0b      	ldr	r2, [pc, #44]	; (8008c58 <_txe_semaphore_delete+0x78>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008c2e:	2313      	movs	r3, #19
 8008c30:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d103      	bne.n	8008c40 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7fc fc99 	bl	8005570 <_tx_semaphore_delete>
 8008c3e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8008c40:	697b      	ldr	r3, [r7, #20]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	53454d41 	.word	0x53454d41
 8008c50:	20000018 	.word	0x20000018
 8008c54:	2000ef4c 	.word	0x2000ef4c
 8008c58:	2000f098 	.word	0x2000f098

08008c5c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d102      	bne.n	8008c76 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008c70:	230c      	movs	r3, #12
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e01f      	b.n	8008cb6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <_txe_semaphore_get+0x74>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d002      	beq.n	8008c86 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008c80:	230c      	movs	r3, #12
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	e017      	b.n	8008cb6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d014      	beq.n	8008cb6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c8c:	f3ef 8305 	mrs	r3, IPSR
 8008c90:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008c92:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008c94:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <_txe_semaphore_get+0x78>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	e008      	b.n	8008cb6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <_txe_semaphore_get+0x7c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4a0b      	ldr	r2, [pc, #44]	; (8008cdc <_txe_semaphore_get+0x80>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d101      	bne.n	8008cb6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008cb2:	2304      	movs	r3, #4
 8008cb4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fc fce0 	bl	8005684 <_tx_semaphore_get>
 8008cc4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8008cc6:	697b      	ldr	r3, [r7, #20]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	53454d41 	.word	0x53454d41
 8008cd4:	20000018 	.word	0x20000018
 8008cd8:	2000ef4c 	.word	0x2000ef4c
 8008cdc:	2000f098 	.word	0x2000f098

08008ce0 <_txe_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <_txe_semaphore_info_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e012      	b.n	8008d20 <_txe_semaphore_info_get+0x40>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a0b      	ldr	r2, [pc, #44]	; (8008d2c <_txe_semaphore_info_get+0x4c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d002      	beq.n	8008d0a <_txe_semaphore_info_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008d04:	230c      	movs	r3, #12
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e00a      	b.n	8008d20 <_txe_semaphore_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual semaphore information get service.  */
        status =  _tx_semaphore_info_get(semaphore_ptr, name, current_value, first_suspended,
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7fc fd43 	bl	80057a4 <_tx_semaphore_info_get>
 8008d1e:	6178      	str	r0, [r7, #20]
                                                                suspended_count, next_semaphore);
    }

    /* Return completion status.  */
    return(status);
 8008d20:	697b      	ldr	r3, [r7, #20]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	53454d41 	.word	0x53454d41

08008d30 <_txe_semaphore_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d102      	bne.n	8008d44 <_txe_semaphore_prioritize+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008d3e:	230c      	movs	r3, #12
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e00b      	b.n	8008d5c <_txe_semaphore_prioritize+0x2c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a07      	ldr	r2, [pc, #28]	; (8008d68 <_txe_semaphore_prioritize+0x38>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d002      	beq.n	8008d54 <_txe_semaphore_prioritize+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008d4e:	230c      	movs	r3, #12
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e003      	b.n	8008d5c <_txe_semaphore_prioritize+0x2c>
    }
    else
    {

        /* Call actual semaphore prioritize function.  */
        status =  _tx_semaphore_prioritize(semaphore_ptr);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7fc fd63 	bl	8005820 <_tx_semaphore_prioritize>
 8008d5a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	53454d41 	.word	0x53454d41

08008d6c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e00b      	b.n	8008d98 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a07      	ldr	r2, [pc, #28]	; (8008da4 <_txe_semaphore_put+0x38>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d002      	beq.n	8008d90 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e003      	b.n	8008d98 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7fc fdf3 	bl	800597c <_tx_semaphore_put>
 8008d96:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8008d98:	68fb      	ldr	r3, [r7, #12]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	53454d41 	.word	0x53454d41

08008da8 <_txe_semaphore_put_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <_txe_semaphore_put_notify+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008db8:	230c      	movs	r3, #12
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	e00c      	b.n	8008dd8 <_txe_semaphore_put_notify+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <_txe_semaphore_put_notify+0x3c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d002      	beq.n	8008dce <_txe_semaphore_put_notify+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8008dc8:	230c      	movs	r3, #12
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	e004      	b.n	8008dd8 <_txe_semaphore_put_notify+0x30>
    }
    else
    {

        /* Call actual semaphore put notify function.  */
        status =  _tx_semaphore_put_notify(semaphore_ptr, semaphore_put_notify);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7fc fe3d 	bl	8005a50 <_tx_semaphore_put_notify>
 8008dd6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	53454d41 	.word	0x53454d41

08008de8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b098      	sub	sp, #96	; 0x60
 8008dec:	af06      	add	r7, sp, #24
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008df6:	2300      	movs	r3, #0
 8008df8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008e00:	230e      	movs	r3, #14
 8008e02:	647b      	str	r3, [r7, #68]	; 0x44
 8008e04:	e0b7      	b.n	8008f76 <_txe_thread_create+0x18e>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8008e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e08:	2be8      	cmp	r3, #232	; 0xe8
 8008e0a:	d002      	beq.n	8008e12 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008e0c:	230e      	movs	r3, #14
 8008e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e10:	e0b1      	b.n	8008f76 <_txe_thread_create+0x18e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008e12:	f3ef 8310 	mrs	r3, PRIMASK
 8008e16:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008e18:	b672      	cpsid	i
    return(primask_value);
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008e1e:	4b63      	ldr	r3, [pc, #396]	; (8008fac <_txe_thread_create+0x1c4>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	4a61      	ldr	r2, [pc, #388]	; (8008fac <_txe_thread_create+0x1c4>)
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	f383 8810 	msr	PRIMASK, r3
}
 8008e32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 8008e38:	4b5d      	ldr	r3, [pc, #372]	; (8008fb0 <_txe_thread_create+0x1c8>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e40:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8008e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e44:	3b01      	subs	r3, #1
 8008e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e48:	4413      	add	r3, r2
 8008e4a:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e54:	e02b      	b.n	8008eae <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d101      	bne.n	8008e62 <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8008e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d028      	beq.n	8008eba <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d308      	bcc.n	8008e84 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d203      	bcs.n	8008e84 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008e80:	2301      	movs	r3, #1
 8008e82:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d308      	bcc.n	8008ea0 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d203      	bcs.n	8008ea0 <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea6:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eaa:	3301      	adds	r3, #1
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eae:	4b41      	ldr	r3, [pc, #260]	; (8008fb4 <_txe_thread_create+0x1cc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d3ce      	bcc.n	8008e56 <_txe_thread_create+0x6e>
 8008eb8:	e000      	b.n	8008ebc <_txe_thread_create+0xd4>
                break;
 8008eba:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008ec2:	b672      	cpsid	i
    return(primask_value);
 8008ec4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008ec6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008ec8:	4b38      	ldr	r3, [pc, #224]	; (8008fac <_txe_thread_create+0x1c4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a37      	ldr	r2, [pc, #220]	; (8008fac <_txe_thread_create+0x1c4>)
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	f383 8810 	msr	PRIMASK, r3
}
 8008edc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008ede:	f7fd fb4d 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d102      	bne.n	8008ef0 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8008eea:	230e      	movs	r3, #14
 8008eec:	647b      	str	r3, [r7, #68]	; 0x44
 8008eee:	e042      	b.n	8008f76 <_txe_thread_create+0x18e>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8008ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8008efa:	e03c      	b.n	8008f76 <_txe_thread_create+0x18e>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008f02:	2303      	movs	r3, #3
 8008f04:	647b      	str	r3, [r7, #68]	; 0x44
 8008f06:	e036      	b.n	8008f76 <_txe_thread_create+0x18e>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8008f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f0a:	2bc7      	cmp	r3, #199	; 0xc7
 8008f0c:	d802      	bhi.n	8008f14 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8008f0e:	2305      	movs	r3, #5
 8008f10:	647b      	str	r3, [r7, #68]	; 0x44
 8008f12:	e030      	b.n	8008f76 <_txe_thread_create+0x18e>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8008f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f16:	2b1f      	cmp	r3, #31
 8008f18:	d902      	bls.n	8008f20 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8008f1a:	230f      	movs	r3, #15
 8008f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f1e:	e02a      	b.n	8008f76 <_txe_thread_create+0x18e>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8008f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d902      	bls.n	8008f2e <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8008f28:	2318      	movs	r3, #24
 8008f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f2c:	e023      	b.n	8008f76 <_txe_thread_create+0x18e>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8008f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d902      	bls.n	8008f3a <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8008f34:	2310      	movs	r3, #16
 8008f36:	647b      	str	r3, [r7, #68]	; 0x44
 8008f38:	e01d      	b.n	8008f76 <_txe_thread_create+0x18e>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	; (8008fb8 <_txe_thread_create+0x1d0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	4a1e      	ldr	r2, [pc, #120]	; (8008fbc <_txe_thread_create+0x1d4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d101      	bne.n	8008f4c <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008f48:	2313      	movs	r3, #19
 8008f4a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f4c:	f3ef 8305 	mrs	r3, IPSR
 8008f50:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008f52:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008f54:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <_txe_thread_create+0x1d8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <_txe_thread_create+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f5e:	f3ef 8305 	mrs	r3, IPSR
 8008f62:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008f64:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <_txe_thread_create+0x1d8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008f70:	d201      	bcs.n	8008f76 <_txe_thread_create+0x18e>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008f72:	2313      	movs	r3, #19
 8008f74:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d112      	bne.n	8008fa2 <_txe_thread_create+0x1ba>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8008f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f86:	9303      	str	r3, [sp, #12]
 8008f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f8a:	9302      	str	r3, [sp, #8]
 8008f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7fc fd74 	bl	8005a88 <_tx_thread_create>
 8008fa0:	6478      	str	r0, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8008fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3748      	adds	r7, #72	; 0x48
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	2000efe8 	.word	0x2000efe8
 8008fb0:	2000ef54 	.word	0x2000ef54
 8008fb4:	2000ef58 	.word	0x2000ef58
 8008fb8:	2000ef4c 	.word	0x2000ef4c
 8008fbc:	2000f098 	.word	0x2000f098
 8008fc0:	20000018 	.word	0x20000018

08008fc4 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008fcc:	f3ef 8305 	mrs	r3, IPSR
 8008fd0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8008fd2:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008fd4:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <_txe_thread_delete+0x50>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8008fde:	2313      	movs	r3, #19
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	e011      	b.n	8009008 <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008fea:	230e      	movs	r3, #14
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	e00b      	b.n	8009008 <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a08      	ldr	r2, [pc, #32]	; (8009018 <_txe_thread_delete+0x54>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d002      	beq.n	8009000 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008ffa:	230e      	movs	r3, #14
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	e003      	b.n	8009008 <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7fc fe27 	bl	8005c54 <_tx_thread_delete>
 8009006:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000018 	.word	0x20000018
 8009018:	54485244 	.word	0x54485244

0800901c <_txe_thread_entry_exit_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <_txe_thread_entry_exit_notify+0x16>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800902c:	230e      	movs	r3, #14
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	e00c      	b.n	800904c <_txe_thread_entry_exit_notify+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a08      	ldr	r2, [pc, #32]	; (8009058 <_txe_thread_entry_exit_notify+0x3c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d002      	beq.n	8009042 <_txe_thread_entry_exit_notify+0x26>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800903c:	230e      	movs	r3, #14
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e004      	b.n	800904c <_txe_thread_entry_exit_notify+0x30>
    }
    else
    {

        /* Call actual thread entry/exit notify function.  */
        status =  _tx_thread_entry_exit_notify(thread_ptr, thread_entry_exit_notify);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7fc fe5d 	bl	8005d04 <_tx_thread_entry_exit_notify>
 800904a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800904c:	68fb      	ldr	r3, [r7, #12]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	54485244 	.word	0x54485244

0800905c <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08c      	sub	sp, #48	; 0x30
 8009060:	af06      	add	r7, sp, #24
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009070:	230e      	movs	r3, #14
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	e018      	b.n	80090a8 <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <_txe_thread_info_get+0x58>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d002      	beq.n	8009086 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009080:	230e      	movs	r3, #14
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e010      	b.n	80090a8 <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	9302      	str	r3, [sp, #8]
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7fc fe67 	bl	8005d74 <_tx_thread_info_get>
 80090a6:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 80090a8:	697b      	ldr	r3, [r7, #20]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	54485244 	.word	0x54485244

080090b8 <_txe_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <_txe_thread_preemption_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80090ca:	230e      	movs	r3, #14
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	e028      	b.n	8009122 <_txe_thread_preemption_change+0x6a>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a15      	ldr	r2, [pc, #84]	; (800912c <_txe_thread_preemption_change+0x74>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d002      	beq.n	80090e0 <_txe_thread_preemption_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80090da:	230e      	movs	r3, #14
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e020      	b.n	8009122 <_txe_thread_preemption_change+0x6a>
    }

    /* Check for a valid old threshold pointer.  */
    else if (old_threshold == TX_NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <_txe_thread_preemption_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 80090e6:	2303      	movs	r3, #3
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	e01a      	b.n	8009122 <_txe_thread_preemption_change+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80090ec:	f3ef 8305 	mrs	r3, IPSR
 80090f0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80090f2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80090f4:	4b0e      	ldr	r3, [pc, #56]	; (8009130 <_txe_thread_preemption_change+0x78>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <_txe_thread_preemption_change+0x4c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80090fe:	2313      	movs	r3, #19
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e00e      	b.n	8009122 <_txe_thread_preemption_change+0x6a>
    }

    /* Determine if the preemption-threshold is valid.  */
    else if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	429a      	cmp	r2, r3
 800910e:	d902      	bls.n	8009116 <_txe_thread_preemption_change+0x5e>
    {

        /* Return an error status.  */
        status =  TX_THRESH_ERROR;
 8009110:	2318      	movs	r3, #24
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	e005      	b.n	8009122 <_txe_thread_preemption_change+0x6a>
    }
    else
    {

        /* Call actual change thread preemption function.  */
        status =  _tx_thread_preemption_change(thread_ptr, new_threshold, old_threshold);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7fc fec0 	bl	8005ea0 <_tx_thread_preemption_change>
 8009120:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8009122:	697b      	ldr	r3, [r7, #20]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	54485244 	.word	0x54485244
 8009130:	20000018 	.word	0x20000018

08009134 <_txe_thread_priority_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <_txe_thread_priority_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009146:	230e      	movs	r3, #14
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	e025      	b.n	8009198 <_txe_thread_priority_change+0x64>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <_txe_thread_priority_change+0x70>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d002      	beq.n	800915c <_txe_thread_priority_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009156:	230e      	movs	r3, #14
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	e01d      	b.n	8009198 <_txe_thread_priority_change+0x64>
    }

    /* Check for a valid old priority pointer.  */
    else if (old_priority == TX_NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <_txe_thread_priority_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 8009162:	2303      	movs	r3, #3
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	e017      	b.n	8009198 <_txe_thread_priority_change+0x64>
    }

    /* Determine if the priority is legal.  */
    else if (new_priority >= ((UINT) TX_MAX_PRIORITIES))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b1f      	cmp	r3, #31
 800916c:	d902      	bls.n	8009174 <_txe_thread_priority_change+0x40>
    {

        /* Return an error status.  */
        status =  TX_PRIORITY_ERROR;
 800916e:	230f      	movs	r3, #15
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	e011      	b.n	8009198 <_txe_thread_priority_change+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009174:	f3ef 8305 	mrs	r3, IPSR
 8009178:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800917a:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <_txe_thread_priority_change+0x74>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4313      	orrs	r3, r2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <_txe_thread_priority_change+0x58>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8009186:	2313      	movs	r3, #19
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e005      	b.n	8009198 <_txe_thread_priority_change+0x64>
    }
    else
    {

        /* Call actual change thread priority function.  */
        status =  _tx_thread_priority_change(thread_ptr, new_priority, old_priority);
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7fc ff19 	bl	8005fc8 <_tx_thread_priority_change>
 8009196:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8009198:	697b      	ldr	r3, [r7, #20]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	54485244 	.word	0x54485244
 80091a8:	20000018 	.word	0x20000018

080091ac <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80091b2:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <_txe_thread_relinquish+0x30>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 80091c4:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <_txe_thread_relinquish+0x34>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 80091d0:	f7fc ffb4 	bl	800613c <_tx_thread_relinquish>
        }
    }
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	2000ef4c 	.word	0x2000ef4c
 80091e0:	20000018 	.word	0x20000018

080091e4 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80091f2:	230e      	movs	r3, #14
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e00b      	b.n	8009210 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a07      	ldr	r2, [pc, #28]	; (800921c <_txe_thread_resume+0x38>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d002      	beq.n	8009208 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009202:	230e      	movs	r3, #14
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e003      	b.n	8009210 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7fc fffb 	bl	8006204 <_tx_thread_resume>
 800920e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8009210:	68fb      	ldr	r3, [r7, #12]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	54485244 	.word	0x54485244

08009220 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800922e:	230e      	movs	r3, #14
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e00b      	b.n	800924c <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a07      	ldr	r2, [pc, #28]	; (8009258 <_txe_thread_suspend+0x38>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d002      	beq.n	8009244 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800923e:	230e      	movs	r3, #14
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	e003      	b.n	800924c <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7fd f92b 	bl	80064a0 <_tx_thread_suspend>
 800924a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800924c:	68fb      	ldr	r3, [r7, #12]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	54485244 	.word	0x54485244

0800925c <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800926a:	230e      	movs	r3, #14
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e017      	b.n	80092a0 <_txe_thread_terminate+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a0d      	ldr	r2, [pc, #52]	; (80092ac <_txe_thread_terminate+0x50>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d002      	beq.n	8009280 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800927a:	230e      	movs	r3, #14
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e00f      	b.n	80092a0 <_txe_thread_terminate+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009280:	f3ef 8305 	mrs	r3, IPSR
 8009284:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8009286:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <_txe_thread_terminate+0x54>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4313      	orrs	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <_txe_thread_terminate+0x3c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8009292:	2313      	movs	r3, #19
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e003      	b.n	80092a0 <_txe_thread_terminate+0x44>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fd fc47 	bl	8006b2c <_tx_thread_terminate>
 800929e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80092a0:	68fb      	ldr	r3, [r7, #12]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	54485244 	.word	0x54485244
 80092b0:	20000018 	.word	0x20000018

080092b4 <_txe_thread_time_slice_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <_txe_thread_time_slice_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80092c6:	230e      	movs	r3, #14
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e01f      	b.n	800930c <_txe_thread_time_slice_change+0x58>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a11      	ldr	r2, [pc, #68]	; (8009318 <_txe_thread_time_slice_change+0x64>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d002      	beq.n	80092dc <_txe_thread_time_slice_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80092d6:	230e      	movs	r3, #14
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e017      	b.n	800930c <_txe_thread_time_slice_change+0x58>
    }

    /* Check for a valid old time-slice pointer.  */
    else if (old_time_slice == TX_NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <_txe_thread_time_slice_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 80092e2:	2303      	movs	r3, #3
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	e011      	b.n	800930c <_txe_thread_time_slice_change+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80092e8:	f3ef 8305 	mrs	r3, IPSR
 80092ec:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80092ee:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80092f0:	4b0a      	ldr	r3, [pc, #40]	; (800931c <_txe_thread_time_slice_change+0x68>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <_txe_thread_time_slice_change+0x4c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80092fa:	2313      	movs	r3, #19
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e005      	b.n	800930c <_txe_thread_time_slice_change+0x58>
    }
    else
    {

        /* Call actual change time slice function.  */
        status =  _tx_thread_time_slice_change(thread_ptr, new_time_slice, old_time_slice);
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	68b9      	ldr	r1, [r7, #8]
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7fd fd1d 	bl	8006d44 <_tx_thread_time_slice_change>
 800930a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800930c:	697b      	ldr	r3, [r7, #20]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	54485244 	.word	0x54485244
 800931c:	20000018 	.word	0x20000018

08009320 <_txe_thread_wait_abort>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_wait_abort(TX_THREAD  *thread_ptr)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d102      	bne.n	8009334 <_txe_thread_wait_abort+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800932e:	230e      	movs	r3, #14
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	e00b      	b.n	800934c <_txe_thread_wait_abort+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a07      	ldr	r2, [pc, #28]	; (8009358 <_txe_thread_wait_abort+0x38>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d002      	beq.n	8009344 <_txe_thread_wait_abort+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800933e:	230e      	movs	r3, #14
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e003      	b.n	800934c <_txe_thread_wait_abort+0x2c>
    }
    else
    {

        /* Call actual thread wait abort function.  */
        status =  _tx_thread_wait_abort(thread_ptr);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7fd fd69 	bl	8006e1c <_tx_thread_wait_abort>
 800934a:	60f8      	str	r0, [r7, #12]
    }

    /* Return status to the caller.  */
    return(status);
 800934c:	68fb      	ldr	r3, [r7, #12]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	54485244 	.word	0x54485244

0800935c <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800936a:	2315      	movs	r3, #21
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	e00b      	b.n	8009388 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a07      	ldr	r2, [pc, #28]	; (8009394 <_txe_timer_activate+0x38>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d002      	beq.n	8009380 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800937a:	2315      	movs	r3, #21
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e003      	b.n	8009388 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fd fdf9 	bl	8006f78 <_tx_timer_activate>
 8009386:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	4154494d 	.word	0x4154494d

08009398 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80093aa:	2315      	movs	r3, #21
 80093ac:	617b      	str	r3, [r7, #20]
 80093ae:	e020      	b.n	80093f2 <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a11      	ldr	r2, [pc, #68]	; (80093fc <_txe_timer_change+0x64>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d002      	beq.n	80093c0 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80093ba:	2315      	movs	r3, #21
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e018      	b.n	80093f2 <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 80093c6:	2316      	movs	r3, #22
 80093c8:	617b      	str	r3, [r7, #20]
 80093ca:	e012      	b.n	80093f2 <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80093cc:	f3ef 8305 	mrs	r3, IPSR
 80093d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80093d2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80093d4:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <_txe_timer_change+0x68>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4313      	orrs	r3, r2
 80093da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80093de:	d302      	bcc.n	80093e6 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80093e0:	2313      	movs	r3, #19
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	e005      	b.n	80093f2 <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7fd fdee 	bl	8006fcc <_tx_timer_change>
 80093f0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80093f2:	697b      	ldr	r3, [r7, #20]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	4154494d 	.word	0x4154494d
 8009400:	20000018 	.word	0x20000018

08009404 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b094      	sub	sp, #80	; 0x50
 8009408:	af04      	add	r7, sp, #16
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009412:	2300      	movs	r3, #0
 8009414:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d102      	bne.n	8009422 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800941c:	2315      	movs	r3, #21
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009420:	e055      	b.n	80094ce <_txe_timer_create+0xca>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 8009422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009424:	2b34      	cmp	r3, #52	; 0x34
 8009426:	d002      	beq.n	800942e <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8009428:	2315      	movs	r3, #21
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942c:	e04f      	b.n	80094ce <_txe_timer_create+0xca>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800942e:	f3ef 8310 	mrs	r3, PRIMASK
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009434:	b672      	cpsid	i
    return(primask_value);
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009438:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800943a:	4b40      	ldr	r3, [pc, #256]	; (800953c <_txe_timer_create+0x138>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	4a3e      	ldr	r2, [pc, #248]	; (800953c <_txe_timer_create+0x138>)
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	f383 8810 	msr	PRIMASK, r3
}
 800944e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 8009450:	4b3b      	ldr	r3, [pc, #236]	; (8009540 <_txe_timer_create+0x13c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8009456:	2300      	movs	r3, #0
 8009458:	63bb      	str	r3, [r7, #56]	; 0x38
 800945a:	e009      	b.n	8009470 <_txe_timer_create+0x6c>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009460:	429a      	cmp	r2, r3
 8009462:	d00b      	beq.n	800947c <_txe_timer_create+0x78>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 8009464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	3301      	adds	r3, #1
 800946e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009470:	4b34      	ldr	r3, [pc, #208]	; (8009544 <_txe_timer_create+0x140>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009476:	429a      	cmp	r2, r3
 8009478:	d3f0      	bcc.n	800945c <_txe_timer_create+0x58>
 800947a:	e000      	b.n	800947e <_txe_timer_create+0x7a>
                break;
 800947c:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800947e:	f3ef 8310 	mrs	r3, PRIMASK
 8009482:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009484:	b672      	cpsid	i
    return(primask_value);
 8009486:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009488:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800948a:	4b2c      	ldr	r3, [pc, #176]	; (800953c <_txe_timer_create+0x138>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3b01      	subs	r3, #1
 8009490:	4a2a      	ldr	r2, [pc, #168]	; (800953c <_txe_timer_create+0x138>)
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	f383 8810 	msr	PRIMASK, r3
}
 800949e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80094a0:	f7fd f86c 	bl	800657c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d102      	bne.n	80094b2 <_txe_timer_create+0xae>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 80094ac:	2315      	movs	r3, #21
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b0:	e00d      	b.n	80094ce <_txe_timer_create+0xca>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 80094b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <_txe_timer_create+0xba>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 80094b8:	2316      	movs	r3, #22
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094bc:	e007      	b.n	80094ce <_txe_timer_create+0xca>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 80094be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d004      	beq.n	80094ce <_txe_timer_create+0xca>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 80094c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <_txe_timer_create+0xca>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 80094ca:	2317      	movs	r3, #23
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80094ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11d      	bne.n	8009510 <_txe_timer_create+0x10c>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80094d4:	4b1c      	ldr	r3, [pc, #112]	; (8009548 <_txe_timer_create+0x144>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	4a1b      	ldr	r2, [pc, #108]	; (800954c <_txe_timer_create+0x148>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d101      	bne.n	80094e6 <_txe_timer_create+0xe2>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80094e2:	2313      	movs	r3, #19
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80094e6:	f3ef 8305 	mrs	r3, IPSR
 80094ea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80094ec:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80094ee:	4b18      	ldr	r3, [pc, #96]	; (8009550 <_txe_timer_create+0x14c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <_txe_timer_create+0x10c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80094f8:	f3ef 8305 	mrs	r3, IPSR
 80094fc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80094fe:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <_txe_timer_create+0x14c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4313      	orrs	r3, r2
 8009506:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800950a:	d201      	bcs.n	8009510 <_txe_timer_create+0x10c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800950c:	2313      	movs	r3, #19
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10c      	bne.n	8009530 <_txe_timer_create+0x12c>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 8009516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7fd fd73 	bl	8007014 <_tx_timer_create>
 800952e:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 8009530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009532:	4618      	mov	r0, r3
 8009534:	3740      	adds	r7, #64	; 0x40
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000efe8 	.word	0x2000efe8
 8009540:	2000f08c 	.word	0x2000f08c
 8009544:	2000f090 	.word	0x2000f090
 8009548:	2000ef4c 	.word	0x2000ef4c
 800954c:	2000f098 	.word	0x2000f098
 8009550:	20000018 	.word	0x20000018

08009554 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8009562:	2315      	movs	r3, #21
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	e00b      	b.n	8009580 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a07      	ldr	r2, [pc, #28]	; (800958c <_txe_timer_deactivate+0x38>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d002      	beq.n	8009578 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8009572:	2315      	movs	r3, #21
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	e003      	b.n	8009580 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7fd fdad 	bl	80070d8 <_tx_timer_deactivate>
 800957e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8009580:	68fb      	ldr	r3, [r7, #12]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	4154494d 	.word	0x4154494d

08009590 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80095a2:	2315      	movs	r3, #21
 80095a4:	617b      	str	r3, [r7, #20]
 80095a6:	e023      	b.n	80095f0 <_txe_timer_delete+0x60>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a13      	ldr	r2, [pc, #76]	; (80095fc <_txe_timer_delete+0x6c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d002      	beq.n	80095b8 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80095b2:	2315      	movs	r3, #21
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e01b      	b.n	80095f0 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80095b8:	f3ef 8305 	mrs	r3, IPSR
 80095bc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80095be:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80095c0:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <_txe_timer_delete+0x70>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80095ca:	2313      	movs	r3, #19
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	e00f      	b.n	80095f0 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80095d0:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <_txe_timer_delete+0x74>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	4a0b      	ldr	r2, [pc, #44]	; (8009608 <_txe_timer_delete+0x78>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d101      	bne.n	80095e2 <_txe_timer_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80095de:	2313      	movs	r3, #19
 80095e0:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d103      	bne.n	80095f0 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7fd fe1d 	bl	8007228 <_tx_timer_delete>
 80095ee:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 80095f0:	697b      	ldr	r3, [r7, #20]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	4154494d 	.word	0x4154494d
 8009600:	20000018 	.word	0x20000018
 8009604:	2000ef4c 	.word	0x2000ef4c
 8009608:	2000f098 	.word	0x2000f098

0800960c <_txe_timer_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks,
                ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <_txe_timer_info_get+0x1a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8009620:	2315      	movs	r3, #21
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e012      	b.n	800964c <_txe_timer_info_get+0x40>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a0b      	ldr	r2, [pc, #44]	; (8009658 <_txe_timer_info_get+0x4c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d002      	beq.n	8009636 <_txe_timer_info_get+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8009630:	2315      	movs	r3, #21
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e00a      	b.n	800964c <_txe_timer_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual timer information get service.  */
        status =  _tx_timer_info_get(timer_ptr, name, active, remaining_ticks, reschedule_ticks, next_timer);
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7fd fe55 	bl	80072f4 <_tx_timer_info_get>
 800964a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800964c:	697b      	ldr	r3, [r7, #20]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	4154494d 	.word	0x4154494d

0800965c <_txm_power_of_two_block_size>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_power_of_two_block_size(ULONG size)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
    /* Check for 0 size. */
    if(size == 0)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <_txm_power_of_two_block_size+0x12>
        return 0;
 800966a:	2300      	movs	r3, #0
 800966c:	e024      	b.n	80096b8 <_txm_power_of_two_block_size+0x5c>
    
    /* Minimum MPU block size is 32. */
    if(size <= 32)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b20      	cmp	r3, #32
 8009672:	d801      	bhi.n	8009678 <_txm_power_of_two_block_size+0x1c>
        return 32;
 8009674:	2320      	movs	r3, #32
 8009676:	e01f      	b.n	80096b8 <_txm_power_of_two_block_size+0x5c>
    
    /* Bit twiddling trick to round to next high power of 2
       (if original size is power of 2, it will return original size. Perfect!) */
    size--;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3b01      	subs	r3, #1
 800967c:	607b      	str	r3, [r7, #4]
    size |= size >> 1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4313      	orrs	r3, r2
 8009686:	607b      	str	r3, [r7, #4]
    size |= size >> 2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	089b      	lsrs	r3, r3, #2
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	4313      	orrs	r3, r2
 8009690:	607b      	str	r3, [r7, #4]
    size |= size >> 4;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	091b      	lsrs	r3, r3, #4
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	4313      	orrs	r3, r2
 800969a:	607b      	str	r3, [r7, #4]
    size |= size >> 8;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	607b      	str	r3, [r7, #4]
    size |= size >> 16;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	607b      	str	r3, [r7, #4]
    size++;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3301      	adds	r3, #1
 80096b4:	607b      	str	r3, [r7, #4]
    
    /* Return a power of 2 size at or above the input size.  */
    return(size);
 80096b6:	687b      	ldr	r3, [r7, #4]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <_txm_module_manager_alignment_adjust>:
VOID  _txm_module_manager_alignment_adjust(TXM_MODULE_PREAMBLE *module_preamble,
                                           ULONG *code_size,
                                           ULONG *code_alignment,
                                           ULONG *data_size,
                                           ULONG *data_alignment)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08c      	sub	sp, #48	; 0x30
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
ULONG   data_block_size;
ULONG   code_size_accum;
ULONG   data_size_accum;

    /* Copy the input parameters into local variables for ease of use.  */
    local_code_size =       *code_size;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    local_code_alignment =  *code_alignment;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	62bb      	str	r3, [r7, #40]	; 0x28
    local_data_size =       *data_size;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	617b      	str	r3, [r7, #20]
    local_data_alignment =  *data_alignment;
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	627b      	str	r3, [r7, #36]	; 0x24


    /* Test for external memory enabled in preamble.  */
    if(module_preamble -> txm_module_preamble_property_flags & TXM_MODULE_SHARED_EXTERNAL_MEMORY_ACCESS)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	f003 0304 	and.w	r3, r3, #4
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 809a 	beq.w	800982c <_txm_module_manager_alignment_adjust+0x168>
    {
        /* External/shared memory enabled. TXM_MODULE_MANAGER_CODE_MPU_ENTRIES-1 code entries will be used.  */
        if (local_code_size <= (32*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	2b60      	cmp	r3, #96	; 0x60
 80096fc:	d802      	bhi.n	8009704 <_txm_module_manager_alignment_adjust+0x40>
        {
            /* Block size of 32 is best.   */
            code_block_size =  32;
 80096fe:	2320      	movs	r3, #32
 8009700:	623b      	str	r3, [r7, #32]
 8009702:	e087      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (64*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	2bc0      	cmp	r3, #192	; 0xc0
 8009708:	d802      	bhi.n	8009710 <_txm_module_manager_alignment_adjust+0x4c>
        {
            /* Block size of 64 is best.   */
            code_block_size =  64;
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	623b      	str	r3, [r7, #32]
 800970e:	e081      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (128*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009716:	d802      	bhi.n	800971e <_txm_module_manager_alignment_adjust+0x5a>
        {
            /* Block size of 128 is best.   */
            code_block_size =  128;
 8009718:	2380      	movs	r3, #128	; 0x80
 800971a:	623b      	str	r3, [r7, #32]
 800971c:	e07a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (256*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009724:	d803      	bhi.n	800972e <_txm_module_manager_alignment_adjust+0x6a>
        {
            /* Block size of 256 is best.   */
            code_block_size =  256;
 8009726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800972a:	623b      	str	r3, [r7, #32]
 800972c:	e072      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (512*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009734:	d803      	bhi.n	800973e <_txm_module_manager_alignment_adjust+0x7a>
        {
            /* Block size of 512 is best.   */
            code_block_size =  512;
 8009736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800973a:	623b      	str	r3, [r7, #32]
 800973c:	e06a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (1024*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009744:	d803      	bhi.n	800974e <_txm_module_manager_alignment_adjust+0x8a>
        {
            /* Block size of 1024 is best.   */
            code_block_size =  1024;
 8009746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800974a:	623b      	str	r3, [r7, #32]
 800974c:	e062      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (2048*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009754:	d803      	bhi.n	800975e <_txm_module_manager_alignment_adjust+0x9a>
        {
            /* Block size of 2048 is best.   */
            code_block_size =  2048;
 8009756:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800975a:	623b      	str	r3, [r7, #32]
 800975c:	e05a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (4096*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009764:	d803      	bhi.n	800976e <_txm_module_manager_alignment_adjust+0xaa>
        {
            /* Block size of 4096 is best.   */
            code_block_size =  4096;
 8009766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800976a:	623b      	str	r3, [r7, #32]
 800976c:	e052      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (8192*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009774:	d803      	bhi.n	800977e <_txm_module_manager_alignment_adjust+0xba>
        {
            /* Block size of 8192 is best.   */
            code_block_size =  8192;
 8009776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800977a:	623b      	str	r3, [r7, #32]
 800977c:	e04a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (16384*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009784:	d803      	bhi.n	800978e <_txm_module_manager_alignment_adjust+0xca>
        {
            /* Block size of 16384 is best.   */
            code_block_size =  16384;
 8009786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800978a:	623b      	str	r3, [r7, #32]
 800978c:	e042      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (32768*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009790:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009794:	d803      	bhi.n	800979e <_txm_module_manager_alignment_adjust+0xda>
        {
            /* Block size of 32768 is best.   */
            code_block_size =  32768;
 8009796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800979a:	623b      	str	r3, [r7, #32]
 800979c:	e03a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (65536*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097a4:	d803      	bhi.n	80097ae <_txm_module_manager_alignment_adjust+0xea>
        {
            /* Block size of 65536 is best.   */
            code_block_size =  65536;
 80097a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097aa:	623b      	str	r3, [r7, #32]
 80097ac:	e032      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (131072*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80097b4:	d803      	bhi.n	80097be <_txm_module_manager_alignment_adjust+0xfa>
        {
            /* Block size of 131072 is best.   */
            code_block_size =  131072;
 80097b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097ba:	623b      	str	r3, [r7, #32]
 80097bc:	e02a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (262144*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80097c4:	d803      	bhi.n	80097ce <_txm_module_manager_alignment_adjust+0x10a>
        {
            /* Block size of 262144 is best.   */
            code_block_size =  262144;
 80097c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80097ca:	623b      	str	r3, [r7, #32]
 80097cc:	e022      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (524288*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80097d4:	d803      	bhi.n	80097de <_txm_module_manager_alignment_adjust+0x11a>
        {
            /* Block size of 524288 is best.   */
            code_block_size =  524288;
 80097d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097da:	623b      	str	r3, [r7, #32]
 80097dc:	e01a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (1048576*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097e4:	d803      	bhi.n	80097ee <_txm_module_manager_alignment_adjust+0x12a>
        {
            /* Block size of 1048576 is best.   */
            code_block_size =  1048576;
 80097e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80097ea:	623b      	str	r3, [r7, #32]
 80097ec:	e012      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (2097152*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80097ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097f4:	d803      	bhi.n	80097fe <_txm_module_manager_alignment_adjust+0x13a>
        {
            /* Block size of 2097152 is best.   */
            code_block_size =  2097152;
 80097f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80097fa:	623b      	str	r3, [r7, #32]
 80097fc:	e00a      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else if (local_code_size <= (4194304*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1)))
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009804:	d803      	bhi.n	800980e <_txm_module_manager_alignment_adjust+0x14a>
        {
            /* Block size of 4194304 is best.   */
            code_block_size =  4194304;
 8009806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800980a:	623b      	str	r3, [r7, #32]
 800980c:	e002      	b.n	8009814 <_txm_module_manager_alignment_adjust+0x150>
        }
        else
        {
            /* Just set block size to 32MB just to create an allocation error!  */
            code_block_size =  33554432;
 800980e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009812:	623b      	str	r3, [r7, #32]
        }
        
        /* Calculate the new code size.  */
        local_code_size =  code_block_size*(TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1);
 8009814:	6a3a      	ldr	r2, [r7, #32]
 8009816:	4613      	mov	r3, r2
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	4413      	add	r3, r2
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        /* Determine if the code block size is greater than the current alignment. If so, use block size
           as the alignment.  */
        if (code_block_size > local_code_alignment)
 800981e:	6a3a      	ldr	r2, [r7, #32]
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	429a      	cmp	r2, r3
 8009824:	d922      	bls.n	800986c <_txm_module_manager_alignment_adjust+0x1a8>
            local_code_alignment = code_block_size;
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
 800982a:	e01f      	b.n	800986c <_txm_module_manager_alignment_adjust+0x1a8>
           will be distributed:
           1. 1/4 of the largest power of two that is greater than or equal to code size.
           2. 1/4 of the largest power of two that is greater than or equal to code size.
           3. Largest power of 2 that fits in the remaining space.
           4. Smallest power of 2 that exceeds the remaining space, minimum 32.  */
        local_code_alignment =  _txm_power_of_two_block_size(local_code_size) >> 2;
 800982c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800982e:	f7ff ff15 	bl	800965c <_txm_power_of_two_block_size>
 8009832:	4603      	mov	r3, r0
 8009834:	089b      	lsrs	r3, r3, #2
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
        code_size_accum =  local_code_alignment + local_code_alignment;
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	613b      	str	r3, [r7, #16]
        code_size_accum =  code_size_accum + (_txm_power_of_two_block_size(local_code_size - code_size_accum) >> 1);
 800983e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff ff09 	bl	800965c <_txm_power_of_two_block_size>
 800984a:	4603      	mov	r3, r0
 800984c:	085b      	lsrs	r3, r3, #1
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
        code_size_accum =  code_size_accum + _txm_power_of_two_block_size(local_code_size - code_size_accum);
 8009854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff fefe 	bl	800965c <_txm_power_of_two_block_size>
 8009860:	4602      	mov	r2, r0
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	4413      	add	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
        local_code_size =  code_size_accum;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    
    /* Determine the best data block size, which in our case is the minimal alignment.  */
    if (local_data_size <= (32*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2b60      	cmp	r3, #96	; 0x60
 8009870:	d802      	bhi.n	8009878 <_txm_module_manager_alignment_adjust+0x1b4>
    {
        /* Block size of 32 is best.   */
        data_block_size =  32;
 8009872:	2320      	movs	r3, #32
 8009874:	61fb      	str	r3, [r7, #28]
 8009876:	e087      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (64*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2bc0      	cmp	r3, #192	; 0xc0
 800987c:	d802      	bhi.n	8009884 <_txm_module_manager_alignment_adjust+0x1c0>
    {
        /* Block size of 64 is best.   */
        data_block_size =  64;
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	e081      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (128*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800988a:	d802      	bhi.n	8009892 <_txm_module_manager_alignment_adjust+0x1ce>
    {
        /* Block size of 128 is best.   */
        data_block_size =  128;
 800988c:	2380      	movs	r3, #128	; 0x80
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	e07a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (256*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009898:	d803      	bhi.n	80098a2 <_txm_module_manager_alignment_adjust+0x1de>
    {
        /* Block size of 256 is best.   */
        data_block_size =  256;
 800989a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	e072      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (512*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80098a8:	d803      	bhi.n	80098b2 <_txm_module_manager_alignment_adjust+0x1ee>
    {
        /* Block size of 512 is best.   */
        data_block_size =  512;
 80098aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e06a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (1024*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098b8:	d803      	bhi.n	80098c2 <_txm_module_manager_alignment_adjust+0x1fe>
    {
        /* Block size of 1024 is best.   */
        data_block_size =  1024;
 80098ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e062      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (2048*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80098c8:	d803      	bhi.n	80098d2 <_txm_module_manager_alignment_adjust+0x20e>
    {
        /* Block size of 2048 is best.   */
        data_block_size =  2048;
 80098ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e05a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (4096*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098d8:	d803      	bhi.n	80098e2 <_txm_module_manager_alignment_adjust+0x21e>
    {
        /* Block size of 4096 is best.   */
        data_block_size =  4096;
 80098da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098de:	61fb      	str	r3, [r7, #28]
 80098e0:	e052      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (8192*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80098e8:	d803      	bhi.n	80098f2 <_txm_module_manager_alignment_adjust+0x22e>
    {
        /* Block size of 8192 is best.   */
        data_block_size =  8192;
 80098ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	e04a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (16384*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098f8:	d803      	bhi.n	8009902 <_txm_module_manager_alignment_adjust+0x23e>
    {
        /* Block size of 16384 is best.   */
        data_block_size =  16384;
 80098fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	e042      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (32768*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009908:	d803      	bhi.n	8009912 <_txm_module_manager_alignment_adjust+0x24e>
    {
        /* Block size of 32768 is best.   */
        data_block_size =  32768;
 800990a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	e03a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (65536*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009918:	d803      	bhi.n	8009922 <_txm_module_manager_alignment_adjust+0x25e>
    {
        /* Block size of 65536 is best.   */
        data_block_size =  65536;
 800991a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	e032      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (131072*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009928:	d803      	bhi.n	8009932 <_txm_module_manager_alignment_adjust+0x26e>
    {
        /* Block size of 131072 is best.   */
        data_block_size =  131072;
 800992a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800992e:	61fb      	str	r3, [r7, #28]
 8009930:	e02a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (262144*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009938:	d803      	bhi.n	8009942 <_txm_module_manager_alignment_adjust+0x27e>
    {
        /* Block size of 262144 is best.   */
        data_block_size =  262144;
 800993a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	e022      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (524288*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009948:	d803      	bhi.n	8009952 <_txm_module_manager_alignment_adjust+0x28e>
    {
        /* Block size of 524288 is best.   */
        data_block_size =  524288;
 800994a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	e01a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (1048576*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009958:	d803      	bhi.n	8009962 <_txm_module_manager_alignment_adjust+0x29e>
    {
        /* Block size of 1048576 is best.   */
        data_block_size =  1048576;
 800995a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e012      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (2097152*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009968:	d803      	bhi.n	8009972 <_txm_module_manager_alignment_adjust+0x2ae>
    {
        /* Block size of 2097152 is best.   */
        data_block_size =  2097152;
 800996a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e00a      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else if (local_data_size <= (4194304*TXM_MODULE_MANAGER_DATA_MPU_ENTRIES))
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009978:	d803      	bhi.n	8009982 <_txm_module_manager_alignment_adjust+0x2be>
    {
        /* Block size of 4194304 is best.   */
        data_block_size =  4194304;
 800997a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800997e:	61fb      	str	r3, [r7, #28]
 8009980:	e002      	b.n	8009988 <_txm_module_manager_alignment_adjust+0x2c4>
    }
    else
    {
        /* Just set data block size to 32MB just to create an allocation error!  */
        data_block_size =  33554432;
 8009982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009986:	61fb      	str	r3, [r7, #28]
    }

    /* Calculate the new data size.  */
    data_size_accum = data_block_size;
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	61bb      	str	r3, [r7, #24]
    while(data_size_accum < local_data_size)
 800998c:	e003      	b.n	8009996 <_txm_module_manager_alignment_adjust+0x2d2>
    {
        data_size_accum += data_block_size;
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	4413      	add	r3, r2
 8009994:	61bb      	str	r3, [r7, #24]
    while(data_size_accum < local_data_size)
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	429a      	cmp	r2, r3
 800999c:	d3f7      	bcc.n	800998e <_txm_module_manager_alignment_adjust+0x2ca>
    }
    local_data_size = data_size_accum;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	617b      	str	r3, [r7, #20]
    
    /* Determine if the data block size is greater than the current alignment. If so, use block size
       as the alignment.  */
    if (data_block_size > local_data_alignment)
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d901      	bls.n	80099ae <_txm_module_manager_alignment_adjust+0x2ea>
    {
        local_data_alignment =  data_block_size;
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return all the information to the caller.  */
    *code_size =        local_code_size;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b2:	601a      	str	r2, [r3, #0]
    *code_alignment =   local_code_alignment;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b8:	601a      	str	r2, [r3, #0]
    *data_size =        local_data_size;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	601a      	str	r2, [r3, #0]
    *data_alignment =   local_data_alignment;
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c4:	601a      	str	r2, [r3, #0]

#endif
}
 80099c6:	bf00      	nop
 80099c8:	3730      	adds	r7, #48	; 0x30
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <_txm_module_manager_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_application_request(ULONG request_id, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
    /* By default, simply return the status of not available.  */
    return(TX_NOT_AVAILABLE);
 80099dc:	231d      	movs	r3, #29
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <_txm_module_manager_callback_request>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_callback_request(TX_QUEUE *module_callback_queue, TXM_MODULE_CALLBACK_MESSAGE  *callback_message)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	; 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80099f6:	f3ef 8310 	mrs	r3, PRIMASK
 80099fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80099fc:	b672      	cpsid	i
    return(primask_value);
 80099fe:	693b      	ldr	r3, [r7, #16]
UINT                            found;
UINT                            status;


    /* Lockout interrupts.  */
    TX_DISABLE
 8009a00:	61bb      	str	r3, [r7, #24]

    /* Determine if the queue is valid.  */
    if ((module_callback_queue) && (module_callback_queue -> tx_queue_id == TX_QUEUE_ID))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8087 	beq.w	8009b18 <_txm_module_manager_callback_request+0x12c>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a4a      	ldr	r2, [pc, #296]	; (8009b38 <_txm_module_manager_callback_request+0x14c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	f040 8081 	bne.w	8009b18 <_txm_module_manager_callback_request+0x12c>
    {

        /* Yes, the queue is valid.  */

        /* Pickup the current callback request in the queue.  */
        queued_message =  (TXM_MODULE_CALLBACK_MESSAGE *) module_callback_queue -> tx_queue_read;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Pickup the number of items enqueued.  */
        enqueued =  module_callback_queue -> tx_queue_enqueued;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	623b      	str	r3, [r7, #32]

        /* Set the found flag to false.  */
        found =  TX_FALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]

        /* Loop to look for duplicates in the queue.  */
        while (enqueued != 0)
 8009a26:	e057      	b.n	8009ad8 <_txm_module_manager_callback_request+0xec>
        {

            /* Does this entry match the new callback message?  */
            if ((queued_message -> txm_module_callback_message_application_function == callback_message -> txm_module_callback_message_application_function) &&
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d143      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_1 == callback_message -> txm_module_callback_message_param_1) &&
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
            if ((queued_message -> txm_module_callback_message_application_function == callback_message -> txm_module_callback_message_application_function) &&
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d13d      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_2 == callback_message -> txm_module_callback_message_param_2) &&
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	691a      	ldr	r2, [r3, #16]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
                (queued_message -> txm_module_callback_message_param_1 == callback_message -> txm_module_callback_message_param_1) &&
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d137      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_3 == callback_message -> txm_module_callback_message_param_3) &&
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	695a      	ldr	r2, [r3, #20]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	695b      	ldr	r3, [r3, #20]
                (queued_message -> txm_module_callback_message_param_2 == callback_message -> txm_module_callback_message_param_2) &&
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d131      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_4 == callback_message -> txm_module_callback_message_param_4) &&
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	699a      	ldr	r2, [r3, #24]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	699b      	ldr	r3, [r3, #24]
                (queued_message -> txm_module_callback_message_param_3 == callback_message -> txm_module_callback_message_param_3) &&
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d12b      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_5 == callback_message -> txm_module_callback_message_param_5) &&
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	69db      	ldr	r3, [r3, #28]
                (queued_message -> txm_module_callback_message_param_4 == callback_message -> txm_module_callback_message_param_4) &&
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d125      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_6 == callback_message -> txm_module_callback_message_param_6) &&
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	6a1a      	ldr	r2, [r3, #32]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
                (queued_message -> txm_module_callback_message_param_5 == callback_message -> txm_module_callback_message_param_5) &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d11f      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_7 == callback_message -> txm_module_callback_message_param_7) &&
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (queued_message -> txm_module_callback_message_param_6 == callback_message -> txm_module_callback_message_param_6) &&
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d119      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_8 == callback_message -> txm_module_callback_message_param_8) &&
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                (queued_message -> txm_module_callback_message_param_7 == callback_message -> txm_module_callback_message_param_7) &&
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d113      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_reserved1 == callback_message -> txm_module_callback_message_reserved1) &&
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                (queued_message -> txm_module_callback_message_param_8 == callback_message -> txm_module_callback_message_param_8) &&
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d10d      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_reserved2 == callback_message -> txm_module_callback_message_reserved2))
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                (queued_message -> txm_module_callback_message_reserved1 == callback_message -> txm_module_callback_message_reserved1) &&
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d107      	bne.n	8009abc <_txm_module_manager_callback_request+0xd0>
            {

                /* Update the activation count in the queued request.  */
                queued_message -> txm_module_callback_message_activation_count++;
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	605a      	str	r2, [r3, #4]

                /* Set the found flag to true.  */
                found =  TX_TRUE;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	61fb      	str	r3, [r7, #28]

                /* Get out of the loop.  */
                break;
 8009aba:	e010      	b.n	8009ade <_txm_module_manager_callback_request+0xf2>
            }

            /* Decrease the number of messages to examine.  */
            enqueued--;
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	623b      	str	r3, [r7, #32]

            /* Move the callback message to the next message.  */
            queued_message++;
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	3334      	adds	r3, #52	; 0x34
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for wrap?  */
            if (((ULONG *) queued_message) >= module_callback_queue -> tx_queue_end)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d302      	bcc.n	8009ad8 <_txm_module_manager_callback_request+0xec>
            {

                /* Yes, set the queued message to the beginning of the queue.  */
                queued_message =  (TXM_MODULE_CALLBACK_MESSAGE *) module_callback_queue -> tx_queue_start;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
        while (enqueued != 0)
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1a4      	bne.n	8009a28 <_txm_module_manager_callback_request+0x3c>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f383 8810 	msr	PRIMASK, r3
}
 8009ae8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Determine if we need to send the new callback request.  */
        if (found == TX_FALSE)
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <_txm_module_manager_callback_request+0x120>
        {

            /* Yes, send the message.  */
            status =  _tx_queue_send(module_callback_queue, (VOID *) callback_message, TX_NO_WAIT);
 8009af0:	2200      	movs	r2, #0
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7fb fa8f 	bl	8005018 <_tx_queue_send>
 8009afa:	6178      	str	r0, [r7, #20]

            /* Determine if an error was detected.  */
            if (status != TX_SUCCESS)
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d004      	beq.n	8009b0c <_txm_module_manager_callback_request+0x120>
            {

                /* Error, increment the error counter and return.  */
                _txm_module_manager_callback_error_count++;
 8009b02:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <_txm_module_manager_callback_request+0x150>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	4a0c      	ldr	r2, [pc, #48]	; (8009b3c <_txm_module_manager_callback_request+0x150>)
 8009b0a:	6013      	str	r3, [r2, #0]
            }
        }

        /* Increment the total number of callbacks.  */
        _txm_module_manager_callback_total_count++;
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <_txm_module_manager_callback_request+0x154>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3301      	adds	r3, #1
 8009b12:	4a0b      	ldr	r2, [pc, #44]	; (8009b40 <_txm_module_manager_callback_request+0x154>)
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	e00a      	b.n	8009b2e <_txm_module_manager_callback_request+0x142>
    {

        /* Module instance is not valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 8009b18:	4b08      	ldr	r3, [pc, #32]	; (8009b3c <_txm_module_manager_callback_request+0x150>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	4a07      	ldr	r2, [pc, #28]	; (8009b3c <_txm_module_manager_callback_request+0x150>)
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f383 8810 	msr	PRIMASK, r3
}
 8009b2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 8009b2e:	bf00      	nop
 8009b30:	3728      	adds	r7, #40	; 0x28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	51554555 	.word	0x51554555
 8009b3c:	2000f648 	.word	0x2000f648
 8009b40:	2000f644 	.word	0x2000f644

08009b44 <_txm_module_manager_event_flags_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_event_flags_notify_trampoline(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b096      	sub	sp, #88	; 0x58
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b50:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009b52:	b672      	cpsid	i
    return(primask_value);
 8009b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009b56:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) group_ptr -> tx_event_flags_group_module_instance;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8009b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d034      	beq.n	8009bce <_txm_module_manager_event_flags_notify_trampoline+0x8a>
 8009b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a20      	ldr	r2, [pc, #128]	; (8009bec <_txm_module_manager_event_flags_notify_trampoline+0xa8>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d12f      	bne.n	8009bce <_txm_module_manager_event_flags_notify_trampoline+0x8a>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 8009b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b70:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d12b      	bne.n	8009bce <_txm_module_manager_event_flags_notify_trampoline+0x8a>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 8009b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b78:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009b7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_EVENTS_SET_CALLBACK;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 8009b82:	2301      	movs	r3, #1
 8009b84:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) group_ptr -> tx_event_flags_group_set_module_notify;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) group_ptr;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bba:	f383 8810 	msr	PRIMASK, r3
}
 8009bbe:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 8009bc0:	f107 030c 	add.w	r3, r7, #12
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bc8:	f7ff ff10 	bl	80099ec <_txm_module_manager_callback_request>
 8009bcc:	e00a      	b.n	8009be4 <_txm_module_manager_event_flags_notify_trampoline+0xa0>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 8009bce:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <_txm_module_manager_event_flags_notify_trampoline+0xac>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a06      	ldr	r2, [pc, #24]	; (8009bf0 <_txm_module_manager_event_flags_notify_trampoline+0xac>)
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bda:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bde:	f383 8810 	msr	PRIMASK, r3
}
 8009be2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 8009be4:	bf00      	nop
 8009be6:	3758      	adds	r7, #88	; 0x58
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	4d4f4455 	.word	0x4d4f4455
 8009bf0:	2000f648 	.word	0x2000f648

08009bf4 <_txm_module_manager_external_memory_enable>:
/**************************************************************************/
UINT  _txm_module_manager_external_memory_enable(TXM_MODULE_INSTANCE *module_instance,
                                                 VOID *start_address,
                                                 ULONG length,
                                                 UINT attributes)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	; 0x28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	603b      	str	r3, [r7, #0]

ULONG   block_size;
ULONG   region_size;
ULONG   subregion_bits;
ULONG   address;
UINT    attributes_check = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
TXM_MODULE_PREAMBLE     *module_preamble;

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8009c06:	4b3c      	ldr	r3, [pc, #240]	; (8009cf8 <_txm_module_manager_external_memory_enable+0x104>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d001      	beq.n	8009c12 <_txm_module_manager_external_memory_enable+0x1e>
    {
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 8009c0e:	231d      	movs	r3, #29
 8009c10:	e06e      	b.n	8009cf0 <_txm_module_manager_external_memory_enable+0xfc>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <_txm_module_manager_external_memory_enable+0x28>
    {
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e069      	b.n	8009cf0 <_txm_module_manager_external_memory_enable+0xfc>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8009c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8009c20:	4836      	ldr	r0, [pc, #216]	; (8009cfc <_txm_module_manager_external_memory_enable+0x108>)
 8009c22:	f7f9 ff41 	bl	8003aa8 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a35      	ldr	r2, [pc, #212]	; (8009d00 <_txm_module_manager_external_memory_enable+0x10c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d004      	beq.n	8009c3a <_txm_module_manager_external_memory_enable+0x46>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009c30:	4832      	ldr	r0, [pc, #200]	; (8009cfc <_txm_module_manager_external_memory_enable+0x108>)
 8009c32:	f7fa f9f7 	bl	8004024 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8009c36:	2303      	movs	r3, #3
 8009c38:	e05a      	b.n	8009cf0 <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* Determine if the module instance is in the loaded state.  */
    if (module_instance -> txm_module_instance_state != TXM_MODULE_LOADED)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d004      	beq.n	8009c4c <_txm_module_manager_external_memory_enable+0x58>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009c42:	482e      	ldr	r0, [pc, #184]	; (8009cfc <_txm_module_manager_external_memory_enable+0x108>)
 8009c44:	f7fa f9ee 	bl	8004024 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 8009c48:	2310      	movs	r3, #16
 8009c4a:	e051      	b.n	8009cf0 <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* Check if preamble shared mem and mem protection property bits are set.  */
    module_preamble = module_instance -> txm_module_instance_preamble_ptr;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c50:	623b      	str	r3, [r7, #32]
    if((module_preamble -> txm_module_preamble_property_flags & (TXM_MODULE_MEMORY_PROTECTION | TXM_MODULE_SHARED_EXTERNAL_MEMORY_ACCESS))
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	f003 0306 	and.w	r3, r3, #6
 8009c5a:	2b06      	cmp	r3, #6
 8009c5c:	d004      	beq.n	8009c68 <_txm_module_manager_external_memory_enable+0x74>
         != (TXM_MODULE_MEMORY_PROTECTION | TXM_MODULE_SHARED_EXTERNAL_MEMORY_ACCESS))
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009c5e:	4827      	ldr	r0, [pc, #156]	; (8009cfc <_txm_module_manager_external_memory_enable+0x108>)
 8009c60:	f7fa f9e0 	bl	8004024 <_tx_mutex_put>

        /* Return error if bit not set.  */
        return(TXM_MODULE_INVALID_PROPERTIES);
 8009c64:	23f3      	movs	r3, #243	; 0xf3
 8009c66:	e043      	b.n	8009cf0 <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* Start address and length must adhere to Cortex-M MPU.
       The address must align with the block size.  */
    
    block_size = _txm_power_of_two_block_size(length);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fcf7 	bl	800965c <_txm_power_of_two_block_size>
 8009c6e:	61f8      	str	r0, [r7, #28]
    address = (ULONG) start_address;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	61bb      	str	r3, [r7, #24]
    if(address != (address & ~(block_size - 1)))
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	425a      	negs	r2, r3
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d004      	beq.n	8009c8c <_txm_module_manager_external_memory_enable+0x98>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009c82:	481e      	ldr	r0, [pc, #120]	; (8009cfc <_txm_module_manager_external_memory_enable+0x108>)
 8009c84:	f7fa f9ce 	bl	8004024 <_tx_mutex_put>
        
        /* Return alignment error.  */
        return(TXM_MODULE_ALIGNMENT_ERROR);
 8009c88:	23f0      	movs	r3, #240	; 0xf0
 8009c8a:	e031      	b.n	8009cf0 <_txm_module_manager_external_memory_enable+0xfc>
    }
    
    /* At this point, we have a valid address and block size.
       Set up MPU registers.  */
    module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MANAGER_SHARED_MPU_INDEX] = address | TXM_MODULE_MANAGER_SHARED_MPU_REGION | 0x10;
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f043 0214 	orr.w	r2, r3, #20
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    
    /* Calculate the region size.  */
    region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8009c98:	69f8      	ldr	r0, [r7, #28]
 8009c9a:	f008 fdf3 	bl	8012884 <_txm_module_manager_region_size_get>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]
    /* Calculate the subregion bits.  */
    subregion_bits = _txm_module_manager_calculate_srd_bits(block_size, length);
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	69f8      	ldr	r0, [r7, #28]
 8009ca8:	f008 fe6d 	bl	8012986 <_txm_module_manager_calculate_srd_bits>
 8009cac:	6138      	str	r0, [r7, #16]
    
    /* Check for valid attributes.  */
    if(attributes & TXM_MODULE_MANAGER_SHARED_ATTRIBUTE_WRITE)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <_txm_module_manager_external_memory_enable+0xca>
    {
        attributes_check = TXM_MODULE_MANAGER_ATTRIBUTE_WRITE_MPU_BIT;
 8009cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    /* Build register with attributes. */
    module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MANAGER_SHARED_MPU_INDEX+1] = region_size | subregion_bits | attributes_check | 0x12070001;
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <_txm_module_manager_external_memory_enable+0x110>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    /* Keep track of shared memory address and length in module instance.  */
    module_instance -> txm_module_instance_shared_memory_address = address;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    module_instance -> txm_module_instance_shared_memory_length = length;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    
    /* Recalculate MPU settings.  */
    _txm_module_manager_mm_register_setup(module_instance);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f008 fe8a 	bl	80129fc <_txm_module_manager_mm_register_setup>
    
    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 8009ce8:	4804      	ldr	r0, [pc, #16]	; (8009cfc <_txm_module_manager_external_memory_enable+0x108>)
 8009cea:	f7fa f99b 	bl	8004024 <_tx_mutex_put>
    
    /* Return success.  */
    return(TX_SUCCESS);
 8009cee:	2300      	movs	r3, #0

#endif
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3728      	adds	r7, #40	; 0x28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	2000f640 	.word	0x2000f640
 8009cfc:	2000f604 	.word	0x2000f604
 8009d00:	4d4f4455 	.word	0x4d4f4455
 8009d04:	12070001 	.word	0x12070001

08009d08 <_txm_module_manager_in_place_load>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_in_place_load(TXM_MODULE_INSTANCE *module_instance, CHAR *module_name, VOID *module_location)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08c      	sub	sp, #48	; 0x30
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
ULONG                   code_allocation_size_ignored;
UINT                    status;


    /* Pickup the module's information.  */
    module_preamble =  (TXM_MODULE_PREAMBLE *) module_location;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the basic module sizes.  */
    code_size =  module_preamble -> txm_module_preamble_code_size;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	623b      	str	r3, [r7, #32]

    /* Check for valid sizes.  */
    if (code_size == 0)
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <_txm_module_manager_in_place_load+0x20>
    {

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 8009d24:	23f2      	movs	r3, #242	; 0xf2
 8009d26:	e028      	b.n	8009d7a <_txm_module_manager_in_place_load+0x72>
    }

    /* Get the amount of the bytes we need to allocate for the module's code
       as well as the required alignment. Note that because this is an in-place
       load, we only want the code alignment so we can check it.  */
    status =  _txm_module_manager_util_code_allocation_size_and_alignment_get(module_preamble, &code_alignment, &code_allocation_size_ignored);
 8009d28:	f107 0210 	add.w	r2, r7, #16
 8009d2c:	f107 0314 	add.w	r3, r7, #20
 8009d30:	4619      	mov	r1, r3
 8009d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d34:	f00a fb6a 	bl	801440c <_txm_module_manager_util_code_allocation_size_and_alignment_get>
 8009d38:	61f8      	str	r0, [r7, #28]
    if (status != TX_SUCCESS)
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <_txm_module_manager_in_place_load+0x3c>
    {

        /* Math overflow error occurred.  */
        return(status);
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	e01a      	b.n	8009d7a <_txm_module_manager_in_place_load+0x72>
    }

    /* Since this is an in-place load, check the alignment of the module's instruction area (code).  */
    TXM_MODULE_MANAGER_CHECK_CODE_ALIGNMENT(module_location, code_alignment)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	61bb      	str	r3, [r7, #24]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <_txm_module_manager_in_place_load+0x5a>
 8009d58:	480a      	ldr	r0, [pc, #40]	; (8009d84 <_txm_module_manager_in_place_load+0x7c>)
 8009d5a:	f7fa f963 	bl	8004024 <_tx_mutex_put>
 8009d5e:	23f0      	movs	r3, #240	; 0xf0
 8009d60:	e00b      	b.n	8009d7a <_txm_module_manager_in_place_load+0x72>

    /* Now load the module in-place.  */
    status =  _txm_module_manager_internal_load(module_instance, module_name, module_location,
 8009d62:	2300      	movs	r3, #0
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	2300      	movs	r3, #0
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	68b9      	ldr	r1, [r7, #8]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f85f 	bl	8009e34 <_txm_module_manager_internal_load>
 8009d76:	61f8      	str	r0, [r7, #28]
                                                code_size, TX_NULL, 0);

    /* Return status.  */
    return(status);
 8009d78:	69fb      	ldr	r3, [r7, #28]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3728      	adds	r7, #40	; 0x28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000f604 	.word	0x2000f604

08009d88 <_txm_module_manager_initialize>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_initialize(VOID *module_memory_start, ULONG module_memory_size)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009d92:	f3ef 8305 	mrs	r3, IPSR
 8009d96:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8009d98:	68fa      	ldr	r2, [r7, #12]

    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <_txm_module_manager_initialize+0x80>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00b      	beq.n	8009dbc <_txm_module_manager_initialize+0x34>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009da4:	f3ef 8305 	mrs	r3, IPSR
 8009da8:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8009daa:	68ba      	ldr	r2, [r7, #8]
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009dac:	4b16      	ldr	r3, [pc, #88]	; (8009e08 <_txm_module_manager_initialize+0x80>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009db6:	d201      	bcs.n	8009dbc <_txm_module_manager_initialize+0x34>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 8009db8:	2313      	movs	r3, #19
 8009dba:	e020      	b.n	8009dfe <_txm_module_manager_initialize+0x76>
        }
    }

    /* Setup the module properties supported by this module manager.  */
    _txm_module_manager_properties_supported =  TXM_MODULE_MANAGER_SUPPORTED_OPTIONS;
 8009dbc:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <_txm_module_manager_initialize+0x84>)
 8009dbe:	2207      	movs	r2, #7
 8009dc0:	601a      	str	r2, [r3, #0]

    /* Setup the module properties required by this module manager.   */
    _txm_module_manager_properties_required =   TXM_MODULE_MANAGER_REQUIRED_OPTIONS;
 8009dc2:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <_txm_module_manager_initialize+0x88>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]

    /* Clear the module manager ready flag.  */
    _txm_module_manager_ready =  TX_FALSE;
 8009dc8:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <_txm_module_manager_initialize+0x8c>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]

    /* Initialize the empty module list.  */
    _txm_module_manager_loaded_list_ptr =  TX_NULL;
 8009dce:	4b12      	ldr	r3, [pc, #72]	; (8009e18 <_txm_module_manager_initialize+0x90>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]

    /* Clear the number of loaded modules.  */
    _txm_module_manger_loaded_count =  0;
 8009dd4:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <_txm_module_manager_initialize+0x94>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]

    /* Create the module manager protection mutex.  */
    _tx_mutex_create(&_txm_module_manager_mutex, "Module Manager Protection Mutex", TX_NO_INHERIT);
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4910      	ldr	r1, [pc, #64]	; (8009e20 <_txm_module_manager_initialize+0x98>)
 8009dde:	4811      	ldr	r0, [pc, #68]	; (8009e24 <_txm_module_manager_initialize+0x9c>)
 8009de0:	f7f9 fd68 	bl	80038b4 <_tx_mutex_create>

    /* Create a byte pool for allocating RAM areas for modules.  */
    _tx_byte_pool_create(&_txm_module_manager_byte_pool, "Module Manager Byte Pool", module_memory_start, module_memory_size);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	490f      	ldr	r1, [pc, #60]	; (8009e28 <_txm_module_manager_initialize+0xa0>)
 8009dea:	4810      	ldr	r0, [pc, #64]	; (8009e2c <_txm_module_manager_initialize+0xa4>)
 8009dec:	f7f8 fb74 	bl	80024d8 <_tx_byte_pool_create>

    /* Indicate the module manager object pool has not been created.  */
    _txm_module_manager_object_pool_created =  TX_FALSE;
 8009df0:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <_txm_module_manager_initialize+0xa8>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]

    /* Mark the module manager as ready!  */
    _txm_module_manager_ready =  TX_TRUE;
 8009df6:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <_txm_module_manager_initialize+0x8c>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000018 	.word	0x20000018
 8009e0c:	2000f590 	.word	0x2000f590
 8009e10:	2000f594 	.word	0x2000f594
 8009e14:	2000f640 	.word	0x2000f640
 8009e18:	2000f638 	.word	0x2000f638
 8009e1c:	2000f63c 	.word	0x2000f63c
 8009e20:	08015f1c 	.word	0x08015f1c
 8009e24:	2000f604 	.word	0x2000f604
 8009e28:	08015f3c 	.word	0x08015f3c
 8009e2c:	2000f598 	.word	0x2000f598
 8009e30:	2000f600 	.word	0x2000f600

08009e34 <_txm_module_manager_internal_load>:
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_internal_load(TXM_MODULE_INSTANCE *module_instance, CHAR *module_name, VOID *module_location,
                                        ULONG code_size, VOID *code_allocation_ptr, ULONG code_allocation_size)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b09e      	sub	sp, #120	; 0x78
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009e42:	f3ef 8305 	mrs	r3, IPSR
 8009e46:	637b      	str	r3, [r7, #52]	; 0x34
    return(ipsr_value);
 8009e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
CHAR                    *memory_ptr;
UINT                    status;


    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8009e4a:	4b7c      	ldr	r3, [pc, #496]	; (800a03c <_txm_module_manager_internal_load+0x208>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <_txm_module_manager_internal_load+0x38>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009e54:	f3ef 8305 	mrs	r3, IPSR
 8009e58:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8009e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009e5c:	4b77      	ldr	r3, [pc, #476]	; (800a03c <_txm_module_manager_internal_load+0x208>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009e66:	d201      	bcs.n	8009e6c <_txm_module_manager_internal_load+0x38>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 8009e68:	2313      	movs	r3, #19
 8009e6a:	e214      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
        }
    }

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8009e6c:	4b74      	ldr	r3, [pc, #464]	; (800a040 <_txm_module_manager_internal_load+0x20c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d001      	beq.n	8009e78 <_txm_module_manager_internal_load+0x44>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 8009e74:	231d      	movs	r3, #29
 8009e76:	e20e      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <_txm_module_manager_internal_load+0x4e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e209      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8009e82:	f04f 31ff 	mov.w	r1, #4294967295
 8009e86:	486f      	ldr	r0, [pc, #444]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 8009e88:	f7f9 fe0e 	bl	8003aa8 <_tx_mutex_get>

    /* Determine if the module is already valid.  */
    if (module_instance -> txm_module_instance_id == TXM_MODULE_ID)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a6d      	ldr	r2, [pc, #436]	; (800a048 <_txm_module_manager_internal_load+0x214>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d104      	bne.n	8009ea0 <_txm_module_manager_internal_load+0x6c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009e96:	486b      	ldr	r0, [pc, #428]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 8009e98:	f7fa f8c4 	bl	8004024 <_tx_mutex_put>

        /* Module already loaded.  */
        return(TXM_MODULE_ALREADY_LOADED);
 8009e9c:	23f1      	movs	r3, #241	; 0xf1
 8009e9e:	e1fa      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Pickup the module's information.  */
    module_preamble = (TXM_MODULE_PREAMBLE *) module_location;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Check to make sure there is a valid module to load.  */
    if (module_preamble -> txm_module_preamble_id != TXM_MODULE_ID)
 8009ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a67      	ldr	r2, [pc, #412]	; (800a048 <_txm_module_manager_internal_load+0x214>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d004      	beq.n	8009eb8 <_txm_module_manager_internal_load+0x84>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009eae:	4865      	ldr	r0, [pc, #404]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 8009eb0:	f7fa f8b8 	bl	8004024 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 8009eb4:	23f2      	movs	r3, #242	; 0xf2
 8009eb6:	e1ee      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Check the properties of this module.  */
    module_properties =  module_preamble -> txm_module_preamble_property_flags & TXM_MODULE_OPTIONS_MASK;
 8009eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (/* Ensure the requested properties are supported.  */
        ((module_properties & _txm_module_manager_properties_supported) != module_properties) ||
 8009ec0:	4b62      	ldr	r3, [pc, #392]	; (800a04c <_txm_module_manager_internal_load+0x218>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ec6:	4013      	ands	r3, r2
    if (/* Ensure the requested properties are supported.  */
 8009ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d111      	bne.n	8009ef2 <_txm_module_manager_internal_load+0xbe>
        /* Ensure the required properties are there.  */
        ((_txm_module_manager_properties_required & module_properties) != _txm_module_manager_properties_required) ||
 8009ece:	4b60      	ldr	r3, [pc, #384]	; (800a050 <_txm_module_manager_internal_load+0x21c>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	4b5e      	ldr	r3, [pc, #376]	; (800a050 <_txm_module_manager_internal_load+0x21c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
        ((module_properties & _txm_module_manager_properties_supported) != module_properties) ||
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d109      	bne.n	8009ef2 <_txm_module_manager_internal_load+0xbe>
        /* If memory protection is enabled, then so must user mode.  */
        ((module_properties & TXM_MODULE_MEMORY_PROTECTION) && !(module_properties & TXM_MODULE_USER_MODE))
 8009ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ee0:	f003 0302 	and.w	r3, r3, #2
        ((_txm_module_manager_properties_required & module_properties) != _txm_module_manager_properties_required) ||
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d009      	beq.n	8009efc <_txm_module_manager_internal_load+0xc8>
        ((module_properties & TXM_MODULE_MEMORY_PROTECTION) && !(module_properties & TXM_MODULE_USER_MODE))
 8009ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <_txm_module_manager_internal_load+0xc8>
        )
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009ef2:	4854      	ldr	r0, [pc, #336]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 8009ef4:	f7fa f896 	bl	8004024 <_tx_mutex_put>

        /* Invalid properties. Return error.  */
        return(TXM_MODULE_INVALID_PROPERTIES);
 8009ef8:	23f3      	movs	r3, #243	; 0xf3
 8009efa:	e1cc      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Check for valid module entry offsets.  */
    if ((module_preamble -> txm_module_preamble_shell_entry_function == 0) ||
 8009efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <_txm_module_manager_internal_load+0xd8>
        (module_preamble -> txm_module_preamble_start_function == 0))
 8009f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f06:	69db      	ldr	r3, [r3, #28]
    if ((module_preamble -> txm_module_preamble_shell_entry_function == 0) ||
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <_txm_module_manager_internal_load+0xe2>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009f0c:	484d      	ldr	r0, [pc, #308]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 8009f0e:	f7fa f889 	bl	8004024 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 8009f12:	23f2      	movs	r3, #242	; 0xf2
 8009f14:	e1bf      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Check for valid sizes.  */
    if ((module_preamble -> txm_module_preamble_code_size == 0) ||
 8009f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_data_size == 0) ||
 8009f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if ((module_preamble -> txm_module_preamble_code_size == 0) ||
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_start_stop_stack_size == 0) ||
 8009f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        (module_preamble -> txm_module_preamble_data_size == 0) ||
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_callback_stack_size == 0))
 8009f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        (module_preamble -> txm_module_preamble_start_stop_stack_size == 0) ||
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <_txm_module_manager_internal_load+0x10c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8009f36:	4843      	ldr	r0, [pc, #268]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 8009f38:	f7fa f874 	bl	8004024 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 8009f3c:	23f2      	movs	r3, #242	; 0xf2
 8009f3e:	e1aa      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
    }

    /* Initialize module control block to all zeros.  */
    TX_MEMSET(module_instance, 0, sizeof(TXM_MODULE_INSTANCE));
 8009f40:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8009f44:	2100      	movs	r1, #0
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f00b f8d4 	bl	80150f4 <memset>

    /* Pickup the basic module sizes.  */
    data_size =              module_preamble -> txm_module_preamble_data_size;
 8009f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f50:	61fb      	str	r3, [r7, #28]
    start_stop_stack_size =  module_preamble -> txm_module_preamble_start_stop_stack_size;
 8009f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	657b      	str	r3, [r7, #84]	; 0x54
    callback_stack_size =    module_preamble -> txm_module_preamble_callback_stack_size;
 8009f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	653b      	str	r3, [r7, #80]	; 0x50
    /* Adjust the size of the module elements to be aligned to the default alignment. We do this
       so that when we partition the allocated memory, we can simply place these regions right beside
       each other without having to align their pointers. Note this only works when they all have
       the same alignment.  */

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, TXM_MODULE_DATA_ALIGNMENT, data_size);
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	f113 0f05 	cmn.w	r3, #5
 8009f64:	d901      	bls.n	8009f6a <_txm_module_manager_internal_load+0x136>
 8009f66:	23f8      	movs	r3, #248	; 0xf8
 8009f68:	e195      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	61fb      	str	r3, [r7, #28]
    data_size =              ((data_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	f023 0303 	bic.w	r3, r3, #3
 8009f78:	61fb      	str	r3, [r7, #28]

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(start_stop_stack_size, TXM_MODULE_DATA_ALIGNMENT, start_stop_stack_size);
 8009f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f7c:	f113 0f05 	cmn.w	r3, #5
 8009f80:	d901      	bls.n	8009f86 <_txm_module_manager_internal_load+0x152>
 8009f82:	23f8      	movs	r3, #248	; 0xf8
 8009f84:	e187      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 8009f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f88:	3304      	adds	r3, #4
 8009f8a:	657b      	str	r3, [r7, #84]	; 0x54
    start_stop_stack_size =  ((start_stop_stack_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8009f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	f023 0303 	bic.w	r3, r3, #3
 8009f94:	657b      	str	r3, [r7, #84]	; 0x54

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(callback_stack_size, TXM_MODULE_DATA_ALIGNMENT, callback_stack_size);
 8009f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f98:	f113 0f05 	cmn.w	r3, #5
 8009f9c:	d901      	bls.n	8009fa2 <_txm_module_manager_internal_load+0x16e>
 8009f9e:	23f8      	movs	r3, #248	; 0xf8
 8009fa0:	e179      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 8009fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	653b      	str	r3, [r7, #80]	; 0x50
    callback_stack_size =    ((callback_stack_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8009fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009faa:	3b01      	subs	r3, #1
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50

    /* Update the data size to account for the default thread stacks.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, start_stop_stack_size, data_size);
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d901      	bls.n	8009fc0 <_txm_module_manager_internal_load+0x18c>
 8009fbc:	23f8      	movs	r3, #248	; 0xf8
 8009fbe:	e16a      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc4:	4413      	add	r3, r2
 8009fc6:	61fb      	str	r3, [r7, #28]
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, callback_stack_size, data_size);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	43db      	mvns	r3, r3
 8009fcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d901      	bls.n	8009fd6 <_txm_module_manager_internal_load+0x1a2>
 8009fd2:	23f8      	movs	r3, #248	; 0xf8
 8009fd4:	e15f      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fda:	4413      	add	r3, r2
 8009fdc:	61fb      	str	r3, [r7, #28]

    /* Setup the default code and data alignments.  */
    data_alignment =  (ULONG) TXM_MODULE_DATA_ALIGNMENT;
 8009fde:	2304      	movs	r3, #4
 8009fe0:	61bb      	str	r3, [r7, #24]

    /* Get the port-specific alignment for the data size. Note we only want data
       so we pass values of 1 for code (to avoid any possible div by 0 errors).  */
    code_size_ignored = 1;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24
    code_alignment_ignored = 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	623b      	str	r3, [r7, #32]
    TXM_MODULE_MANAGER_ALIGNMENT_ADJUST(module_preamble, code_size_ignored, code_alignment_ignored, data_size, data_alignment)
 8009fea:	f107 001c 	add.w	r0, r7, #28
 8009fee:	f107 0220 	add.w	r2, r7, #32
 8009ff2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009ff6:	f107 0318 	add.w	r3, r7, #24
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a000:	f7ff fb60 	bl	80096c4 <_txm_module_manager_alignment_adjust>
                            ...
                            End of Module's Data Area
    Highest Address:    */

    /* Add an extra alignment increment so we can align the pointer after allocation.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, data_alignment, data_allocation_size);
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	43da      	mvns	r2, r3
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d201      	bcs.n	800a012 <_txm_module_manager_internal_load+0x1de>
 800a00e:	23f8      	movs	r3, #248	; 0xf8
 800a010:	e141      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	4413      	add	r3, r2
 800a018:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Allocate memory for the module.  */
    status =  _tx_byte_allocate(&_txm_module_manager_byte_pool, (VOID **) &memory_ptr, data_allocation_size, TX_NO_WAIT);
 800a01a:	f107 0114 	add.w	r1, r7, #20
 800a01e:	2300      	movs	r3, #0
 800a020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a022:	480c      	ldr	r0, [pc, #48]	; (800a054 <_txm_module_manager_internal_load+0x220>)
 800a024:	f7f8 f91e 	bl	8002264 <_tx_byte_allocate>
 800a028:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Determine if the module memory allocation was successful.  */
    if (status)
 800a02a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d013      	beq.n	800a058 <_txm_module_manager_internal_load+0x224>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800a030:	4804      	ldr	r0, [pc, #16]	; (800a044 <_txm_module_manager_internal_load+0x210>)
 800a032:	f7f9 fff7 	bl	8004024 <_tx_mutex_put>

        /* No memory, return an error.  */
        return(TX_NO_MEMORY);
 800a036:	2310      	movs	r3, #16
 800a038:	e12d      	b.n	800a296 <_txm_module_manager_internal_load+0x462>
 800a03a:	bf00      	nop
 800a03c:	20000018 	.word	0x20000018
 800a040:	2000f640 	.word	0x2000f640
 800a044:	2000f604 	.word	0x2000f604
 800a048:	4d4f4455 	.word	0x4d4f4455
 800a04c:	2000f590 	.word	0x2000f590
 800a050:	2000f594 	.word	0x2000f594
 800a054:	2000f598 	.word	0x2000f598
    }

    /* Clear the allocated memory.  */
    TX_MEMSET(memory_ptr, ((UCHAR) 0), data_allocation_size);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f00b f848 	bl	80150f4 <memset>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a064:	f3ef 8310 	mrs	r3, PRIMASK
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a06a:	b672      	cpsid	i
    return(primask_value);
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800a06e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Setup the module instance structure.  */
    module_instance -> txm_module_instance_id = TXM_MODULE_ID;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a8b      	ldr	r2, [pc, #556]	; (800a2a0 <_txm_module_manager_internal_load+0x46c>)
 800a074:	601a      	str	r2, [r3, #0]

    /* Save the module name.  */
    module_instance -> txm_module_instance_name =  module_name;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	605a      	str	r2, [r3, #4]

    /* Save the module properties.  */
    module_instance -> txm_module_instance_property_flags =  module_preamble -> txm_module_preamble_property_flags;
 800a07c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a07e:	695a      	ldr	r2, [r3, #20]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	60da      	str	r2, [r3, #12]

    /* Set the module data memory allocation. This is the address released
       when the module is unloaded.  */
    module_instance -> txm_module_instance_data_allocation_ptr =  (VOID *) memory_ptr;
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Save the data allocation size.  */
    module_instance -> txm_module_instance_data_allocation_size =   data_allocation_size;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a08e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the actual start of the data area. This needs to be adjusted based on the alignment.  */
    data_start =  (ALIGN_TYPE) memory_ptr;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	643b      	str	r3, [r7, #64]	; 0x40
    data_start =  (data_start + (((ALIGN_TYPE)data_alignment) - 1)) & ~(((ALIGN_TYPE)data_alignment) - 1);
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a098:	4413      	add	r3, r2
 800a09a:	1e5a      	subs	r2, r3, #1
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	425b      	negs	r3, r3
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	643b      	str	r3, [r7, #64]	; 0x40
    memory_ptr =  (CHAR *) data_start;
 800a0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a6:	617b      	str	r3, [r7, #20]
    module_instance -> txm_module_instance_data_start =  (VOID *) memory_ptr;
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Compute the end of the data memory allocation.  */
    module_instance -> txm_module_instance_data_end =  (VOID *) (memory_ptr + (data_size - 1));
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the size of the data area.  */
    module_instance -> txm_module_instance_data_size =  data_size;
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Set the module code memory allocation. This is the address released
       when the module is unloaded.  */
    module_instance -> txm_module_instance_code_allocation_ptr =  (VOID *) code_allocation_ptr;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0c4:	611a      	str	r2, [r3, #16]

    /* Save the code allocation size.  */
    module_instance -> txm_module_instance_code_allocation_size =   code_allocation_size;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a0ca:	615a      	str	r2, [r3, #20]

    /* Setup the code pointers.  Since the code was loaded in-place, this is effectively just the values supplied in the API call.  */
    module_instance -> txm_module_instance_code_start =     (VOID *) module_location;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	619a      	str	r2, [r3, #24]
    module_instance -> txm_module_instance_code_end =       (VOID *) (((CHAR *) module_location) + (code_size - 1));
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	441a      	add	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	61da      	str	r2, [r3, #28]

    /* Setup the code size.  */
    module_instance -> txm_module_instance_code_size =      code_size;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	621a      	str	r2, [r3, #32]

    /* Save the module's total memory usage.  */
    module_instance -> txm_module_instance_total_ram_usage =  data_allocation_size + code_allocation_size;
 800a0e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a0e8:	441a      	add	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the module state to started.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_LOADED;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	609a      	str	r2, [r3, #8]

    /* Save the preamble pointer.  */
    module_instance -> txm_module_instance_preamble_ptr =  module_preamble;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Save the module application ID in the module instance.  */
    module_instance -> txm_module_instance_application_module_id =  module_preamble -> txm_module_preamble_application_module_id;
 800a0fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470

    /* Setup the module's start/stop thread stack area.  */
    module_instance -> txm_module_instance_start_stop_stack_start_address =  (VOID *) (memory_ptr);
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	641a      	str	r2, [r3, #64]	; 0x40
    module_instance -> txm_module_instance_start_stop_stack_size =           start_stop_stack_size;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a10e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
    module_instance -> txm_module_instance_start_stop_stack_end_address =    (VOID *) (memory_ptr + (start_stop_stack_size - 1));
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a116:	3b01      	subs	r3, #1
 800a118:	441a      	add	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Move the memory pointer forward.  */
    memory_ptr =  memory_ptr + start_stop_stack_size;
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a122:	4413      	add	r3, r2
 800a124:	617b      	str	r3, [r7, #20]

    /* Save the start/stop thread priority.  */
    module_instance -> txm_module_instance_start_stop_priority =     module_preamble -> txm_module_preamble_start_stop_priority;
 800a126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

    /* Setup the module's callback thread stack area.  */
    module_instance -> txm_module_instance_callback_stack_start_address =  (VOID *) (memory_ptr);
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	649a      	str	r2, [r3, #72]	; 0x48
    module_instance -> txm_module_instance_callback_stack_size =           callback_stack_size;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a13a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
    module_instance -> txm_module_instance_callback_stack_end_address =    (VOID *) (memory_ptr + (callback_stack_size - 1));
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a142:	3b01      	subs	r3, #1
 800a144:	441a      	add	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Move the memory pointer forward.  */
    memory_ptr =  memory_ptr + callback_stack_size;
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a14e:	4413      	add	r3, r2
 800a150:	617b      	str	r3, [r7, #20]

    /* Save the callback thread priority.  */
    module_instance -> txm_module_instance_callback_priority =  module_preamble -> txm_module_preamble_callback_priority;
 800a152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

    /* Setup the start of the module data section.  */
    module_instance -> txm_module_instance_module_data_base_address =  (VOID *) (memory_ptr);
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	635a      	str	r2, [r3, #52]	; 0x34

    /* Calculate the function adjustments based on the specific implementation of the module manager/module.  */
    TXM_MODULE_MANAGER_CALCULATE_ADJUSTMENTS(module_preamble -> txm_module_preamble_property_flags, shell_function_adjust, start_function_adjust, stop_function_adjust, callback_function_adjust)
 800a162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d108      	bne.n	800a180 <_txm_module_manager_internal_load+0x34c>
 800a16e:	2318      	movs	r3, #24
 800a170:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a172:	231c      	movs	r3, #28
 800a174:	66bb      	str	r3, [r7, #104]	; 0x68
 800a176:	2320      	movs	r3, #32
 800a178:	667b      	str	r3, [r7, #100]	; 0x64
 800a17a:	232c      	movs	r3, #44	; 0x2c
 800a17c:	663b      	str	r3, [r7, #96]	; 0x60
 800a17e:	e017      	b.n	800a1b0 <_txm_module_manager_internal_load+0x37c>
 800a180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a18c:	d108      	bne.n	800a1a0 <_txm_module_manager_internal_load+0x36c>
 800a18e:	2300      	movs	r3, #0
 800a190:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a192:	2300      	movs	r3, #0
 800a194:	66bb      	str	r3, [r7, #104]	; 0x68
 800a196:	2300      	movs	r3, #0
 800a198:	667b      	str	r3, [r7, #100]	; 0x64
 800a19a:	2300      	movs	r3, #0
 800a19c:	663b      	str	r3, [r7, #96]	; 0x60
 800a19e:	e007      	b.n	800a1b0 <_txm_module_manager_internal_load+0x37c>
 800a1a0:	2318      	movs	r3, #24
 800a1a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1a4:	231c      	movs	r3, #28
 800a1a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1a8:	2320      	movs	r3, #32
 800a1aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a1ac:	232c      	movs	r3, #44	; 0x2c
 800a1ae:	663b      	str	r3, [r7, #96]	; 0x60

    /* Build actual addresses based on load...  Setup all the function pointers. Any adjustments needed to shell entry, start function, and callback function are defined in the
       module preamble. */
    module_instance -> txm_module_instance_shell_entry_function  =          (VOID (*)(TX_THREAD *, TXM_MODULE_INSTANCE *)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	4619      	mov	r1, r3
                                                                                                                                      (module_preamble -> txm_module_preamble_shell_entry_function) +
 800a1b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b8:	699a      	ldr	r2, [r3, #24]
 800a1ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1bc:	4413      	add	r3, r2
    module_instance -> txm_module_instance_shell_entry_function  =          (VOID (*)(TX_THREAD *, TXM_MODULE_INSTANCE *)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1be:	18ca      	adds	r2, r1, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                                                                      (shell_function_adjust));
    module_instance -> txm_module_instance_start_thread_entry =             (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_start_function) +
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1cc:	69da      	ldr	r2, [r3, #28]
 800a1ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1d0:	4413      	add	r3, r2
    module_instance -> txm_module_instance_start_thread_entry =             (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1d2:	18ca      	adds	r2, r1, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	659a      	str	r2, [r3, #88]	; 0x58
                                                                                                                                      (start_function_adjust));
    module_instance -> txm_module_instance_callback_request_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_callback_function) +
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1e4:	4413      	add	r3, r2
    module_instance -> txm_module_instance_callback_request_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1e6:	18ca      	adds	r2, r1, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	661a      	str	r2, [r3, #96]	; 0x60
                                                                                                                                      (callback_function_adjust));
    /* Determine if there is a stop function for this module.  */
    if (module_preamble -> txm_module_preamble_stop_function)
 800a1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00a      	beq.n	800a20a <_txm_module_manager_internal_load+0x3d6>
    {

        /* Yes, there is a stop function, build the address.  */
        module_instance -> txm_module_instance_stop_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_stop_function) +
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fc:	6a1a      	ldr	r2, [r3, #32]
 800a1fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a200:	4413      	add	r3, r2
        module_instance -> txm_module_instance_stop_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) +
 800a202:	18ca      	adds	r2, r1, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	65da      	str	r2, [r3, #92]	; 0x5c
 800a208:	e002      	b.n	800a210 <_txm_module_manager_internal_load+0x3dc>
    }
    else
    {

        /* No, there is no stop function. Just set the pointer to NULL.  */
        module_instance -> txm_module_instance_stop_thread_entry =  TX_NULL;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Load the module control block with port-specific information. */
    TXM_MODULE_MANAGER_MODULE_SETUP(module_instance);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <_txm_module_manager_internal_load+0x3fa>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <_txm_module_manager_internal_load+0x3fa>
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f008 fbe7 	bl	80129fc <_txm_module_manager_mm_register_setup>

    /* Now add the module to the linked list of created modules.  */
    if (_txm_module_manger_loaded_count++ == 0)
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <_txm_module_manager_internal_load+0x470>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	491b      	ldr	r1, [pc, #108]	; (800a2a4 <_txm_module_manager_internal_load+0x470>)
 800a236:	600a      	str	r2, [r1, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <_txm_module_manager_internal_load+0x420>
    {

        /* The loaded module list is empty.  Add module to empty list.  */
        _txm_module_manager_loaded_list_ptr =                     module_instance;
 800a23c:	4a1a      	ldr	r2, [pc, #104]	; (800a2a8 <_txm_module_manager_internal_load+0x474>)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6013      	str	r3, [r2, #0]
        module_instance -> txm_module_instance_loaded_next =      module_instance;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
        module_instance -> txm_module_instance_loaded_previous =  module_instance;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 800a252:	e016      	b.n	800a282 <_txm_module_manager_internal_load+0x44e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_module =      _txm_module_manager_loaded_list_ptr;
 800a254:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <_txm_module_manager_internal_load+0x474>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
        previous_module =  next_module -> txm_module_instance_loaded_previous;
 800a25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800a260:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Place the new module in the list.  */
        next_module -> txm_module_instance_loaded_previous =  module_instance;
 800a262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
        previous_module -> txm_module_instance_loaded_next =  module_instance;
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

        /* Setup this module's created links.  */
        module_instance -> txm_module_instance_loaded_previous =  previous_module;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a276:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
        module_instance -> txm_module_instance_loaded_next =      next_module;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a27e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800a282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a284:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	f383 8810 	msr	PRIMASK, r3
}
 800a28c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 800a28e:	4807      	ldr	r0, [pc, #28]	; (800a2ac <_txm_module_manager_internal_load+0x478>)
 800a290:	f7f9 fec8 	bl	8004024 <_tx_mutex_put>

    /* Return success.  */
    return(TX_SUCCESS);
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3770      	adds	r7, #112	; 0x70
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	4d4f4455 	.word	0x4d4f4455
 800a2a4:	2000f63c 	.word	0x2000f63c
 800a2a8:	2000f638 	.word	0x2000f638
 800a2ac:	2000f604 	.word	0x2000f604

0800a2b0 <_txm_module_manager_tx_block_allocate_dispatch>:
    TX_BLOCK_POOL *pool_ptr, -> param_0
    VOID **block_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d061      	beq.n	800a38e <_txm_module_manager_tx_block_allocate_dispatch+0xde>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a2d0:	d81f      	bhi.n	800a312 <_txm_module_manager_tx_block_allocate_dispatch+0x62>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d307      	bcc.n	800a2ee <_txm_module_manager_tx_block_allocate_dispatch+0x3e>
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d923      	bls.n	800a336 <_txm_module_manager_tx_block_allocate_dispatch+0x86>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d30b      	bcc.n	800a312 <_txm_module_manager_tx_block_allocate_dispatch+0x62>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a30c:	440b      	add	r3, r1
 800a30e:	429a      	cmp	r2, r3
 800a310:	d911      	bls.n	800a336 <_txm_module_manager_tx_block_allocate_dispatch+0x86>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a318:	d812      	bhi.n	800a340 <_txm_module_manager_tx_block_allocate_dispatch+0x90>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	461a      	mov	r2, r3
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	4293      	cmp	r3, r2
 800a324:	d30c      	bcc.n	800a340 <_txm_module_manager_tx_block_allocate_dispatch+0x90>
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	3301      	adds	r3, #1
 800a332:	429a      	cmp	r2, r3
 800a334:	d804      	bhi.n	800a340 <_txm_module_manager_tx_block_allocate_dispatch+0x90>
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <_txm_module_manager_tx_block_allocate_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 800a33c:	23f4      	movs	r3, #244	; 0xf4
 800a33e:	e02e      	b.n	800a39e <_txm_module_manager_tx_block_allocate_dispatch+0xee>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(VOID *)))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f113 0f05 	cmn.w	r3, #5
 800a346:	d81d      	bhi.n	800a384 <_txm_module_manager_tx_block_allocate_dispatch+0xd4>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	461a      	mov	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4293      	cmp	r3, r2
 800a352:	d306      	bcc.n	800a362 <_txm_module_manager_tx_block_allocate_dispatch+0xb2>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	3301      	adds	r3, #1
 800a35e:	429a      	cmp	r2, r3
 800a360:	d915      	bls.n	800a38e <_txm_module_manager_tx_block_allocate_dispatch+0xde>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d30a      	bcc.n	800a384 <_txm_module_manager_tx_block_allocate_dispatch+0xd4>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	1d1a      	adds	r2, r3, #4
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a37e:	440b      	add	r3, r1
 800a380:	429a      	cmp	r2, r3
 800a382:	d904      	bls.n	800a38e <_txm_module_manager_tx_block_allocate_dispatch+0xde>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <_txm_module_manager_tx_block_allocate_dispatch+0xde>
            return(TXM_MODULE_INVALID_MEMORY);
 800a38a:	23f4      	movs	r3, #244	; 0xf4
 800a38c:	e007      	b.n	800a39e <_txm_module_manager_tx_block_allocate_dispatch+0xee>
    }

    return_value = (ALIGN_TYPE) _txe_block_allocate(
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fd fa5b 	bl	8007850 <_txe_block_allocate>
 800a39a:	6178      	str	r0, [r7, #20]
        (TX_BLOCK_POOL *) param_0,
        (VOID **) param_1,
        (ULONG) param_2
    );
    return(return_value);
 800a39c:	697b      	ldr	r3, [r7, #20]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <_txm_module_manager_tx_block_pool_create_dispatch>:
    VOID *pool_start, -> extra_parameters[1]
    ULONG pool_size, -> extra_parameters[2]
    UINT pool_control_block_size -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800a3a8:	b5b0      	push	{r4, r5, r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af02      	add	r7, sp, #8
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
 800a3b4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 80bf 	beq.w	800a542 <_txm_module_manager_tx_block_pool_create_dispatch+0x19a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800a3c4:	4b6c      	ldr	r3, [pc, #432]	; (800a578 <_txm_module_manager_tx_block_pool_create_dispatch+0x1d0>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d119      	bne.n	800a400 <_txm_module_manager_tx_block_pool_create_dispatch+0x58>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a3d2:	d815      	bhi.n	800a400 <_txm_module_manager_tx_block_pool_create_dispatch+0x58>
 800a3d4:	4b69      	ldr	r3, [pc, #420]	; (800a57c <_txm_module_manager_tx_block_pool_create_dispatch+0x1d4>)
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	3310      	adds	r3, #16
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d30f      	bcc.n	800a400 <_txm_module_manager_tx_block_pool_create_dispatch+0x58>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	3330      	adds	r3, #48	; 0x30
 800a3e4:	4a65      	ldr	r2, [pc, #404]	; (800a57c <_txm_module_manager_tx_block_pool_create_dispatch+0x1d4>)
 800a3e6:	6991      	ldr	r1, [r2, #24]
 800a3e8:	4a64      	ldr	r2, [pc, #400]	; (800a57c <_txm_module_manager_tx_block_pool_create_dispatch+0x1d4>)
 800a3ea:	69d2      	ldr	r2, [r2, #28]
 800a3ec:	440a      	add	r2, r1
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d806      	bhi.n	800a400 <_txm_module_manager_tx_block_pool_create_dispatch+0x58>
 800a3f2:	2130      	movs	r1, #48	; 0x30
 800a3f4:	68b8      	ldr	r0, [r7, #8]
 800a3f6:	f009 ffbf 	bl	8014378 <_txm_module_manager_object_size_check>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <_txm_module_manager_tx_block_pool_create_dispatch+0x62>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <_txm_module_manager_tx_block_pool_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800a406:	23f4      	movs	r3, #244	; 0xf4
 800a408:	e0b1      	b.n	800a56e <_txm_module_manager_tx_block_pool_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a410:	d01d      	beq.n	800a44e <_txm_module_manager_tx_block_pool_create_dispatch+0xa6>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	461a      	mov	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d306      	bcc.n	800a42c <_txm_module_manager_tx_block_pool_create_dispatch+0x84>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	3301      	adds	r3, #1
 800a428:	429a      	cmp	r2, r3
 800a42a:	d926      	bls.n	800a47a <_txm_module_manager_tx_block_pool_create_dispatch+0xd2>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	429a      	cmp	r2, r3
 800a436:	d30a      	bcc.n	800a44e <_txm_module_manager_tx_block_pool_create_dispatch+0xa6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a448:	440b      	add	r3, r1
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d915      	bls.n	800a47a <_txm_module_manager_tx_block_pool_create_dispatch+0xd2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d00c      	beq.n	800a470 <_txm_module_manager_tx_block_pool_create_dispatch+0xc8>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	461a      	mov	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4293      	cmp	r3, r2
 800a460:	d306      	bcc.n	800a470 <_txm_module_manager_tx_block_pool_create_dispatch+0xc8>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	3301      	adds	r3, #1
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d904      	bls.n	800a47a <_txm_module_manager_tx_block_pool_create_dispatch+0xd2>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <_txm_module_manager_tx_block_pool_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 800a476:	23f4      	movs	r3, #244	; 0xf4
 800a478:	e079      	b.n	800a56e <_txm_module_manager_tx_block_pool_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	f113 0f09 	cmn.w	r3, #9
 800a480:	d81f      	bhi.n	800a4c2 <_txm_module_manager_tx_block_pool_create_dispatch+0x11a>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	461a      	mov	r2, r3
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d807      	bhi.n	800a49e <_txm_module_manager_tx_block_pool_create_dispatch+0xf6>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	f103 0208 	add.w	r2, r3, #8
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a498:	3301      	adds	r3, #1
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d913      	bls.n	800a4c6 <_txm_module_manager_tx_block_pool_create_dispatch+0x11e>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d80b      	bhi.n	800a4c2 <_txm_module_manager_tx_block_pool_create_dispatch+0x11a>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	f103 0208 	add.w	r2, r3, #8
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4bc:	440b      	add	r3, r1
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d901      	bls.n	800a4c6 <_txm_module_manager_tx_block_pool_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800a4c2:	23f4      	movs	r3, #244	; 0xf4
 800a4c4:	e053      	b.n	800a56e <_txm_module_manager_tx_block_pool_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], extra_parameters[2]))
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	6819      	ldr	r1, [r3, #0]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	440b      	add	r3, r1
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d22a      	bcs.n	800a534 <_txm_module_manager_tx_block_pool_create_dispatch+0x18c>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d30b      	bcc.n	800a504 <_txm_module_manager_tx_block_pool_create_dispatch+0x15c>
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	441a      	add	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	3301      	adds	r3, #1
 800a500:	429a      	cmp	r2, r3
 800a502:	d91e      	bls.n	800a542 <_txm_module_manager_tx_block_pool_create_dispatch+0x19a>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	3304      	adds	r3, #4
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a510:	429a      	cmp	r2, r3
 800a512:	d30f      	bcc.n	800a534 <_txm_module_manager_tx_block_pool_create_dispatch+0x18c>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	3304      	adds	r3, #4
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	3308      	adds	r3, #8
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	441a      	add	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a52e:	440b      	add	r3, r1
 800a530:	429a      	cmp	r2, r3
 800a532:	d906      	bls.n	800a542 <_txm_module_manager_tx_block_pool_create_dispatch+0x19a>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	3304      	adds	r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <_txm_module_manager_tx_block_pool_create_dispatch+0x19a>
            return(TXM_MODULE_INVALID_MEMORY);
 800a53e:	23f4      	movs	r3, #244	; 0xf4
 800a540:	e015      	b.n	800a56e <_txm_module_manager_tx_block_pool_create_dispatch+0x1c6>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800a542:	68b8      	ldr	r0, [r7, #8]
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	681c      	ldr	r4, [r3, #0]
        (TX_BLOCK_POOL *) param_0,
        (CHAR *) param_1,
        (ULONG) extra_parameters[0],
        (VOID *) extra_parameters[1],
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	3304      	adds	r3, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800a550:	461d      	mov	r5, r3
        (ULONG) extra_parameters[2],
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800a556:	681b      	ldr	r3, [r3, #0]
        (UINT) extra_parameters[3]
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	9201      	str	r2, [sp, #4]
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	462b      	mov	r3, r5
 800a564:	4622      	mov	r2, r4
 800a566:	f7fd f9bd 	bl	80078e4 <_txe_block_pool_create>
 800a56a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800a56c:	697b      	ldr	r3, [r7, #20]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bdb0      	pop	{r4, r5, r7, pc}
 800a576:	bf00      	nop
 800a578:	2000f600 	.word	0x2000f600
 800a57c:	2000f5cc 	.word	0x2000f5cc

0800a580 <_txm_module_manager_tx_block_pool_delete_dispatch>:
#ifndef TXM_BLOCK_POOL_DELETE_CALL_NOT_USED
/* UINT _txe_block_pool_delete(
    TX_BLOCK_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d03a      	beq.n	800a60c <_txm_module_manager_tx_block_pool_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a59c:	d81f      	bhi.n	800a5de <_txm_module_manager_tx_block_pool_delete_dispatch+0x5e>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d307      	bcc.n	800a5ba <_txm_module_manager_tx_block_pool_delete_dispatch+0x3a>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d923      	bls.n	800a602 <_txm_module_manager_tx_block_pool_delete_dispatch+0x82>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d30b      	bcc.n	800a5de <_txm_module_manager_tx_block_pool_delete_dispatch+0x5e>
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a5d8:	440b      	add	r3, r1
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d911      	bls.n	800a602 <_txm_module_manager_tx_block_pool_delete_dispatch+0x82>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a5e4:	d812      	bhi.n	800a60c <_txm_module_manager_tx_block_pool_delete_dispatch+0x8c>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d30c      	bcc.n	800a60c <_txm_module_manager_tx_block_pool_delete_dispatch+0x8c>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d804      	bhi.n	800a60c <_txm_module_manager_tx_block_pool_delete_dispatch+0x8c>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <_txm_module_manager_tx_block_pool_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800a608:	23f4      	movs	r3, #244	; 0xf4
 800a60a:	e00d      	b.n	800a628 <_txm_module_manager_tx_block_pool_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_delete(
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd fa0c 	bl	8007a2c <_txe_block_pool_delete>
 800a614:	60f8      	str	r0, [r7, #12]
        (TX_BLOCK_POOL *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <_txm_module_manager_tx_block_pool_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f008 fbce 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800a624:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800a626:	68fb      	ldr	r3, [r7, #12]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <_txm_module_manager_tx_block_pool_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_BLOCK_POOL **next_pool -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800a630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a632:	b08b      	sub	sp, #44	; 0x2c
 800a634:	af04      	add	r7, sp, #16
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 817c 	beq.w	800a944 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x314>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a652:	d81f      	bhi.n	800a694 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x64>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	461a      	mov	r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d307      	bcc.n	800a670 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x40>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	3301      	adds	r3, #1
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d923      	bls.n	800a6b8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x88>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d30b      	bcc.n	800a694 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x64>
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a68e:	440b      	add	r3, r1
 800a690:	429a      	cmp	r2, r3
 800a692:	d911      	bls.n	800a6b8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x88>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a69a:	d812      	bhi.n	800a6c2 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x92>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d30c      	bcc.n	800a6c2 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x92>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d804      	bhi.n	800a6c2 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x92>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800a6be:	23f4      	movs	r3, #244	; 0xf4
 800a6c0:	e15d      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f113 0f05 	cmn.w	r3, #5
 800a6c8:	d81d      	bhi.n	800a706 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xd6>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d306      	bcc.n	800a6e4 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xb4>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	3301      	adds	r3, #1
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d915      	bls.n	800a710 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xe0>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d30a      	bcc.n	800a706 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xd6>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	1d1a      	adds	r2, r3, #4
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a700:	440b      	add	r3, r1
 800a702:	429a      	cmp	r2, r3
 800a704:	d904      	bls.n	800a710 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xe0>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800a70c:	23f4      	movs	r3, #244	; 0xf4
 800a70e:	e136      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f113 0f15 	cmn.w	r3, #21
 800a716:	d81f      	bhi.n	800a758 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x128>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	461a      	mov	r2, r3
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d807      	bhi.n	800a734 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x104>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	f103 0214 	add.w	r2, r3, #20
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72e:	3301      	adds	r3, #1
 800a730:	429a      	cmp	r2, r3
 800a732:	d913      	bls.n	800a75c <_txm_module_manager_tx_block_pool_info_get_dispatch+0x12c>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d80b      	bhi.n	800a758 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x128>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	f103 0214 	add.w	r2, r3, #20
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a752:	440b      	add	r3, r1
 800a754:	429a      	cmp	r2, r3
 800a756:	d901      	bls.n	800a75c <_txm_module_manager_tx_block_pool_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800a758:	23f4      	movs	r3, #244	; 0xf4
 800a75a:	e110      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f113 0f05 	cmn.w	r3, #5
 800a764:	d820      	bhi.n	800a7a8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x178>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a76e:	4293      	cmp	r3, r2
 800a770:	d307      	bcc.n	800a782 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x152>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	1d1a      	adds	r2, r3, #4
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	3301      	adds	r3, #1
 800a77e:	429a      	cmp	r2, r3
 800a780:	d918      	bls.n	800a7b4 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x184>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d30b      	bcc.n	800a7a8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x178>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	1d1a      	adds	r2, r3, #4
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7a2:	440b      	add	r3, r1
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d905      	bls.n	800a7b4 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x184>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800a7b0:	23f4      	movs	r3, #244	; 0xf4
 800a7b2:	e0e4      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f113 0f05 	cmn.w	r3, #5
 800a7be:	d824      	bhi.n	800a80a <_txm_module_manager_tx_block_pool_info_get_dispatch+0x1da>
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d308      	bcc.n	800a7e0 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x1b0>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	1d1a      	adds	r2, r3, #4
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7da:	3301      	adds	r3, #1
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d91b      	bls.n	800a818 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x1e8>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d30c      	bcc.n	800a80a <_txm_module_manager_tx_block_pool_info_get_dispatch+0x1da>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	1d1a      	adds	r2, r3, #4
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a804:	440b      	add	r3, r1
 800a806:	429a      	cmp	r2, r3
 800a808:	d906      	bls.n	800a818 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x1e8>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	3304      	adds	r3, #4
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800a814:	23f4      	movs	r3, #244	; 0xf4
 800a816:	e0b2      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f113 0f05 	cmn.w	r3, #5
 800a822:	d824      	bhi.n	800a86e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x23e>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a82e:	4293      	cmp	r3, r2
 800a830:	d308      	bcc.n	800a844 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x214>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83e:	3301      	adds	r3, #1
 800a840:	429a      	cmp	r2, r3
 800a842:	d91b      	bls.n	800a87c <_txm_module_manager_tx_block_pool_info_get_dispatch+0x24c>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	3308      	adds	r3, #8
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a850:	429a      	cmp	r2, r3
 800a852:	d30c      	bcc.n	800a86e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x23e>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	3308      	adds	r3, #8
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a868:	440b      	add	r3, r1
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d906      	bls.n	800a87c <_txm_module_manager_tx_block_pool_info_get_dispatch+0x24c>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	3308      	adds	r3, #8
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <_txm_module_manager_tx_block_pool_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800a878:	23f4      	movs	r3, #244	; 0xf4
 800a87a:	e080      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	330c      	adds	r3, #12
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f113 0f05 	cmn.w	r3, #5
 800a886:	d824      	bhi.n	800a8d2 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x2a2>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	330c      	adds	r3, #12
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a892:	4293      	cmp	r3, r2
 800a894:	d308      	bcc.n	800a8a8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x278>
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	1d1a      	adds	r2, r3, #4
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d91b      	bls.n	800a8e0 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x2b0>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	330c      	adds	r3, #12
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d30c      	bcc.n	800a8d2 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x2a2>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	330c      	adds	r3, #12
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	1d1a      	adds	r2, r3, #4
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8cc:	440b      	add	r3, r1
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d906      	bls.n	800a8e0 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x2b0>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	330c      	adds	r3, #12
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800a8dc:	23f4      	movs	r3, #244	; 0xf4
 800a8de:	e04e      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_BLOCK_POOL *)))
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	3310      	adds	r3, #16
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f113 0f05 	cmn.w	r3, #5
 800a8ea:	d824      	bhi.n	800a936 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x306>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	3310      	adds	r3, #16
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d308      	bcc.n	800a90c <_txm_module_manager_tx_block_pool_info_get_dispatch+0x2dc>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	3310      	adds	r3, #16
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	1d1a      	adds	r2, r3, #4
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	3301      	adds	r3, #1
 800a908:	429a      	cmp	r2, r3
 800a90a:	d91b      	bls.n	800a944 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x314>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	3310      	adds	r3, #16
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a918:	429a      	cmp	r2, r3
 800a91a:	d30c      	bcc.n	800a936 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x306>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	3310      	adds	r3, #16
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	1d1a      	adds	r2, r3, #4
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a930:	440b      	add	r3, r1
 800a932:	429a      	cmp	r2, r3
 800a934:	d906      	bls.n	800a944 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x314>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	3310      	adds	r3, #16
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800a940:	23f4      	movs	r3, #244	; 0xf4
 800a942:	e01c      	b.n	800a97e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x34e>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800a944:	68b8      	ldr	r0, [r7, #8]
 800a946:	6879      	ldr	r1, [r7, #4]
        (TX_BLOCK_POOL *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800a94c:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	3304      	adds	r3, #4
 800a952:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800a954:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800a95c:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	330c      	adds	r3, #12
 800a962:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800a964:	461c      	mov	r4, r3
        (TX_BLOCK_POOL **) extra_parameters[4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	3310      	adds	r3, #16
 800a96a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800a96c:	9302      	str	r3, [sp, #8]
 800a96e:	9401      	str	r4, [sp, #4]
 800a970:	9200      	str	r2, [sp, #0]
 800a972:	4633      	mov	r3, r6
 800a974:	462a      	mov	r2, r5
 800a976:	f7fd f897 	bl	8007aa8 <_txe_block_pool_info_get>
 800a97a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800a97c:	697b      	ldr	r3, [r7, #20]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a986 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch>:
    ULONG *releases, -> extra_parameters[0]
    ULONG *suspensions, -> extra_parameters[1]
    ULONG *timeouts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800a986:	b590      	push	{r4, r7, lr}
 800a988:	b089      	sub	sp, #36	; 0x24
 800a98a:	af02      	add	r7, sp, #8
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 8118 	beq.w	800abd2 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x24c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a9a8:	d81f      	bhi.n	800a9ea <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x64>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d307      	bcc.n	800a9c6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x40>
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d923      	bls.n	800aa0e <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x88>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d30b      	bcc.n	800a9ea <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x64>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9e4:	440b      	add	r3, r1
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d911      	bls.n	800aa0e <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x88>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800a9f0:	d812      	bhi.n	800aa18 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x92>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d30c      	bcc.n	800aa18 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x92>
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d804      	bhi.n	800aa18 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x92>
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800aa14:	23f4      	movs	r3, #244	; 0xf4
 800aa16:	e0ee      	b.n	800abf6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f113 0f05 	cmn.w	r3, #5
 800aa1e:	d81d      	bhi.n	800aa5c <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xd6>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	461a      	mov	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d306      	bcc.n	800aa3a <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xb4>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	1d1a      	adds	r2, r3, #4
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa34:	3301      	adds	r3, #1
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d915      	bls.n	800aa66 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xe0>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d30a      	bcc.n	800aa5c <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xd6>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	1d1a      	adds	r2, r3, #4
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa56:	440b      	add	r3, r1
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d904      	bls.n	800aa66 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xe0>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800aa62:	23f4      	movs	r3, #244	; 0xf4
 800aa64:	e0c7      	b.n	800abf6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f113 0f0d 	cmn.w	r3, #13
 800aa6c:	d81f      	bhi.n	800aaae <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x128>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa72:	461a      	mov	r2, r3
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d807      	bhi.n	800aa8a <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x104>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	f103 020c 	add.w	r2, r3, #12
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	3301      	adds	r3, #1
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d913      	bls.n	800aab2 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x12c>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d80b      	bhi.n	800aaae <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x128>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	f103 020c 	add.w	r2, r3, #12
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaa8:	440b      	add	r3, r1
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d901      	bls.n	800aab2 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800aaae:	23f4      	movs	r3, #244	; 0xf4
 800aab0:	e0a1      	b.n	800abf6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f113 0f05 	cmn.w	r3, #5
 800aaba:	d820      	bhi.n	800aafe <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x178>
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d307      	bcc.n	800aad8 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x152>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	1d1a      	adds	r2, r3, #4
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad2:	3301      	adds	r3, #1
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d918      	bls.n	800ab0a <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x184>
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d30b      	bcc.n	800aafe <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x178>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	1d1a      	adds	r2, r3, #4
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaf8:	440b      	add	r3, r1
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d905      	bls.n	800ab0a <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x184>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800ab06:	23f4      	movs	r3, #244	; 0xf4
 800ab08:	e075      	b.n	800abf6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f113 0f05 	cmn.w	r3, #5
 800ab14:	d824      	bhi.n	800ab60 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x1da>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d308      	bcc.n	800ab36 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x1b0>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	3304      	adds	r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	1d1a      	adds	r2, r3, #4
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	3301      	adds	r3, #1
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d91b      	bls.n	800ab6e <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x1e8>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d30c      	bcc.n	800ab60 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x1da>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	1d1a      	adds	r2, r3, #4
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab5a:	440b      	add	r3, r1
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d906      	bls.n	800ab6e <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x1e8>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	3304      	adds	r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800ab6a:	23f4      	movs	r3, #244	; 0xf4
 800ab6c:	e043      	b.n	800abf6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f113 0f05 	cmn.w	r3, #5
 800ab78:	d824      	bhi.n	800abc4 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x23e>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d308      	bcc.n	800ab9a <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x214>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	3308      	adds	r3, #8
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	1d1a      	adds	r2, r3, #4
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab94:	3301      	adds	r3, #1
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d91b      	bls.n	800abd2 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x24c>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d30c      	bcc.n	800abc4 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x23e>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	3308      	adds	r3, #8
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	1d1a      	adds	r2, r3, #4
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abbe:	440b      	add	r3, r1
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d906      	bls.n	800abd2 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x24c>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	3308      	adds	r3, #8
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800abce:	23f4      	movs	r3, #244	; 0xf4
 800abd0:	e011      	b.n	800abf6 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x270>
    }

    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800abd2:	68b8      	ldr	r0, [r7, #8]
 800abd4:	6879      	ldr	r1, [r7, #4]
        (TX_BLOCK_POOL *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800abda:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	3304      	adds	r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800abe2:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	3308      	adds	r3, #8
 800abe8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4623      	mov	r3, r4
 800abee:	f009 fc4b 	bl	8014488 <_tx_block_pool_performance_info_get>
 800abf2:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800abf4:	697b      	ldr	r3, [r7, #20]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	371c      	adds	r7, #28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd90      	pop	{r4, r7, pc}

0800abfe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch>:
    ULONG *releases, -> param_1
    ULONG *suspensions, -> extra_parameters[0]
    ULONG *timeouts -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b086      	sub	sp, #24
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	60f8      	str	r0, [r7, #12]
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 80d2 	beq.w	800adbe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1c0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f113 0f05 	cmn.w	r3, #5
 800ac20:	d81d      	bhi.n	800ac5e <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x60>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac26:	461a      	mov	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d306      	bcc.n	800ac3c <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x3e>
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	3301      	adds	r3, #1
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d915      	bls.n	800ac68 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x6a>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d30a      	bcc.n	800ac5e <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x60>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac58:	440b      	add	r3, r1
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d904      	bls.n	800ac68 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x6a>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ac64:	23f4      	movs	r3, #244	; 0xf4
 800ac66:	e0b6      	b.n	800add6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f113 0f05 	cmn.w	r3, #5
 800ac6e:	d81d      	bhi.n	800acac <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xae>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	461a      	mov	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d306      	bcc.n	800ac8a <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x8c>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac84:	3301      	adds	r3, #1
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d915      	bls.n	800acb6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xb8>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d30a      	bcc.n	800acac <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xae>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	1d1a      	adds	r2, r3, #4
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aca6:	440b      	add	r3, r1
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d904      	bls.n	800acb6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xb8>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 800acb2:	23f4      	movs	r3, #244	; 0xf4
 800acb4:	e08f      	b.n	800add6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	f113 0f09 	cmn.w	r3, #9
 800acbc:	d81f      	bhi.n	800acfe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x100>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc2:	461a      	mov	r2, r3
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d807      	bhi.n	800acda <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xdc>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	f103 0208 	add.w	r2, r3, #8
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd4:	3301      	adds	r3, #1
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d913      	bls.n	800ad02 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x104>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d80b      	bhi.n	800acfe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x100>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	f103 0208 	add.w	r2, r3, #8
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800acf8:	440b      	add	r3, r1
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d901      	bls.n	800ad02 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 800acfe:	23f4      	movs	r3, #244	; 0xf4
 800ad00:	e069      	b.n	800add6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f113 0f05 	cmn.w	r3, #5
 800ad0a:	d820      	bhi.n	800ad4e <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x150>
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d307      	bcc.n	800ad28 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x12a>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	1d1a      	adds	r2, r3, #4
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad22:	3301      	adds	r3, #1
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d918      	bls.n	800ad5a <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x15c>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d30b      	bcc.n	800ad4e <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x150>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad48:	440b      	add	r3, r1
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d905      	bls.n	800ad5a <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x15c>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 800ad56:	23f4      	movs	r3, #244	; 0xf4
 800ad58:	e03d      	b.n	800add6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f113 0f05 	cmn.w	r3, #5
 800ad64:	d824      	bhi.n	800adb0 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1b2>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d308      	bcc.n	800ad86 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x188>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	3304      	adds	r3, #4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	1d1a      	adds	r2, r3, #4
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad80:	3301      	adds	r3, #1
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d91b      	bls.n	800adbe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1c0>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d30c      	bcc.n	800adb0 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1b2>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	1d1a      	adds	r2, r3, #4
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adaa:	440b      	add	r3, r1
 800adac:	429a      	cmp	r2, r3
 800adae:	d906      	bls.n	800adbe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1c0>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	3304      	adds	r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 800adba:	23f4      	movs	r3, #244	; 0xf4
 800adbc:	e00b      	b.n	800add6 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x1d8>
    }

    return_value = (ALIGN_TYPE) _tx_block_pool_performance_system_info_get(
 800adbe:	68b8      	ldr	r0, [r7, #8]
 800adc0:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_system_info_get(
 800adc6:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	3304      	adds	r3, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_system_info_get(
 800adce:	f009 fb89 	bl	80144e4 <_tx_block_pool_performance_system_info_get>
 800add2:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800add4:	697b      	ldr	r3, [r7, #20]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <_txm_module_manager_tx_block_pool_prioritize_dispatch>:
#ifndef TXM_BLOCK_POOL_PRIORITIZE_CALL_NOT_USED
/* UINT _txe_block_pool_prioritize(
    TX_BLOCK_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d03a      	beq.n	800ae6a <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800adfa:	d81f      	bhi.n	800ae3c <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x5e>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	461a      	mov	r2, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d307      	bcc.n	800ae18 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x3a>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	3301      	adds	r3, #1
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d923      	bls.n	800ae60 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x82>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d30b      	bcc.n	800ae3c <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x5e>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae36:	440b      	add	r3, r1
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d911      	bls.n	800ae60 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x82>
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800ae42:	d812      	bhi.n	800ae6a <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x8c>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d30c      	bcc.n	800ae6a <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x8c>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d804      	bhi.n	800ae6a <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x8c>
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800ae66:	23f4      	movs	r3, #244	; 0xf4
 800ae68:	e005      	b.n	800ae76 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_prioritize(
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fc fe45 	bl	8007afc <_txe_block_pool_prioritize>
 800ae72:	60f8      	str	r0, [r7, #12]
        (TX_BLOCK_POOL *) param_0
    );
    return(return_value);
 800ae74:	68fb      	ldr	r3, [r7, #12]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <_txm_module_manager_tx_block_release_dispatch>:
#ifndef TXM_BLOCK_RELEASE_CALL_NOT_USED
/* UINT _txe_block_release(
    VOID *block_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_release_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;
ALIGN_TYPE block_header_start;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d02d      	beq.n	800aef0 <_txm_module_manager_tx_block_release_dispatch+0x72>
    {
        /* Is the pointer non-null?  */
        if ((void *) param_0 != TX_NULL)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d02a      	beq.n	800aef0 <_txm_module_manager_tx_block_release_dispatch+0x72>
        {

            /* Calculate the beginning of the header info for this block (the header
               consists of 1 pointers.  */
            block_header_start =  param_0 - sizeof(ALIGN_TYPE);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	3b04      	subs	r3, #4
 800ae9e:	60fb      	str	r3, [r7, #12]

            if (/* Did we underflow when doing the subtract?  */
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d821      	bhi.n	800aeec <_txm_module_manager_tx_block_release_dispatch+0x6e>
                (block_header_start > param_0) ||
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f113 0f05 	cmn.w	r3, #5
 800aeae:	d81d      	bhi.n	800aeec <_txm_module_manager_tx_block_release_dispatch+0x6e>
                /* Ensure the pointer is inside the module's data. Note that we only
                   check the pointer in the header because only that pointer is
                   dereferenced during the pointer's validity check in _tx_block_release. */
                (!TXM_MODULE_MANAGER_CHECK_INSIDE_DATA(module_instance, block_header_start, sizeof(ALIGN_TYPE))))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d306      	bcc.n	800aeca <_txm_module_manager_tx_block_release_dispatch+0x4c>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	1d1a      	adds	r2, r3, #4
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec4:	3301      	adds	r3, #1
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d912      	bls.n	800aef0 <_txm_module_manager_tx_block_release_dispatch+0x72>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d30a      	bcc.n	800aeec <_txm_module_manager_tx_block_release_dispatch+0x6e>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	1d1a      	adds	r2, r3, #4
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aee6:	440b      	add	r3, r1
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d901      	bls.n	800aef0 <_txm_module_manager_tx_block_release_dispatch+0x72>
            {

                /* Invalid pointer.  */
                return(TXM_MODULE_INVALID_MEMORY);
 800aeec:	23f4      	movs	r3, #244	; 0xf4
 800aeee:	e005      	b.n	800aefc <_txm_module_manager_tx_block_release_dispatch+0x7e>
            }
        }
    }

    return_value = (ALIGN_TYPE) _txe_block_release(
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fc fe20 	bl	8007b38 <_txe_block_release>
 800aef8:	60b8      	str	r0, [r7, #8]
        (VOID *) param_0
    );
    return(return_value);
 800aefa:	68bb      	ldr	r3, [r7, #8]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <_txm_module_manager_tx_byte_allocate_dispatch>:
    VOID **memory_ptr, -> param_1
    ULONG memory_size, -> extra_parameters[0]
    ULONG wait_option -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 8088 	beq.w	800b030 <_txm_module_manager_tx_byte_allocate_dispatch+0x12c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800af26:	d81f      	bhi.n	800af68 <_txm_module_manager_tx_byte_allocate_dispatch+0x64>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	461a      	mov	r2, r3
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	4293      	cmp	r3, r2
 800af32:	d307      	bcc.n	800af44 <_txm_module_manager_tx_byte_allocate_dispatch+0x40>
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3e:	3301      	adds	r3, #1
 800af40:	429a      	cmp	r2, r3
 800af42:	d923      	bls.n	800af8c <_txm_module_manager_tx_byte_allocate_dispatch+0x88>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d30b      	bcc.n	800af68 <_txm_module_manager_tx_byte_allocate_dispatch+0x64>
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af62:	440b      	add	r3, r1
 800af64:	429a      	cmp	r2, r3
 800af66:	d911      	bls.n	800af8c <_txm_module_manager_tx_byte_allocate_dispatch+0x88>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800af6e:	d812      	bhi.n	800af96 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	461a      	mov	r2, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	4293      	cmp	r3, r2
 800af7a:	d30c      	bcc.n	800af96 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	3301      	adds	r3, #1
 800af88:	429a      	cmp	r2, r3
 800af8a:	d804      	bhi.n	800af96 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <_txm_module_manager_tx_byte_allocate_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800af92:	23f4      	movs	r3, #244	; 0xf4
 800af94:	e057      	b.n	800b046 <_txm_module_manager_tx_byte_allocate_dispatch+0x142>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(VOID *)))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f113 0f05 	cmn.w	r3, #5
 800af9c:	d81d      	bhi.n	800afda <_txm_module_manager_tx_byte_allocate_dispatch+0xd6>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d306      	bcc.n	800afb8 <_txm_module_manager_tx_byte_allocate_dispatch+0xb4>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	1d1a      	adds	r2, r3, #4
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	3301      	adds	r3, #1
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d915      	bls.n	800afe4 <_txm_module_manager_tx_byte_allocate_dispatch+0xe0>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d30a      	bcc.n	800afda <_txm_module_manager_tx_byte_allocate_dispatch+0xd6>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	1d1a      	adds	r2, r3, #4
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afd4:	440b      	add	r3, r1
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d904      	bls.n	800afe4 <_txm_module_manager_tx_byte_allocate_dispatch+0xe0>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <_txm_module_manager_tx_byte_allocate_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800afe0:	23f4      	movs	r3, #244	; 0xf4
 800afe2:	e030      	b.n	800b046 <_txm_module_manager_tx_byte_allocate_dispatch+0x142>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	f113 0f09 	cmn.w	r3, #9
 800afea:	d81f      	bhi.n	800b02c <_txm_module_manager_tx_byte_allocate_dispatch+0x128>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	461a      	mov	r2, r3
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d807      	bhi.n	800b008 <_txm_module_manager_tx_byte_allocate_dispatch+0x104>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f103 0208 	add.w	r2, r3, #8
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b002:	3301      	adds	r3, #1
 800b004:	429a      	cmp	r2, r3
 800b006:	d913      	bls.n	800b030 <_txm_module_manager_tx_byte_allocate_dispatch+0x12c>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d80b      	bhi.n	800b02c <_txm_module_manager_tx_byte_allocate_dispatch+0x128>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	f103 0208 	add.w	r2, r3, #8
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b026:	440b      	add	r3, r1
 800b028:	429a      	cmp	r2, r3
 800b02a:	d901      	bls.n	800b030 <_txm_module_manager_tx_byte_allocate_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b02c:	23f4      	movs	r3, #244	; 0xf4
 800b02e:	e00a      	b.n	800b046 <_txm_module_manager_tx_byte_allocate_dispatch+0x142>
    }

    return_value = (ALIGN_TYPE) _txe_byte_allocate(
 800b030:	68b8      	ldr	r0, [r7, #8]
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
        (TX_BYTE_POOL *) param_0,
        (VOID **) param_1,
        (ULONG) extra_parameters[0],
        (ULONG) extra_parameters[1]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_byte_allocate(
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f7fc fdab 	bl	8007b98 <_txe_byte_allocate>
 800b042:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800b044:	697b      	ldr	r3, [r7, #20]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <_txm_module_manager_tx_byte_pool_create_dispatch>:
    VOID *pool_start, -> extra_parameters[0]
    ULONG pool_size, -> extra_parameters[1]
    UINT pool_control_block_size -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b089      	sub	sp, #36	; 0x24
 800b054:	af02      	add	r7, sp, #8
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 80b8 	beq.w	800b1dc <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800b06c:	4b66      	ldr	r3, [pc, #408]	; (800b208 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d119      	bne.n	800b0a8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b07a:	d815      	bhi.n	800b0a8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 800b07c:	4b63      	ldr	r3, [pc, #396]	; (800b20c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1bc>)
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	3310      	adds	r3, #16
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	429a      	cmp	r2, r3
 800b086:	d30f      	bcc.n	800b0a8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	3334      	adds	r3, #52	; 0x34
 800b08c:	4a5f      	ldr	r2, [pc, #380]	; (800b20c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1bc>)
 800b08e:	6991      	ldr	r1, [r2, #24]
 800b090:	4a5e      	ldr	r2, [pc, #376]	; (800b20c <_txm_module_manager_tx_byte_pool_create_dispatch+0x1bc>)
 800b092:	69d2      	ldr	r2, [r2, #28]
 800b094:	440a      	add	r2, r1
 800b096:	4293      	cmp	r3, r2
 800b098:	d806      	bhi.n	800b0a8 <_txm_module_manager_tx_byte_pool_create_dispatch+0x58>
 800b09a:	2134      	movs	r1, #52	; 0x34
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f009 f96b 	bl	8014378 <_txm_module_manager_object_size_check>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <_txm_module_manager_tx_byte_pool_create_dispatch+0x62>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <_txm_module_manager_tx_byte_pool_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800b0ae:	23f4      	movs	r3, #244	; 0xf4
 800b0b0:	e0a6      	b.n	800b200 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d01d      	beq.n	800b0f6 <_txm_module_manager_tx_byte_pool_create_dispatch+0xa6>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	461a      	mov	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d306      	bcc.n	800b0d4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x84>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d926      	bls.n	800b122 <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d30a      	bcc.n	800b0f6 <_txm_module_manager_tx_byte_pool_create_dispatch+0xa6>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0f0:	440b      	add	r3, r1
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d915      	bls.n	800b122 <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d00c      	beq.n	800b118 <_txm_module_manager_tx_byte_pool_create_dispatch+0xc8>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	461a      	mov	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4293      	cmp	r3, r2
 800b108:	d306      	bcc.n	800b118 <_txm_module_manager_tx_byte_pool_create_dispatch+0xc8>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	3301      	adds	r3, #1
 800b114:	429a      	cmp	r2, r3
 800b116:	d904      	bls.n	800b122 <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <_txm_module_manager_tx_byte_pool_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 800b11e:	23f4      	movs	r3, #244	; 0xf4
 800b120:	e06e      	b.n	800b200 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	f113 0f0d 	cmn.w	r3, #13
 800b128:	d81f      	bhi.n	800b16a <_txm_module_manager_tx_byte_pool_create_dispatch+0x11a>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	461a      	mov	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d807      	bhi.n	800b146 <_txm_module_manager_tx_byte_pool_create_dispatch+0xf6>
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	f103 020c 	add.w	r2, r3, #12
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b140:	3301      	adds	r3, #1
 800b142:	429a      	cmp	r2, r3
 800b144:	d913      	bls.n	800b16e <_txm_module_manager_tx_byte_pool_create_dispatch+0x11e>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d80b      	bhi.n	800b16a <_txm_module_manager_tx_byte_pool_create_dispatch+0x11a>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	f103 020c 	add.w	r2, r3, #12
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b164:	440b      	add	r3, r1
 800b166:	429a      	cmp	r2, r3
 800b168:	d901      	bls.n	800b16e <_txm_module_manager_tx_byte_pool_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800b16a:	23f4      	movs	r3, #244	; 0xf4
 800b16c:	e048      	b.n	800b200 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], extra_parameters[1]))
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	3304      	adds	r3, #4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	440b      	add	r3, r1
 800b17e:	429a      	cmp	r2, r3
 800b180:	d226      	bcs.n	800b1d0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x180>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d30a      	bcc.n	800b1a4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x154>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	3304      	adds	r3, #4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	441a      	add	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19e:	3301      	adds	r3, #1
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d91b      	bls.n	800b1dc <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d30e      	bcc.n	800b1d0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x180>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	441a      	add	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1ca:	440b      	add	r3, r1
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d905      	bls.n	800b1dc <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <_txm_module_manager_tx_byte_pool_create_dispatch+0x18c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b1d8:	23f4      	movs	r3, #244	; 0xf4
 800b1da:	e011      	b.n	800b200 <_txm_module_manager_tx_byte_pool_create_dispatch+0x1b0>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800b1dc:	68b8      	ldr	r0, [r7, #8]
 800b1de:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (CHAR *) param_1,
        (VOID *) extra_parameters[0],
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800b1e4:	461c      	mov	r4, r3
        (ULONG) extra_parameters[1],
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800b1ea:	681a      	ldr	r2, [r3, #0]
        (UINT) extra_parameters[2]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	f7fc fd42 	bl	8007c80 <_txe_byte_pool_create>
 800b1fc:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800b1fe:	697b      	ldr	r3, [r7, #20]
}
 800b200:	4618      	mov	r0, r3
 800b202:	371c      	adds	r7, #28
 800b204:	46bd      	mov	sp, r7
 800b206:	bd90      	pop	{r4, r7, pc}
 800b208:	2000f600 	.word	0x2000f600
 800b20c:	2000f5cc 	.word	0x2000f5cc

0800b210 <_txm_module_manager_tx_byte_pool_delete_dispatch>:
#ifndef TXM_BYTE_POOL_DELETE_CALL_NOT_USED
/* UINT _txe_byte_pool_delete(
    TX_BYTE_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d03a      	beq.n	800b29c <_txm_module_manager_tx_byte_pool_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b22c:	d81f      	bhi.n	800b26e <_txm_module_manager_tx_byte_pool_delete_dispatch+0x5e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b232:	461a      	mov	r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	4293      	cmp	r3, r2
 800b238:	d307      	bcc.n	800b24a <_txm_module_manager_tx_byte_pool_delete_dispatch+0x3a>
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b244:	3301      	adds	r3, #1
 800b246:	429a      	cmp	r2, r3
 800b248:	d923      	bls.n	800b292 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x82>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	429a      	cmp	r2, r3
 800b254:	d30b      	bcc.n	800b26e <_txm_module_manager_tx_byte_pool_delete_dispatch+0x5e>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b268:	440b      	add	r3, r1
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d911      	bls.n	800b292 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x82>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b274:	d812      	bhi.n	800b29c <_txm_module_manager_tx_byte_pool_delete_dispatch+0x8c>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	461a      	mov	r2, r3
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	4293      	cmp	r3, r2
 800b280:	d30c      	bcc.n	800b29c <_txm_module_manager_tx_byte_pool_delete_dispatch+0x8c>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	3301      	adds	r3, #1
 800b28e:	429a      	cmp	r2, r3
 800b290:	d804      	bhi.n	800b29c <_txm_module_manager_tx_byte_pool_delete_dispatch+0x8c>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <_txm_module_manager_tx_byte_pool_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b298:	23f4      	movs	r3, #244	; 0xf4
 800b29a:	e00d      	b.n	800b2b8 <_txm_module_manager_tx_byte_pool_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_delete(
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fc fd8a 	bl	8007db8 <_txe_byte_pool_delete>
 800b2a4:	60f8      	str	r0, [r7, #12]
        (TX_BYTE_POOL *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d104      	bne.n	800b2b6 <_txm_module_manager_tx_byte_pool_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f007 fd86 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800b2b4:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <_txm_module_manager_tx_byte_pool_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_BYTE_POOL **next_pool -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	b08b      	sub	sp, #44	; 0x2c
 800b2c4:	af04      	add	r7, sp, #16
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	f003 0302 	and.w	r3, r3, #2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 817c 	beq.w	800b5d4 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x314>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b2e2:	d81f      	bhi.n	800b324 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x64>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d307      	bcc.n	800b300 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x40>
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d923      	bls.n	800b348 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x88>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d30b      	bcc.n	800b324 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x64>
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b31e:	440b      	add	r3, r1
 800b320:	429a      	cmp	r2, r3
 800b322:	d911      	bls.n	800b348 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x88>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b32a:	d812      	bhi.n	800b352 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x92>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	461a      	mov	r2, r3
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	4293      	cmp	r3, r2
 800b336:	d30c      	bcc.n	800b352 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x92>
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	3301      	adds	r3, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	d804      	bhi.n	800b352 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x92>
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800b34e:	23f4      	movs	r3, #244	; 0xf4
 800b350:	e15d      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f113 0f05 	cmn.w	r3, #5
 800b358:	d81d      	bhi.n	800b396 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xd6>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	461a      	mov	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4293      	cmp	r3, r2
 800b364:	d306      	bcc.n	800b374 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xb4>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	1d1a      	adds	r2, r3, #4
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36e:	3301      	adds	r3, #1
 800b370:	429a      	cmp	r2, r3
 800b372:	d915      	bls.n	800b3a0 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xe0>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d30a      	bcc.n	800b396 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xd6>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	1d1a      	adds	r2, r3, #4
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b390:	440b      	add	r3, r1
 800b392:	429a      	cmp	r2, r3
 800b394:	d904      	bls.n	800b3a0 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xe0>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800b39c:	23f4      	movs	r3, #244	; 0xf4
 800b39e:	e136      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	f113 0f15 	cmn.w	r3, #21
 800b3a6:	d81f      	bhi.n	800b3e8 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x128>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d807      	bhi.n	800b3c4 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x104>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	f103 0214 	add.w	r2, r3, #20
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3be:	3301      	adds	r3, #1
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d913      	bls.n	800b3ec <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x12c>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d80b      	bhi.n	800b3e8 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x128>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	f103 0214 	add.w	r2, r3, #20
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b3e2:	440b      	add	r3, r1
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d901      	bls.n	800b3ec <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b3e8:	23f4      	movs	r3, #244	; 0xf4
 800b3ea:	e110      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f113 0f05 	cmn.w	r3, #5
 800b3f4:	d820      	bhi.n	800b438 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x178>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d307      	bcc.n	800b412 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x152>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	1d1a      	adds	r2, r3, #4
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	3301      	adds	r3, #1
 800b40e:	429a      	cmp	r2, r3
 800b410:	d918      	bls.n	800b444 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x184>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d30b      	bcc.n	800b438 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x178>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	1d1a      	adds	r2, r3, #4
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b432:	440b      	add	r3, r1
 800b434:	429a      	cmp	r2, r3
 800b436:	d905      	bls.n	800b444 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x184>
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800b440:	23f4      	movs	r3, #244	; 0xf4
 800b442:	e0e4      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	3304      	adds	r3, #4
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f113 0f05 	cmn.w	r3, #5
 800b44e:	d824      	bhi.n	800b49a <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x1da>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	3304      	adds	r3, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d308      	bcc.n	800b470 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x1b0>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	3304      	adds	r3, #4
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	1d1a      	adds	r2, r3, #4
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	3301      	adds	r3, #1
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d91b      	bls.n	800b4a8 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x1e8>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	3304      	adds	r3, #4
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d30c      	bcc.n	800b49a <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x1da>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	3304      	adds	r3, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	1d1a      	adds	r2, r3, #4
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b494:	440b      	add	r3, r1
 800b496:	429a      	cmp	r2, r3
 800b498:	d906      	bls.n	800b4a8 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x1e8>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	3304      	adds	r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800b4a4:	23f4      	movs	r3, #244	; 0xf4
 800b4a6:	e0b2      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f113 0f05 	cmn.w	r3, #5
 800b4b2:	d824      	bhi.n	800b4fe <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x23e>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d308      	bcc.n	800b4d4 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x214>
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d91b      	bls.n	800b50c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x24c>
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d30c      	bcc.n	800b4fe <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x23e>
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b4f8:	440b      	add	r3, r1
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d906      	bls.n	800b50c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x24c>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	3308      	adds	r3, #8
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b508:	23f4      	movs	r3, #244	; 0xf4
 800b50a:	e080      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	330c      	adds	r3, #12
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f113 0f05 	cmn.w	r3, #5
 800b516:	d824      	bhi.n	800b562 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x2a2>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	330c      	adds	r3, #12
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b522:	4293      	cmp	r3, r2
 800b524:	d308      	bcc.n	800b538 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x278>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	330c      	adds	r3, #12
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	1d1a      	adds	r2, r3, #4
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b532:	3301      	adds	r3, #1
 800b534:	429a      	cmp	r2, r3
 800b536:	d91b      	bls.n	800b570 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x2b0>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	330c      	adds	r3, #12
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b544:	429a      	cmp	r2, r3
 800b546:	d30c      	bcc.n	800b562 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x2a2>
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	330c      	adds	r3, #12
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b55c:	440b      	add	r3, r1
 800b55e:	429a      	cmp	r2, r3
 800b560:	d906      	bls.n	800b570 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x2b0>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	330c      	adds	r3, #12
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800b56c:	23f4      	movs	r3, #244	; 0xf4
 800b56e:	e04e      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_BYTE_POOL *)))
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	3310      	adds	r3, #16
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f113 0f05 	cmn.w	r3, #5
 800b57a:	d824      	bhi.n	800b5c6 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x306>
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	3310      	adds	r3, #16
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b586:	4293      	cmp	r3, r2
 800b588:	d308      	bcc.n	800b59c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x2dc>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	3310      	adds	r3, #16
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	1d1a      	adds	r2, r3, #4
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b596:	3301      	adds	r3, #1
 800b598:	429a      	cmp	r2, r3
 800b59a:	d91b      	bls.n	800b5d4 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x314>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	3310      	adds	r3, #16
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d30c      	bcc.n	800b5c6 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x306>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	1d1a      	adds	r2, r3, #4
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5c0:	440b      	add	r3, r1
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d906      	bls.n	800b5d4 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x314>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	3310      	adds	r3, #16
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800b5d0:	23f4      	movs	r3, #244	; 0xf4
 800b5d2:	e01c      	b.n	800b60e <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x34e>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800b5d4:	68b8      	ldr	r0, [r7, #8]
 800b5d6:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800b5dc:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800b5e4:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800b5ec:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	330c      	adds	r3, #12
 800b5f2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800b5f4:	461c      	mov	r4, r3
        (TX_BYTE_POOL **) extra_parameters[4]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	3310      	adds	r3, #16
 800b5fa:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800b5fc:	9302      	str	r3, [sp, #8]
 800b5fe:	9401      	str	r4, [sp, #4]
 800b600:	9200      	str	r2, [sp, #0]
 800b602:	4633      	mov	r3, r6
 800b604:	462a      	mov	r2, r5
 800b606:	f7fc fc15 	bl	8007e34 <_txe_byte_pool_info_get>
 800b60a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800b60c:	697b      	ldr	r3, [r7, #20]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	371c      	adds	r7, #28
 800b612:	46bd      	mov	sp, r7
 800b614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b616 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch>:
    ULONG *splits, -> extra_parameters[3]
    ULONG *suspensions, -> extra_parameters[4]
    ULONG *timeouts -> extra_parameters[5]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800b616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b618:	b08b      	sub	sp, #44	; 0x2c
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	607a      	str	r2, [r7, #4]
 800b622:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f003 0302 	and.w	r3, r3, #2
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 81ae 	beq.w	800b98e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x378>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b638:	d81f      	bhi.n	800b67a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x64>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63e:	461a      	mov	r2, r3
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4293      	cmp	r3, r2
 800b644:	d307      	bcc.n	800b656 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x40>
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	3301      	adds	r3, #1
 800b652:	429a      	cmp	r2, r3
 800b654:	d923      	bls.n	800b69e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x88>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d30b      	bcc.n	800b67a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x64>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b674:	440b      	add	r3, r1
 800b676:	429a      	cmp	r2, r3
 800b678:	d911      	bls.n	800b69e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x88>
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800b680:	d812      	bhi.n	800b6a8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x92>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	461a      	mov	r2, r3
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d30c      	bcc.n	800b6a8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x92>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	3301      	adds	r3, #1
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d804      	bhi.n	800b6a8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x92>
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800b6a4:	23f4      	movs	r3, #244	; 0xf4
 800b6a6:	e194      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f113 0f05 	cmn.w	r3, #5
 800b6ae:	d81d      	bhi.n	800b6ec <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xd6>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d306      	bcc.n	800b6ca <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xb4>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d915      	bls.n	800b6f6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xe0>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d30a      	bcc.n	800b6ec <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xd6>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	1d1a      	adds	r2, r3, #4
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b6e6:	440b      	add	r3, r1
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d904      	bls.n	800b6f6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xe0>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800b6f2:	23f4      	movs	r3, #244	; 0xf4
 800b6f4:	e16d      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[6])))
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	f113 0f19 	cmn.w	r3, #25
 800b6fc:	d81f      	bhi.n	800b73e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x128>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b702:	461a      	mov	r2, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d807      	bhi.n	800b71a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x104>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	f103 0218 	add.w	r2, r3, #24
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b714:	3301      	adds	r3, #1
 800b716:	429a      	cmp	r2, r3
 800b718:	d913      	bls.n	800b742 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x12c>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d80b      	bhi.n	800b73e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x128>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	f103 0218 	add.w	r2, r3, #24
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b738:	440b      	add	r3, r1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d901      	bls.n	800b742 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b73e:	23f4      	movs	r3, #244	; 0xf4
 800b740:	e147      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f113 0f05 	cmn.w	r3, #5
 800b74a:	d820      	bhi.n	800b78e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x178>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b754:	4293      	cmp	r3, r2
 800b756:	d307      	bcc.n	800b768 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x152>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	1d1a      	adds	r2, r3, #4
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b762:	3301      	adds	r3, #1
 800b764:	429a      	cmp	r2, r3
 800b766:	d918      	bls.n	800b79a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x184>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b772:	429a      	cmp	r2, r3
 800b774:	d30b      	bcc.n	800b78e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x178>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	1d1a      	adds	r2, r3, #4
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b788:	440b      	add	r3, r1
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d905      	bls.n	800b79a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x184>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800b796:	23f4      	movs	r3, #244	; 0xf4
 800b798:	e11b      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	3304      	adds	r3, #4
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f113 0f05 	cmn.w	r3, #5
 800b7a4:	d824      	bhi.n	800b7f0 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1da>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d308      	bcc.n	800b7c6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1b0>
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d91b      	bls.n	800b7fe <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1e8>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d30c      	bcc.n	800b7f0 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1da>
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b7ea:	440b      	add	r3, r1
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d906      	bls.n	800b7fe <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1e8>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800b7fa:	23f4      	movs	r3, #244	; 0xf4
 800b7fc:	e0e9      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	3308      	adds	r3, #8
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f113 0f05 	cmn.w	r3, #5
 800b808:	d824      	bhi.n	800b854 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x23e>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	3308      	adds	r3, #8
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b814:	4293      	cmp	r3, r2
 800b816:	d308      	bcc.n	800b82a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x214>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	3308      	adds	r3, #8
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	1d1a      	adds	r2, r3, #4
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b824:	3301      	adds	r3, #1
 800b826:	429a      	cmp	r2, r3
 800b828:	d91b      	bls.n	800b862 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x24c>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	3308      	adds	r3, #8
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b836:	429a      	cmp	r2, r3
 800b838:	d30c      	bcc.n	800b854 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x23e>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	3308      	adds	r3, #8
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	1d1a      	adds	r2, r3, #4
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b84e:	440b      	add	r3, r1
 800b850:	429a      	cmp	r2, r3
 800b852:	d906      	bls.n	800b862 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x24c>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800b85e:	23f4      	movs	r3, #244	; 0xf4
 800b860:	e0b7      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	330c      	adds	r3, #12
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f113 0f05 	cmn.w	r3, #5
 800b86c:	d824      	bhi.n	800b8b8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x2a2>
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	330c      	adds	r3, #12
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b878:	4293      	cmp	r3, r2
 800b87a:	d308      	bcc.n	800b88e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x278>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	330c      	adds	r3, #12
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	1d1a      	adds	r2, r3, #4
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b888:	3301      	adds	r3, #1
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d91b      	bls.n	800b8c6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x2b0>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	330c      	adds	r3, #12
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d30c      	bcc.n	800b8b8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x2a2>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	330c      	adds	r3, #12
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8b2:	440b      	add	r3, r1
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d906      	bls.n	800b8c6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x2b0>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	330c      	adds	r3, #12
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800b8c2:	23f4      	movs	r3, #244	; 0xf4
 800b8c4:	e085      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	3310      	adds	r3, #16
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f113 0f05 	cmn.w	r3, #5
 800b8d0:	d824      	bhi.n	800b91c <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x306>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	3310      	adds	r3, #16
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d308      	bcc.n	800b8f2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x2dc>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	3310      	adds	r3, #16
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	1d1a      	adds	r2, r3, #4
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d91b      	bls.n	800b92a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x314>
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	3310      	adds	r3, #16
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d30c      	bcc.n	800b91c <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x306>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	3310      	adds	r3, #16
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	1d1a      	adds	r2, r3, #4
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b916:	440b      	add	r3, r1
 800b918:	429a      	cmp	r2, r3
 800b91a:	d906      	bls.n	800b92a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x314>
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	3310      	adds	r3, #16
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800b926:	23f4      	movs	r3, #244	; 0xf4
 800b928:	e053      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(ULONG)))
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	3314      	adds	r3, #20
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f113 0f05 	cmn.w	r3, #5
 800b934:	d824      	bhi.n	800b980 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x36a>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	3314      	adds	r3, #20
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b940:	4293      	cmp	r3, r2
 800b942:	d308      	bcc.n	800b956 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x340>
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	3314      	adds	r3, #20
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b950:	3301      	adds	r3, #1
 800b952:	429a      	cmp	r2, r3
 800b954:	d91b      	bls.n	800b98e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x378>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	3314      	adds	r3, #20
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b962:	429a      	cmp	r2, r3
 800b964:	d30c      	bcc.n	800b980 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x36a>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	3314      	adds	r3, #20
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	1d1a      	adds	r2, r3, #4
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b97a:	440b      	add	r3, r1
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d906      	bls.n	800b98e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x378>
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	3314      	adds	r3, #20
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x378>
            return(TXM_MODULE_INVALID_MEMORY);
 800b98a:	23f4      	movs	r3, #244	; 0xf4
 800b98c:	e021      	b.n	800b9d2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x3bc>
    }

    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b98e:	68b8      	ldr	r0, [r7, #8]
 800b990:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b996:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[1],
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	3304      	adds	r3, #4
 800b99c:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b99e:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[2],
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b9a6:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	330c      	adds	r3, #12
 800b9ac:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b9ae:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3310      	adds	r3, #16
 800b9b4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b9b6:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[5]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	3314      	adds	r3, #20
 800b9bc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	9502      	str	r5, [sp, #8]
 800b9c2:	9401      	str	r4, [sp, #4]
 800b9c4:	9200      	str	r2, [sp, #0]
 800b9c6:	4663      	mov	r3, ip
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	f008 fdb3 	bl	8014534 <_tx_byte_pool_performance_info_get>
 800b9ce:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800b9d0:	697b      	ldr	r3, [r7, #20]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9da <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch>:
    ULONG *splits, -> extra_parameters[2]
    ULONG *suspensions, -> extra_parameters[3]
    ULONG *timeouts -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800b9da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9dc:	b08b      	sub	sp, #44	; 0x2c
 800b9de:	af04      	add	r7, sp, #16
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	60b9      	str	r1, [r7, #8]
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 8168 	beq.w	800bcc6 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2ec>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	f113 0f05 	cmn.w	r3, #5
 800b9fc:	d81d      	bhi.n	800ba3a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x60>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba02:	461a      	mov	r2, r3
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d306      	bcc.n	800ba18 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x3e>
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	1d1a      	adds	r2, r3, #4
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba12:	3301      	adds	r3, #1
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d915      	bls.n	800ba44 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x6a>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d30a      	bcc.n	800ba3a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x60>
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba34:	440b      	add	r3, r1
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d904      	bls.n	800ba44 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x6a>
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ba40:	23f4      	movs	r3, #244	; 0xf4
 800ba42:	e15d      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f113 0f05 	cmn.w	r3, #5
 800ba4a:	d81d      	bhi.n	800ba88 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xae>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	461a      	mov	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d306      	bcc.n	800ba66 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x8c>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	1d1a      	adds	r2, r3, #4
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba60:	3301      	adds	r3, #1
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d915      	bls.n	800ba92 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xb8>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d30a      	bcc.n	800ba88 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xae>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba82:	440b      	add	r3, r1
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d904      	bls.n	800ba92 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xb8>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d001      	beq.n	800ba92 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 800ba8e:	23f4      	movs	r3, #244	; 0xf4
 800ba90:	e136      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	f113 0f15 	cmn.w	r3, #21
 800ba98:	d81f      	bhi.n	800bada <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x100>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	461a      	mov	r2, r3
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d807      	bhi.n	800bab6 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xdc>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	f103 0214 	add.w	r2, r3, #20
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab0:	3301      	adds	r3, #1
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d913      	bls.n	800bade <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x104>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d80b      	bhi.n	800bada <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x100>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	f103 0214 	add.w	r2, r3, #20
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bad4:	440b      	add	r3, r1
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d901      	bls.n	800bade <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 800bada:	23f4      	movs	r3, #244	; 0xf4
 800badc:	e110      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f113 0f05 	cmn.w	r3, #5
 800bae6:	d820      	bhi.n	800bb2a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x150>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d307      	bcc.n	800bb04 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x12a>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	1d1a      	adds	r2, r3, #4
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafe:	3301      	adds	r3, #1
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d918      	bls.n	800bb36 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x15c>
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d30b      	bcc.n	800bb2a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x150>
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	1d1a      	adds	r2, r3, #4
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb24:	440b      	add	r3, r1
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d905      	bls.n	800bb36 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x15c>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 800bb32:	23f4      	movs	r3, #244	; 0xf4
 800bb34:	e0e4      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f113 0f05 	cmn.w	r3, #5
 800bb40:	d824      	bhi.n	800bb8c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x1b2>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	3304      	adds	r3, #4
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d308      	bcc.n	800bb62 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x188>
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	3304      	adds	r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	1d1a      	adds	r2, r3, #4
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d91b      	bls.n	800bb9a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x1c0>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	3304      	adds	r3, #4
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d30c      	bcc.n	800bb8c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x1b2>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	3304      	adds	r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb86:	440b      	add	r3, r1
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d906      	bls.n	800bb9a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x1c0>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 800bb96:	23f4      	movs	r3, #244	; 0xf4
 800bb98:	e0b2      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f113 0f05 	cmn.w	r3, #5
 800bba4:	d824      	bhi.n	800bbf0 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x216>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	3308      	adds	r3, #8
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d308      	bcc.n	800bbc6 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x1ec>
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	1d1a      	adds	r2, r3, #4
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d91b      	bls.n	800bbfe <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x224>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d30c      	bcc.n	800bbf0 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x216>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	3308      	adds	r3, #8
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	1d1a      	adds	r2, r3, #4
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bbea:	440b      	add	r3, r1
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d906      	bls.n	800bbfe <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x224>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x224>
            return(TXM_MODULE_INVALID_MEMORY);
 800bbfa:	23f4      	movs	r3, #244	; 0xf4
 800bbfc:	e080      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	330c      	adds	r3, #12
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f113 0f05 	cmn.w	r3, #5
 800bc08:	d824      	bhi.n	800bc54 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x27a>
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d308      	bcc.n	800bc2a <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x250>
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	330c      	adds	r3, #12
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	1d1a      	adds	r2, r3, #4
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc24:	3301      	adds	r3, #1
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d91b      	bls.n	800bc62 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x288>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	330c      	adds	r3, #12
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d30c      	bcc.n	800bc54 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x27a>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	1d1a      	adds	r2, r3, #4
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc4e:	440b      	add	r3, r1
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d906      	bls.n	800bc62 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x288>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	330c      	adds	r3, #12
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x288>
            return(TXM_MODULE_INVALID_MEMORY);
 800bc5e:	23f4      	movs	r3, #244	; 0xf4
 800bc60:	e04e      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	3310      	adds	r3, #16
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f113 0f05 	cmn.w	r3, #5
 800bc6c:	d824      	bhi.n	800bcb8 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2de>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	3310      	adds	r3, #16
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d308      	bcc.n	800bc8e <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2b4>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	3310      	adds	r3, #16
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	1d1a      	adds	r2, r3, #4
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	3301      	adds	r3, #1
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d91b      	bls.n	800bcc6 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2ec>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	3310      	adds	r3, #16
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d30c      	bcc.n	800bcb8 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2de>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	3310      	adds	r3, #16
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	1d1a      	adds	r2, r3, #4
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bcb2:	440b      	add	r3, r1
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d906      	bls.n	800bcc6 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2ec>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	3310      	adds	r3, #16
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x2ec>
            return(TXM_MODULE_INVALID_MEMORY);
 800bcc2:	23f4      	movs	r3, #244	; 0xf4
 800bcc4:	e01c      	b.n	800bd00 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x326>
    }

    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800bcc6:	68b8      	ldr	r0, [r7, #8]
 800bcc8:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800bcce:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800bcd6:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[2],
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800bcde:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	330c      	adds	r3, #12
 800bce4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800bce6:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	3310      	adds	r3, #16
 800bcec:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800bcee:	9302      	str	r3, [sp, #8]
 800bcf0:	9401      	str	r4, [sp, #4]
 800bcf2:	9200      	str	r2, [sp, #0]
 800bcf4:	4633      	mov	r3, r6
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	f008 fc5c 	bl	80145b4 <_tx_byte_pool_performance_system_info_get>
 800bcfc:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800bcfe:	697b      	ldr	r3, [r7, #20]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd08 <_txm_module_manager_tx_byte_pool_prioritize_dispatch>:
#ifndef TXM_BYTE_POOL_PRIORITIZE_CALL_NOT_USED
/* UINT _txe_byte_pool_prioritize(
    TX_BYTE_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d03a      	beq.n	800bd94 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800bd24:	d81f      	bhi.n	800bd66 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x5e>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d307      	bcc.n	800bd42 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x3a>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d923      	bls.n	800bd8a <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x82>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d30b      	bcc.n	800bd66 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x5e>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd60:	440b      	add	r3, r1
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d911      	bls.n	800bd8a <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x82>
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800bd6c:	d812      	bhi.n	800bd94 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x8c>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	461a      	mov	r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d30c      	bcc.n	800bd94 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x8c>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	3301      	adds	r3, #1
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d804      	bhi.n	800bd94 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x8c>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800bd90:	23f4      	movs	r3, #244	; 0xf4
 800bd92:	e005      	b.n	800bda0 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_prioritize(
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fc f876 	bl	8007e88 <_txe_byte_pool_prioritize>
 800bd9c:	60f8      	str	r0, [r7, #12]
        (TX_BYTE_POOL *) param_0
    );
    return(return_value);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_txm_module_manager_tx_byte_release_dispatch>:
#ifndef TXM_BYTE_RELEASE_CALL_NOT_USED
/* UINT _txe_byte_release(
    VOID *memory_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_release_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;
ALIGN_TYPE block_header_start;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d02f      	beq.n	800be1e <_txm_module_manager_tx_byte_release_dispatch+0x76>
    {
        /* Is the pointer non-null?  */
        if ((void *) param_0 != TX_NULL)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d02c      	beq.n	800be1e <_txm_module_manager_tx_byte_release_dispatch+0x76>
        {

            /* Calculate the beginning of the header info for this block (the header
               consists of 2 pointers).  */
            block_header_start =  param_0 - 2*sizeof(ALIGN_TYPE);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	3b08      	subs	r3, #8
 800bdc8:	60fb      	str	r3, [r7, #12]

            if (/* Did we underflow when doing the subtract?  */
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d823      	bhi.n	800be1a <_txm_module_manager_tx_byte_release_dispatch+0x72>
                (block_header_start > param_0) ||
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f113 0f09 	cmn.w	r3, #9
 800bdd8:	d81f      	bhi.n	800be1a <_txm_module_manager_tx_byte_release_dispatch+0x72>
                /* Ensure the pointer is inside the module's data. Note that we only
                   check the pointers in the header because only those two are
                   dereferenced during the pointer's validity check in _tx_byte_release. */
                (!TXM_MODULE_MANAGER_CHECK_INSIDE_DATA(module_instance, block_header_start, 2*sizeof(ALIGN_TYPE))))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdde:	461a      	mov	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d307      	bcc.n	800bdf6 <_txm_module_manager_tx_byte_release_dispatch+0x4e>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f103 0208 	add.w	r2, r3, #8
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d913      	bls.n	800be1e <_txm_module_manager_tx_byte_release_dispatch+0x76>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d30b      	bcc.n	800be1a <_txm_module_manager_tx_byte_release_dispatch+0x72>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f103 0208 	add.w	r2, r3, #8
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800be14:	440b      	add	r3, r1
 800be16:	429a      	cmp	r2, r3
 800be18:	d901      	bls.n	800be1e <_txm_module_manager_tx_byte_release_dispatch+0x76>
            {

                /* Invalid pointer.  */
                return(TXM_MODULE_INVALID_MEMORY);
 800be1a:	23f4      	movs	r3, #244	; 0xf4
 800be1c:	e005      	b.n	800be2a <_txm_module_manager_tx_byte_release_dispatch+0x82>
            }
        }
    }

    return_value = (ALIGN_TYPE) _txe_byte_release(
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	4618      	mov	r0, r3
 800be22:	f7fc f84f 	bl	8007ec4 <_txe_byte_release>
 800be26:	60b8      	str	r0, [r7, #8]
        (VOID *) param_0
    );
    return(return_value);
 800be28:	68bb      	ldr	r3, [r7, #8]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <_txm_module_manager_tx_event_flags_create_dispatch>:
    TX_EVENT_FLAGS_GROUP *group_ptr, -> param_0
    CHAR *name_ptr, -> param_1
    UINT event_control_block_size -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d05a      	beq.n	800bf04 <_txm_module_manager_tx_event_flags_create_dispatch+0xd0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800be4e:	4b33      	ldr	r3, [pc, #204]	; (800bf1c <_txm_module_manager_tx_event_flags_create_dispatch+0xe8>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d119      	bne.n	800be8a <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800be5c:	d815      	bhi.n	800be8a <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800be5e:	4b30      	ldr	r3, [pc, #192]	; (800bf20 <_txm_module_manager_tx_event_flags_create_dispatch+0xec>)
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	3310      	adds	r3, #16
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	429a      	cmp	r2, r3
 800be68:	d30f      	bcc.n	800be8a <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	3330      	adds	r3, #48	; 0x30
 800be6e:	4a2c      	ldr	r2, [pc, #176]	; (800bf20 <_txm_module_manager_tx_event_flags_create_dispatch+0xec>)
 800be70:	6991      	ldr	r1, [r2, #24]
 800be72:	4a2b      	ldr	r2, [pc, #172]	; (800bf20 <_txm_module_manager_tx_event_flags_create_dispatch+0xec>)
 800be74:	69d2      	ldr	r2, [r2, #28]
 800be76:	440a      	add	r2, r1
 800be78:	4293      	cmp	r3, r2
 800be7a:	d806      	bhi.n	800be8a <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800be7c:	2130      	movs	r1, #48	; 0x30
 800be7e:	68b8      	ldr	r0, [r7, #8]
 800be80:	f008 fa7a 	bl	8014378 <_txm_module_manager_object_size_check>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <_txm_module_manager_tx_event_flags_create_dispatch+0x60>
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <_txm_module_manager_tx_event_flags_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 800be90:	23f4      	movs	r3, #244	; 0xf4
 800be92:	e03f      	b.n	800bf14 <_txm_module_manager_tx_event_flags_create_dispatch+0xe0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9a:	d01d      	beq.n	800bed8 <_txm_module_manager_tx_event_flags_create_dispatch+0xa4>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	461a      	mov	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d306      	bcc.n	800beb6 <_txm_module_manager_tx_event_flags_create_dispatch+0x82>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb0:	3301      	adds	r3, #1
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d926      	bls.n	800bf04 <_txm_module_manager_tx_event_flags_create_dispatch+0xd0>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d30a      	bcc.n	800bed8 <_txm_module_manager_tx_event_flags_create_dispatch+0xa4>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bed2:	440b      	add	r3, r1
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d915      	bls.n	800bf04 <_txm_module_manager_tx_event_flags_create_dispatch+0xd0>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d00c      	beq.n	800befa <_txm_module_manager_tx_event_flags_create_dispatch+0xc6>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	461a      	mov	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4293      	cmp	r3, r2
 800beea:	d306      	bcc.n	800befa <_txm_module_manager_tx_event_flags_create_dispatch+0xc6>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	3301      	adds	r3, #1
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d904      	bls.n	800bf04 <_txm_module_manager_tx_event_flags_create_dispatch+0xd0>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <_txm_module_manager_tx_event_flags_create_dispatch+0xd0>
            return(TXM_MODULE_INVALID_MEMORY);
 800bf00:	23f4      	movs	r3, #244	; 0xf4
 800bf02:	e007      	b.n	800bf14 <_txm_module_manager_tx_event_flags_create_dispatch+0xe0>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_create(
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fc f816 	bl	8007f3c <_txe_event_flags_create>
 800bf10:	6178      	str	r0, [r7, #20]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (CHAR *) param_1,
        (UINT) param_2
    );
    return(return_value);
 800bf12:	697b      	ldr	r3, [r7, #20]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	2000f600 	.word	0x2000f600
 800bf20:	2000f5cc 	.word	0x2000f5cc

0800bf24 <_txm_module_manager_tx_event_flags_delete_dispatch>:
#ifndef TXM_EVENT_FLAGS_DELETE_CALL_NOT_USED
/* UINT _txe_event_flags_delete(
    TX_EVENT_FLAGS_GROUP *group_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d03a      	beq.n	800bfb0 <_txm_module_manager_tx_event_flags_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800bf40:	d81f      	bhi.n	800bf82 <_txm_module_manager_tx_event_flags_delete_dispatch+0x5e>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf46:	461a      	mov	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d307      	bcc.n	800bf5e <_txm_module_manager_tx_event_flags_delete_dispatch+0x3a>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf58:	3301      	adds	r3, #1
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d923      	bls.n	800bfa6 <_txm_module_manager_tx_event_flags_delete_dispatch+0x82>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d30b      	bcc.n	800bf82 <_txm_module_manager_tx_event_flags_delete_dispatch+0x5e>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bf7c:	440b      	add	r3, r1
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d911      	bls.n	800bfa6 <_txm_module_manager_tx_event_flags_delete_dispatch+0x82>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800bf88:	d812      	bhi.n	800bfb0 <_txm_module_manager_tx_event_flags_delete_dispatch+0x8c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d30c      	bcc.n	800bfb0 <_txm_module_manager_tx_event_flags_delete_dispatch+0x8c>
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d804      	bhi.n	800bfb0 <_txm_module_manager_tx_event_flags_delete_dispatch+0x8c>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <_txm_module_manager_tx_event_flags_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800bfac:	23f4      	movs	r3, #244	; 0xf4
 800bfae:	e00d      	b.n	800bfcc <_txm_module_manager_tx_event_flags_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_delete(
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fc f850 	bl	8008058 <_txe_event_flags_delete>
 800bfb8:	60f8      	str	r0, [r7, #12]
        (TX_EVENT_FLAGS_GROUP *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d104      	bne.n	800bfca <_txm_module_manager_tx_event_flags_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f006 fefc 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800bfc8:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800bfca:	68fb      	ldr	r3, [r7, #12]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <_txm_module_manager_tx_event_flags_get_dispatch>:
    UINT get_option, -> extra_parameters[0]
    ULONG *actual_flags_ptr, -> extra_parameters[1]
    ULONG wait_option -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f003 0302 	and.w	r3, r3, #2
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 8093 	beq.w	800c116 <_txm_module_manager_tx_event_flags_get_dispatch+0x142>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800bff6:	d81f      	bhi.n	800c038 <_txm_module_manager_tx_event_flags_get_dispatch+0x64>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	461a      	mov	r2, r3
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	4293      	cmp	r3, r2
 800c002:	d307      	bcc.n	800c014 <_txm_module_manager_tx_event_flags_get_dispatch+0x40>
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	3301      	adds	r3, #1
 800c010:	429a      	cmp	r2, r3
 800c012:	d923      	bls.n	800c05c <_txm_module_manager_tx_event_flags_get_dispatch+0x88>
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d30b      	bcc.n	800c038 <_txm_module_manager_tx_event_flags_get_dispatch+0x64>
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c032:	440b      	add	r3, r1
 800c034:	429a      	cmp	r2, r3
 800c036:	d911      	bls.n	800c05c <_txm_module_manager_tx_event_flags_get_dispatch+0x88>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c03e:	d812      	bhi.n	800c066 <_txm_module_manager_tx_event_flags_get_dispatch+0x92>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	461a      	mov	r2, r3
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	4293      	cmp	r3, r2
 800c04a:	d30c      	bcc.n	800c066 <_txm_module_manager_tx_event_flags_get_dispatch+0x92>
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	69db      	ldr	r3, [r3, #28]
 800c056:	3301      	adds	r3, #1
 800c058:	429a      	cmp	r2, r3
 800c05a:	d804      	bhi.n	800c066 <_txm_module_manager_tx_event_flags_get_dispatch+0x92>
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <_txm_module_manager_tx_event_flags_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800c062:	23f4      	movs	r3, #244	; 0xf4
 800c064:	e068      	b.n	800c138 <_txm_module_manager_tx_event_flags_get_dispatch+0x164>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	3304      	adds	r3, #4
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f113 0f05 	cmn.w	r3, #5
 800c070:	d824      	bhi.n	800c0bc <_txm_module_manager_tx_event_flags_get_dispatch+0xe8>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	3304      	adds	r3, #4
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d308      	bcc.n	800c092 <_txm_module_manager_tx_event_flags_get_dispatch+0xbe>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	3304      	adds	r3, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	1d1a      	adds	r2, r3, #4
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08c:	3301      	adds	r3, #1
 800c08e:	429a      	cmp	r2, r3
 800c090:	d91b      	bls.n	800c0ca <_txm_module_manager_tx_event_flags_get_dispatch+0xf6>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	3304      	adds	r3, #4
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d30c      	bcc.n	800c0bc <_txm_module_manager_tx_event_flags_get_dispatch+0xe8>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	1d1a      	adds	r2, r3, #4
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0b6:	440b      	add	r3, r1
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d906      	bls.n	800c0ca <_txm_module_manager_tx_event_flags_get_dispatch+0xf6>
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <_txm_module_manager_tx_event_flags_get_dispatch+0xf6>
            return(TXM_MODULE_INVALID_MEMORY);
 800c0c6:	23f4      	movs	r3, #244	; 0xf4
 800c0c8:	e036      	b.n	800c138 <_txm_module_manager_tx_event_flags_get_dispatch+0x164>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	f113 0f0d 	cmn.w	r3, #13
 800c0d0:	d81f      	bhi.n	800c112 <_txm_module_manager_tx_event_flags_get_dispatch+0x13e>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d807      	bhi.n	800c0ee <_txm_module_manager_tx_event_flags_get_dispatch+0x11a>
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	f103 020c 	add.w	r2, r3, #12
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d913      	bls.n	800c116 <_txm_module_manager_tx_event_flags_get_dispatch+0x142>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d80b      	bhi.n	800c112 <_txm_module_manager_tx_event_flags_get_dispatch+0x13e>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	f103 020c 	add.w	r2, r3, #12
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c10c:	440b      	add	r3, r1
 800c10e:	429a      	cmp	r2, r3
 800c110:	d901      	bls.n	800c116 <_txm_module_manager_tx_event_flags_get_dispatch+0x142>
            return(TXM_MODULE_INVALID_MEMORY);
 800c112:	23f4      	movs	r3, #244	; 0xf4
 800c114:	e010      	b.n	800c138 <_txm_module_manager_tx_event_flags_get_dispatch+0x164>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_get(
 800c116:	68b8      	ldr	r0, [r7, #8]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (ULONG) param_1,
        (UINT) extra_parameters[0],
        (ULONG *) extra_parameters[1],
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	3304      	adds	r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_get(
 800c122:	4619      	mov	r1, r3
        (ULONG) extra_parameters[2]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_event_flags_get(
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	460b      	mov	r3, r1
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	f7fb ffd0 	bl	80080d4 <_txe_event_flags_get>
 800c134:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800c136:	697b      	ldr	r3, [r7, #20]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <_txm_module_manager_tx_event_flags_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[1]
    ULONG *suspended_count, -> extra_parameters[2]
    TX_EVENT_FLAGS_GROUP **next_group -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800c140:	b5b0      	push	{r4, r5, r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 814a 	beq.w	800c3f0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2b0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c162:	d81f      	bhi.n	800c1a4 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x64>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c168:	461a      	mov	r2, r3
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d307      	bcc.n	800c180 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x40>
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	3301      	adds	r3, #1
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d923      	bls.n	800c1c8 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x88>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d30b      	bcc.n	800c1a4 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x64>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c19e:	440b      	add	r3, r1
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d911      	bls.n	800c1c8 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x88>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c1aa:	d812      	bhi.n	800c1d2 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x92>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d30c      	bcc.n	800c1d2 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x92>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d804      	bhi.n	800c1d2 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x92>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800c1ce:	23f4      	movs	r3, #244	; 0xf4
 800c1d0:	e126      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f113 0f05 	cmn.w	r3, #5
 800c1d8:	d81d      	bhi.n	800c216 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xd6>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	461a      	mov	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d306      	bcc.n	800c1f4 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xb4>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	1d1a      	adds	r2, r3, #4
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d915      	bls.n	800c220 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xe0>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d30a      	bcc.n	800c216 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xd6>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	1d1a      	adds	r2, r3, #4
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c210:	440b      	add	r3, r1
 800c212:	429a      	cmp	r2, r3
 800c214:	d904      	bls.n	800c220 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xe0>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800c21c:	23f4      	movs	r3, #244	; 0xf4
 800c21e:	e0ff      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	f113 0f11 	cmn.w	r3, #17
 800c226:	d81f      	bhi.n	800c268 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x128>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	461a      	mov	r2, r3
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d807      	bhi.n	800c244 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x104>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	f103 0210 	add.w	r2, r3, #16
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c23e:	3301      	adds	r3, #1
 800c240:	429a      	cmp	r2, r3
 800c242:	d913      	bls.n	800c26c <_txm_module_manager_tx_event_flags_info_get_dispatch+0x12c>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d80b      	bhi.n	800c268 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x128>
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	f103 0210 	add.w	r2, r3, #16
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c262:	440b      	add	r3, r1
 800c264:	429a      	cmp	r2, r3
 800c266:	d901      	bls.n	800c26c <_txm_module_manager_tx_event_flags_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800c268:	23f4      	movs	r3, #244	; 0xf4
 800c26a:	e0d9      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f113 0f05 	cmn.w	r3, #5
 800c274:	d820      	bhi.n	800c2b8 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x178>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c27e:	4293      	cmp	r3, r2
 800c280:	d307      	bcc.n	800c292 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x152>
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	1d1a      	adds	r2, r3, #4
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28c:	3301      	adds	r3, #1
 800c28e:	429a      	cmp	r2, r3
 800c290:	d918      	bls.n	800c2c4 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x184>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d30b      	bcc.n	800c2b8 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x178>
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	1d1a      	adds	r2, r3, #4
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c2b2:	440b      	add	r3, r1
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d905      	bls.n	800c2c4 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x184>
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800c2c0:	23f4      	movs	r3, #244	; 0xf4
 800c2c2:	e0ad      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(TX_THREAD *)))
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f113 0f05 	cmn.w	r3, #5
 800c2ce:	d824      	bhi.n	800c31a <_txm_module_manager_tx_event_flags_info_get_dispatch+0x1da>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d308      	bcc.n	800c2f0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x1b0>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	1d1a      	adds	r2, r3, #4
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d91b      	bls.n	800c328 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x1e8>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d30c      	bcc.n	800c31a <_txm_module_manager_tx_event_flags_info_get_dispatch+0x1da>
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	3304      	adds	r3, #4
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	1d1a      	adds	r2, r3, #4
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c314:	440b      	add	r3, r1
 800c316:	429a      	cmp	r2, r3
 800c318:	d906      	bls.n	800c328 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x1e8>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	3304      	adds	r3, #4
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800c324:	23f4      	movs	r3, #244	; 0xf4
 800c326:	e07b      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	3308      	adds	r3, #8
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f113 0f05 	cmn.w	r3, #5
 800c332:	d824      	bhi.n	800c37e <_txm_module_manager_tx_event_flags_info_get_dispatch+0x23e>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	3308      	adds	r3, #8
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c33e:	4293      	cmp	r3, r2
 800c340:	d308      	bcc.n	800c354 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x214>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	3308      	adds	r3, #8
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	1d1a      	adds	r2, r3, #4
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34e:	3301      	adds	r3, #1
 800c350:	429a      	cmp	r2, r3
 800c352:	d91b      	bls.n	800c38c <_txm_module_manager_tx_event_flags_info_get_dispatch+0x24c>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	3308      	adds	r3, #8
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c360:	429a      	cmp	r2, r3
 800c362:	d30c      	bcc.n	800c37e <_txm_module_manager_tx_event_flags_info_get_dispatch+0x23e>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	3308      	adds	r3, #8
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	1d1a      	adds	r2, r3, #4
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c378:	440b      	add	r3, r1
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d906      	bls.n	800c38c <_txm_module_manager_tx_event_flags_info_get_dispatch+0x24c>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	3308      	adds	r3, #8
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d001      	beq.n	800c38c <_txm_module_manager_tx_event_flags_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800c388:	23f4      	movs	r3, #244	; 0xf4
 800c38a:	e049      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(TX_EVENT_FLAGS_GROUP *)))
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	330c      	adds	r3, #12
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f113 0f05 	cmn.w	r3, #5
 800c396:	d824      	bhi.n	800c3e2 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2a2>
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	330c      	adds	r3, #12
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d308      	bcc.n	800c3b8 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x278>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	1d1a      	adds	r2, r3, #4
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d91b      	bls.n	800c3f0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2b0>
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	330c      	adds	r3, #12
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d30c      	bcc.n	800c3e2 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2a2>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	330c      	adds	r3, #12
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	1d1a      	adds	r2, r3, #4
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c3dc:	440b      	add	r3, r1
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d906      	bls.n	800c3f0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2b0>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	330c      	adds	r3, #12
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800c3ec:	23f4      	movs	r3, #244	; 0xf4
 800c3ee:	e017      	b.n	800c420 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x2e0>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800c3f0:	68b8      	ldr	r0, [r7, #8]
 800c3f2:	6879      	ldr	r1, [r7, #4]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800c3f8:	461c      	mov	r4, r3
        (TX_THREAD **) extra_parameters[1],
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800c400:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	3308      	adds	r3, #8
 800c406:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800c408:	461a      	mov	r2, r3
        (TX_EVENT_FLAGS_GROUP **) extra_parameters[3]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	330c      	adds	r3, #12
 800c40e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	9200      	str	r2, [sp, #0]
 800c414:	462b      	mov	r3, r5
 800c416:	4622      	mov	r2, r4
 800c418:	f7fb feb2 	bl	8008180 <_txe_event_flags_info_get>
 800c41c:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800c41e:	697b      	ldr	r3, [r7, #20]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bdb0      	pop	{r4, r5, r7, pc}

0800c428 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch>:
    ULONG *gets, -> extra_parameters[0]
    ULONG *suspensions, -> extra_parameters[1]
    ULONG *timeouts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800c428:	b590      	push	{r4, r7, lr}
 800c42a:	b089      	sub	sp, #36	; 0x24
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 8118 	beq.w	800c674 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x24c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c44a:	d81f      	bhi.n	800c48c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x64>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c450:	461a      	mov	r2, r3
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	4293      	cmp	r3, r2
 800c456:	d307      	bcc.n	800c468 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x40>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c462:	3301      	adds	r3, #1
 800c464:	429a      	cmp	r2, r3
 800c466:	d923      	bls.n	800c4b0 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x88>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	429a      	cmp	r2, r3
 800c472:	d30b      	bcc.n	800c48c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x64>
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c486:	440b      	add	r3, r1
 800c488:	429a      	cmp	r2, r3
 800c48a:	d911      	bls.n	800c4b0 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x88>
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c492:	d812      	bhi.n	800c4ba <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x92>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	461a      	mov	r2, r3
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d30c      	bcc.n	800c4ba <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x92>
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d804      	bhi.n	800c4ba <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x92>
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800c4b6:	23f4      	movs	r3, #244	; 0xf4
 800c4b8:	e0ee      	b.n	800c698 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f113 0f05 	cmn.w	r3, #5
 800c4c0:	d81d      	bhi.n	800c4fe <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xd6>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d306      	bcc.n	800c4dc <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xb4>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	1d1a      	adds	r2, r3, #4
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d915      	bls.n	800c508 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xe0>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d30a      	bcc.n	800c4fe <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xd6>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	1d1a      	adds	r2, r3, #4
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c4f8:	440b      	add	r3, r1
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d904      	bls.n	800c508 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xe0>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800c504:	23f4      	movs	r3, #244	; 0xf4
 800c506:	e0c7      	b.n	800c698 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	f113 0f0d 	cmn.w	r3, #13
 800c50e:	d81f      	bhi.n	800c550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x128>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	461a      	mov	r2, r3
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d807      	bhi.n	800c52c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x104>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	f103 020c 	add.w	r2, r3, #12
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c526:	3301      	adds	r3, #1
 800c528:	429a      	cmp	r2, r3
 800c52a:	d913      	bls.n	800c554 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x12c>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	429a      	cmp	r2, r3
 800c536:	d80b      	bhi.n	800c550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x128>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	f103 020c 	add.w	r2, r3, #12
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c54a:	440b      	add	r3, r1
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d901      	bls.n	800c554 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800c550:	23f4      	movs	r3, #244	; 0xf4
 800c552:	e0a1      	b.n	800c698 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f113 0f05 	cmn.w	r3, #5
 800c55c:	d820      	bhi.n	800c5a0 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x178>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c566:	4293      	cmp	r3, r2
 800c568:	d307      	bcc.n	800c57a <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x152>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c574:	3301      	adds	r3, #1
 800c576:	429a      	cmp	r2, r3
 800c578:	d918      	bls.n	800c5ac <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x184>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c584:	429a      	cmp	r2, r3
 800c586:	d30b      	bcc.n	800c5a0 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x178>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	1d1a      	adds	r2, r3, #4
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c59a:	440b      	add	r3, r1
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d905      	bls.n	800c5ac <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x184>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800c5a8:	23f4      	movs	r3, #244	; 0xf4
 800c5aa:	e075      	b.n	800c698 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f113 0f05 	cmn.w	r3, #5
 800c5b6:	d824      	bhi.n	800c602 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x1da>
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d308      	bcc.n	800c5d8 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x1b0>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	1d1a      	adds	r2, r3, #4
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d91b      	bls.n	800c610 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x1e8>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d30c      	bcc.n	800c602 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x1da>
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	1d1a      	adds	r2, r3, #4
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c5fc:	440b      	add	r3, r1
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d906      	bls.n	800c610 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x1e8>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	3304      	adds	r3, #4
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800c60c:	23f4      	movs	r3, #244	; 0xf4
 800c60e:	e043      	b.n	800c698 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	3308      	adds	r3, #8
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f113 0f05 	cmn.w	r3, #5
 800c61a:	d824      	bhi.n	800c666 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x23e>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	3308      	adds	r3, #8
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c626:	4293      	cmp	r3, r2
 800c628:	d308      	bcc.n	800c63c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x214>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	3308      	adds	r3, #8
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c636:	3301      	adds	r3, #1
 800c638:	429a      	cmp	r2, r3
 800c63a:	d91b      	bls.n	800c674 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x24c>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	3308      	adds	r3, #8
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c648:	429a      	cmp	r2, r3
 800c64a:	d30c      	bcc.n	800c666 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x23e>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	3308      	adds	r3, #8
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	1d1a      	adds	r2, r3, #4
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c660:	440b      	add	r3, r1
 800c662:	429a      	cmp	r2, r3
 800c664:	d906      	bls.n	800c674 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x24c>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	3308      	adds	r3, #8
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800c670:	23f4      	movs	r3, #244	; 0xf4
 800c672:	e011      	b.n	800c698 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x270>
    }

    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800c674:	68b8      	ldr	r0, [r7, #8]
 800c676:	6879      	ldr	r1, [r7, #4]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800c67c:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	3304      	adds	r3, #4
 800c682:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800c684:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	3308      	adds	r3, #8
 800c68a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	4623      	mov	r3, r4
 800c690:	f007 ffca 	bl	8014628 <_tx_event_flags_performance_info_get>
 800c694:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800c696:	697b      	ldr	r3, [r7, #20]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd90      	pop	{r4, r7, pc}

0800c6a0 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch>:
    ULONG *gets, -> param_1
    ULONG *suspensions, -> extra_parameters[0]
    ULONG *timeouts -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
 800c6ac:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	f003 0302 	and.w	r3, r3, #2
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 80d2 	beq.w	800c860 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1c0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f113 0f05 	cmn.w	r3, #5
 800c6c2:	d81d      	bhi.n	800c700 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x60>
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d306      	bcc.n	800c6de <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x3e>
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	3301      	adds	r3, #1
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d915      	bls.n	800c70a <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x6a>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d30a      	bcc.n	800c700 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x60>
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	1d1a      	adds	r2, r3, #4
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c6fa:	440b      	add	r3, r1
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d904      	bls.n	800c70a <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x6a>
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 800c706:	23f4      	movs	r3, #244	; 0xf4
 800c708:	e0b6      	b.n	800c878 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f113 0f05 	cmn.w	r3, #5
 800c710:	d81d      	bhi.n	800c74e <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xae>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c716:	461a      	mov	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d306      	bcc.n	800c72c <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x8c>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	1d1a      	adds	r2, r3, #4
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c726:	3301      	adds	r3, #1
 800c728:	429a      	cmp	r2, r3
 800c72a:	d915      	bls.n	800c758 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xb8>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	429a      	cmp	r2, r3
 800c736:	d30a      	bcc.n	800c74e <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xae>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	1d1a      	adds	r2, r3, #4
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c748:	440b      	add	r3, r1
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d904      	bls.n	800c758 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xb8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 800c754:	23f4      	movs	r3, #244	; 0xf4
 800c756:	e08f      	b.n	800c878 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f113 0f09 	cmn.w	r3, #9
 800c75e:	d81f      	bhi.n	800c7a0 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x100>
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c764:	461a      	mov	r2, r3
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d807      	bhi.n	800c77c <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xdc>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	f103 0208 	add.w	r2, r3, #8
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c776:	3301      	adds	r3, #1
 800c778:	429a      	cmp	r2, r3
 800c77a:	d913      	bls.n	800c7a4 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x104>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d80b      	bhi.n	800c7a0 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x100>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	f103 0208 	add.w	r2, r3, #8
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c79a:	440b      	add	r3, r1
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d901      	bls.n	800c7a4 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 800c7a0:	23f4      	movs	r3, #244	; 0xf4
 800c7a2:	e069      	b.n	800c878 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f113 0f05 	cmn.w	r3, #5
 800c7ac:	d820      	bhi.n	800c7f0 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x150>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d307      	bcc.n	800c7ca <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x12a>
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	1d1a      	adds	r2, r3, #4
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d918      	bls.n	800c7fc <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x15c>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d30b      	bcc.n	800c7f0 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x150>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7ea:	440b      	add	r3, r1
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d905      	bls.n	800c7fc <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x15c>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 800c7f8:	23f4      	movs	r3, #244	; 0xf4
 800c7fa:	e03d      	b.n	800c878 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	3304      	adds	r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f113 0f05 	cmn.w	r3, #5
 800c806:	d824      	bhi.n	800c852 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1b2>
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	3304      	adds	r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c812:	4293      	cmp	r3, r2
 800c814:	d308      	bcc.n	800c828 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x188>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	3304      	adds	r3, #4
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	1d1a      	adds	r2, r3, #4
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c822:	3301      	adds	r3, #1
 800c824:	429a      	cmp	r2, r3
 800c826:	d91b      	bls.n	800c860 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1c0>
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	3304      	adds	r3, #4
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c834:	429a      	cmp	r2, r3
 800c836:	d30c      	bcc.n	800c852 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1b2>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	3304      	adds	r3, #4
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	1d1a      	adds	r2, r3, #4
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c84c:	440b      	add	r3, r1
 800c84e:	429a      	cmp	r2, r3
 800c850:	d906      	bls.n	800c860 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1c0>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	3304      	adds	r3, #4
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 800c85c:	23f4      	movs	r3, #244	; 0xf4
 800c85e:	e00b      	b.n	800c878 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x1d8>
    }

    return_value = (ALIGN_TYPE) _tx_event_flags_performance_system_info_get(
 800c860:	68b8      	ldr	r0, [r7, #8]
 800c862:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_system_info_get(
 800c868:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	3304      	adds	r3, #4
 800c86e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_system_info_get(
 800c870:	f007 ff08 	bl	8014684 <_tx_event_flags_performance_system_info_get>
 800c874:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800c876:	697b      	ldr	r3, [r7, #20]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <_txm_module_manager_tx_event_flags_set_dispatch>:
    TX_EVENT_FLAGS_GROUP *group_ptr, -> param_0
    ULONG flags_to_set, -> param_1
    UINT set_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_set_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d03a      	beq.n	800c910 <_txm_module_manager_tx_event_flags_set_dispatch+0x90>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c8a0:	d81f      	bhi.n	800c8e2 <_txm_module_manager_tx_event_flags_set_dispatch+0x62>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d307      	bcc.n	800c8be <_txm_module_manager_tx_event_flags_set_dispatch+0x3e>
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d923      	bls.n	800c906 <_txm_module_manager_tx_event_flags_set_dispatch+0x86>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d30b      	bcc.n	800c8e2 <_txm_module_manager_tx_event_flags_set_dispatch+0x62>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c8dc:	440b      	add	r3, r1
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d911      	bls.n	800c906 <_txm_module_manager_tx_event_flags_set_dispatch+0x86>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c8e8:	d812      	bhi.n	800c910 <_txm_module_manager_tx_event_flags_set_dispatch+0x90>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d30c      	bcc.n	800c910 <_txm_module_manager_tx_event_flags_set_dispatch+0x90>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	69db      	ldr	r3, [r3, #28]
 800c900:	3301      	adds	r3, #1
 800c902:	429a      	cmp	r2, r3
 800c904:	d804      	bhi.n	800c910 <_txm_module_manager_tx_event_flags_set_dispatch+0x90>
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <_txm_module_manager_tx_event_flags_set_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 800c90c:	23f4      	movs	r3, #244	; 0xf4
 800c90e:	e007      	b.n	800c920 <_txm_module_manager_tx_event_flags_set_dispatch+0xa0>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_set(
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4618      	mov	r0, r3
 800c918:	f7fb fc5a 	bl	80081d0 <_txe_event_flags_set>
 800c91c:	6178      	str	r0, [r7, #20]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (ULONG) param_1,
        (UINT) param_2
    );
    return(return_value);
 800c91e:	697b      	ldr	r3, [r7, #20]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <_txm_module_manager_tx_event_flags_set_notify_dispatch>:
/* UINT _txe_event_flags_set_notify(
    TX_EVENT_FLAGS_GROUP *group_ptr, -> param_0
    VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_set_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_EVENT_FLAGS_GROUP *event_flags_ptr = (TX_EVENT_FLAGS_GROUP *)param_0;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	61bb      	str	r3, [r7, #24]
VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f003 0302 	and.w	r3, r3, #2
 800c940:	2b00      	cmp	r3, #0
 800c942:	d044      	beq.n	800c9ce <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xa6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c94a:	d81f      	bhi.n	800c98c <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x64>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	461a      	mov	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	4293      	cmp	r3, r2
 800c956:	d307      	bcc.n	800c968 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x40>
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c962:	3301      	adds	r3, #1
 800c964:	429a      	cmp	r2, r3
 800c966:	d923      	bls.n	800c9b0 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x88>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	429a      	cmp	r2, r3
 800c972:	d30b      	bcc.n	800c98c <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x64>
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c986:	440b      	add	r3, r1
 800c988:	429a      	cmp	r2, r3
 800c98a:	d911      	bls.n	800c9b0 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x88>
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800c992:	d812      	bhi.n	800c9ba <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x92>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	461a      	mov	r2, r3
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d30c      	bcc.n	800c9ba <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x92>
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d804      	bhi.n	800c9ba <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x92>
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800c9b6:	23f4      	movs	r3, #244	; 0xf4
 800c9b8:	e01e      	b.n	800c9f8 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xd0>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((event_flags_ptr == TX_NULL) || (event_flags_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID))
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xa2>
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a0e      	ldr	r2, [pc, #56]	; (800ca00 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xd8>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d001      	beq.n	800c9ce <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xa6>
            return(TX_GROUP_ERROR);
 800c9ca:	2306      	movs	r3, #6
 800c9cc:	e014      	b.n	800c9f8 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xd0>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d102      	bne.n	800c9da <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xb2>
    {

        /* Clear the callback.  */
        events_set_notify = (VOID (*)(TX_EVENT_FLAGS_GROUP *)) TX_NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	61fb      	str	r3, [r7, #28]
 800c9d8:	e007      	b.n	800c9ea <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xc2>
    }
    else
    {

        /* Setup trampoline values.  */
        event_flags_ptr -> tx_event_flags_group_module_instance = (VOID *) module_instance;
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	629a      	str	r2, [r3, #40]	; 0x28
        event_flags_ptr -> tx_event_flags_group_set_module_notify = (VOID (*)(TX_EVENT_FLAGS_GROUP *)) param_1;
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	62da      	str	r2, [r3, #44]	; 0x2c
        events_set_notify = _txm_module_manager_event_flags_notify_trampoline;
 800c9e6:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xdc>)
 800c9e8:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_set_notify(
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	69f9      	ldr	r1, [r7, #28]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fb fc1c 	bl	800822c <_txe_event_flags_set_notify>
 800c9f4:	6178      	str	r0, [r7, #20]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (VOID (*)(TX_EVENT_FLAGS_GROUP *)) events_set_notify
    );
    return(return_value);
 800c9f6:	697b      	ldr	r3, [r7, #20]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	4456444e 	.word	0x4456444e
 800ca04:	08009b45 	.word	0x08009b45

0800ca08 <_txm_module_manager_tx_mutex_create_dispatch>:
    CHAR *name_ptr, -> param_1
    UINT inherit, -> extra_parameters[0]
    UINT mutex_control_block_size -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 8081 	beq.w	800cb26 <_txm_module_manager_tx_mutex_create_dispatch+0x11e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_MUTEX)))
 800ca24:	4b47      	ldr	r3, [pc, #284]	; (800cb44 <_txm_module_manager_tx_mutex_create_dispatch+0x13c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d119      	bne.n	800ca60 <_txm_module_manager_tx_mutex_create_dispatch+0x58>
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800ca32:	d815      	bhi.n	800ca60 <_txm_module_manager_tx_mutex_create_dispatch+0x58>
 800ca34:	4b44      	ldr	r3, [pc, #272]	; (800cb48 <_txm_module_manager_tx_mutex_create_dispatch+0x140>)
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	3310      	adds	r3, #16
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d30f      	bcc.n	800ca60 <_txm_module_manager_tx_mutex_create_dispatch+0x58>
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	3334      	adds	r3, #52	; 0x34
 800ca44:	4a40      	ldr	r2, [pc, #256]	; (800cb48 <_txm_module_manager_tx_mutex_create_dispatch+0x140>)
 800ca46:	6991      	ldr	r1, [r2, #24]
 800ca48:	4a3f      	ldr	r2, [pc, #252]	; (800cb48 <_txm_module_manager_tx_mutex_create_dispatch+0x140>)
 800ca4a:	69d2      	ldr	r2, [r2, #28]
 800ca4c:	440a      	add	r2, r1
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d806      	bhi.n	800ca60 <_txm_module_manager_tx_mutex_create_dispatch+0x58>
 800ca52:	2134      	movs	r1, #52	; 0x34
 800ca54:	68b8      	ldr	r0, [r7, #8]
 800ca56:	f007 fc8f 	bl	8014378 <_txm_module_manager_object_size_check>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <_txm_module_manager_tx_mutex_create_dispatch+0x62>
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <_txm_module_manager_tx_mutex_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800ca66:	23f4      	movs	r3, #244	; 0xf4
 800ca68:	e068      	b.n	800cb3c <_txm_module_manager_tx_mutex_create_dispatch+0x134>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca70:	d01d      	beq.n	800caae <_txm_module_manager_tx_mutex_create_dispatch+0xa6>
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d306      	bcc.n	800ca8c <_txm_module_manager_tx_mutex_create_dispatch+0x84>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca86:	3301      	adds	r3, #1
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d926      	bls.n	800cada <_txm_module_manager_tx_mutex_create_dispatch+0xd2>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d30a      	bcc.n	800caae <_txm_module_manager_tx_mutex_create_dispatch+0xa6>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800caa8:	440b      	add	r3, r1
 800caaa:	429a      	cmp	r2, r3
 800caac:	d915      	bls.n	800cada <_txm_module_manager_tx_mutex_create_dispatch+0xd2>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab4:	d00c      	beq.n	800cad0 <_txm_module_manager_tx_mutex_create_dispatch+0xc8>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	461a      	mov	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d306      	bcc.n	800cad0 <_txm_module_manager_tx_mutex_create_dispatch+0xc8>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	3301      	adds	r3, #1
 800cacc:	429a      	cmp	r2, r3
 800cace:	d904      	bls.n	800cada <_txm_module_manager_tx_mutex_create_dispatch+0xd2>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <_txm_module_manager_tx_mutex_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 800cad6:	23f4      	movs	r3, #244	; 0xf4
 800cad8:	e030      	b.n	800cb3c <_txm_module_manager_tx_mutex_create_dispatch+0x134>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	f113 0f09 	cmn.w	r3, #9
 800cae0:	d81f      	bhi.n	800cb22 <_txm_module_manager_tx_mutex_create_dispatch+0x11a>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	461a      	mov	r2, r3
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	429a      	cmp	r2, r3
 800caec:	d807      	bhi.n	800cafe <_txm_module_manager_tx_mutex_create_dispatch+0xf6>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	f103 0208 	add.w	r2, r3, #8
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf8:	3301      	adds	r3, #1
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d913      	bls.n	800cb26 <_txm_module_manager_tx_mutex_create_dispatch+0x11e>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d80b      	bhi.n	800cb22 <_txm_module_manager_tx_mutex_create_dispatch+0x11a>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	f103 0208 	add.w	r2, r3, #8
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb1c:	440b      	add	r3, r1
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d901      	bls.n	800cb26 <_txm_module_manager_tx_mutex_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800cb22:	23f4      	movs	r3, #244	; 0xf4
 800cb24:	e00a      	b.n	800cb3c <_txm_module_manager_tx_mutex_create_dispatch+0x134>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_create(
 800cb26:	68b8      	ldr	r0, [r7, #8]
 800cb28:	6879      	ldr	r1, [r7, #4]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
        (TX_MUTEX *) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (UINT) extra_parameters[1]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_mutex_create(
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f7fb fb9a 	bl	800826c <_txe_mutex_create>
 800cb38:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800cb3a:	697b      	ldr	r3, [r7, #20]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	2000f600 	.word	0x2000f600
 800cb48:	2000f5cc 	.word	0x2000f5cc

0800cb4c <_txm_module_manager_tx_mutex_delete_dispatch>:
#ifndef TXM_MUTEX_DELETE_CALL_NOT_USED
/* UINT _txe_mutex_delete(
    TX_MUTEX *mutex_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d03a      	beq.n	800cbd8 <_txm_module_manager_tx_mutex_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800cb68:	d81f      	bhi.n	800cbaa <_txm_module_manager_tx_mutex_delete_dispatch+0x5e>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	461a      	mov	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d307      	bcc.n	800cb86 <_txm_module_manager_tx_mutex_delete_dispatch+0x3a>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb80:	3301      	adds	r3, #1
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d923      	bls.n	800cbce <_txm_module_manager_tx_mutex_delete_dispatch+0x82>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d30b      	bcc.n	800cbaa <_txm_module_manager_tx_mutex_delete_dispatch+0x5e>
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cba4:	440b      	add	r3, r1
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d911      	bls.n	800cbce <_txm_module_manager_tx_mutex_delete_dispatch+0x82>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800cbb0:	d812      	bhi.n	800cbd8 <_txm_module_manager_tx_mutex_delete_dispatch+0x8c>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	699b      	ldr	r3, [r3, #24]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d30c      	bcc.n	800cbd8 <_txm_module_manager_tx_mutex_delete_dispatch+0x8c>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	69db      	ldr	r3, [r3, #28]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d804      	bhi.n	800cbd8 <_txm_module_manager_tx_mutex_delete_dispatch+0x8c>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <_txm_module_manager_tx_mutex_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800cbd4:	23f4      	movs	r3, #244	; 0xf4
 800cbd6:	e00d      	b.n	800cbf4 <_txm_module_manager_tx_mutex_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_delete(
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fb fbe0 	bl	80083a0 <_txe_mutex_delete>
 800cbe0:	60f8      	str	r0, [r7, #12]
        (TX_MUTEX *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d104      	bne.n	800cbf2 <_txm_module_manager_tx_mutex_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f006 f8e8 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800cbf0:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <_txm_module_manager_tx_mutex_get_dispatch>:
/* UINT _txe_mutex_get(
    TX_MUTEX *mutex_ptr, -> param_0
    ULONG wait_option -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f003 0302 	and.w	r3, r3, #2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d03a      	beq.n	800cc8a <_txm_module_manager_tx_mutex_get_dispatch+0x8e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800cc1a:	d81f      	bhi.n	800cc5c <_txm_module_manager_tx_mutex_get_dispatch+0x60>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	461a      	mov	r2, r3
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d307      	bcc.n	800cc38 <_txm_module_manager_tx_mutex_get_dispatch+0x3c>
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc32:	3301      	adds	r3, #1
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d923      	bls.n	800cc80 <_txm_module_manager_tx_mutex_get_dispatch+0x84>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d30b      	bcc.n	800cc5c <_txm_module_manager_tx_mutex_get_dispatch+0x60>
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc56:	440b      	add	r3, r1
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d911      	bls.n	800cc80 <_txm_module_manager_tx_mutex_get_dispatch+0x84>
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800cc62:	d812      	bhi.n	800cc8a <_txm_module_manager_tx_mutex_get_dispatch+0x8e>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d30c      	bcc.n	800cc8a <_txm_module_manager_tx_mutex_get_dispatch+0x8e>
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	69db      	ldr	r3, [r3, #28]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d804      	bhi.n	800cc8a <_txm_module_manager_tx_mutex_get_dispatch+0x8e>
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <_txm_module_manager_tx_mutex_get_dispatch+0x8e>
            return(TXM_MODULE_INVALID_MEMORY);
 800cc86:	23f4      	movs	r3, #244	; 0xf4
 800cc88:	e006      	b.n	800cc98 <_txm_module_manager_tx_mutex_get_dispatch+0x9c>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_get(
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fb fbc4 	bl	800841c <_txe_mutex_get>
 800cc94:	6178      	str	r0, [r7, #20]
        (TX_MUTEX *) param_0,
        (ULONG) param_1
    );
    return(return_value);
 800cc96:	697b      	ldr	r3, [r7, #20]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <_txm_module_manager_tx_mutex_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_MUTEX **next_mutex -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cca2:	b08b      	sub	sp, #44	; 0x2c
 800cca4:	af04      	add	r7, sp, #16
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
 800ccac:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	f003 0302 	and.w	r3, r3, #2
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f000 817c 	beq.w	800cfb4 <_txm_module_manager_tx_mutex_info_get_dispatch+0x314>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800ccc2:	d81f      	bhi.n	800cd04 <_txm_module_manager_tx_mutex_info_get_dispatch+0x64>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	461a      	mov	r2, r3
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d307      	bcc.n	800cce0 <_txm_module_manager_tx_mutex_info_get_dispatch+0x40>
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccda:	3301      	adds	r3, #1
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d923      	bls.n	800cd28 <_txm_module_manager_tx_mutex_info_get_dispatch+0x88>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d30b      	bcc.n	800cd04 <_txm_module_manager_tx_mutex_info_get_dispatch+0x64>
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ccfe:	440b      	add	r3, r1
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d911      	bls.n	800cd28 <_txm_module_manager_tx_mutex_info_get_dispatch+0x88>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800cd0a:	d812      	bhi.n	800cd32 <_txm_module_manager_tx_mutex_info_get_dispatch+0x92>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	461a      	mov	r2, r3
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d30c      	bcc.n	800cd32 <_txm_module_manager_tx_mutex_info_get_dispatch+0x92>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	3301      	adds	r3, #1
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d804      	bhi.n	800cd32 <_txm_module_manager_tx_mutex_info_get_dispatch+0x92>
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <_txm_module_manager_tx_mutex_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800cd2e:	23f4      	movs	r3, #244	; 0xf4
 800cd30:	e15d      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f113 0f05 	cmn.w	r3, #5
 800cd38:	d81d      	bhi.n	800cd76 <_txm_module_manager_tx_mutex_info_get_dispatch+0xd6>
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3e:	461a      	mov	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d306      	bcc.n	800cd54 <_txm_module_manager_tx_mutex_info_get_dispatch+0xb4>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	1d1a      	adds	r2, r3, #4
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4e:	3301      	adds	r3, #1
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d915      	bls.n	800cd80 <_txm_module_manager_tx_mutex_info_get_dispatch+0xe0>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d30a      	bcc.n	800cd76 <_txm_module_manager_tx_mutex_info_get_dispatch+0xd6>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	1d1a      	adds	r2, r3, #4
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cd70:	440b      	add	r3, r1
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d904      	bls.n	800cd80 <_txm_module_manager_tx_mutex_info_get_dispatch+0xe0>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <_txm_module_manager_tx_mutex_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800cd7c:	23f4      	movs	r3, #244	; 0xf4
 800cd7e:	e136      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	f113 0f15 	cmn.w	r3, #21
 800cd86:	d81f      	bhi.n	800cdc8 <_txm_module_manager_tx_mutex_info_get_dispatch+0x128>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d807      	bhi.n	800cda4 <_txm_module_manager_tx_mutex_info_get_dispatch+0x104>
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	f103 0214 	add.w	r2, r3, #20
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd9e:	3301      	adds	r3, #1
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d913      	bls.n	800cdcc <_txm_module_manager_tx_mutex_info_get_dispatch+0x12c>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d80b      	bhi.n	800cdc8 <_txm_module_manager_tx_mutex_info_get_dispatch+0x128>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	f103 0214 	add.w	r2, r3, #20
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cdc2:	440b      	add	r3, r1
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d901      	bls.n	800cdcc <_txm_module_manager_tx_mutex_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800cdc8:	23f4      	movs	r3, #244	; 0xf4
 800cdca:	e110      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f113 0f05 	cmn.w	r3, #5
 800cdd4:	d820      	bhi.n	800ce18 <_txm_module_manager_tx_mutex_info_get_dispatch+0x178>
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d307      	bcc.n	800cdf2 <_txm_module_manager_tx_mutex_info_get_dispatch+0x152>
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	1d1a      	adds	r2, r3, #4
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdec:	3301      	adds	r3, #1
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d918      	bls.n	800ce24 <_txm_module_manager_tx_mutex_info_get_dispatch+0x184>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d30b      	bcc.n	800ce18 <_txm_module_manager_tx_mutex_info_get_dispatch+0x178>
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	1d1a      	adds	r2, r3, #4
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce12:	440b      	add	r3, r1
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d905      	bls.n	800ce24 <_txm_module_manager_tx_mutex_info_get_dispatch+0x184>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <_txm_module_manager_tx_mutex_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800ce20:	23f4      	movs	r3, #244	; 0xf4
 800ce22:	e0e4      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(TX_THREAD *)))
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	3304      	adds	r3, #4
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f113 0f05 	cmn.w	r3, #5
 800ce2e:	d824      	bhi.n	800ce7a <_txm_module_manager_tx_mutex_info_get_dispatch+0x1da>
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	3304      	adds	r3, #4
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d308      	bcc.n	800ce50 <_txm_module_manager_tx_mutex_info_get_dispatch+0x1b0>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	3304      	adds	r3, #4
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	1d1a      	adds	r2, r3, #4
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d91b      	bls.n	800ce88 <_txm_module_manager_tx_mutex_info_get_dispatch+0x1e8>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	3304      	adds	r3, #4
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d30c      	bcc.n	800ce7a <_txm_module_manager_tx_mutex_info_get_dispatch+0x1da>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	3304      	adds	r3, #4
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	1d1a      	adds	r2, r3, #4
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce74:	440b      	add	r3, r1
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d906      	bls.n	800ce88 <_txm_module_manager_tx_mutex_info_get_dispatch+0x1e8>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <_txm_module_manager_tx_mutex_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800ce84:	23f4      	movs	r3, #244	; 0xf4
 800ce86:	e0b2      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f113 0f05 	cmn.w	r3, #5
 800ce92:	d824      	bhi.n	800cede <_txm_module_manager_tx_mutex_info_get_dispatch+0x23e>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	3308      	adds	r3, #8
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d308      	bcc.n	800ceb4 <_txm_module_manager_tx_mutex_info_get_dispatch+0x214>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	3308      	adds	r3, #8
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	1d1a      	adds	r2, r3, #4
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	3301      	adds	r3, #1
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d91b      	bls.n	800ceec <_txm_module_manager_tx_mutex_info_get_dispatch+0x24c>
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d30c      	bcc.n	800cede <_txm_module_manager_tx_mutex_info_get_dispatch+0x23e>
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	3308      	adds	r3, #8
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	1d1a      	adds	r2, r3, #4
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ced8:	440b      	add	r3, r1
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d906      	bls.n	800ceec <_txm_module_manager_tx_mutex_info_get_dispatch+0x24c>
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	3308      	adds	r3, #8
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <_txm_module_manager_tx_mutex_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800cee8:	23f4      	movs	r3, #244	; 0xf4
 800ceea:	e080      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	330c      	adds	r3, #12
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f113 0f05 	cmn.w	r3, #5
 800cef6:	d824      	bhi.n	800cf42 <_txm_module_manager_tx_mutex_info_get_dispatch+0x2a2>
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	330c      	adds	r3, #12
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d308      	bcc.n	800cf18 <_txm_module_manager_tx_mutex_info_get_dispatch+0x278>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	330c      	adds	r3, #12
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	1d1a      	adds	r2, r3, #4
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf12:	3301      	adds	r3, #1
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d91b      	bls.n	800cf50 <_txm_module_manager_tx_mutex_info_get_dispatch+0x2b0>
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	330c      	adds	r3, #12
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d30c      	bcc.n	800cf42 <_txm_module_manager_tx_mutex_info_get_dispatch+0x2a2>
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	330c      	adds	r3, #12
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	1d1a      	adds	r2, r3, #4
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cf3c:	440b      	add	r3, r1
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d906      	bls.n	800cf50 <_txm_module_manager_tx_mutex_info_get_dispatch+0x2b0>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	330c      	adds	r3, #12
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d001      	beq.n	800cf50 <_txm_module_manager_tx_mutex_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800cf4c:	23f4      	movs	r3, #244	; 0xf4
 800cf4e:	e04e      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_MUTEX *)))
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	3310      	adds	r3, #16
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f113 0f05 	cmn.w	r3, #5
 800cf5a:	d824      	bhi.n	800cfa6 <_txm_module_manager_tx_mutex_info_get_dispatch+0x306>
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	3310      	adds	r3, #16
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d308      	bcc.n	800cf7c <_txm_module_manager_tx_mutex_info_get_dispatch+0x2dc>
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	3310      	adds	r3, #16
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	1d1a      	adds	r2, r3, #4
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf76:	3301      	adds	r3, #1
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d91b      	bls.n	800cfb4 <_txm_module_manager_tx_mutex_info_get_dispatch+0x314>
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	3310      	adds	r3, #16
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d30c      	bcc.n	800cfa6 <_txm_module_manager_tx_mutex_info_get_dispatch+0x306>
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	3310      	adds	r3, #16
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	1d1a      	adds	r2, r3, #4
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cfa0:	440b      	add	r3, r1
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d906      	bls.n	800cfb4 <_txm_module_manager_tx_mutex_info_get_dispatch+0x314>
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	3310      	adds	r3, #16
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <_txm_module_manager_tx_mutex_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800cfb0:	23f4      	movs	r3, #244	; 0xf4
 800cfb2:	e01c      	b.n	800cfee <_txm_module_manager_tx_mutex_info_get_dispatch+0x34e>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800cfb4:	68b8      	ldr	r0, [r7, #8]
 800cfb6:	6879      	ldr	r1, [r7, #4]
        (TX_MUTEX *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800cfbc:	461d      	mov	r5, r3
        (TX_THREAD **) extra_parameters[1],
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800cfc4:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	3308      	adds	r3, #8
 800cfca:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800cfcc:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	330c      	adds	r3, #12
 800cfd2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800cfd4:	461c      	mov	r4, r3
        (TX_MUTEX **) extra_parameters[4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	3310      	adds	r3, #16
 800cfda:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800cfdc:	9302      	str	r3, [sp, #8]
 800cfde:	9401      	str	r4, [sp, #4]
 800cfe0:	9200      	str	r2, [sp, #0]
 800cfe2:	4633      	mov	r3, r6
 800cfe4:	462a      	mov	r2, r5
 800cfe6:	f7fb fa73 	bl	80084d0 <_txe_mutex_info_get>
 800cfea:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800cfec:	697b      	ldr	r3, [r7, #20]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	371c      	adds	r7, #28
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cff6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch>:
    ULONG *timeouts, -> extra_parameters[2]
    ULONG *inversions, -> extra_parameters[3]
    ULONG *inheritances -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800cff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cff8:	b08b      	sub	sp, #44	; 0x2c
 800cffa:	af04      	add	r7, sp, #16
 800cffc:	60f8      	str	r0, [r7, #12]
 800cffe:	60b9      	str	r1, [r7, #8]
 800d000:	607a      	str	r2, [r7, #4]
 800d002:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 817c 	beq.w	800d30a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x314>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800d018:	d81f      	bhi.n	800d05a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x64>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01e:	461a      	mov	r2, r3
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	4293      	cmp	r3, r2
 800d024:	d307      	bcc.n	800d036 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x40>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d030:	3301      	adds	r3, #1
 800d032:	429a      	cmp	r2, r3
 800d034:	d923      	bls.n	800d07e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x88>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d30b      	bcc.n	800d05a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x64>
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d054:	440b      	add	r3, r1
 800d056:	429a      	cmp	r2, r3
 800d058:	d911      	bls.n	800d07e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x88>
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800d060:	d812      	bhi.n	800d088 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x92>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	461a      	mov	r2, r3
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d30c      	bcc.n	800d088 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x92>
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	69db      	ldr	r3, [r3, #28]
 800d078:	3301      	adds	r3, #1
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d804      	bhi.n	800d088 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x92>
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800d084:	23f4      	movs	r3, #244	; 0xf4
 800d086:	e15d      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f113 0f05 	cmn.w	r3, #5
 800d08e:	d81d      	bhi.n	800d0cc <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xd6>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	461a      	mov	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4293      	cmp	r3, r2
 800d09a:	d306      	bcc.n	800d0aa <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xb4>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	1d1a      	adds	r2, r3, #4
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d915      	bls.n	800d0d6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xe0>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d30a      	bcc.n	800d0cc <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xd6>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	1d1a      	adds	r2, r3, #4
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d0c6:	440b      	add	r3, r1
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d904      	bls.n	800d0d6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xe0>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800d0d2:	23f4      	movs	r3, #244	; 0xf4
 800d0d4:	e136      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	f113 0f15 	cmn.w	r3, #21
 800d0dc:	d81f      	bhi.n	800d11e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x128>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d807      	bhi.n	800d0fa <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x104>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	f103 0214 	add.w	r2, r3, #20
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d913      	bls.n	800d122 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x12c>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d80b      	bhi.n	800d11e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x128>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	f103 0214 	add.w	r2, r3, #20
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d118:	440b      	add	r3, r1
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d901      	bls.n	800d122 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800d11e:	23f4      	movs	r3, #244	; 0xf4
 800d120:	e110      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f113 0f05 	cmn.w	r3, #5
 800d12a:	d820      	bhi.n	800d16e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x178>
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d134:	4293      	cmp	r3, r2
 800d136:	d307      	bcc.n	800d148 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x152>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	1d1a      	adds	r2, r3, #4
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d142:	3301      	adds	r3, #1
 800d144:	429a      	cmp	r2, r3
 800d146:	d918      	bls.n	800d17a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x184>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d152:	429a      	cmp	r2, r3
 800d154:	d30b      	bcc.n	800d16e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x178>
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	1d1a      	adds	r2, r3, #4
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d168:	440b      	add	r3, r1
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d905      	bls.n	800d17a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x184>
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800d176:	23f4      	movs	r3, #244	; 0xf4
 800d178:	e0e4      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	3304      	adds	r3, #4
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f113 0f05 	cmn.w	r3, #5
 800d184:	d824      	bhi.n	800d1d0 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x1da>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	3304      	adds	r3, #4
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d190:	4293      	cmp	r3, r2
 800d192:	d308      	bcc.n	800d1a6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x1b0>
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	3304      	adds	r3, #4
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	1d1a      	adds	r2, r3, #4
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d91b      	bls.n	800d1de <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x1e8>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d30c      	bcc.n	800d1d0 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x1da>
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	1d1a      	adds	r2, r3, #4
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d1ca:	440b      	add	r3, r1
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d906      	bls.n	800d1de <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x1e8>
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800d1da:	23f4      	movs	r3, #244	; 0xf4
 800d1dc:	e0b2      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f113 0f05 	cmn.w	r3, #5
 800d1e8:	d824      	bhi.n	800d234 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x23e>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d308      	bcc.n	800d20a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x214>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	1d1a      	adds	r2, r3, #4
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d204:	3301      	adds	r3, #1
 800d206:	429a      	cmp	r2, r3
 800d208:	d91b      	bls.n	800d242 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x24c>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	3308      	adds	r3, #8
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d216:	429a      	cmp	r2, r3
 800d218:	d30c      	bcc.n	800d234 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x23e>
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	3308      	adds	r3, #8
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d22e:	440b      	add	r3, r1
 800d230:	429a      	cmp	r2, r3
 800d232:	d906      	bls.n	800d242 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x24c>
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	3308      	adds	r3, #8
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800d23e:	23f4      	movs	r3, #244	; 0xf4
 800d240:	e080      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	330c      	adds	r3, #12
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f113 0f05 	cmn.w	r3, #5
 800d24c:	d824      	bhi.n	800d298 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x2a2>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	330c      	adds	r3, #12
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d258:	4293      	cmp	r3, r2
 800d25a:	d308      	bcc.n	800d26e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x278>
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	330c      	adds	r3, #12
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	1d1a      	adds	r2, r3, #4
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d268:	3301      	adds	r3, #1
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d91b      	bls.n	800d2a6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x2b0>
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	330c      	adds	r3, #12
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d30c      	bcc.n	800d298 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x2a2>
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	330c      	adds	r3, #12
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	1d1a      	adds	r2, r3, #4
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d292:	440b      	add	r3, r1
 800d294:	429a      	cmp	r2, r3
 800d296:	d906      	bls.n	800d2a6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x2b0>
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	330c      	adds	r3, #12
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800d2a2:	23f4      	movs	r3, #244	; 0xf4
 800d2a4:	e04e      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	3310      	adds	r3, #16
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f113 0f05 	cmn.w	r3, #5
 800d2b0:	d824      	bhi.n	800d2fc <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x306>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	3310      	adds	r3, #16
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d308      	bcc.n	800d2d2 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x2dc>
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	3310      	adds	r3, #16
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	1d1a      	adds	r2, r3, #4
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d91b      	bls.n	800d30a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x314>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	3310      	adds	r3, #16
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d30c      	bcc.n	800d2fc <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x306>
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	3310      	adds	r3, #16
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	1d1a      	adds	r2, r3, #4
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d2f6:	440b      	add	r3, r1
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d906      	bls.n	800d30a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x314>
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	3310      	adds	r3, #16
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d001      	beq.n	800d30a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800d306:	23f4      	movs	r3, #244	; 0xf4
 800d308:	e01c      	b.n	800d344 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x34e>
    }

    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800d30a:	68b8      	ldr	r0, [r7, #8]
 800d30c:	6879      	ldr	r1, [r7, #4]
        (TX_MUTEX *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800d312:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	3304      	adds	r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800d31a:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[2],
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	3308      	adds	r3, #8
 800d320:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800d322:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	330c      	adds	r3, #12
 800d328:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800d32a:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	3310      	adds	r3, #16
 800d330:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800d332:	9302      	str	r3, [sp, #8]
 800d334:	9401      	str	r4, [sp, #4]
 800d336:	9200      	str	r2, [sp, #0]
 800d338:	4633      	mov	r3, r6
 800d33a:	462a      	mov	r2, r5
 800d33c:	f007 f9ca 	bl	80146d4 <_tx_mutex_performance_info_get>
 800d340:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800d342:	697b      	ldr	r3, [r7, #20]
}
 800d344:	4618      	mov	r0, r3
 800d346:	371c      	adds	r7, #28
 800d348:	46bd      	mov	sp, r7
 800d34a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d34c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch>:
    ULONG *timeouts, -> extra_parameters[1]
    ULONG *inversions, -> extra_parameters[2]
    ULONG *inheritances -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800d34c:	b5b0      	push	{r4, r5, r7, lr}
 800d34e:	b088      	sub	sp, #32
 800d350:	af02      	add	r7, sp, #8
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	f003 0302 	and.w	r3, r3, #2
 800d362:	2b00      	cmp	r3, #0
 800d364:	f000 8136 	beq.w	800d5d4 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x288>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f113 0f05 	cmn.w	r3, #5
 800d36e:	d81d      	bhi.n	800d3ac <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x60>
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d374:	461a      	mov	r2, r3
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	4293      	cmp	r3, r2
 800d37a:	d306      	bcc.n	800d38a <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x3e>
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	1d1a      	adds	r2, r3, #4
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d384:	3301      	adds	r3, #1
 800d386:	429a      	cmp	r2, r3
 800d388:	d915      	bls.n	800d3b6 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x6a>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	429a      	cmp	r2, r3
 800d394:	d30a      	bcc.n	800d3ac <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x60>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	1d1a      	adds	r2, r3, #4
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d3a6:	440b      	add	r3, r1
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d904      	bls.n	800d3b6 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x6a>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 800d3b2:	23f4      	movs	r3, #244	; 0xf4
 800d3b4:	e126      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f113 0f05 	cmn.w	r3, #5
 800d3bc:	d81d      	bhi.n	800d3fa <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xae>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d306      	bcc.n	800d3d8 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x8c>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	1d1a      	adds	r2, r3, #4
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d915      	bls.n	800d404 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xb8>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d30a      	bcc.n	800d3fa <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xae>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	1d1a      	adds	r2, r3, #4
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d3f4:	440b      	add	r3, r1
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d904      	bls.n	800d404 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xb8>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 800d400:	23f4      	movs	r3, #244	; 0xf4
 800d402:	e0ff      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	f113 0f11 	cmn.w	r3, #17
 800d40a:	d81f      	bhi.n	800d44c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x100>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	461a      	mov	r2, r3
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d807      	bhi.n	800d428 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xdc>
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	f103 0210 	add.w	r2, r3, #16
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d422:	3301      	adds	r3, #1
 800d424:	429a      	cmp	r2, r3
 800d426:	d913      	bls.n	800d450 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x104>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d80b      	bhi.n	800d44c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x100>
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	f103 0210 	add.w	r2, r3, #16
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d446:	440b      	add	r3, r1
 800d448:	429a      	cmp	r2, r3
 800d44a:	d901      	bls.n	800d450 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 800d44c:	23f4      	movs	r3, #244	; 0xf4
 800d44e:	e0d9      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f113 0f05 	cmn.w	r3, #5
 800d458:	d820      	bhi.n	800d49c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x150>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d462:	4293      	cmp	r3, r2
 800d464:	d307      	bcc.n	800d476 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x12a>
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	1d1a      	adds	r2, r3, #4
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d470:	3301      	adds	r3, #1
 800d472:	429a      	cmp	r2, r3
 800d474:	d918      	bls.n	800d4a8 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x15c>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d480:	429a      	cmp	r2, r3
 800d482:	d30b      	bcc.n	800d49c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x150>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	1d1a      	adds	r2, r3, #4
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d496:	440b      	add	r3, r1
 800d498:	429a      	cmp	r2, r3
 800d49a:	d905      	bls.n	800d4a8 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x15c>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 800d4a4:	23f4      	movs	r3, #244	; 0xf4
 800d4a6:	e0ad      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f113 0f05 	cmn.w	r3, #5
 800d4b2:	d824      	bhi.n	800d4fe <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x1b2>
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d308      	bcc.n	800d4d4 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x188>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	1d1a      	adds	r2, r3, #4
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d91b      	bls.n	800d50c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x1c0>
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d30c      	bcc.n	800d4fe <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x1b2>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	1d1a      	adds	r2, r3, #4
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d4f8:	440b      	add	r3, r1
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d906      	bls.n	800d50c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x1c0>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	3304      	adds	r3, #4
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 800d508:	23f4      	movs	r3, #244	; 0xf4
 800d50a:	e07b      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	3308      	adds	r3, #8
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f113 0f05 	cmn.w	r3, #5
 800d516:	d824      	bhi.n	800d562 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x216>
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	3308      	adds	r3, #8
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d522:	4293      	cmp	r3, r2
 800d524:	d308      	bcc.n	800d538 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x1ec>
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	3308      	adds	r3, #8
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	1d1a      	adds	r2, r3, #4
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d532:	3301      	adds	r3, #1
 800d534:	429a      	cmp	r2, r3
 800d536:	d91b      	bls.n	800d570 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x224>
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	3308      	adds	r3, #8
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d544:	429a      	cmp	r2, r3
 800d546:	d30c      	bcc.n	800d562 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x216>
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	3308      	adds	r3, #8
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	1d1a      	adds	r2, r3, #4
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d55c:	440b      	add	r3, r1
 800d55e:	429a      	cmp	r2, r3
 800d560:	d906      	bls.n	800d570 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x224>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	3308      	adds	r3, #8
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d001      	beq.n	800d570 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x224>
            return(TXM_MODULE_INVALID_MEMORY);
 800d56c:	23f4      	movs	r3, #244	; 0xf4
 800d56e:	e049      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	330c      	adds	r3, #12
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f113 0f05 	cmn.w	r3, #5
 800d57a:	d824      	bhi.n	800d5c6 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x27a>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	330c      	adds	r3, #12
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d586:	4293      	cmp	r3, r2
 800d588:	d308      	bcc.n	800d59c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x250>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	330c      	adds	r3, #12
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	1d1a      	adds	r2, r3, #4
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d596:	3301      	adds	r3, #1
 800d598:	429a      	cmp	r2, r3
 800d59a:	d91b      	bls.n	800d5d4 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x288>
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	330c      	adds	r3, #12
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d30c      	bcc.n	800d5c6 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x27a>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	330c      	adds	r3, #12
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	1d1a      	adds	r2, r3, #4
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d5c0:	440b      	add	r3, r1
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d906      	bls.n	800d5d4 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x288>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	330c      	adds	r3, #12
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x288>
            return(TXM_MODULE_INVALID_MEMORY);
 800d5d0:	23f4      	movs	r3, #244	; 0xf4
 800d5d2:	e017      	b.n	800d604 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x2b8>
    }

    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800d5d4:	68b8      	ldr	r0, [r7, #8]
 800d5d6:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800d5dc:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800d5e4:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800d5ec:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	330c      	adds	r3, #12
 800d5f2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	9200      	str	r2, [sp, #0]
 800d5f8:	462b      	mov	r3, r5
 800d5fa:	4622      	mov	r2, r4
 800d5fc:	f007 f8a4 	bl	8014748 <_tx_mutex_performance_system_info_get>
 800d600:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800d602:	697b      	ldr	r3, [r7, #20]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bdb0      	pop	{r4, r5, r7, pc}

0800d60c <_txm_module_manager_tx_mutex_prioritize_dispatch>:
#ifndef TXM_MUTEX_PRIORITIZE_CALL_NOT_USED
/* UINT _txe_mutex_prioritize(
    TX_MUTEX *mutex_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	f003 0302 	and.w	r3, r3, #2
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d03a      	beq.n	800d698 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800d628:	d81f      	bhi.n	800d66a <_txm_module_manager_tx_mutex_prioritize_dispatch+0x5e>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	461a      	mov	r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	4293      	cmp	r3, r2
 800d634:	d307      	bcc.n	800d646 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x3a>
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d640:	3301      	adds	r3, #1
 800d642:	429a      	cmp	r2, r3
 800d644:	d923      	bls.n	800d68e <_txm_module_manager_tx_mutex_prioritize_dispatch+0x82>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d30b      	bcc.n	800d66a <_txm_module_manager_tx_mutex_prioritize_dispatch+0x5e>
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d664:	440b      	add	r3, r1
 800d666:	429a      	cmp	r2, r3
 800d668:	d911      	bls.n	800d68e <_txm_module_manager_tx_mutex_prioritize_dispatch+0x82>
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800d670:	d812      	bhi.n	800d698 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x8c>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	461a      	mov	r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d30c      	bcc.n	800d698 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x8c>
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	69db      	ldr	r3, [r3, #28]
 800d688:	3301      	adds	r3, #1
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d804      	bhi.n	800d698 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x8c>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800d694:	23f4      	movs	r3, #244	; 0xf4
 800d696:	e005      	b.n	800d6a4 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_prioritize(
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fa ff42 	bl	8008524 <_txe_mutex_prioritize>
 800d6a0:	60f8      	str	r0, [r7, #12]
        (TX_MUTEX *) param_0
    );
    return(return_value);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <_txm_module_manager_tx_mutex_put_dispatch>:
#ifndef TXM_MUTEX_PUT_CALL_NOT_USED
/* UINT _txe_mutex_put(
    TX_MUTEX *mutex_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_put_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d03a      	beq.n	800d738 <_txm_module_manager_tx_mutex_put_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800d6c8:	d81f      	bhi.n	800d70a <_txm_module_manager_tx_mutex_put_dispatch+0x5e>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d307      	bcc.n	800d6e6 <_txm_module_manager_tx_mutex_put_dispatch+0x3a>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d923      	bls.n	800d72e <_txm_module_manager_tx_mutex_put_dispatch+0x82>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d30b      	bcc.n	800d70a <_txm_module_manager_tx_mutex_put_dispatch+0x5e>
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d704:	440b      	add	r3, r1
 800d706:	429a      	cmp	r2, r3
 800d708:	d911      	bls.n	800d72e <_txm_module_manager_tx_mutex_put_dispatch+0x82>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800d710:	d812      	bhi.n	800d738 <_txm_module_manager_tx_mutex_put_dispatch+0x8c>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	699b      	ldr	r3, [r3, #24]
 800d716:	461a      	mov	r2, r3
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d30c      	bcc.n	800d738 <_txm_module_manager_tx_mutex_put_dispatch+0x8c>
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	69db      	ldr	r3, [r3, #28]
 800d728:	3301      	adds	r3, #1
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d804      	bhi.n	800d738 <_txm_module_manager_tx_mutex_put_dispatch+0x8c>
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <_txm_module_manager_tx_mutex_put_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800d734:	23f4      	movs	r3, #244	; 0xf4
 800d736:	e005      	b.n	800d744 <_txm_module_manager_tx_mutex_put_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_put(
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fa ff10 	bl	8008560 <_txe_mutex_put>
 800d740:	60f8      	str	r0, [r7, #12]
        (TX_MUTEX *) param_0
    );
    return(return_value);
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <_txm_module_manager_tx_queue_create_dispatch>:
    VOID *queue_start, -> extra_parameters[1]
    ULONG queue_size, -> extra_parameters[2]
    UINT queue_control_block_size -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800d74c:	b5b0      	push	{r4, r5, r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af02      	add	r7, sp, #8
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	f003 0302 	and.w	r3, r3, #2
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 80bf 	beq.w	800d8e6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_QUEUE)))
 800d768:	4b6c      	ldr	r3, [pc, #432]	; (800d91c <_txm_module_manager_tx_queue_create_dispatch+0x1d0>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d119      	bne.n	800d7a4 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800d776:	d815      	bhi.n	800d7a4 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 800d778:	4b69      	ldr	r3, [pc, #420]	; (800d920 <_txm_module_manager_tx_queue_create_dispatch+0x1d4>)
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	3310      	adds	r3, #16
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	429a      	cmp	r2, r3
 800d782:	d30f      	bcc.n	800d7a4 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	3344      	adds	r3, #68	; 0x44
 800d788:	4a65      	ldr	r2, [pc, #404]	; (800d920 <_txm_module_manager_tx_queue_create_dispatch+0x1d4>)
 800d78a:	6991      	ldr	r1, [r2, #24]
 800d78c:	4a64      	ldr	r2, [pc, #400]	; (800d920 <_txm_module_manager_tx_queue_create_dispatch+0x1d4>)
 800d78e:	69d2      	ldr	r2, [r2, #28]
 800d790:	440a      	add	r2, r1
 800d792:	4293      	cmp	r3, r2
 800d794:	d806      	bhi.n	800d7a4 <_txm_module_manager_tx_queue_create_dispatch+0x58>
 800d796:	2144      	movs	r1, #68	; 0x44
 800d798:	68b8      	ldr	r0, [r7, #8]
 800d79a:	f006 fded 	bl	8014378 <_txm_module_manager_object_size_check>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <_txm_module_manager_tx_queue_create_dispatch+0x62>
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <_txm_module_manager_tx_queue_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800d7aa:	23f4      	movs	r3, #244	; 0xf4
 800d7ac:	e0b1      	b.n	800d912 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b4:	d01d      	beq.n	800d7f2 <_txm_module_manager_tx_queue_create_dispatch+0xa6>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d306      	bcc.n	800d7d0 <_txm_module_manager_tx_queue_create_dispatch+0x84>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	1c5a      	adds	r2, r3, #1
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d926      	bls.n	800d81e <_txm_module_manager_tx_queue_create_dispatch+0xd2>
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d30a      	bcc.n	800d7f2 <_txm_module_manager_tx_queue_create_dispatch+0xa6>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d7ec:	440b      	add	r3, r1
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d915      	bls.n	800d81e <_txm_module_manager_tx_queue_create_dispatch+0xd2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f8:	d00c      	beq.n	800d814 <_txm_module_manager_tx_queue_create_dispatch+0xc8>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	461a      	mov	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4293      	cmp	r3, r2
 800d804:	d306      	bcc.n	800d814 <_txm_module_manager_tx_queue_create_dispatch+0xc8>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	3301      	adds	r3, #1
 800d810:	429a      	cmp	r2, r3
 800d812:	d904      	bls.n	800d81e <_txm_module_manager_tx_queue_create_dispatch+0xd2>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <_txm_module_manager_tx_queue_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 800d81a:	23f4      	movs	r3, #244	; 0xf4
 800d81c:	e079      	b.n	800d912 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	f113 0f11 	cmn.w	r3, #17
 800d824:	d81f      	bhi.n	800d866 <_txm_module_manager_tx_queue_create_dispatch+0x11a>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82a:	461a      	mov	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d807      	bhi.n	800d842 <_txm_module_manager_tx_queue_create_dispatch+0xf6>
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	f103 0210 	add.w	r2, r3, #16
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83c:	3301      	adds	r3, #1
 800d83e:	429a      	cmp	r2, r3
 800d840:	d913      	bls.n	800d86a <_txm_module_manager_tx_queue_create_dispatch+0x11e>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d80b      	bhi.n	800d866 <_txm_module_manager_tx_queue_create_dispatch+0x11a>
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	f103 0210 	add.w	r2, r3, #16
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d860:	440b      	add	r3, r1
 800d862:	429a      	cmp	r2, r3
 800d864:	d901      	bls.n	800d86a <_txm_module_manager_tx_queue_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800d866:	23f4      	movs	r3, #244	; 0xf4
 800d868:	e053      	b.n	800d912 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], extra_parameters[2]))
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	3304      	adds	r3, #4
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	3304      	adds	r3, #4
 800d874:	6819      	ldr	r1, [r3, #0]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	3308      	adds	r3, #8
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	440b      	add	r3, r1
 800d87e:	429a      	cmp	r2, r3
 800d880:	d22a      	bcs.n	800d8d8 <_txm_module_manager_tx_queue_create_dispatch+0x18c>
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	3304      	adds	r3, #4
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d30b      	bcc.n	800d8a8 <_txm_module_manager_tx_queue_create_dispatch+0x15c>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	3304      	adds	r3, #4
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	3308      	adds	r3, #8
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	441a      	add	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d91e      	bls.n	800d8e6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d30f      	bcc.n	800d8d8 <_txm_module_manager_tx_queue_create_dispatch+0x18c>
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	441a      	add	r2, r3
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d8d2:	440b      	add	r3, r1
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d906      	bls.n	800d8e6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	3304      	adds	r3, #4
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d001      	beq.n	800d8e6 <_txm_module_manager_tx_queue_create_dispatch+0x19a>
            return(TXM_MODULE_INVALID_MEMORY);
 800d8e2:	23f4      	movs	r3, #244	; 0xf4
 800d8e4:	e015      	b.n	800d912 <_txm_module_manager_tx_queue_create_dispatch+0x1c6>
    }

    return_value = (ALIGN_TYPE) _txe_queue_create(
 800d8e6:	68b8      	ldr	r0, [r7, #8]
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	681c      	ldr	r4, [r3, #0]
        (TX_QUEUE *) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (VOID *) extra_parameters[1],
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_create(
 800d8f4:	461d      	mov	r5, r3
        (ULONG) extra_parameters[2],
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_queue_create(
 800d8fa:	681b      	ldr	r3, [r3, #0]
        (UINT) extra_parameters[3]
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_queue_create(
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	9201      	str	r2, [sp, #4]
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	462b      	mov	r3, r5
 800d908:	4622      	mov	r2, r4
 800d90a:	f7fa fe63 	bl	80085d4 <_txe_queue_create>
 800d90e:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800d910:	697b      	ldr	r3, [r7, #20]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bdb0      	pop	{r4, r5, r7, pc}
 800d91a:	bf00      	nop
 800d91c:	2000f600 	.word	0x2000f600
 800d920:	2000f5cc 	.word	0x2000f5cc

0800d924 <_txm_module_manager_tx_queue_delete_dispatch>:
#ifndef TXM_QUEUE_DELETE_CALL_NOT_USED
/* UINT _txe_queue_delete(
    TX_QUEUE *queue_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	f003 0302 	and.w	r3, r3, #2
 800d936:	2b00      	cmp	r3, #0
 800d938:	d03a      	beq.n	800d9b0 <_txm_module_manager_tx_queue_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800d940:	d81f      	bhi.n	800d982 <_txm_module_manager_tx_queue_delete_dispatch+0x5e>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d946:	461a      	mov	r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d307      	bcc.n	800d95e <_txm_module_manager_tx_queue_delete_dispatch+0x3a>
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d958:	3301      	adds	r3, #1
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d923      	bls.n	800d9a6 <_txm_module_manager_tx_queue_delete_dispatch+0x82>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	429a      	cmp	r2, r3
 800d968:	d30b      	bcc.n	800d982 <_txm_module_manager_tx_queue_delete_dispatch+0x5e>
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d97c:	440b      	add	r3, r1
 800d97e:	429a      	cmp	r2, r3
 800d980:	d911      	bls.n	800d9a6 <_txm_module_manager_tx_queue_delete_dispatch+0x82>
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800d988:	d812      	bhi.n	800d9b0 <_txm_module_manager_tx_queue_delete_dispatch+0x8c>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	461a      	mov	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	4293      	cmp	r3, r2
 800d994:	d30c      	bcc.n	800d9b0 <_txm_module_manager_tx_queue_delete_dispatch+0x8c>
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d804      	bhi.n	800d9b0 <_txm_module_manager_tx_queue_delete_dispatch+0x8c>
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <_txm_module_manager_tx_queue_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800d9ac:	23f4      	movs	r3, #244	; 0xf4
 800d9ae:	e00d      	b.n	800d9cc <_txm_module_manager_tx_queue_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_queue_delete(
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fa feba 	bl	800872c <_txe_queue_delete>
 800d9b8:	60f8      	str	r0, [r7, #12]
        (TX_QUEUE *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d104      	bne.n	800d9ca <_txm_module_manager_tx_queue_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f005 f9fc 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800d9c8:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <_txm_module_manager_tx_queue_flush_dispatch>:
#ifndef TXM_QUEUE_FLUSH_CALL_NOT_USED
/* UINT _txe_queue_flush(
    TX_QUEUE *queue_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_flush_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d03a      	beq.n	800da60 <_txm_module_manager_tx_queue_flush_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800d9f0:	d81f      	bhi.n	800da32 <_txm_module_manager_tx_queue_flush_dispatch+0x5e>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d307      	bcc.n	800da0e <_txm_module_manager_tx_queue_flush_dispatch+0x3a>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da08:	3301      	adds	r3, #1
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d923      	bls.n	800da56 <_txm_module_manager_tx_queue_flush_dispatch+0x82>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d30b      	bcc.n	800da32 <_txm_module_manager_tx_queue_flush_dispatch+0x5e>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800da2c:	440b      	add	r3, r1
 800da2e:	429a      	cmp	r2, r3
 800da30:	d911      	bls.n	800da56 <_txm_module_manager_tx_queue_flush_dispatch+0x82>
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800da38:	d812      	bhi.n	800da60 <_txm_module_manager_tx_queue_flush_dispatch+0x8c>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	699b      	ldr	r3, [r3, #24]
 800da3e:	461a      	mov	r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	4293      	cmp	r3, r2
 800da44:	d30c      	bcc.n	800da60 <_txm_module_manager_tx_queue_flush_dispatch+0x8c>
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	69db      	ldr	r3, [r3, #28]
 800da50:	3301      	adds	r3, #1
 800da52:	429a      	cmp	r2, r3
 800da54:	d804      	bhi.n	800da60 <_txm_module_manager_tx_queue_flush_dispatch+0x8c>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <_txm_module_manager_tx_queue_flush_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800da5c:	23f4      	movs	r3, #244	; 0xf4
 800da5e:	e005      	b.n	800da6c <_txm_module_manager_tx_queue_flush_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_queue_flush(
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	4618      	mov	r0, r3
 800da64:	f7fa fea0 	bl	80087a8 <_txe_queue_flush>
 800da68:	60f8      	str	r0, [r7, #12]
        (TX_QUEUE *) param_0
    );
    return(return_value);
 800da6a:	68fb      	ldr	r3, [r7, #12]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <_txm_module_manager_tx_queue_front_send_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *source_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_front_send_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
 800da80:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	f003 0302 	and.w	r3, r3, #2
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 8081 	beq.w	800db92 <_txm_module_manager_tx_queue_front_send_dispatch+0x11e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800da96:	d81f      	bhi.n	800dad8 <_txm_module_manager_tx_queue_front_send_dispatch+0x64>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9c:	461a      	mov	r2, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d307      	bcc.n	800dab4 <_txm_module_manager_tx_queue_front_send_dispatch+0x40>
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daae:	3301      	adds	r3, #1
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d923      	bls.n	800dafc <_txm_module_manager_tx_queue_front_send_dispatch+0x88>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800daba:	68ba      	ldr	r2, [r7, #8]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d30b      	bcc.n	800dad8 <_txm_module_manager_tx_queue_front_send_dispatch+0x64>
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dad2:	440b      	add	r3, r1
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d911      	bls.n	800dafc <_txm_module_manager_tx_queue_front_send_dispatch+0x88>
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800dade:	d812      	bhi.n	800db06 <_txm_module_manager_tx_queue_front_send_dispatch+0x92>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	461a      	mov	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	4293      	cmp	r3, r2
 800daea:	d30c      	bcc.n	800db06 <_txm_module_manager_tx_queue_front_send_dispatch+0x92>
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	3301      	adds	r3, #1
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d804      	bhi.n	800db06 <_txm_module_manager_tx_queue_front_send_dispatch+0x92>
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <_txm_module_manager_tx_queue_front_send_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800db02:	23f4      	movs	r3, #244	; 0xf4
 800db04:	e04d      	b.n	800dba2 <_txm_module_manager_tx_queue_front_send_dispatch+0x12e>

        /* We need to get the size of the message from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0;
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_READ(module_instance, param_1, queue_ptr -> tx_queue_message_size))
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	689a      	ldr	r2, [r3, #8]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4413      	add	r3, r2
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	429a      	cmp	r2, r3
 800db16:	d221      	bcs.n	800db5c <_txm_module_manager_tx_queue_front_send_dispatch+0xe8>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1c:	461a      	mov	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4293      	cmp	r3, r2
 800db22:	d308      	bcc.n	800db36 <_txm_module_manager_tx_queue_front_send_dispatch+0xc2>
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	689a      	ldr	r2, [r3, #8]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	441a      	add	r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db30:	3301      	adds	r3, #1
 800db32:	429a      	cmp	r2, r3
 800db34:	d92d      	bls.n	800db92 <_txm_module_manager_tx_queue_front_send_dispatch+0x11e>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d30c      	bcc.n	800db5c <_txm_module_manager_tx_queue_front_send_dispatch+0xe8>
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	689a      	ldr	r2, [r3, #8]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	441a      	add	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800db56:	440b      	add	r3, r1
 800db58:	429a      	cmp	r2, r3
 800db5a:	d91a      	bls.n	800db92 <_txm_module_manager_tx_queue_front_send_dispatch+0x11e>
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	689a      	ldr	r2, [r3, #8]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4413      	add	r3, r2
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	429a      	cmp	r2, r3
 800db68:	d20e      	bcs.n	800db88 <_txm_module_manager_tx_queue_front_send_dispatch+0x114>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	699b      	ldr	r3, [r3, #24]
 800db6e:	461a      	mov	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4293      	cmp	r3, r2
 800db74:	d308      	bcc.n	800db88 <_txm_module_manager_tx_queue_front_send_dispatch+0x114>
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	689a      	ldr	r2, [r3, #8]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	441a      	add	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	69db      	ldr	r3, [r3, #28]
 800db82:	3301      	adds	r3, #1
 800db84:	429a      	cmp	r2, r3
 800db86:	d904      	bls.n	800db92 <_txm_module_manager_tx_queue_front_send_dispatch+0x11e>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d001      	beq.n	800db92 <_txm_module_manager_tx_queue_front_send_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800db8e:	23f4      	movs	r3, #244	; 0xf4
 800db90:	e007      	b.n	800dba2 <_txm_module_manager_tx_queue_front_send_dispatch+0x12e>
    }

    return_value = (ALIGN_TYPE) _txe_queue_front_send(
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fa fe23 	bl	80087e4 <_txe_queue_front_send>
 800db9e:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 800dba0:	693b      	ldr	r3, [r7, #16]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <_txm_module_manager_tx_queue_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_QUEUE **next_queue -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800dbaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbac:	b08b      	sub	sp, #44	; 0x2c
 800dbae:	af04      	add	r7, sp, #16
 800dbb0:	60f8      	str	r0, [r7, #12]
 800dbb2:	60b9      	str	r1, [r7, #8]
 800dbb4:	607a      	str	r2, [r7, #4]
 800dbb6:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 817c 	beq.w	800debe <_txm_module_manager_tx_queue_info_get_dispatch+0x314>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800dbcc:	d81f      	bhi.n	800dc0e <_txm_module_manager_tx_queue_info_get_dispatch+0x64>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d307      	bcc.n	800dbea <_txm_module_manager_tx_queue_info_get_dispatch+0x40>
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d923      	bls.n	800dc32 <_txm_module_manager_tx_queue_info_get_dispatch+0x88>
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d30b      	bcc.n	800dc0e <_txm_module_manager_tx_queue_info_get_dispatch+0x64>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dc08:	440b      	add	r3, r1
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d911      	bls.n	800dc32 <_txm_module_manager_tx_queue_info_get_dispatch+0x88>
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800dc14:	d812      	bhi.n	800dc3c <_txm_module_manager_tx_queue_info_get_dispatch+0x92>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	699b      	ldr	r3, [r3, #24]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d30c      	bcc.n	800dc3c <_txm_module_manager_tx_queue_info_get_dispatch+0x92>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	69db      	ldr	r3, [r3, #28]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d804      	bhi.n	800dc3c <_txm_module_manager_tx_queue_info_get_dispatch+0x92>
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <_txm_module_manager_tx_queue_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800dc38:	23f4      	movs	r3, #244	; 0xf4
 800dc3a:	e15d      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f113 0f05 	cmn.w	r3, #5
 800dc42:	d81d      	bhi.n	800dc80 <_txm_module_manager_tx_queue_info_get_dispatch+0xd6>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc48:	461a      	mov	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d306      	bcc.n	800dc5e <_txm_module_manager_tx_queue_info_get_dispatch+0xb4>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	1d1a      	adds	r2, r3, #4
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc58:	3301      	adds	r3, #1
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d915      	bls.n	800dc8a <_txm_module_manager_tx_queue_info_get_dispatch+0xe0>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d30a      	bcc.n	800dc80 <_txm_module_manager_tx_queue_info_get_dispatch+0xd6>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	1d1a      	adds	r2, r3, #4
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dc7a:	440b      	add	r3, r1
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d904      	bls.n	800dc8a <_txm_module_manager_tx_queue_info_get_dispatch+0xe0>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <_txm_module_manager_tx_queue_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800dc86:	23f4      	movs	r3, #244	; 0xf4
 800dc88:	e136      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	f113 0f15 	cmn.w	r3, #21
 800dc90:	d81f      	bhi.n	800dcd2 <_txm_module_manager_tx_queue_info_get_dispatch+0x128>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc96:	461a      	mov	r2, r3
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d807      	bhi.n	800dcae <_txm_module_manager_tx_queue_info_get_dispatch+0x104>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	f103 0214 	add.w	r2, r3, #20
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca8:	3301      	adds	r3, #1
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d913      	bls.n	800dcd6 <_txm_module_manager_tx_queue_info_get_dispatch+0x12c>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d80b      	bhi.n	800dcd2 <_txm_module_manager_tx_queue_info_get_dispatch+0x128>
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	f103 0214 	add.w	r2, r3, #20
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dccc:	440b      	add	r3, r1
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d901      	bls.n	800dcd6 <_txm_module_manager_tx_queue_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800dcd2:	23f4      	movs	r3, #244	; 0xf4
 800dcd4:	e110      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f113 0f05 	cmn.w	r3, #5
 800dcde:	d820      	bhi.n	800dd22 <_txm_module_manager_tx_queue_info_get_dispatch+0x178>
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d307      	bcc.n	800dcfc <_txm_module_manager_tx_queue_info_get_dispatch+0x152>
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	1d1a      	adds	r2, r3, #4
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d918      	bls.n	800dd2e <_txm_module_manager_tx_queue_info_get_dispatch+0x184>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d30b      	bcc.n	800dd22 <_txm_module_manager_tx_queue_info_get_dispatch+0x178>
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	1d1a      	adds	r2, r3, #4
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dd1c:	440b      	add	r3, r1
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d905      	bls.n	800dd2e <_txm_module_manager_tx_queue_info_get_dispatch+0x184>
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <_txm_module_manager_tx_queue_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800dd2a:	23f4      	movs	r3, #244	; 0xf4
 800dd2c:	e0e4      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	3304      	adds	r3, #4
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f113 0f05 	cmn.w	r3, #5
 800dd38:	d824      	bhi.n	800dd84 <_txm_module_manager_tx_queue_info_get_dispatch+0x1da>
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d308      	bcc.n	800dd5a <_txm_module_manager_tx_queue_info_get_dispatch+0x1b0>
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	1d1a      	adds	r2, r3, #4
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd54:	3301      	adds	r3, #1
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d91b      	bls.n	800dd92 <_txm_module_manager_tx_queue_info_get_dispatch+0x1e8>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d30c      	bcc.n	800dd84 <_txm_module_manager_tx_queue_info_get_dispatch+0x1da>
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	1d1a      	adds	r2, r3, #4
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dd7e:	440b      	add	r3, r1
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d906      	bls.n	800dd92 <_txm_module_manager_tx_queue_info_get_dispatch+0x1e8>
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	3304      	adds	r3, #4
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <_txm_module_manager_tx_queue_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800dd8e:	23f4      	movs	r3, #244	; 0xf4
 800dd90:	e0b2      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	3308      	adds	r3, #8
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f113 0f05 	cmn.w	r3, #5
 800dd9c:	d824      	bhi.n	800dde8 <_txm_module_manager_tx_queue_info_get_dispatch+0x23e>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	3308      	adds	r3, #8
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d308      	bcc.n	800ddbe <_txm_module_manager_tx_queue_info_get_dispatch+0x214>
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	3308      	adds	r3, #8
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	1d1a      	adds	r2, r3, #4
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb8:	3301      	adds	r3, #1
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d91b      	bls.n	800ddf6 <_txm_module_manager_tx_queue_info_get_dispatch+0x24c>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d30c      	bcc.n	800dde8 <_txm_module_manager_tx_queue_info_get_dispatch+0x23e>
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	3308      	adds	r3, #8
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	1d1a      	adds	r2, r3, #4
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dde2:	440b      	add	r3, r1
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d906      	bls.n	800ddf6 <_txm_module_manager_tx_queue_info_get_dispatch+0x24c>
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <_txm_module_manager_tx_queue_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800ddf2:	23f4      	movs	r3, #244	; 0xf4
 800ddf4:	e080      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	330c      	adds	r3, #12
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f113 0f05 	cmn.w	r3, #5
 800de00:	d824      	bhi.n	800de4c <_txm_module_manager_tx_queue_info_get_dispatch+0x2a2>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	330c      	adds	r3, #12
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d308      	bcc.n	800de22 <_txm_module_manager_tx_queue_info_get_dispatch+0x278>
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	330c      	adds	r3, #12
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	1d1a      	adds	r2, r3, #4
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de1c:	3301      	adds	r3, #1
 800de1e:	429a      	cmp	r2, r3
 800de20:	d91b      	bls.n	800de5a <_txm_module_manager_tx_queue_info_get_dispatch+0x2b0>
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	330c      	adds	r3, #12
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800de2e:	429a      	cmp	r2, r3
 800de30:	d30c      	bcc.n	800de4c <_txm_module_manager_tx_queue_info_get_dispatch+0x2a2>
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	330c      	adds	r3, #12
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	1d1a      	adds	r2, r3, #4
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de46:	440b      	add	r3, r1
 800de48:	429a      	cmp	r2, r3
 800de4a:	d906      	bls.n	800de5a <_txm_module_manager_tx_queue_info_get_dispatch+0x2b0>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	330c      	adds	r3, #12
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <_txm_module_manager_tx_queue_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800de56:	23f4      	movs	r3, #244	; 0xf4
 800de58:	e04e      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_QUEUE *)))
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	3310      	adds	r3, #16
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f113 0f05 	cmn.w	r3, #5
 800de64:	d824      	bhi.n	800deb0 <_txm_module_manager_tx_queue_info_get_dispatch+0x306>
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	3310      	adds	r3, #16
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800de70:	4293      	cmp	r3, r2
 800de72:	d308      	bcc.n	800de86 <_txm_module_manager_tx_queue_info_get_dispatch+0x2dc>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3310      	adds	r3, #16
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	1d1a      	adds	r2, r3, #4
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de80:	3301      	adds	r3, #1
 800de82:	429a      	cmp	r2, r3
 800de84:	d91b      	bls.n	800debe <_txm_module_manager_tx_queue_info_get_dispatch+0x314>
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	3310      	adds	r3, #16
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800de92:	429a      	cmp	r2, r3
 800de94:	d30c      	bcc.n	800deb0 <_txm_module_manager_tx_queue_info_get_dispatch+0x306>
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	3310      	adds	r3, #16
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	1d1a      	adds	r2, r3, #4
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800deaa:	440b      	add	r3, r1
 800deac:	429a      	cmp	r2, r3
 800deae:	d906      	bls.n	800debe <_txm_module_manager_tx_queue_info_get_dispatch+0x314>
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	3310      	adds	r3, #16
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <_txm_module_manager_tx_queue_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800deba:	23f4      	movs	r3, #244	; 0xf4
 800debc:	e01c      	b.n	800def8 <_txm_module_manager_tx_queue_info_get_dispatch+0x34e>
    }

    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 800debe:	68b8      	ldr	r0, [r7, #8]
 800dec0:	6879      	ldr	r1, [r7, #4]
        (TX_QUEUE *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 800dec6:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	3304      	adds	r3, #4
 800decc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 800dece:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	3308      	adds	r3, #8
 800ded4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 800ded6:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	330c      	adds	r3, #12
 800dedc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 800dede:	461c      	mov	r4, r3
        (TX_QUEUE **) extra_parameters[4]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	3310      	adds	r3, #16
 800dee4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 800dee6:	9302      	str	r3, [sp, #8]
 800dee8:	9401      	str	r4, [sp, #4]
 800deea:	9200      	str	r2, [sp, #0]
 800deec:	4633      	mov	r3, r6
 800deee:	462a      	mov	r2, r5
 800def0:	f7fa fcc2 	bl	8008878 <_txe_queue_info_get>
 800def4:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800def6:	697b      	ldr	r3, [r7, #20]
}
 800def8:	4618      	mov	r0, r3
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df00 <_txm_module_manager_tx_queue_performance_info_get_dispatch>:
    ULONG *full_suspensions, -> extra_parameters[2]
    ULONG *full_errors, -> extra_parameters[3]
    ULONG *timeouts -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800df00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df02:	b08b      	sub	sp, #44	; 0x2c
 800df04:	af04      	add	r7, sp, #16
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	2b00      	cmp	r3, #0
 800df18:	f000 817c 	beq.w	800e214 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x314>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800df22:	d81f      	bhi.n	800df64 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x64>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	461a      	mov	r2, r3
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d307      	bcc.n	800df40 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x40>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3a:	3301      	adds	r3, #1
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d923      	bls.n	800df88 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x88>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d30b      	bcc.n	800df64 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x64>
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800df5e:	440b      	add	r3, r1
 800df60:	429a      	cmp	r2, r3
 800df62:	d911      	bls.n	800df88 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x88>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800df6a:	d812      	bhi.n	800df92 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x92>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	461a      	mov	r2, r3
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	4293      	cmp	r3, r2
 800df76:	d30c      	bcc.n	800df92 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x92>
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	3301      	adds	r3, #1
 800df84:	429a      	cmp	r2, r3
 800df86:	d804      	bhi.n	800df92 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x92>
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800df8e:	23f4      	movs	r3, #244	; 0xf4
 800df90:	e15d      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f113 0f05 	cmn.w	r3, #5
 800df98:	d81d      	bhi.n	800dfd6 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xd6>
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9e:	461a      	mov	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d306      	bcc.n	800dfb4 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xb4>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	1d1a      	adds	r2, r3, #4
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfae:	3301      	adds	r3, #1
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d915      	bls.n	800dfe0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xe0>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d30a      	bcc.n	800dfd6 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xd6>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	1d1a      	adds	r2, r3, #4
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dfd0:	440b      	add	r3, r1
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d904      	bls.n	800dfe0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xe0>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d001      	beq.n	800dfe0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800dfdc:	23f4      	movs	r3, #244	; 0xf4
 800dfde:	e136      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	f113 0f15 	cmn.w	r3, #21
 800dfe6:	d81f      	bhi.n	800e028 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x128>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfec:	461a      	mov	r2, r3
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d807      	bhi.n	800e004 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x104>
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	f103 0214 	add.w	r2, r3, #20
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffe:	3301      	adds	r3, #1
 800e000:	429a      	cmp	r2, r3
 800e002:	d913      	bls.n	800e02c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x12c>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d80b      	bhi.n	800e028 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x128>
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	f103 0214 	add.w	r2, r3, #20
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e022:	440b      	add	r3, r1
 800e024:	429a      	cmp	r2, r3
 800e026:	d901      	bls.n	800e02c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800e028:	23f4      	movs	r3, #244	; 0xf4
 800e02a:	e110      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f113 0f05 	cmn.w	r3, #5
 800e034:	d820      	bhi.n	800e078 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x178>
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e03e:	4293      	cmp	r3, r2
 800e040:	d307      	bcc.n	800e052 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x152>
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	1d1a      	adds	r2, r3, #4
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e04c:	3301      	adds	r3, #1
 800e04e:	429a      	cmp	r2, r3
 800e050:	d918      	bls.n	800e084 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x184>
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d30b      	bcc.n	800e078 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x178>
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	1d1a      	adds	r2, r3, #4
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e072:	440b      	add	r3, r1
 800e074:	429a      	cmp	r2, r3
 800e076:	d905      	bls.n	800e084 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x184>
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d001      	beq.n	800e084 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800e080:	23f4      	movs	r3, #244	; 0xf4
 800e082:	e0e4      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	3304      	adds	r3, #4
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f113 0f05 	cmn.w	r3, #5
 800e08e:	d824      	bhi.n	800e0da <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x1da>
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	3304      	adds	r3, #4
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d308      	bcc.n	800e0b0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x1b0>
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	1d1a      	adds	r2, r3, #4
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d91b      	bls.n	800e0e8 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x1e8>
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d30c      	bcc.n	800e0da <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x1da>
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	1d1a      	adds	r2, r3, #4
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e0d4:	440b      	add	r3, r1
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d906      	bls.n	800e0e8 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x1e8>
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800e0e4:	23f4      	movs	r3, #244	; 0xf4
 800e0e6:	e0b2      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	3308      	adds	r3, #8
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f113 0f05 	cmn.w	r3, #5
 800e0f2:	d824      	bhi.n	800e13e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x23e>
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	3308      	adds	r3, #8
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d308      	bcc.n	800e114 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x214>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	3308      	adds	r3, #8
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	1d1a      	adds	r2, r3, #4
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e10e:	3301      	adds	r3, #1
 800e110:	429a      	cmp	r2, r3
 800e112:	d91b      	bls.n	800e14c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x24c>
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	3308      	adds	r3, #8
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e120:	429a      	cmp	r2, r3
 800e122:	d30c      	bcc.n	800e13e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x23e>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	3308      	adds	r3, #8
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	1d1a      	adds	r2, r3, #4
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e138:	440b      	add	r3, r1
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d906      	bls.n	800e14c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x24c>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	3308      	adds	r3, #8
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800e148:	23f4      	movs	r3, #244	; 0xf4
 800e14a:	e080      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	330c      	adds	r3, #12
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f113 0f05 	cmn.w	r3, #5
 800e156:	d824      	bhi.n	800e1a2 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x2a2>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	330c      	adds	r3, #12
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e162:	4293      	cmp	r3, r2
 800e164:	d308      	bcc.n	800e178 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x278>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	330c      	adds	r3, #12
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	1d1a      	adds	r2, r3, #4
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e172:	3301      	adds	r3, #1
 800e174:	429a      	cmp	r2, r3
 800e176:	d91b      	bls.n	800e1b0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x2b0>
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	330c      	adds	r3, #12
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e184:	429a      	cmp	r2, r3
 800e186:	d30c      	bcc.n	800e1a2 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x2a2>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	330c      	adds	r3, #12
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	1d1a      	adds	r2, r3, #4
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e19c:	440b      	add	r3, r1
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d906      	bls.n	800e1b0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x2b0>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	330c      	adds	r3, #12
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800e1ac:	23f4      	movs	r3, #244	; 0xf4
 800e1ae:	e04e      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	3310      	adds	r3, #16
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f113 0f05 	cmn.w	r3, #5
 800e1ba:	d824      	bhi.n	800e206 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x306>
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	3310      	adds	r3, #16
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d308      	bcc.n	800e1dc <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x2dc>
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	3310      	adds	r3, #16
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	1d1a      	adds	r2, r3, #4
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d91b      	bls.n	800e214 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x314>
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	3310      	adds	r3, #16
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d30c      	bcc.n	800e206 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x306>
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	3310      	adds	r3, #16
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	1d1a      	adds	r2, r3, #4
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e200:	440b      	add	r3, r1
 800e202:	429a      	cmp	r2, r3
 800e204:	d906      	bls.n	800e214 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x314>
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	3310      	adds	r3, #16
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800e210:	23f4      	movs	r3, #244	; 0xf4
 800e212:	e01c      	b.n	800e24e <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x34e>
    }

    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 800e214:	68b8      	ldr	r0, [r7, #8]
 800e216:	6879      	ldr	r1, [r7, #4]
        (TX_QUEUE *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 800e21c:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	3304      	adds	r3, #4
 800e222:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 800e224:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[2],
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	3308      	adds	r3, #8
 800e22a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 800e22c:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	330c      	adds	r3, #12
 800e232:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 800e234:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4]
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	3310      	adds	r3, #16
 800e23a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 800e23c:	9302      	str	r3, [sp, #8]
 800e23e:	9401      	str	r4, [sp, #4]
 800e240:	9200      	str	r2, [sp, #0]
 800e242:	4633      	mov	r3, r6
 800e244:	462a      	mov	r2, r5
 800e246:	f006 fab3 	bl	80147b0 <_tx_queue_performance_info_get>
 800e24a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800e24c:	697b      	ldr	r3, [r7, #20]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	371c      	adds	r7, #28
 800e252:	46bd      	mov	sp, r7
 800e254:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e256 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch>:
    ULONG *full_suspensions, -> extra_parameters[1]
    ULONG *full_errors, -> extra_parameters[2]
    ULONG *timeouts -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e256:	b5b0      	push	{r4, r5, r7, lr}
 800e258:	b088      	sub	sp, #32
 800e25a:	af02      	add	r7, sp, #8
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
 800e262:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	f003 0302 	and.w	r3, r3, #2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 8136 	beq.w	800e4de <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x288>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	f113 0f05 	cmn.w	r3, #5
 800e278:	d81d      	bhi.n	800e2b6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x60>
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27e:	461a      	mov	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	4293      	cmp	r3, r2
 800e284:	d306      	bcc.n	800e294 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x3e>
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	1d1a      	adds	r2, r3, #4
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28e:	3301      	adds	r3, #1
 800e290:	429a      	cmp	r2, r3
 800e292:	d915      	bls.n	800e2c0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x6a>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d30a      	bcc.n	800e2b6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x60>
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	1d1a      	adds	r2, r3, #4
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e2b0:	440b      	add	r3, r1
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d904      	bls.n	800e2c0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x6a>
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 800e2bc:	23f4      	movs	r3, #244	; 0xf4
 800e2be:	e126      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f113 0f05 	cmn.w	r3, #5
 800e2c6:	d81d      	bhi.n	800e304 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xae>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d306      	bcc.n	800e2e2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x8c>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	1d1a      	adds	r2, r3, #4
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2dc:	3301      	adds	r3, #1
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d915      	bls.n	800e30e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xb8>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d30a      	bcc.n	800e304 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xae>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	1d1a      	adds	r2, r3, #4
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e2fe:	440b      	add	r3, r1
 800e300:	429a      	cmp	r2, r3
 800e302:	d904      	bls.n	800e30e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xb8>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 800e30a:	23f4      	movs	r3, #244	; 0xf4
 800e30c:	e0ff      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	f113 0f11 	cmn.w	r3, #17
 800e314:	d81f      	bhi.n	800e356 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x100>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31a:	461a      	mov	r2, r3
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d807      	bhi.n	800e332 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xdc>
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	f103 0210 	add.w	r2, r3, #16
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32c:	3301      	adds	r3, #1
 800e32e:	429a      	cmp	r2, r3
 800e330:	d913      	bls.n	800e35a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x104>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d80b      	bhi.n	800e356 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x100>
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	f103 0210 	add.w	r2, r3, #16
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e350:	440b      	add	r3, r1
 800e352:	429a      	cmp	r2, r3
 800e354:	d901      	bls.n	800e35a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 800e356:	23f4      	movs	r3, #244	; 0xf4
 800e358:	e0d9      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f113 0f05 	cmn.w	r3, #5
 800e362:	d820      	bhi.n	800e3a6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x150>
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d307      	bcc.n	800e380 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x12a>
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	1d1a      	adds	r2, r3, #4
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37a:	3301      	adds	r3, #1
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d918      	bls.n	800e3b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x15c>
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d30b      	bcc.n	800e3a6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x150>
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	1d1a      	adds	r2, r3, #4
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e3a0:	440b      	add	r3, r1
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d905      	bls.n	800e3b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x15c>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 800e3ae:	23f4      	movs	r3, #244	; 0xf4
 800e3b0:	e0ad      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f113 0f05 	cmn.w	r3, #5
 800e3bc:	d824      	bhi.n	800e408 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x1b2>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d308      	bcc.n	800e3de <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x188>
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	1d1a      	adds	r2, r3, #4
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d8:	3301      	adds	r3, #1
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d91b      	bls.n	800e416 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x1c0>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d30c      	bcc.n	800e408 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x1b2>
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e402:	440b      	add	r3, r1
 800e404:	429a      	cmp	r2, r3
 800e406:	d906      	bls.n	800e416 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x1c0>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	3304      	adds	r3, #4
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 800e412:	23f4      	movs	r3, #244	; 0xf4
 800e414:	e07b      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	3308      	adds	r3, #8
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f113 0f05 	cmn.w	r3, #5
 800e420:	d824      	bhi.n	800e46c <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x216>
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	3308      	adds	r3, #8
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d308      	bcc.n	800e442 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x1ec>
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	3308      	adds	r3, #8
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	1d1a      	adds	r2, r3, #4
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43c:	3301      	adds	r3, #1
 800e43e:	429a      	cmp	r2, r3
 800e440:	d91b      	bls.n	800e47a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x224>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	3308      	adds	r3, #8
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e44e:	429a      	cmp	r2, r3
 800e450:	d30c      	bcc.n	800e46c <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x216>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	3308      	adds	r3, #8
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	1d1a      	adds	r2, r3, #4
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e466:	440b      	add	r3, r1
 800e468:	429a      	cmp	r2, r3
 800e46a:	d906      	bls.n	800e47a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x224>
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	3308      	adds	r3, #8
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x224>
            return(TXM_MODULE_INVALID_MEMORY);
 800e476:	23f4      	movs	r3, #244	; 0xf4
 800e478:	e049      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	330c      	adds	r3, #12
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f113 0f05 	cmn.w	r3, #5
 800e484:	d824      	bhi.n	800e4d0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x27a>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	330c      	adds	r3, #12
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e490:	4293      	cmp	r3, r2
 800e492:	d308      	bcc.n	800e4a6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x250>
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	330c      	adds	r3, #12
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	1d1a      	adds	r2, r3, #4
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d91b      	bls.n	800e4de <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x288>
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	330c      	adds	r3, #12
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d30c      	bcc.n	800e4d0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x27a>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	330c      	adds	r3, #12
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	1d1a      	adds	r2, r3, #4
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e4ca:	440b      	add	r3, r1
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d906      	bls.n	800e4de <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x288>
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	330c      	adds	r3, #12
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x288>
            return(TXM_MODULE_INVALID_MEMORY);
 800e4da:	23f4      	movs	r3, #244	; 0xf4
 800e4dc:	e017      	b.n	800e50e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x2b8>
    }

    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 800e4de:	68b8      	ldr	r0, [r7, #8]
 800e4e0:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 800e4e6:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 800e4ee:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 800e4f6:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	330c      	adds	r3, #12
 800e4fc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 800e4fe:	9301      	str	r3, [sp, #4]
 800e500:	9200      	str	r2, [sp, #0]
 800e502:	462b      	mov	r3, r5
 800e504:	4622      	mov	r2, r4
 800e506:	f006 f98d 	bl	8014824 <_tx_queue_performance_system_info_get>
 800e50a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800e50c:	697b      	ldr	r3, [r7, #20]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3718      	adds	r7, #24
 800e512:	46bd      	mov	sp, r7
 800e514:	bdb0      	pop	{r4, r5, r7, pc}

0800e516 <_txm_module_manager_tx_queue_prioritize_dispatch>:
#ifndef TXM_QUEUE_PRIORITIZE_CALL_NOT_USED
/* UINT _txe_queue_prioritize(
    TX_QUEUE *queue_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	f003 0302 	and.w	r3, r3, #2
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d03a      	beq.n	800e5a2 <_txm_module_manager_tx_queue_prioritize_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e532:	d81f      	bhi.n	800e574 <_txm_module_manager_tx_queue_prioritize_dispatch+0x5e>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e538:	461a      	mov	r2, r3
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d307      	bcc.n	800e550 <_txm_module_manager_tx_queue_prioritize_dispatch+0x3a>
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	3301      	adds	r3, #1
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d923      	bls.n	800e598 <_txm_module_manager_tx_queue_prioritize_dispatch+0x82>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e556:	683a      	ldr	r2, [r7, #0]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d30b      	bcc.n	800e574 <_txm_module_manager_tx_queue_prioritize_dispatch+0x5e>
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e56e:	440b      	add	r3, r1
 800e570:	429a      	cmp	r2, r3
 800e572:	d911      	bls.n	800e598 <_txm_module_manager_tx_queue_prioritize_dispatch+0x82>
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e57a:	d812      	bhi.n	800e5a2 <_txm_module_manager_tx_queue_prioritize_dispatch+0x8c>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	699b      	ldr	r3, [r3, #24]
 800e580:	461a      	mov	r2, r3
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	4293      	cmp	r3, r2
 800e586:	d30c      	bcc.n	800e5a2 <_txm_module_manager_tx_queue_prioritize_dispatch+0x8c>
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	3301      	adds	r3, #1
 800e594:	429a      	cmp	r2, r3
 800e596:	d804      	bhi.n	800e5a2 <_txm_module_manager_tx_queue_prioritize_dispatch+0x8c>
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <_txm_module_manager_tx_queue_prioritize_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800e59e:	23f4      	movs	r3, #244	; 0xf4
 800e5a0:	e005      	b.n	800e5ae <_txm_module_manager_tx_queue_prioritize_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_queue_prioritize(
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fa f991 	bl	80088cc <_txe_queue_prioritize>
 800e5aa:	60f8      	str	r0, [r7, #12]
        (TX_QUEUE *) param_0
    );
    return(return_value);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <_txm_module_manager_tx_queue_receive_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *destination_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_receive_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b086      	sub	sp, #24
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	60f8      	str	r0, [r7, #12]
 800e5be:	60b9      	str	r1, [r7, #8]
 800e5c0:	607a      	str	r2, [r7, #4]
 800e5c2:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f003 0302 	and.w	r3, r3, #2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d06d      	beq.n	800e6ac <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e5d6:	d81f      	bhi.n	800e618 <_txm_module_manager_tx_queue_receive_dispatch+0x62>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5dc:	461a      	mov	r2, r3
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d307      	bcc.n	800e5f4 <_txm_module_manager_tx_queue_receive_dispatch+0x3e>
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d923      	bls.n	800e63c <_txm_module_manager_tx_queue_receive_dispatch+0x86>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d30b      	bcc.n	800e618 <_txm_module_manager_tx_queue_receive_dispatch+0x62>
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e612:	440b      	add	r3, r1
 800e614:	429a      	cmp	r2, r3
 800e616:	d911      	bls.n	800e63c <_txm_module_manager_tx_queue_receive_dispatch+0x86>
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e61e:	d812      	bhi.n	800e646 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	461a      	mov	r2, r3
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	4293      	cmp	r3, r2
 800e62a:	d30c      	bcc.n	800e646 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	69db      	ldr	r3, [r3, #28]
 800e636:	3301      	adds	r3, #1
 800e638:	429a      	cmp	r2, r3
 800e63a:	d804      	bhi.n	800e646 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <_txm_module_manager_tx_queue_receive_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 800e642:	23f4      	movs	r3, #244	; 0xf4
 800e644:	e03a      	b.n	800e6bc <_txm_module_manager_tx_queue_receive_dispatch+0x106>

        /* We need to get the max size of the buffer from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0;
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)*queue_ptr -> tx_queue_message_size))
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	009a      	lsls	r2, r3, #2
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4413      	add	r3, r2
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	429a      	cmp	r2, r3
 800e658:	d223      	bcs.n	800e6a2 <_txm_module_manager_tx_queue_receive_dispatch+0xec>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65e:	461a      	mov	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4293      	cmp	r3, r2
 800e664:	d309      	bcc.n	800e67a <_txm_module_manager_tx_queue_receive_dispatch+0xc4>
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	689b      	ldr	r3, [r3, #8]
 800e66a:	009a      	lsls	r2, r3, #2
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	441a      	add	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e674:	3301      	adds	r3, #1
 800e676:	429a      	cmp	r2, r3
 800e678:	d918      	bls.n	800e6ac <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d30d      	bcc.n	800e6a2 <_txm_module_manager_tx_queue_receive_dispatch+0xec>
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	009a      	lsls	r2, r3, #2
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	441a      	add	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e69c:	440b      	add	r3, r1
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d904      	bls.n	800e6ac <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d001      	beq.n	800e6ac <_txm_module_manager_tx_queue_receive_dispatch+0xf6>
            return(TXM_MODULE_INVALID_MEMORY);
 800e6a8:	23f4      	movs	r3, #244	; 0xf4
 800e6aa:	e007      	b.n	800e6bc <_txm_module_manager_tx_queue_receive_dispatch+0x106>
    }

    return_value = (ALIGN_TYPE) _txe_queue_receive(
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	6879      	ldr	r1, [r7, #4]
 800e6b0:	683a      	ldr	r2, [r7, #0]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fa f928 	bl	8008908 <_txe_queue_receive>
 800e6b8:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 800e6ba:	693b      	ldr	r3, [r7, #16]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_txm_module_manager_tx_queue_send_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *source_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_send_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	f003 0302 	and.w	r3, r3, #2
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 8086 	beq.w	800e7ec <_txm_module_manager_tx_queue_send_dispatch+0x128>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e6e6:	d81f      	bhi.n	800e728 <_txm_module_manager_tx_queue_send_dispatch+0x64>
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d307      	bcc.n	800e704 <_txm_module_manager_tx_queue_send_dispatch+0x40>
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fe:	3301      	adds	r3, #1
 800e700:	429a      	cmp	r2, r3
 800e702:	d923      	bls.n	800e74c <_txm_module_manager_tx_queue_send_dispatch+0x88>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d30b      	bcc.n	800e728 <_txm_module_manager_tx_queue_send_dispatch+0x64>
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e722:	440b      	add	r3, r1
 800e724:	429a      	cmp	r2, r3
 800e726:	d911      	bls.n	800e74c <_txm_module_manager_tx_queue_send_dispatch+0x88>
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e72e:	d812      	bhi.n	800e756 <_txm_module_manager_tx_queue_send_dispatch+0x92>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	461a      	mov	r2, r3
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	4293      	cmp	r3, r2
 800e73a:	d30c      	bcc.n	800e756 <_txm_module_manager_tx_queue_send_dispatch+0x92>
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	69db      	ldr	r3, [r3, #28]
 800e746:	3301      	adds	r3, #1
 800e748:	429a      	cmp	r2, r3
 800e74a:	d804      	bhi.n	800e756 <_txm_module_manager_tx_queue_send_dispatch+0x92>
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d001      	beq.n	800e756 <_txm_module_manager_tx_queue_send_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800e752:	23f4      	movs	r3, #244	; 0xf4
 800e754:	e052      	b.n	800e7fc <_txm_module_manager_tx_queue_send_dispatch+0x138>

        /* We need to get the size of the message from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0;
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_READ(module_instance, param_1, sizeof(ULONG)*queue_ptr -> tx_queue_message_size))
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	009a      	lsls	r2, r3, #2
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4413      	add	r3, r2
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	429a      	cmp	r2, r3
 800e768:	d223      	bcs.n	800e7b2 <_txm_module_manager_tx_queue_send_dispatch+0xee>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76e:	461a      	mov	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4293      	cmp	r3, r2
 800e774:	d309      	bcc.n	800e78a <_txm_module_manager_tx_queue_send_dispatch+0xc6>
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	009a      	lsls	r2, r3, #2
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	441a      	add	r2, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e784:	3301      	adds	r3, #1
 800e786:	429a      	cmp	r2, r3
 800e788:	d930      	bls.n	800e7ec <_txm_module_manager_tx_queue_send_dispatch+0x128>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	429a      	cmp	r2, r3
 800e794:	d30d      	bcc.n	800e7b2 <_txm_module_manager_tx_queue_send_dispatch+0xee>
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	009a      	lsls	r2, r3, #2
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	441a      	add	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e7ac:	440b      	add	r3, r1
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d91c      	bls.n	800e7ec <_txm_module_manager_tx_queue_send_dispatch+0x128>
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	009a      	lsls	r2, r3, #2
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d20f      	bcs.n	800e7e2 <_txm_module_manager_tx_queue_send_dispatch+0x11e>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d309      	bcc.n	800e7e2 <_txm_module_manager_tx_queue_send_dispatch+0x11e>
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	009a      	lsls	r2, r3, #2
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	441a      	add	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	69db      	ldr	r3, [r3, #28]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d904      	bls.n	800e7ec <_txm_module_manager_tx_queue_send_dispatch+0x128>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <_txm_module_manager_tx_queue_send_dispatch+0x128>
            return(TXM_MODULE_INVALID_MEMORY);
 800e7e8:	23f4      	movs	r3, #244	; 0xf4
 800e7ea:	e007      	b.n	800e7fc <_txm_module_manager_tx_queue_send_dispatch+0x138>
    }

    return_value = (ALIGN_TYPE) _txe_queue_send(
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	6879      	ldr	r1, [r7, #4]
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fa f8d2 	bl	800899c <_txe_queue_send>
 800e7f8:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 800e7fa:	693b      	ldr	r3, [r7, #16]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <_txm_module_manager_tx_queue_send_notify_dispatch>:
/* UINT _txe_queue_send_notify(
    TX_QUEUE *queue_ptr, -> param_0
    VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_send_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b088      	sub	sp, #32
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr = (TX_QUEUE *) param_0;
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	61bb      	str	r3, [r7, #24]
VOID (*queue_send_notify)(TX_QUEUE *);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	f003 0302 	and.w	r3, r3, #2
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d044      	beq.n	800e8aa <_txm_module_manager_tx_queue_send_notify_dispatch+0xa6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e826:	d81f      	bhi.n	800e868 <_txm_module_manager_tx_queue_send_notify_dispatch+0x64>
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	461a      	mov	r2, r3
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	4293      	cmp	r3, r2
 800e832:	d307      	bcc.n	800e844 <_txm_module_manager_tx_queue_send_notify_dispatch+0x40>
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83e:	3301      	adds	r3, #1
 800e840:	429a      	cmp	r2, r3
 800e842:	d923      	bls.n	800e88c <_txm_module_manager_tx_queue_send_notify_dispatch+0x88>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d30b      	bcc.n	800e868 <_txm_module_manager_tx_queue_send_notify_dispatch+0x64>
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e862:	440b      	add	r3, r1
 800e864:	429a      	cmp	r2, r3
 800e866:	d911      	bls.n	800e88c <_txm_module_manager_tx_queue_send_notify_dispatch+0x88>
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800e86e:	d812      	bhi.n	800e896 <_txm_module_manager_tx_queue_send_notify_dispatch+0x92>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	461a      	mov	r2, r3
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	4293      	cmp	r3, r2
 800e87a:	d30c      	bcc.n	800e896 <_txm_module_manager_tx_queue_send_notify_dispatch+0x92>
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	69db      	ldr	r3, [r3, #28]
 800e886:	3301      	adds	r3, #1
 800e888:	429a      	cmp	r2, r3
 800e88a:	d804      	bhi.n	800e896 <_txm_module_manager_tx_queue_send_notify_dispatch+0x92>
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <_txm_module_manager_tx_queue_send_notify_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800e892:	23f4      	movs	r3, #244	; 0xf4
 800e894:	e01e      	b.n	800e8d4 <_txm_module_manager_tx_queue_send_notify_dispatch+0xd0>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((queue_ptr == TX_NULL) || (queue_ptr -> tx_queue_id != TX_QUEUE_ID))
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <_txm_module_manager_tx_queue_send_notify_dispatch+0xa2>
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a0e      	ldr	r2, [pc, #56]	; (800e8dc <_txm_module_manager_tx_queue_send_notify_dispatch+0xd8>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d001      	beq.n	800e8aa <_txm_module_manager_tx_queue_send_notify_dispatch+0xa6>
            return(TX_QUEUE_ERROR);
 800e8a6:	2309      	movs	r3, #9
 800e8a8:	e014      	b.n	800e8d4 <_txm_module_manager_tx_queue_send_notify_dispatch+0xd0>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d102      	bne.n	800e8b6 <_txm_module_manager_tx_queue_send_notify_dispatch+0xb2>
    {

        /* Clear the callback.  */
        queue_send_notify = (VOID (*)(TX_QUEUE *)) TX_NULL;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	61fb      	str	r3, [r7, #28]
 800e8b4:	e007      	b.n	800e8c6 <_txm_module_manager_tx_queue_send_notify_dispatch+0xc2>
    }
    else
    {

        /* Setup trampoline values.  */
        queue_ptr -> tx_queue_module_instance = (VOID *) module_instance;
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	63da      	str	r2, [r3, #60]	; 0x3c
        queue_ptr -> tx_queue_send_module_notify = (VOID (*)(TX_QUEUE *)) param_1;
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	641a      	str	r2, [r3, #64]	; 0x40
        queue_send_notify = _txm_module_manager_queue_notify_trampoline;
 800e8c2:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <_txm_module_manager_tx_queue_send_notify_dispatch+0xdc>)
 800e8c4:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_queue_send_notify(
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	69f9      	ldr	r1, [r7, #28]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fa f8b0 	bl	8008a30 <_txe_queue_send_notify>
 800e8d0:	6178      	str	r0, [r7, #20]
        (TX_QUEUE *) param_0,
        (VOID (*)(TX_QUEUE *notify_queue_ptr)) queue_send_notify
    );
    return(return_value);
 800e8d2:	697b      	ldr	r3, [r7, #20]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3720      	adds	r7, #32
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	51554555 	.word	0x51554555
 800e8e0:	080132bd 	.word	0x080132bd

0800e8e4 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch>:
/* UINT _txe_semaphore_ceiling_put(
    TX_SEMAPHORE *semaphore_ptr, -> param_0
    ULONG ceiling -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_ceiling_put_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	f003 0302 	and.w	r3, r3, #2
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d03a      	beq.n	800e972 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x8e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800e902:	d81f      	bhi.n	800e944 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x60>
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e908:	461a      	mov	r2, r3
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d307      	bcc.n	800e920 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x3c>
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91a:	3301      	adds	r3, #1
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d923      	bls.n	800e968 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x84>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d30b      	bcc.n	800e944 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x60>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e93e:	440b      	add	r3, r1
 800e940:	429a      	cmp	r2, r3
 800e942:	d911      	bls.n	800e968 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x84>
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800e94a:	d812      	bhi.n	800e972 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x8e>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	699b      	ldr	r3, [r3, #24]
 800e950:	461a      	mov	r2, r3
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	4293      	cmp	r3, r2
 800e956:	d30c      	bcc.n	800e972 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x8e>
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	3301      	adds	r3, #1
 800e964:	429a      	cmp	r2, r3
 800e966:	d804      	bhi.n	800e972 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x8e>
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x8e>
            return(TXM_MODULE_INVALID_MEMORY);
 800e96e:	23f4      	movs	r3, #244	; 0xf4
 800e970:	e006      	b.n	800e980 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x9c>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_ceiling_put(
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	6879      	ldr	r1, [r7, #4]
 800e976:	4618      	mov	r0, r3
 800e978:	f7fa f87a 	bl	8008a70 <_txe_semaphore_ceiling_put>
 800e97c:	6178      	str	r0, [r7, #20]
        (TX_SEMAPHORE *) param_0,
        (ULONG) param_1
    );
    return(return_value);
 800e97e:	697b      	ldr	r3, [r7, #20]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <_txm_module_manager_tx_semaphore_create_dispatch>:
    CHAR *name_ptr, -> param_1
    ULONG initial_count, -> extra_parameters[0]
    UINT semaphore_control_block_size -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f000 8081 	beq.w	800eaa6 <_txm_module_manager_tx_semaphore_create_dispatch+0x11e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800e9a4:	4b47      	ldr	r3, [pc, #284]	; (800eac4 <_txm_module_manager_tx_semaphore_create_dispatch+0x13c>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d119      	bne.n	800e9e0 <_txm_module_manager_tx_semaphore_create_dispatch+0x58>
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800e9b2:	d815      	bhi.n	800e9e0 <_txm_module_manager_tx_semaphore_create_dispatch+0x58>
 800e9b4:	4b44      	ldr	r3, [pc, #272]	; (800eac8 <_txm_module_manager_tx_semaphore_create_dispatch+0x140>)
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	3310      	adds	r3, #16
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d30f      	bcc.n	800e9e0 <_txm_module_manager_tx_semaphore_create_dispatch+0x58>
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	3328      	adds	r3, #40	; 0x28
 800e9c4:	4a40      	ldr	r2, [pc, #256]	; (800eac8 <_txm_module_manager_tx_semaphore_create_dispatch+0x140>)
 800e9c6:	6991      	ldr	r1, [r2, #24]
 800e9c8:	4a3f      	ldr	r2, [pc, #252]	; (800eac8 <_txm_module_manager_tx_semaphore_create_dispatch+0x140>)
 800e9ca:	69d2      	ldr	r2, [r2, #28]
 800e9cc:	440a      	add	r2, r1
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d806      	bhi.n	800e9e0 <_txm_module_manager_tx_semaphore_create_dispatch+0x58>
 800e9d2:	2128      	movs	r1, #40	; 0x28
 800e9d4:	68b8      	ldr	r0, [r7, #8]
 800e9d6:	f005 fccf 	bl	8014378 <_txm_module_manager_object_size_check>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d004      	beq.n	800e9ea <_txm_module_manager_tx_semaphore_create_dispatch+0x62>
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <_txm_module_manager_tx_semaphore_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800e9e6:	23f4      	movs	r3, #244	; 0xf4
 800e9e8:	e068      	b.n	800eabc <_txm_module_manager_tx_semaphore_create_dispatch+0x134>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f0:	d01d      	beq.n	800ea2e <_txm_module_manager_tx_semaphore_create_dispatch+0xa6>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d306      	bcc.n	800ea0c <_txm_module_manager_tx_semaphore_create_dispatch+0x84>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	1c5a      	adds	r2, r3, #1
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea06:	3301      	adds	r3, #1
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d926      	bls.n	800ea5a <_txm_module_manager_tx_semaphore_create_dispatch+0xd2>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d30a      	bcc.n	800ea2e <_txm_module_manager_tx_semaphore_create_dispatch+0xa6>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ea28:	440b      	add	r3, r1
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d915      	bls.n	800ea5a <_txm_module_manager_tx_semaphore_create_dispatch+0xd2>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea34:	d00c      	beq.n	800ea50 <_txm_module_manager_tx_semaphore_create_dispatch+0xc8>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d306      	bcc.n	800ea50 <_txm_module_manager_tx_semaphore_create_dispatch+0xc8>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	69db      	ldr	r3, [r3, #28]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d904      	bls.n	800ea5a <_txm_module_manager_tx_semaphore_create_dispatch+0xd2>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d001      	beq.n	800ea5a <_txm_module_manager_tx_semaphore_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 800ea56:	23f4      	movs	r3, #244	; 0xf4
 800ea58:	e030      	b.n	800eabc <_txm_module_manager_tx_semaphore_create_dispatch+0x134>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	f113 0f09 	cmn.w	r3, #9
 800ea60:	d81f      	bhi.n	800eaa2 <_txm_module_manager_tx_semaphore_create_dispatch+0x11a>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea66:	461a      	mov	r2, r3
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d807      	bhi.n	800ea7e <_txm_module_manager_tx_semaphore_create_dispatch+0xf6>
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	f103 0208 	add.w	r2, r3, #8
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea78:	3301      	adds	r3, #1
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d913      	bls.n	800eaa6 <_txm_module_manager_tx_semaphore_create_dispatch+0x11e>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d80b      	bhi.n	800eaa2 <_txm_module_manager_tx_semaphore_create_dispatch+0x11a>
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	f103 0208 	add.w	r2, r3, #8
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ea9c:	440b      	add	r3, r1
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d901      	bls.n	800eaa6 <_txm_module_manager_tx_semaphore_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800eaa2:	23f4      	movs	r3, #244	; 0xf4
 800eaa4:	e00a      	b.n	800eabc <_txm_module_manager_tx_semaphore_create_dispatch+0x134>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_create(
 800eaa6:	68b8      	ldr	r0, [r7, #8]
 800eaa8:	6879      	ldr	r1, [r7, #4]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	681a      	ldr	r2, [r3, #0]
        (TX_SEMAPHORE *) param_0,
        (CHAR *) param_1,
        (ULONG) extra_parameters[0],
        (UINT) extra_parameters[1]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_semaphore_create(
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f7fa f802 	bl	8008abc <_txe_semaphore_create>
 800eab8:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800eaba:	697b      	ldr	r3, [r7, #20]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	2000f600 	.word	0x2000f600
 800eac8:	2000f5cc 	.word	0x2000f5cc

0800eacc <_txm_module_manager_tx_semaphore_delete_dispatch>:
#ifndef TXM_SEMAPHORE_DELETE_CALL_NOT_USED
/* UINT _txe_semaphore_delete(
    TX_SEMAPHORE *semaphore_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	f003 0302 	and.w	r3, r3, #2
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d03a      	beq.n	800eb58 <_txm_module_manager_tx_semaphore_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800eae8:	d81f      	bhi.n	800eb2a <_txm_module_manager_tx_semaphore_delete_dispatch+0x5e>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaee:	461a      	mov	r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d307      	bcc.n	800eb06 <_txm_module_manager_tx_semaphore_delete_dispatch+0x3a>
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb00:	3301      	adds	r3, #1
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d923      	bls.n	800eb4e <_txm_module_manager_tx_semaphore_delete_dispatch+0x82>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d30b      	bcc.n	800eb2a <_txm_module_manager_tx_semaphore_delete_dispatch+0x5e>
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb24:	440b      	add	r3, r1
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d911      	bls.n	800eb4e <_txm_module_manager_tx_semaphore_delete_dispatch+0x82>
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800eb30:	d812      	bhi.n	800eb58 <_txm_module_manager_tx_semaphore_delete_dispatch+0x8c>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	461a      	mov	r2, r3
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d30c      	bcc.n	800eb58 <_txm_module_manager_tx_semaphore_delete_dispatch+0x8c>
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d804      	bhi.n	800eb58 <_txm_module_manager_tx_semaphore_delete_dispatch+0x8c>
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <_txm_module_manager_tx_semaphore_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800eb54:	23f4      	movs	r3, #244	; 0xf4
 800eb56:	e00d      	b.n	800eb74 <_txm_module_manager_tx_semaphore_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_delete(
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fa f840 	bl	8008be0 <_txe_semaphore_delete>
 800eb60:	60f8      	str	r0, [r7, #12]
        (TX_SEMAPHORE *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d104      	bne.n	800eb72 <_txm_module_manager_tx_semaphore_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f004 f928 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800eb70:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800eb72:	68fb      	ldr	r3, [r7, #12]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <_txm_module_manager_tx_semaphore_get_dispatch>:
/* UINT _txe_semaphore_get(
    TX_SEMAPHORE *semaphore_ptr, -> param_0
    ULONG wait_option -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d03a      	beq.n	800ec0a <_txm_module_manager_tx_semaphore_get_dispatch+0x8e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800eb9a:	d81f      	bhi.n	800ebdc <_txm_module_manager_tx_semaphore_get_dispatch+0x60>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba0:	461a      	mov	r2, r3
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d307      	bcc.n	800ebb8 <_txm_module_manager_tx_semaphore_get_dispatch+0x3c>
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d923      	bls.n	800ec00 <_txm_module_manager_tx_semaphore_get_dispatch+0x84>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d30b      	bcc.n	800ebdc <_txm_module_manager_tx_semaphore_get_dispatch+0x60>
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ebd6:	440b      	add	r3, r1
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d911      	bls.n	800ec00 <_txm_module_manager_tx_semaphore_get_dispatch+0x84>
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800ebe2:	d812      	bhi.n	800ec0a <_txm_module_manager_tx_semaphore_get_dispatch+0x8e>
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	461a      	mov	r2, r3
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d30c      	bcc.n	800ec0a <_txm_module_manager_tx_semaphore_get_dispatch+0x8e>
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d804      	bhi.n	800ec0a <_txm_module_manager_tx_semaphore_get_dispatch+0x8e>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d001      	beq.n	800ec0a <_txm_module_manager_tx_semaphore_get_dispatch+0x8e>
            return(TXM_MODULE_INVALID_MEMORY);
 800ec06:	23f4      	movs	r3, #244	; 0xf4
 800ec08:	e006      	b.n	800ec18 <_txm_module_manager_tx_semaphore_get_dispatch+0x9c>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_get(
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	6879      	ldr	r1, [r7, #4]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fa f824 	bl	8008c5c <_txe_semaphore_get>
 800ec14:	6178      	str	r0, [r7, #20]
        (TX_SEMAPHORE *) param_0,
        (ULONG) param_1
    );
    return(return_value);
 800ec16:	697b      	ldr	r3, [r7, #20]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3718      	adds	r7, #24
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <_txm_module_manager_tx_semaphore_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[1]
    ULONG *suspended_count, -> extra_parameters[2]
    TX_SEMAPHORE **next_semaphore -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800ec20:	b5b0      	push	{r4, r5, r7, lr}
 800ec22:	b088      	sub	sp, #32
 800ec24:	af02      	add	r7, sp, #8
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	f003 0302 	and.w	r3, r3, #2
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 814a 	beq.w	800eed0 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2b0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800ec42:	d81f      	bhi.n	800ec84 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x64>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec48:	461a      	mov	r2, r3
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d307      	bcc.n	800ec60 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x40>
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d923      	bls.n	800eca8 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x88>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d30b      	bcc.n	800ec84 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x64>
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ec7e:	440b      	add	r3, r1
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d911      	bls.n	800eca8 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x88>
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800ec8a:	d812      	bhi.n	800ecb2 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x92>
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	461a      	mov	r2, r3
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d30c      	bcc.n	800ecb2 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x92>
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	69db      	ldr	r3, [r3, #28]
 800eca2:	3301      	adds	r3, #1
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d804      	bhi.n	800ecb2 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x92>
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800ecae:	23f4      	movs	r3, #244	; 0xf4
 800ecb0:	e126      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f113 0f05 	cmn.w	r3, #5
 800ecb8:	d81d      	bhi.n	800ecf6 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xd6>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d306      	bcc.n	800ecd4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xb4>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	1d1a      	adds	r2, r3, #4
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecce:	3301      	adds	r3, #1
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d915      	bls.n	800ed00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xe0>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d30a      	bcc.n	800ecf6 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xd6>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	1d1a      	adds	r2, r3, #4
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ecf0:	440b      	add	r3, r1
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d904      	bls.n	800ed00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xe0>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800ecfc:	23f4      	movs	r3, #244	; 0xf4
 800ecfe:	e0ff      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	f113 0f11 	cmn.w	r3, #17
 800ed06:	d81f      	bhi.n	800ed48 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x128>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d807      	bhi.n	800ed24 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x104>
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	f103 0210 	add.w	r2, r3, #16
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1e:	3301      	adds	r3, #1
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d913      	bls.n	800ed4c <_txm_module_manager_tx_semaphore_info_get_dispatch+0x12c>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d80b      	bhi.n	800ed48 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x128>
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	f103 0210 	add.w	r2, r3, #16
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed42:	440b      	add	r3, r1
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d901      	bls.n	800ed4c <_txm_module_manager_tx_semaphore_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800ed48:	23f4      	movs	r3, #244	; 0xf4
 800ed4a:	e0d9      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f113 0f05 	cmn.w	r3, #5
 800ed54:	d820      	bhi.n	800ed98 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x178>
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d307      	bcc.n	800ed72 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x152>
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	1d1a      	adds	r2, r3, #4
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d918      	bls.n	800eda4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x184>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d30b      	bcc.n	800ed98 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x178>
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	1d1a      	adds	r2, r3, #4
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed92:	440b      	add	r3, r1
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d905      	bls.n	800eda4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x184>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800eda0:	23f4      	movs	r3, #244	; 0xf4
 800eda2:	e0ad      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(TX_THREAD *)))
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	3304      	adds	r3, #4
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f113 0f05 	cmn.w	r3, #5
 800edae:	d824      	bhi.n	800edfa <_txm_module_manager_tx_semaphore_info_get_dispatch+0x1da>
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	3304      	adds	r3, #4
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68fa      	ldr	r2, [r7, #12]
 800edb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800edba:	4293      	cmp	r3, r2
 800edbc:	d308      	bcc.n	800edd0 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x1b0>
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	3304      	adds	r3, #4
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	1d1a      	adds	r2, r3, #4
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edca:	3301      	adds	r3, #1
 800edcc:	429a      	cmp	r2, r3
 800edce:	d91b      	bls.n	800ee08 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x1e8>
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	3304      	adds	r3, #4
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eddc:	429a      	cmp	r2, r3
 800edde:	d30c      	bcc.n	800edfa <_txm_module_manager_tx_semaphore_info_get_dispatch+0x1da>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	3304      	adds	r3, #4
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	1d1a      	adds	r2, r3, #4
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800edf4:	440b      	add	r3, r1
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d906      	bls.n	800ee08 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x1e8>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	3304      	adds	r3, #4
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee04:	23f4      	movs	r3, #244	; 0xf4
 800ee06:	e07b      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	3308      	adds	r3, #8
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f113 0f05 	cmn.w	r3, #5
 800ee12:	d824      	bhi.n	800ee5e <_txm_module_manager_tx_semaphore_info_get_dispatch+0x23e>
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	3308      	adds	r3, #8
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d308      	bcc.n	800ee34 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x214>
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	3308      	adds	r3, #8
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	1d1a      	adds	r2, r3, #4
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2e:	3301      	adds	r3, #1
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d91b      	bls.n	800ee6c <_txm_module_manager_tx_semaphore_info_get_dispatch+0x24c>
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	3308      	adds	r3, #8
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d30c      	bcc.n	800ee5e <_txm_module_manager_tx_semaphore_info_get_dispatch+0x23e>
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	3308      	adds	r3, #8
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	1d1a      	adds	r2, r3, #4
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ee58:	440b      	add	r3, r1
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d906      	bls.n	800ee6c <_txm_module_manager_tx_semaphore_info_get_dispatch+0x24c>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	3308      	adds	r3, #8
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <_txm_module_manager_tx_semaphore_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee68:	23f4      	movs	r3, #244	; 0xf4
 800ee6a:	e049      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(TX_SEMAPHORE *)))
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	330c      	adds	r3, #12
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f113 0f05 	cmn.w	r3, #5
 800ee76:	d824      	bhi.n	800eec2 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2a2>
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	330c      	adds	r3, #12
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d308      	bcc.n	800ee98 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x278>
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	330c      	adds	r3, #12
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	1d1a      	adds	r2, r3, #4
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee92:	3301      	adds	r3, #1
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d91b      	bls.n	800eed0 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2b0>
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	330c      	adds	r3, #12
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d30c      	bcc.n	800eec2 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2a2>
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	330c      	adds	r3, #12
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	1d1a      	adds	r2, r3, #4
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eebc:	440b      	add	r3, r1
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d906      	bls.n	800eed0 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2b0>
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	330c      	adds	r3, #12
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800eecc:	23f4      	movs	r3, #244	; 0xf4
 800eece:	e017      	b.n	800ef00 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x2e0>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 800eed0:	68b8      	ldr	r0, [r7, #8]
 800eed2:	6879      	ldr	r1, [r7, #4]
        (TX_SEMAPHORE *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 800eed8:	461c      	mov	r4, r3
        (TX_THREAD **) extra_parameters[1],
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	3304      	adds	r3, #4
 800eede:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 800eee0:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	3308      	adds	r3, #8
 800eee6:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 800eee8:	461a      	mov	r2, r3
        (TX_SEMAPHORE **) extra_parameters[3]
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	330c      	adds	r3, #12
 800eeee:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	9200      	str	r2, [sp, #0]
 800eef4:	462b      	mov	r3, r5
 800eef6:	4622      	mov	r2, r4
 800eef8:	f7f9 fef2 	bl	8008ce0 <_txe_semaphore_info_get>
 800eefc:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800eefe:	697b      	ldr	r3, [r7, #20]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bdb0      	pop	{r4, r5, r7, pc}

0800ef08 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch>:
    ULONG *gets, -> extra_parameters[0]
    ULONG *suspensions, -> extra_parameters[1]
    ULONG *timeouts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800ef08:	b590      	push	{r4, r7, lr}
 800ef0a:	b089      	sub	sp, #36	; 0x24
 800ef0c:	af02      	add	r7, sp, #8
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
 800ef14:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f003 0302 	and.w	r3, r3, #2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f000 8118 	beq.w	800f154 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x24c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800ef2a:	d81f      	bhi.n	800ef6c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x64>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef30:	461a      	mov	r2, r3
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d307      	bcc.n	800ef48 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x40>
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef42:	3301      	adds	r3, #1
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d923      	bls.n	800ef90 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x88>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d30b      	bcc.n	800ef6c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x64>
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ef66:	440b      	add	r3, r1
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d911      	bls.n	800ef90 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x88>
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800ef72:	d812      	bhi.n	800ef9a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x92>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d30c      	bcc.n	800ef9a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x92>
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	69db      	ldr	r3, [r3, #28]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d804      	bhi.n	800ef9a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x92>
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800ef96:	23f4      	movs	r3, #244	; 0xf4
 800ef98:	e0ee      	b.n	800f178 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f113 0f05 	cmn.w	r3, #5
 800efa0:	d81d      	bhi.n	800efde <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xd6>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4293      	cmp	r3, r2
 800efac:	d306      	bcc.n	800efbc <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xb4>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	1d1a      	adds	r2, r3, #4
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb6:	3301      	adds	r3, #1
 800efb8:	429a      	cmp	r2, r3
 800efba:	d915      	bls.n	800efe8 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xe0>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d30a      	bcc.n	800efde <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xd6>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	1d1a      	adds	r2, r3, #4
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800efd8:	440b      	add	r3, r1
 800efda:	429a      	cmp	r2, r3
 800efdc:	d904      	bls.n	800efe8 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xe0>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d001      	beq.n	800efe8 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800efe4:	23f4      	movs	r3, #244	; 0xf4
 800efe6:	e0c7      	b.n	800f178 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	f113 0f0d 	cmn.w	r3, #13
 800efee:	d81f      	bhi.n	800f030 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x128>
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff4:	461a      	mov	r2, r3
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d807      	bhi.n	800f00c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x104>
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	f103 020c 	add.w	r2, r3, #12
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f006:	3301      	adds	r3, #1
 800f008:	429a      	cmp	r2, r3
 800f00a:	d913      	bls.n	800f034 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x12c>
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d80b      	bhi.n	800f030 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x128>
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	f103 020c 	add.w	r2, r3, #12
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f02a:	440b      	add	r3, r1
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d901      	bls.n	800f034 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f030:	23f4      	movs	r3, #244	; 0xf4
 800f032:	e0a1      	b.n	800f178 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f113 0f05 	cmn.w	r3, #5
 800f03c:	d820      	bhi.n	800f080 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x178>
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f046:	4293      	cmp	r3, r2
 800f048:	d307      	bcc.n	800f05a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x152>
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	1d1a      	adds	r2, r3, #4
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f054:	3301      	adds	r3, #1
 800f056:	429a      	cmp	r2, r3
 800f058:	d918      	bls.n	800f08c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x184>
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f064:	429a      	cmp	r2, r3
 800f066:	d30b      	bcc.n	800f080 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x178>
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	1d1a      	adds	r2, r3, #4
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f07a:	440b      	add	r3, r1
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d905      	bls.n	800f08c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x184>
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800f088:	23f4      	movs	r3, #244	; 0xf4
 800f08a:	e075      	b.n	800f178 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	3304      	adds	r3, #4
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f113 0f05 	cmn.w	r3, #5
 800f096:	d824      	bhi.n	800f0e2 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x1da>
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	3304      	adds	r3, #4
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d308      	bcc.n	800f0b8 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x1b0>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	1d1a      	adds	r2, r3, #4
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d91b      	bls.n	800f0f0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x1e8>
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d30c      	bcc.n	800f0e2 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x1da>
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	3304      	adds	r3, #4
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	1d1a      	adds	r2, r3, #4
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f0dc:	440b      	add	r3, r1
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d906      	bls.n	800f0f0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x1e8>
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d001      	beq.n	800f0f0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800f0ec:	23f4      	movs	r3, #244	; 0xf4
 800f0ee:	e043      	b.n	800f178 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x270>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	3308      	adds	r3, #8
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f113 0f05 	cmn.w	r3, #5
 800f0fa:	d824      	bhi.n	800f146 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x23e>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	3308      	adds	r3, #8
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f106:	4293      	cmp	r3, r2
 800f108:	d308      	bcc.n	800f11c <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x214>
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	3308      	adds	r3, #8
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	1d1a      	adds	r2, r3, #4
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f116:	3301      	adds	r3, #1
 800f118:	429a      	cmp	r2, r3
 800f11a:	d91b      	bls.n	800f154 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x24c>
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f128:	429a      	cmp	r2, r3
 800f12a:	d30c      	bcc.n	800f146 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x23e>
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	3308      	adds	r3, #8
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	1d1a      	adds	r2, r3, #4
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f140:	440b      	add	r3, r1
 800f142:	429a      	cmp	r2, r3
 800f144:	d906      	bls.n	800f154 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x24c>
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	3308      	adds	r3, #8
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f150:	23f4      	movs	r3, #244	; 0xf4
 800f152:	e011      	b.n	800f178 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x270>
    }

    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 800f154:	68b8      	ldr	r0, [r7, #8]
 800f156:	6879      	ldr	r1, [r7, #4]
        (TX_SEMAPHORE *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 800f15c:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	3304      	adds	r3, #4
 800f162:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 800f164:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	3308      	adds	r3, #8
 800f16a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	4623      	mov	r3, r4
 800f170:	f005 fb8c 	bl	801488c <_tx_semaphore_performance_info_get>
 800f174:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f176:	697b      	ldr	r3, [r7, #20]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	371c      	adds	r7, #28
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd90      	pop	{r4, r7, pc}

0800f180 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch>:
    ULONG *gets, -> param_1
    ULONG *suspensions, -> extra_parameters[0]
    ULONG *timeouts -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	f003 0302 	and.w	r3, r3, #2
 800f196:	2b00      	cmp	r3, #0
 800f198:	f000 80d2 	beq.w	800f340 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1c0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	f113 0f05 	cmn.w	r3, #5
 800f1a2:	d81d      	bhi.n	800f1e0 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x60>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d306      	bcc.n	800f1be <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x3e>
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	1d1a      	adds	r2, r3, #4
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d915      	bls.n	800f1ea <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x6a>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d30a      	bcc.n	800f1e0 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x60>
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	1d1a      	adds	r2, r3, #4
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f1da:	440b      	add	r3, r1
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d904      	bls.n	800f1ea <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x6a>
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 800f1e6:	23f4      	movs	r3, #244	; 0xf4
 800f1e8:	e0b6      	b.n	800f358 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f113 0f05 	cmn.w	r3, #5
 800f1f0:	d81d      	bhi.n	800f22e <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xae>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d306      	bcc.n	800f20c <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x8c>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	1d1a      	adds	r2, r3, #4
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f206:	3301      	adds	r3, #1
 800f208:	429a      	cmp	r2, r3
 800f20a:	d915      	bls.n	800f238 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xb8>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	429a      	cmp	r2, r3
 800f216:	d30a      	bcc.n	800f22e <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xae>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	1d1a      	adds	r2, r3, #4
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f228:	440b      	add	r3, r1
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d904      	bls.n	800f238 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xb8>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d001      	beq.n	800f238 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 800f234:	23f4      	movs	r3, #244	; 0xf4
 800f236:	e08f      	b.n	800f358 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	f113 0f09 	cmn.w	r3, #9
 800f23e:	d81f      	bhi.n	800f280 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x100>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f244:	461a      	mov	r2, r3
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d807      	bhi.n	800f25c <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xdc>
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	f103 0208 	add.w	r2, r3, #8
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f256:	3301      	adds	r3, #1
 800f258:	429a      	cmp	r2, r3
 800f25a:	d913      	bls.n	800f284 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x104>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	429a      	cmp	r2, r3
 800f266:	d80b      	bhi.n	800f280 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x100>
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	f103 0208 	add.w	r2, r3, #8
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f27a:	440b      	add	r3, r1
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d901      	bls.n	800f284 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 800f280:	23f4      	movs	r3, #244	; 0xf4
 800f282:	e069      	b.n	800f358 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f113 0f05 	cmn.w	r3, #5
 800f28c:	d820      	bhi.n	800f2d0 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x150>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f296:	4293      	cmp	r3, r2
 800f298:	d307      	bcc.n	800f2aa <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x12a>
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	1d1a      	adds	r2, r3, #4
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d918      	bls.n	800f2dc <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x15c>
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d30b      	bcc.n	800f2d0 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x150>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	1d1a      	adds	r2, r3, #4
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f2ca:	440b      	add	r3, r1
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d905      	bls.n	800f2dc <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x15c>
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f2d8:	23f4      	movs	r3, #244	; 0xf4
 800f2da:	e03d      	b.n	800f358 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1d8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	3304      	adds	r3, #4
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f113 0f05 	cmn.w	r3, #5
 800f2e6:	d824      	bhi.n	800f332 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1b2>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d308      	bcc.n	800f308 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x188>
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	3304      	adds	r3, #4
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	1d1a      	adds	r2, r3, #4
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f302:	3301      	adds	r3, #1
 800f304:	429a      	cmp	r2, r3
 800f306:	d91b      	bls.n	800f340 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1c0>
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	3304      	adds	r3, #4
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f314:	429a      	cmp	r2, r3
 800f316:	d30c      	bcc.n	800f332 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1b2>
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	3304      	adds	r3, #4
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	1d1a      	adds	r2, r3, #4
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f32c:	440b      	add	r3, r1
 800f32e:	429a      	cmp	r2, r3
 800f330:	d906      	bls.n	800f340 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1c0>
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	3304      	adds	r3, #4
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 800f33c:	23f4      	movs	r3, #244	; 0xf4
 800f33e:	e00b      	b.n	800f358 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x1d8>
    }

    return_value = (ALIGN_TYPE) _tx_semaphore_performance_system_info_get(
 800f340:	68b8      	ldr	r0, [r7, #8]
 800f342:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_system_info_get(
 800f348:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	3304      	adds	r3, #4
 800f34e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_system_info_get(
 800f350:	f005 faca 	bl	80148e8 <_tx_semaphore_performance_system_info_get>
 800f354:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f356:	697b      	ldr	r3, [r7, #20]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3718      	adds	r7, #24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <_txm_module_manager_tx_semaphore_prioritize_dispatch>:
#ifndef TXM_SEMAPHORE_PRIORITIZE_CALL_NOT_USED
/* UINT _txe_semaphore_prioritize(
    TX_SEMAPHORE *semaphore_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d03a      	beq.n	800f3ec <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800f37c:	d81f      	bhi.n	800f3be <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x5e>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f382:	461a      	mov	r2, r3
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	4293      	cmp	r3, r2
 800f388:	d307      	bcc.n	800f39a <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x3a>
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f394:	3301      	adds	r3, #1
 800f396:	429a      	cmp	r2, r3
 800f398:	d923      	bls.n	800f3e2 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x82>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d30b      	bcc.n	800f3be <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x5e>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f3b8:	440b      	add	r3, r1
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d911      	bls.n	800f3e2 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x82>
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800f3c4:	d812      	bhi.n	800f3ec <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x8c>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	699b      	ldr	r3, [r3, #24]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d30c      	bcc.n	800f3ec <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x8c>
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	69db      	ldr	r3, [r3, #28]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d804      	bhi.n	800f3ec <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x8c>
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d001      	beq.n	800f3ec <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f3e8:	23f4      	movs	r3, #244	; 0xf4
 800f3ea:	e005      	b.n	800f3f8 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_prioritize(
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7f9 fc9e 	bl	8008d30 <_txe_semaphore_prioritize>
 800f3f4:	60f8      	str	r0, [r7, #12]
        (TX_SEMAPHORE *) param_0
    );
    return(return_value);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_txm_module_manager_tx_semaphore_put_dispatch>:
#ifndef TXM_SEMAPHORE_PUT_CALL_NOT_USED
/* UINT _txe_semaphore_put(
    TX_SEMAPHORE *semaphore_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_put_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	f003 0302 	and.w	r3, r3, #2
 800f412:	2b00      	cmp	r3, #0
 800f414:	d03a      	beq.n	800f48c <_txm_module_manager_tx_semaphore_put_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800f41c:	d81f      	bhi.n	800f45e <_txm_module_manager_tx_semaphore_put_dispatch+0x5e>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f422:	461a      	mov	r2, r3
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	4293      	cmp	r3, r2
 800f428:	d307      	bcc.n	800f43a <_txm_module_manager_tx_semaphore_put_dispatch+0x3a>
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f434:	3301      	adds	r3, #1
 800f436:	429a      	cmp	r2, r3
 800f438:	d923      	bls.n	800f482 <_txm_module_manager_tx_semaphore_put_dispatch+0x82>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	d30b      	bcc.n	800f45e <_txm_module_manager_tx_semaphore_put_dispatch+0x5e>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f458:	440b      	add	r3, r1
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d911      	bls.n	800f482 <_txm_module_manager_tx_semaphore_put_dispatch+0x82>
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800f464:	d812      	bhi.n	800f48c <_txm_module_manager_tx_semaphore_put_dispatch+0x8c>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	699b      	ldr	r3, [r3, #24]
 800f46a:	461a      	mov	r2, r3
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	4293      	cmp	r3, r2
 800f470:	d30c      	bcc.n	800f48c <_txm_module_manager_tx_semaphore_put_dispatch+0x8c>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	69db      	ldr	r3, [r3, #28]
 800f47c:	3301      	adds	r3, #1
 800f47e:	429a      	cmp	r2, r3
 800f480:	d804      	bhi.n	800f48c <_txm_module_manager_tx_semaphore_put_dispatch+0x8c>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <_txm_module_manager_tx_semaphore_put_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f488:	23f4      	movs	r3, #244	; 0xf4
 800f48a:	e005      	b.n	800f498 <_txm_module_manager_tx_semaphore_put_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_put(
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f9 fc6c 	bl	8008d6c <_txe_semaphore_put>
 800f494:	60f8      	str	r0, [r7, #12]
        (TX_SEMAPHORE *) param_0
    );
    return(return_value);
 800f496:	68fb      	ldr	r3, [r7, #12]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <_txm_module_manager_tx_semaphore_put_notify_dispatch>:
/* UINT _txe_semaphore_put_notify(
    TX_SEMAPHORE *semaphore_ptr, -> param_0
    VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_put_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b088      	sub	sp, #32
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_SEMAPHORE *semaphore_ptr = (TX_SEMAPHORE *) param_0;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	61bb      	str	r3, [r7, #24]
VOID (*semaphore_put_notify)(TX_SEMAPHORE *);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	f003 0302 	and.w	r3, r3, #2
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d044      	beq.n	800f546 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xa6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800f4c2:	d81f      	bhi.n	800f504 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x64>
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d307      	bcc.n	800f4e0 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x40>
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4da:	3301      	adds	r3, #1
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d923      	bls.n	800f528 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x88>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d30b      	bcc.n	800f504 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x64>
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f4fe:	440b      	add	r3, r1
 800f500:	429a      	cmp	r2, r3
 800f502:	d911      	bls.n	800f528 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x88>
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	f113 0f29 	cmn.w	r3, #41	; 0x29
 800f50a:	d812      	bhi.n	800f532 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x92>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	461a      	mov	r2, r3
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	4293      	cmp	r3, r2
 800f516:	d30c      	bcc.n	800f532 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x92>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	69db      	ldr	r3, [r3, #28]
 800f522:	3301      	adds	r3, #1
 800f524:	429a      	cmp	r2, r3
 800f526:	d804      	bhi.n	800f532 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x92>
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d001      	beq.n	800f532 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800f52e:	23f4      	movs	r3, #244	; 0xf4
 800f530:	e01e      	b.n	800f570 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xd0>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((semaphore_ptr == TX_NULL) || (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID))
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d004      	beq.n	800f542 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xa2>
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a0e      	ldr	r2, [pc, #56]	; (800f578 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xd8>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d001      	beq.n	800f546 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xa6>
            return(TX_SEMAPHORE_ERROR);
 800f542:	230c      	movs	r3, #12
 800f544:	e014      	b.n	800f570 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xd0>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d102      	bne.n	800f552 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xb2>
    {

        /* Clear the callback.  */
        semaphore_put_notify = (VOID (*)(TX_SEMAPHORE *)) TX_NULL;
 800f54c:	2300      	movs	r3, #0
 800f54e:	61fb      	str	r3, [r7, #28]
 800f550:	e007      	b.n	800f562 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xc2>
    }
    else
    {

        /* Setup trampoline values.  */
        semaphore_ptr -> tx_semaphore_module_instance = (VOID *) module_instance;
 800f552:	69bb      	ldr	r3, [r7, #24]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	621a      	str	r2, [r3, #32]
        semaphore_ptr -> tx_semaphore_put_module_notify = (VOID (*)(TX_SEMAPHORE *)) param_1;
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	625a      	str	r2, [r3, #36]	; 0x24
        semaphore_put_notify = _txm_module_manager_semaphore_notify_trampoline;
 800f55e:	4b07      	ldr	r3, [pc, #28]	; (800f57c <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xdc>)
 800f560:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_put_notify(
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	69f9      	ldr	r1, [r7, #28]
 800f566:	4618      	mov	r0, r3
 800f568:	f7f9 fc1e 	bl	8008da8 <_txe_semaphore_put_notify>
 800f56c:	6178      	str	r0, [r7, #20]
        (TX_SEMAPHORE *) param_0,
        (VOID (*)(TX_SEMAPHORE *notify_semaphore_ptr)) semaphore_put_notify
    );
    return(return_value);
 800f56e:	697b      	ldr	r3, [r7, #20]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3720      	adds	r7, #32
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	53454d41 	.word	0x53454d41
 800f57c:	0801336d 	.word	0x0801336d

0800f580 <_txm_module_manager_tx_thread_create_dispatch>:
    ULONG time_slice, -> extra_parameters[6]
    UINT auto_start, -> extra_parameters[7]
    UINT thread_control_block_size -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f582:	b097      	sub	sp, #92	; 0x5c
 800f584:	af0a      	add	r7, sp, #40	; 0x28
 800f586:	6278      	str	r0, [r7, #36]	; 0x24
 800f588:	6239      	str	r1, [r7, #32]
 800f58a:	61fa      	str	r2, [r7, #28]
 800f58c:	61bb      	str	r3, [r7, #24]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	f003 0302 	and.w	r3, r3, #2
 800f596:	2b00      	cmp	r3, #0
 800f598:	f000 80d3 	beq.w	800f742 <_txm_module_manager_tx_thread_create_dispatch+0x1c2>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_THREAD)))
 800f59c:	4b87      	ldr	r3, [pc, #540]	; (800f7bc <_txm_module_manager_tx_thread_create_dispatch+0x23c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d119      	bne.n	800f5d8 <_txm_module_manager_tx_thread_create_dispatch+0x58>
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f5aa:	d815      	bhi.n	800f5d8 <_txm_module_manager_tx_thread_create_dispatch+0x58>
 800f5ac:	4b84      	ldr	r3, [pc, #528]	; (800f7c0 <_txm_module_manager_tx_thread_create_dispatch+0x240>)
 800f5ae:	699b      	ldr	r3, [r3, #24]
 800f5b0:	3310      	adds	r3, #16
 800f5b2:	6a3a      	ldr	r2, [r7, #32]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d30f      	bcc.n	800f5d8 <_txm_module_manager_tx_thread_create_dispatch+0x58>
 800f5b8:	6a3b      	ldr	r3, [r7, #32]
 800f5ba:	33e8      	adds	r3, #232	; 0xe8
 800f5bc:	4a80      	ldr	r2, [pc, #512]	; (800f7c0 <_txm_module_manager_tx_thread_create_dispatch+0x240>)
 800f5be:	6991      	ldr	r1, [r2, #24]
 800f5c0:	4a7f      	ldr	r2, [pc, #508]	; (800f7c0 <_txm_module_manager_tx_thread_create_dispatch+0x240>)
 800f5c2:	69d2      	ldr	r2, [r2, #28]
 800f5c4:	440a      	add	r2, r1
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d806      	bhi.n	800f5d8 <_txm_module_manager_tx_thread_create_dispatch+0x58>
 800f5ca:	21e8      	movs	r1, #232	; 0xe8
 800f5cc:	6a38      	ldr	r0, [r7, #32]
 800f5ce:	f004 fed3 	bl	8014378 <_txm_module_manager_object_size_check>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d004      	beq.n	800f5e2 <_txm_module_manager_tx_thread_create_dispatch+0x62>
 800f5d8:	6a3b      	ldr	r3, [r7, #32]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d001      	beq.n	800f5e2 <_txm_module_manager_tx_thread_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 800f5de:	23f4      	movs	r3, #244	; 0xf4
 800f5e0:	e0e7      	b.n	800f7b2 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e8:	d01d      	beq.n	800f626 <_txm_module_manager_tx_thread_create_dispatch+0xa6>
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d306      	bcc.n	800f604 <_txm_module_manager_tx_thread_create_dispatch+0x84>
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5fe:	3301      	adds	r3, #1
 800f600:	429a      	cmp	r2, r3
 800f602:	d926      	bls.n	800f652 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f60a:	69fa      	ldr	r2, [r7, #28]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d30a      	bcc.n	800f626 <_txm_module_manager_tx_thread_create_dispatch+0xa6>
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f620:	440b      	add	r3, r1
 800f622:	429a      	cmp	r2, r3
 800f624:	d915      	bls.n	800f652 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f62c:	d00c      	beq.n	800f648 <_txm_module_manager_tx_thread_create_dispatch+0xc8>
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	461a      	mov	r2, r3
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	4293      	cmp	r3, r2
 800f638:	d306      	bcc.n	800f648 <_txm_module_manager_tx_thread_create_dispatch+0xc8>
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	1c5a      	adds	r2, r3, #1
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	69db      	ldr	r3, [r3, #28]
 800f642:	3301      	adds	r3, #1
 800f644:	429a      	cmp	r2, r3
 800f646:	d904      	bls.n	800f652 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <_txm_module_manager_tx_thread_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 800f64e:	23f4      	movs	r3, #244	; 0xf4
 800f650:	e0af      	b.n	800f7b2 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	f113 0f25 	cmn.w	r3, #37	; 0x25
 800f658:	d81f      	bhi.n	800f69a <_txm_module_manager_tx_thread_create_dispatch+0x11a>
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65e:	461a      	mov	r2, r3
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	429a      	cmp	r2, r3
 800f664:	d807      	bhi.n	800f676 <_txm_module_manager_tx_thread_create_dispatch+0xf6>
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f670:	3301      	adds	r3, #1
 800f672:	429a      	cmp	r2, r3
 800f674:	d913      	bls.n	800f69e <_txm_module_manager_tx_thread_create_dispatch+0x11e>
 800f676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f678:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d80b      	bhi.n	800f69a <_txm_module_manager_tx_thread_create_dispatch+0x11a>
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f694:	440b      	add	r3, r1
 800f696:	429a      	cmp	r2, r3
 800f698:	d901      	bls.n	800f69e <_txm_module_manager_tx_thread_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 800f69a:	23f4      	movs	r3, #244	; 0xf4
 800f69c:	e089      	b.n	800f7b2 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], extra_parameters[3]))
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	6819      	ldr	r1, [r3, #0]
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	330c      	adds	r3, #12
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	440b      	add	r3, r1
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d22a      	bcs.n	800f70c <_txm_module_manager_tx_thread_create_dispatch+0x18c>
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	3308      	adds	r3, #8
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d30b      	bcc.n	800f6dc <_txm_module_manager_tx_thread_create_dispatch+0x15c>
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	330c      	adds	r3, #12
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	441a      	add	r2, r3
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d91e      	bls.n	800f71a <_txm_module_manager_tx_thread_create_dispatch+0x19a>
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	3308      	adds	r3, #8
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d30f      	bcc.n	800f70c <_txm_module_manager_tx_thread_create_dispatch+0x18c>
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	330c      	adds	r3, #12
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	441a      	add	r2, r3
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f706:	440b      	add	r3, r1
 800f708:	429a      	cmp	r2, r3
 800f70a:	d906      	bls.n	800f71a <_txm_module_manager_tx_thread_create_dispatch+0x19a>
 800f70c:	69bb      	ldr	r3, [r7, #24]
 800f70e:	3308      	adds	r3, #8
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <_txm_module_manager_tx_thread_create_dispatch+0x19a>
            return(TXM_MODULE_INVALID_MEMORY);
 800f716:	23f4      	movs	r3, #244	; 0xf4
 800f718:	e04b      	b.n	800f7b2 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (extra_parameters[4] < module_instance -> txm_module_instance_maximum_priority)
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	3310      	adds	r3, #16
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f722:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 800f726:	429a      	cmp	r2, r3
 800f728:	d201      	bcs.n	800f72e <_txm_module_manager_tx_thread_create_dispatch+0x1ae>
            return(TX_PRIORITY_ERROR);
 800f72a:	230f      	movs	r3, #15
 800f72c:	e041      	b.n	800f7b2 <_txm_module_manager_tx_thread_create_dispatch+0x232>

        if (extra_parameters[5] < module_instance -> txm_module_instance_maximum_priority)
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	3314      	adds	r3, #20
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f736:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d201      	bcs.n	800f742 <_txm_module_manager_tx_thread_create_dispatch+0x1c2>
            return(TX_THRESH_ERROR);
 800f73e:	2318      	movs	r3, #24
 800f740:	e037      	b.n	800f7b2 <_txm_module_manager_tx_thread_create_dispatch+0x232>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	613a      	str	r2, [r7, #16]
        (TX_THREAD *) param_0,
        (CHAR *) param_1,
        module_instance -> txm_module_instance_shell_entry_function,
 800f74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800f74e:	60fc      	str	r4, [r7, #12]
        (VOID (*)(ULONG entry_input)) extra_parameters[0],
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f754:	469c      	mov	ip, r3
        (ULONG) extra_parameters[1],
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f75a:	681b      	ldr	r3, [r3, #0]
        (VOID *) extra_parameters[2],
 800f75c:	69ba      	ldr	r2, [r7, #24]
 800f75e:	3208      	adds	r2, #8
 800f760:	6812      	ldr	r2, [r2, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f762:	60ba      	str	r2, [r7, #8]
        (ULONG) extra_parameters[3],
 800f764:	69ba      	ldr	r2, [r7, #24]
 800f766:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f768:	6812      	ldr	r2, [r2, #0]
        (UINT) extra_parameters[4],
 800f76a:	69b9      	ldr	r1, [r7, #24]
 800f76c:	3110      	adds	r1, #16
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f76e:	6809      	ldr	r1, [r1, #0]
        (UINT) extra_parameters[5],
 800f770:	69b8      	ldr	r0, [r7, #24]
 800f772:	3014      	adds	r0, #20
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f774:	6800      	ldr	r0, [r0, #0]
        (ULONG) extra_parameters[6],
 800f776:	69bc      	ldr	r4, [r7, #24]
 800f778:	3418      	adds	r4, #24
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f77a:	6824      	ldr	r4, [r4, #0]
        (UINT) extra_parameters[7],
 800f77c:	69bd      	ldr	r5, [r7, #24]
 800f77e:	351c      	adds	r5, #28
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f780:	682d      	ldr	r5, [r5, #0]
 800f782:	607d      	str	r5, [r7, #4]
        (UINT) extra_parameters[8],
 800f784:	69be      	ldr	r6, [r7, #24]
 800f786:	3620      	adds	r6, #32
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 800f788:	6836      	ldr	r6, [r6, #0]
 800f78a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f78c:	9508      	str	r5, [sp, #32]
 800f78e:	9607      	str	r6, [sp, #28]
 800f790:	687d      	ldr	r5, [r7, #4]
 800f792:	9506      	str	r5, [sp, #24]
 800f794:	9405      	str	r4, [sp, #20]
 800f796:	9004      	str	r0, [sp, #16]
 800f798:	9103      	str	r1, [sp, #12]
 800f79a:	9202      	str	r2, [sp, #8]
 800f79c:	68bd      	ldr	r5, [r7, #8]
 800f79e:	9501      	str	r5, [sp, #4]
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	4663      	mov	r3, ip
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	6939      	ldr	r1, [r7, #16]
 800f7a8:	6978      	ldr	r0, [r7, #20]
 800f7aa:	f004 f983 	bl	8013ab4 <_txm_module_manager_thread_create>
 800f7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        module_instance
    );
    return(return_value);
 800f7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3734      	adds	r7, #52	; 0x34
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	2000f600 	.word	0x2000f600
 800f7c0:	2000f5cc 	.word	0x2000f5cc

0800f7c4 <_txm_module_manager_tx_thread_delete_dispatch>:
#ifndef TXM_THREAD_DELETE_CALL_NOT_USED
/* UINT _txe_thread_delete(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	f003 0302 	and.w	r3, r3, #2
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d03a      	beq.n	800f850 <_txm_module_manager_tx_thread_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f7e0:	d81f      	bhi.n	800f822 <_txm_module_manager_tx_thread_delete_dispatch+0x5e>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d307      	bcc.n	800f7fe <_txm_module_manager_tx_thread_delete_dispatch+0x3a>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d923      	bls.n	800f846 <_txm_module_manager_tx_thread_delete_dispatch+0x82>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f804:	683a      	ldr	r2, [r7, #0]
 800f806:	429a      	cmp	r2, r3
 800f808:	d30b      	bcc.n	800f822 <_txm_module_manager_tx_thread_delete_dispatch+0x5e>
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f81c:	440b      	add	r3, r1
 800f81e:	429a      	cmp	r2, r3
 800f820:	d911      	bls.n	800f846 <_txm_module_manager_tx_thread_delete_dispatch+0x82>
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f828:	d812      	bhi.n	800f850 <_txm_module_manager_tx_thread_delete_dispatch+0x8c>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	461a      	mov	r2, r3
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	4293      	cmp	r3, r2
 800f834:	d30c      	bcc.n	800f850 <_txm_module_manager_tx_thread_delete_dispatch+0x8c>
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	69db      	ldr	r3, [r3, #28]
 800f840:	3301      	adds	r3, #1
 800f842:	429a      	cmp	r2, r3
 800f844:	d804      	bhi.n	800f850 <_txm_module_manager_tx_thread_delete_dispatch+0x8c>
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d001      	beq.n	800f850 <_txm_module_manager_tx_thread_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f84c:	23f4      	movs	r3, #244	; 0xf4
 800f84e:	e00d      	b.n	800f86c <_txm_module_manager_tx_thread_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_thread_delete(
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	4618      	mov	r0, r3
 800f854:	f7f9 fbb6 	bl	8008fc4 <_txe_thread_delete>
 800f858:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d104      	bne.n	800f86a <_txm_module_manager_tx_thread_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	4618      	mov	r0, r3
 800f864:	f003 faac 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 800f868:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800f86a:	68fb      	ldr	r3, [r7, #12]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch>:
/* UINT _txe_thread_entry_exit_notify(
    TX_THREAD *thread_ptr, -> param_0
    VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_entry_exit_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b088      	sub	sp, #32
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_THREAD *thread_ptr = (TX_THREAD *) param_0;
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	61bb      	str	r3, [r7, #24]
TXM_MODULE_THREAD_ENTRY_INFO *thread_entry_info_ptr;
VOID (*thread_entry_exit_notify)(TX_THREAD *, UINT);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	f003 0302 	and.w	r3, r3, #2
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d04c      	beq.n	800f92a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xb6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f896:	d81f      	bhi.n	800f8d8 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x64>
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89c:	461a      	mov	r2, r3
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d307      	bcc.n	800f8b4 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x40>
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d923      	bls.n	800f8fc <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x88>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d30b      	bcc.n	800f8d8 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x64>
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f8d2:	440b      	add	r3, r1
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d911      	bls.n	800f8fc <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x88>
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f8de:	d812      	bhi.n	800f906 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d30c      	bcc.n	800f906 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d804      	bhi.n	800f906 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800f902:	23f4      	movs	r3, #244	; 0xf4
 800f904:	e027      	b.n	800f956 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xe2>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((thread_ptr == TX_NULL) || (thread_ptr -> tx_thread_id != TX_THREAD_ID))
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d004      	beq.n	800f916 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xa2>
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a13      	ldr	r2, [pc, #76]	; (800f960 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xec>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d001      	beq.n	800f91a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xa6>
            return(TX_THREAD_ERROR);
 800f916:	230e      	movs	r3, #14
 800f918:	e01d      	b.n	800f956 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xe2>

        /* Ensure this thread is from the module trying to set the callback.  */
        if (thread_ptr -> tx_thread_module_instance_ptr != module_instance)
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	429a      	cmp	r2, r3
 800f924:	d001      	beq.n	800f92a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xb6>
            return(TXM_MODULE_INVALID);
 800f926:	23f2      	movs	r3, #242	; 0xf2
 800f928:	e015      	b.n	800f956 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xe2>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d102      	bne.n	800f936 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xc2>
    {

        /* Clear the callback.  */
        thread_entry_exit_notify = (VOID (*)(TX_THREAD *, UINT)) TX_NULL;
 800f930:	2300      	movs	r3, #0
 800f932:	61fb      	str	r3, [r7, #28]
 800f934:	e008      	b.n	800f948 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xd4>
    }
    else
    {

        /* Setup trampoline values.  */
        thread_entry_info_ptr = (TXM_MODULE_THREAD_ENTRY_INFO *) thread_ptr -> tx_thread_module_entry_info_ptr;
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f93c:	617b      	str	r3, [r7, #20]
        thread_entry_info_ptr -> txm_module_thread_entry_info_exit_notify = (VOID (*)(TX_THREAD *, UINT)) param_1;
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	619a      	str	r2, [r3, #24]
        thread_entry_exit_notify = _txm_module_manager_thread_notify_trampoline;
 800f944:	4b07      	ldr	r3, [pc, #28]	; (800f964 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xf0>)
 800f946:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_thread_entry_exit_notify(
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	69f9      	ldr	r1, [r7, #28]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f9 fb65 	bl	800901c <_txe_thread_entry_exit_notify>
 800f952:	6138      	str	r0, [r7, #16]
        (TX_THREAD *) param_0,
        (VOID (*)(TX_THREAD *notify_thread_ptr, UINT type)) thread_entry_exit_notify
    );
    return(return_value);
 800f954:	693b      	ldr	r3, [r7, #16]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3720      	adds	r7, #32
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	54485244 	.word	0x54485244
 800f964:	08013f4d 	.word	0x08013f4d

0800f968 <_txm_module_manager_tx_thread_identify_dispatch>:
#endif

#ifndef TXM_THREAD_IDENTIFY_CALL_NOT_USED
/* TX_THREAD *_tx_thread_identify(); */
static ALIGN_TYPE _txm_module_manager_tx_thread_identify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_thread_identify();
 800f976:	f7f6 f9e1 	bl	8005d3c <_tx_thread_identify>
 800f97a:	4603      	mov	r3, r0
 800f97c:	617b      	str	r3, [r7, #20]
    return(return_value);
 800f97e:	697b      	ldr	r3, [r7, #20]
}
 800f980:	4618      	mov	r0, r3
 800f982:	3718      	adds	r7, #24
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_txm_module_manager_tx_thread_info_get_dispatch>:
    ULONG *time_slice, -> extra_parameters[4]
    TX_THREAD **next_thread, -> extra_parameters[5]
    TX_THREAD **next_suspended_thread -> extra_parameters[6]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f98a:	b08d      	sub	sp, #52	; 0x34
 800f98c:	af06      	add	r7, sp, #24
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f003 0302 	and.w	r3, r3, #2
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 81e0 	beq.w	800fd64 <_txm_module_manager_tx_thread_info_get_dispatch+0x3dc>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f9aa:	d81f      	bhi.n	800f9ec <_txm_module_manager_tx_thread_info_get_dispatch+0x64>
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d307      	bcc.n	800f9c8 <_txm_module_manager_tx_thread_info_get_dispatch+0x40>
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d923      	bls.n	800fa10 <_txm_module_manager_tx_thread_info_get_dispatch+0x88>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d30b      	bcc.n	800f9ec <_txm_module_manager_tx_thread_info_get_dispatch+0x64>
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f9e6:	440b      	add	r3, r1
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d911      	bls.n	800fa10 <_txm_module_manager_tx_thread_info_get_dispatch+0x88>
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800f9f2:	d812      	bhi.n	800fa1a <_txm_module_manager_tx_thread_info_get_dispatch+0x92>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	699b      	ldr	r3, [r3, #24]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d30c      	bcc.n	800fa1a <_txm_module_manager_tx_thread_info_get_dispatch+0x92>
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d804      	bhi.n	800fa1a <_txm_module_manager_tx_thread_info_get_dispatch+0x92>
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <_txm_module_manager_tx_thread_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800fa16:	23f4      	movs	r3, #244	; 0xf4
 800fa18:	e1cb      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f113 0f05 	cmn.w	r3, #5
 800fa20:	d81d      	bhi.n	800fa5e <_txm_module_manager_tx_thread_info_get_dispatch+0xd6>
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa26:	461a      	mov	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d306      	bcc.n	800fa3c <_txm_module_manager_tx_thread_info_get_dispatch+0xb4>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	1d1a      	adds	r2, r3, #4
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa36:	3301      	adds	r3, #1
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d915      	bls.n	800fa68 <_txm_module_manager_tx_thread_info_get_dispatch+0xe0>
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d30a      	bcc.n	800fa5e <_txm_module_manager_tx_thread_info_get_dispatch+0xd6>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	1d1a      	adds	r2, r3, #4
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fa58:	440b      	add	r3, r1
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d904      	bls.n	800fa68 <_txm_module_manager_tx_thread_info_get_dispatch+0xe0>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <_txm_module_manager_tx_thread_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800fa64:	23f4      	movs	r3, #244	; 0xf4
 800fa66:	e1a4      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[7])))
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	f113 0f1d 	cmn.w	r3, #29
 800fa6e:	d81f      	bhi.n	800fab0 <_txm_module_manager_tx_thread_info_get_dispatch+0x128>
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa74:	461a      	mov	r2, r3
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d807      	bhi.n	800fa8c <_txm_module_manager_tx_thread_info_get_dispatch+0x104>
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	f103 021c 	add.w	r2, r3, #28
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa86:	3301      	adds	r3, #1
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d913      	bls.n	800fab4 <_txm_module_manager_tx_thread_info_get_dispatch+0x12c>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d80b      	bhi.n	800fab0 <_txm_module_manager_tx_thread_info_get_dispatch+0x128>
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	f103 021c 	add.w	r2, r3, #28
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800faaa:	440b      	add	r3, r1
 800faac:	429a      	cmp	r2, r3
 800faae:	d901      	bls.n	800fab4 <_txm_module_manager_tx_thread_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800fab0:	23f4      	movs	r3, #244	; 0xf4
 800fab2:	e17e      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(UINT)))
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f113 0f05 	cmn.w	r3, #5
 800fabc:	d820      	bhi.n	800fb00 <_txm_module_manager_tx_thread_info_get_dispatch+0x178>
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d307      	bcc.n	800fada <_txm_module_manager_tx_thread_info_get_dispatch+0x152>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	1d1a      	adds	r2, r3, #4
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad4:	3301      	adds	r3, #1
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d918      	bls.n	800fb0c <_txm_module_manager_tx_thread_info_get_dispatch+0x184>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d30b      	bcc.n	800fb00 <_txm_module_manager_tx_thread_info_get_dispatch+0x178>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	1d1a      	adds	r2, r3, #4
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fafa:	440b      	add	r3, r1
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d905      	bls.n	800fb0c <_txm_module_manager_tx_thread_info_get_dispatch+0x184>
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <_txm_module_manager_tx_thread_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800fb08:	23f4      	movs	r3, #244	; 0xf4
 800fb0a:	e152      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f113 0f05 	cmn.w	r3, #5
 800fb16:	d824      	bhi.n	800fb62 <_txm_module_manager_tx_thread_info_get_dispatch+0x1da>
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d308      	bcc.n	800fb38 <_txm_module_manager_tx_thread_info_get_dispatch+0x1b0>
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	3304      	adds	r3, #4
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	1d1a      	adds	r2, r3, #4
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb32:	3301      	adds	r3, #1
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d91b      	bls.n	800fb70 <_txm_module_manager_tx_thread_info_get_dispatch+0x1e8>
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d30c      	bcc.n	800fb62 <_txm_module_manager_tx_thread_info_get_dispatch+0x1da>
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	1d1a      	adds	r2, r3, #4
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fb5c:	440b      	add	r3, r1
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d906      	bls.n	800fb70 <_txm_module_manager_tx_thread_info_get_dispatch+0x1e8>
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	3304      	adds	r3, #4
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <_txm_module_manager_tx_thread_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800fb6c:	23f4      	movs	r3, #244	; 0xf4
 800fb6e:	e120      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(UINT)))
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	3308      	adds	r3, #8
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f113 0f05 	cmn.w	r3, #5
 800fb7a:	d824      	bhi.n	800fbc6 <_txm_module_manager_tx_thread_info_get_dispatch+0x23e>
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	3308      	adds	r3, #8
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d308      	bcc.n	800fb9c <_txm_module_manager_tx_thread_info_get_dispatch+0x214>
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	1d1a      	adds	r2, r3, #4
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb96:	3301      	adds	r3, #1
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d91b      	bls.n	800fbd4 <_txm_module_manager_tx_thread_info_get_dispatch+0x24c>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d30c      	bcc.n	800fbc6 <_txm_module_manager_tx_thread_info_get_dispatch+0x23e>
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	3308      	adds	r3, #8
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	1d1a      	adds	r2, r3, #4
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fbc0:	440b      	add	r3, r1
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d906      	bls.n	800fbd4 <_txm_module_manager_tx_thread_info_get_dispatch+0x24c>
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	3308      	adds	r3, #8
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d001      	beq.n	800fbd4 <_txm_module_manager_tx_thread_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 800fbd0:	23f4      	movs	r3, #244	; 0xf4
 800fbd2:	e0ee      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(UINT)))
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	330c      	adds	r3, #12
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f113 0f05 	cmn.w	r3, #5
 800fbde:	d824      	bhi.n	800fc2a <_txm_module_manager_tx_thread_info_get_dispatch+0x2a2>
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	330c      	adds	r3, #12
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d308      	bcc.n	800fc00 <_txm_module_manager_tx_thread_info_get_dispatch+0x278>
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	330c      	adds	r3, #12
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	1d1a      	adds	r2, r3, #4
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d91b      	bls.n	800fc38 <_txm_module_manager_tx_thread_info_get_dispatch+0x2b0>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	330c      	adds	r3, #12
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d30c      	bcc.n	800fc2a <_txm_module_manager_tx_thread_info_get_dispatch+0x2a2>
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	330c      	adds	r3, #12
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	1d1a      	adds	r2, r3, #4
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fc24:	440b      	add	r3, r1
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d906      	bls.n	800fc38 <_txm_module_manager_tx_thread_info_get_dispatch+0x2b0>
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	330c      	adds	r3, #12
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <_txm_module_manager_tx_thread_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc34:	23f4      	movs	r3, #244	; 0xf4
 800fc36:	e0bc      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	3310      	adds	r3, #16
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f113 0f05 	cmn.w	r3, #5
 800fc42:	d824      	bhi.n	800fc8e <_txm_module_manager_tx_thread_info_get_dispatch+0x306>
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	3310      	adds	r3, #16
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d308      	bcc.n	800fc64 <_txm_module_manager_tx_thread_info_get_dispatch+0x2dc>
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	3310      	adds	r3, #16
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	1d1a      	adds	r2, r3, #4
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc5e:	3301      	adds	r3, #1
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d91b      	bls.n	800fc9c <_txm_module_manager_tx_thread_info_get_dispatch+0x314>
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	3310      	adds	r3, #16
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d30c      	bcc.n	800fc8e <_txm_module_manager_tx_thread_info_get_dispatch+0x306>
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	3310      	adds	r3, #16
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	1d1a      	adds	r2, r3, #4
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fc88:	440b      	add	r3, r1
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d906      	bls.n	800fc9c <_txm_module_manager_tx_thread_info_get_dispatch+0x314>
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	3310      	adds	r3, #16
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <_txm_module_manager_tx_thread_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc98:	23f4      	movs	r3, #244	; 0xf4
 800fc9a:	e08a      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(TX_THREAD *)))
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	3314      	adds	r3, #20
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f113 0f05 	cmn.w	r3, #5
 800fca6:	d824      	bhi.n	800fcf2 <_txm_module_manager_tx_thread_info_get_dispatch+0x36a>
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	3314      	adds	r3, #20
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d308      	bcc.n	800fcc8 <_txm_module_manager_tx_thread_info_get_dispatch+0x340>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	3314      	adds	r3, #20
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	1d1a      	adds	r2, r3, #4
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d91b      	bls.n	800fd00 <_txm_module_manager_tx_thread_info_get_dispatch+0x378>
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	3314      	adds	r3, #20
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d30c      	bcc.n	800fcf2 <_txm_module_manager_tx_thread_info_get_dispatch+0x36a>
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	3314      	adds	r3, #20
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	1d1a      	adds	r2, r3, #4
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fcec:	440b      	add	r3, r1
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d906      	bls.n	800fd00 <_txm_module_manager_tx_thread_info_get_dispatch+0x378>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	3314      	adds	r3, #20
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <_txm_module_manager_tx_thread_info_get_dispatch+0x378>
            return(TXM_MODULE_INVALID_MEMORY);
 800fcfc:	23f4      	movs	r3, #244	; 0xf4
 800fcfe:	e058      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[6], sizeof(TX_THREAD *)))
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	3318      	adds	r3, #24
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f113 0f05 	cmn.w	r3, #5
 800fd0a:	d824      	bhi.n	800fd56 <_txm_module_manager_tx_thread_info_get_dispatch+0x3ce>
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	3318      	adds	r3, #24
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68fa      	ldr	r2, [r7, #12]
 800fd14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d308      	bcc.n	800fd2c <_txm_module_manager_tx_thread_info_get_dispatch+0x3a4>
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	3318      	adds	r3, #24
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	1d1a      	adds	r2, r3, #4
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd26:	3301      	adds	r3, #1
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d91b      	bls.n	800fd64 <_txm_module_manager_tx_thread_info_get_dispatch+0x3dc>
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	3318      	adds	r3, #24
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d30c      	bcc.n	800fd56 <_txm_module_manager_tx_thread_info_get_dispatch+0x3ce>
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	3318      	adds	r3, #24
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	1d1a      	adds	r2, r3, #4
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fd50:	440b      	add	r3, r1
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d906      	bls.n	800fd64 <_txm_module_manager_tx_thread_info_get_dispatch+0x3dc>
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	3318      	adds	r3, #24
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d001      	beq.n	800fd64 <_txm_module_manager_tx_thread_info_get_dispatch+0x3dc>
            return(TXM_MODULE_INVALID_MEMORY);
 800fd60:	23f4      	movs	r3, #244	; 0xf4
 800fd62:	e026      	b.n	800fdb2 <_txm_module_manager_tx_thread_info_get_dispatch+0x42a>
    }

    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd64:	68b8      	ldr	r0, [r7, #8]
 800fd66:	6879      	ldr	r1, [r7, #4]
        (TX_THREAD *) param_0,
        (CHAR **) param_1,
        (UINT *) extra_parameters[0],
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd6c:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[1],
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	3304      	adds	r3, #4
 800fd72:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd74:	469e      	mov	lr, r3
        (UINT *) extra_parameters[2],
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	3308      	adds	r3, #8
 800fd7a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd7c:	461a      	mov	r2, r3
        (UINT *) extra_parameters[3],
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	330c      	adds	r3, #12
 800fd82:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd84:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	3310      	adds	r3, #16
 800fd8a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd8c:	461d      	mov	r5, r3
        (TX_THREAD **) extra_parameters[5],
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	3314      	adds	r3, #20
 800fd92:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd94:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[6]
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	3318      	adds	r3, #24
 800fd9a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 800fd9c:	9304      	str	r3, [sp, #16]
 800fd9e:	9603      	str	r6, [sp, #12]
 800fda0:	9502      	str	r5, [sp, #8]
 800fda2:	9401      	str	r4, [sp, #4]
 800fda4:	9200      	str	r2, [sp, #0]
 800fda6:	4673      	mov	r3, lr
 800fda8:	4662      	mov	r2, ip
 800fdaa:	f7f9 f957 	bl	800905c <_txe_thread_info_get>
 800fdae:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800fdb0:	697b      	ldr	r3, [r7, #20]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	371c      	adds	r7, #28
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdba <_txm_module_manager_tx_thread_interrupt_control_dispatch>:
#ifndef TXM_THREAD_INTERRUPT_CONTROL_CALL_NOT_USED
/* UINT _tx_thread_interrupt_control(
    UINT new_posture -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_interrupt_control_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b084      	sub	sp, #16
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
 800fdc2:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	f003 0301 	and.w	r3, r3, #1
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <_txm_module_manager_tx_thread_interrupt_control_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 800fdd0:	23f3      	movs	r3, #243	; 0xf3
 800fdd2:	e004      	b.n	800fdde <_txm_module_manager_tx_thread_interrupt_control_dispatch+0x24>

    return_value = (ALIGN_TYPE) _tx_thread_interrupt_control(
 800fdd4:	6838      	ldr	r0, [r7, #0]
 800fdd6:	f7f0 fa53 	bl	8000280 <_tx_thread_interrupt_control>
 800fdda:	60f8      	str	r0, [r7, #12]
        (UINT) param_0
    );
    return(return_value);
 800fddc:	68fb      	ldr	r3, [r7, #12]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <_txm_module_manager_tx_thread_performance_info_get_dispatch>:
    ULONG *timeouts, -> extra_parameters[6]
    ULONG *wait_aborts, -> extra_parameters[7]
    TX_THREAD **last_preempted_by -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800fde6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fde8:	b091      	sub	sp, #68	; 0x44
 800fdea:	af08      	add	r7, sp, #32
 800fdec:	6178      	str	r0, [r7, #20]
 800fdee:	6139      	str	r1, [r7, #16]
 800fdf0:	60fa      	str	r2, [r7, #12]
 800fdf2:	60bb      	str	r3, [r7, #8]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	f003 0302 	and.w	r3, r3, #2
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 8244 	beq.w	801028a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x4a4>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800fe08:	d81f      	bhi.n	800fe4a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x64>
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0e:	461a      	mov	r2, r3
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d307      	bcc.n	800fe26 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x40>
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe20:	3301      	adds	r3, #1
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d923      	bls.n	800fe6e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x88>
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe2c:	693a      	ldr	r2, [r7, #16]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d30b      	bcc.n	800fe4a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x64>
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fe44:	440b      	add	r3, r1
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d911      	bls.n	800fe6e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x88>
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 800fe50:	d812      	bhi.n	800fe78 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x92>
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	699b      	ldr	r3, [r3, #24]
 800fe56:	461a      	mov	r2, r3
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d30c      	bcc.n	800fe78 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x92>
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	69db      	ldr	r3, [r3, #28]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d804      	bhi.n	800fe78 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x92>
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d001      	beq.n	800fe78 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800fe74:	23f4      	movs	r3, #244	; 0xf4
 800fe76:	e23b      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f113 0f05 	cmn.w	r3, #5
 800fe7e:	d81d      	bhi.n	800febc <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xd6>
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	461a      	mov	r2, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d306      	bcc.n	800fe9a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xb4>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	1d1a      	adds	r2, r3, #4
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe94:	3301      	adds	r3, #1
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d915      	bls.n	800fec6 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xe0>
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d30a      	bcc.n	800febc <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xd6>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	1d1a      	adds	r2, r3, #4
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800feb6:	440b      	add	r3, r1
 800feb8:	429a      	cmp	r2, r3
 800feba:	d904      	bls.n	800fec6 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xe0>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d001      	beq.n	800fec6 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 800fec2:	23f4      	movs	r3, #244	; 0xf4
 800fec4:	e214      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	f113 0f25 	cmn.w	r3, #37	; 0x25
 800fecc:	d81f      	bhi.n	800ff0e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x128>
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed2:	461a      	mov	r2, r3
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d807      	bhi.n	800feea <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x104>
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fee4:	3301      	adds	r3, #1
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d913      	bls.n	800ff12 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x12c>
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d80b      	bhi.n	800ff0e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x128>
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ff08:	440b      	add	r3, r1
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d901      	bls.n	800ff12 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 800ff0e:	23f4      	movs	r3, #244	; 0xf4
 800ff10:	e1ee      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f113 0f05 	cmn.w	r3, #5
 800ff1a:	d820      	bhi.n	800ff5e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x178>
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	697a      	ldr	r2, [r7, #20]
 800ff22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d307      	bcc.n	800ff38 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x152>
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	1d1a      	adds	r2, r3, #4
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff32:	3301      	adds	r3, #1
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d918      	bls.n	800ff6a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x184>
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d30b      	bcc.n	800ff5e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x178>
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	1d1a      	adds	r2, r3, #4
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ff58:	440b      	add	r3, r1
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d905      	bls.n	800ff6a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x184>
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d001      	beq.n	800ff6a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 800ff66:	23f4      	movs	r3, #244	; 0xf4
 800ff68:	e1c2      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f113 0f05 	cmn.w	r3, #5
 800ff74:	d824      	bhi.n	800ffc0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1da>
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	697a      	ldr	r2, [r7, #20]
 800ff7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d308      	bcc.n	800ff96 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1b0>
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	3304      	adds	r3, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	1d1a      	adds	r2, r3, #4
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff90:	3301      	adds	r3, #1
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d91b      	bls.n	800ffce <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1e8>
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d30c      	bcc.n	800ffc0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1da>
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	3304      	adds	r3, #4
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	1d1a      	adds	r2, r3, #4
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ffba:	440b      	add	r3, r1
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d906      	bls.n	800ffce <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1e8>
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 800ffca:	23f4      	movs	r3, #244	; 0xf4
 800ffcc:	e190      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	3308      	adds	r3, #8
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f113 0f05 	cmn.w	r3, #5
 800ffd8:	d824      	bhi.n	8010024 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x23e>
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	3308      	adds	r3, #8
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d308      	bcc.n	800fffa <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x214>
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	3308      	adds	r3, #8
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	1d1a      	adds	r2, r3, #4
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fff4:	3301      	adds	r3, #1
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d91b      	bls.n	8010032 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x24c>
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	3308      	adds	r3, #8
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010006:	429a      	cmp	r2, r3
 8010008:	d30c      	bcc.n	8010024 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x23e>
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	3308      	adds	r3, #8
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	1d1a      	adds	r2, r3, #4
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801001e:	440b      	add	r3, r1
 8010020:	429a      	cmp	r2, r3
 8010022:	d906      	bls.n	8010032 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x24c>
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	3308      	adds	r3, #8
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d001      	beq.n	8010032 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 801002e:	23f4      	movs	r3, #244	; 0xf4
 8010030:	e15e      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	330c      	adds	r3, #12
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f113 0f05 	cmn.w	r3, #5
 801003c:	d824      	bhi.n	8010088 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x2a2>
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	330c      	adds	r3, #12
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	697a      	ldr	r2, [r7, #20]
 8010046:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010048:	4293      	cmp	r3, r2
 801004a:	d308      	bcc.n	801005e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x278>
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	330c      	adds	r3, #12
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	1d1a      	adds	r2, r3, #4
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010058:	3301      	adds	r3, #1
 801005a:	429a      	cmp	r2, r3
 801005c:	d91b      	bls.n	8010096 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x2b0>
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	330c      	adds	r3, #12
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801006a:	429a      	cmp	r2, r3
 801006c:	d30c      	bcc.n	8010088 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x2a2>
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	330c      	adds	r3, #12
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	1d1a      	adds	r2, r3, #4
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010082:	440b      	add	r3, r1
 8010084:	429a      	cmp	r2, r3
 8010086:	d906      	bls.n	8010096 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x2b0>
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	330c      	adds	r3, #12
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d001      	beq.n	8010096 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 8010092:	23f4      	movs	r3, #244	; 0xf4
 8010094:	e12c      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	3310      	adds	r3, #16
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f113 0f05 	cmn.w	r3, #5
 80100a0:	d824      	bhi.n	80100ec <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x306>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	3310      	adds	r3, #16
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d308      	bcc.n	80100c2 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x2dc>
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	3310      	adds	r3, #16
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	1d1a      	adds	r2, r3, #4
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100bc:	3301      	adds	r3, #1
 80100be:	429a      	cmp	r2, r3
 80100c0:	d91b      	bls.n	80100fa <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x314>
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	3310      	adds	r3, #16
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d30c      	bcc.n	80100ec <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x306>
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	3310      	adds	r3, #16
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	1d1a      	adds	r2, r3, #4
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80100e6:	440b      	add	r3, r1
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d906      	bls.n	80100fa <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x314>
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	3310      	adds	r3, #16
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x314>
            return(TXM_MODULE_INVALID_MEMORY);
 80100f6:	23f4      	movs	r3, #244	; 0xf4
 80100f8:	e0fa      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(ULONG)))
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	3314      	adds	r3, #20
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f113 0f05 	cmn.w	r3, #5
 8010104:	d824      	bhi.n	8010150 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x36a>
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	3314      	adds	r3, #20
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010110:	4293      	cmp	r3, r2
 8010112:	d308      	bcc.n	8010126 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x340>
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	3314      	adds	r3, #20
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	1d1a      	adds	r2, r3, #4
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010120:	3301      	adds	r3, #1
 8010122:	429a      	cmp	r2, r3
 8010124:	d91b      	bls.n	801015e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x378>
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	3314      	adds	r3, #20
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010132:	429a      	cmp	r2, r3
 8010134:	d30c      	bcc.n	8010150 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x36a>
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	3314      	adds	r3, #20
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	1d1a      	adds	r2, r3, #4
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801014a:	440b      	add	r3, r1
 801014c:	429a      	cmp	r2, r3
 801014e:	d906      	bls.n	801015e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x378>
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	3314      	adds	r3, #20
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x378>
            return(TXM_MODULE_INVALID_MEMORY);
 801015a:	23f4      	movs	r3, #244	; 0xf4
 801015c:	e0c8      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[6], sizeof(ULONG)))
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	3318      	adds	r3, #24
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f113 0f05 	cmn.w	r3, #5
 8010168:	d824      	bhi.n	80101b4 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x3ce>
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	3318      	adds	r3, #24
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	697a      	ldr	r2, [r7, #20]
 8010172:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010174:	4293      	cmp	r3, r2
 8010176:	d308      	bcc.n	801018a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x3a4>
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	3318      	adds	r3, #24
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	1d1a      	adds	r2, r3, #4
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010184:	3301      	adds	r3, #1
 8010186:	429a      	cmp	r2, r3
 8010188:	d91b      	bls.n	80101c2 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x3dc>
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	3318      	adds	r3, #24
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010196:	429a      	cmp	r2, r3
 8010198:	d30c      	bcc.n	80101b4 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x3ce>
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	3318      	adds	r3, #24
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	1d1a      	adds	r2, r3, #4
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80101ae:	440b      	add	r3, r1
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d906      	bls.n	80101c2 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x3dc>
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	3318      	adds	r3, #24
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d001      	beq.n	80101c2 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x3dc>
            return(TXM_MODULE_INVALID_MEMORY);
 80101be:	23f4      	movs	r3, #244	; 0xf4
 80101c0:	e096      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[7], sizeof(ULONG)))
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	331c      	adds	r3, #28
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f113 0f05 	cmn.w	r3, #5
 80101cc:	d824      	bhi.n	8010218 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x432>
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	331c      	adds	r3, #28
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	697a      	ldr	r2, [r7, #20]
 80101d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80101d8:	4293      	cmp	r3, r2
 80101da:	d308      	bcc.n	80101ee <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x408>
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	331c      	adds	r3, #28
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	1d1a      	adds	r2, r3, #4
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e8:	3301      	adds	r3, #1
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d91b      	bls.n	8010226 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x440>
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	331c      	adds	r3, #28
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d30c      	bcc.n	8010218 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x432>
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	331c      	adds	r3, #28
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	1d1a      	adds	r2, r3, #4
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010212:	440b      	add	r3, r1
 8010214:	429a      	cmp	r2, r3
 8010216:	d906      	bls.n	8010226 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x440>
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	331c      	adds	r3, #28
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x440>
            return(TXM_MODULE_INVALID_MEMORY);
 8010222:	23f4      	movs	r3, #244	; 0xf4
 8010224:	e064      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[8], sizeof(TX_THREAD *)))
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	3320      	adds	r3, #32
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f113 0f05 	cmn.w	r3, #5
 8010230:	d824      	bhi.n	801027c <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x496>
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	3320      	adds	r3, #32
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801023c:	4293      	cmp	r3, r2
 801023e:	d308      	bcc.n	8010252 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x46c>
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	3320      	adds	r3, #32
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	1d1a      	adds	r2, r3, #4
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024c:	3301      	adds	r3, #1
 801024e:	429a      	cmp	r2, r3
 8010250:	d91b      	bls.n	801028a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x4a4>
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	3320      	adds	r3, #32
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801025e:	429a      	cmp	r2, r3
 8010260:	d30c      	bcc.n	801027c <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x496>
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	3320      	adds	r3, #32
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	1d1a      	adds	r2, r3, #4
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010276:	440b      	add	r3, r1
 8010278:	429a      	cmp	r2, r3
 801027a:	d906      	bls.n	801028a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x4a4>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	3320      	adds	r3, #32
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x4a4>
            return(TXM_MODULE_INVALID_MEMORY);
 8010286:	23f4      	movs	r3, #244	; 0xf4
 8010288:	e032      	b.n	80102f0 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50a>
    }

    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 801028a:	6938      	ldr	r0, [r7, #16]
 801028c:	68f9      	ldr	r1, [r7, #12]
        (TX_THREAD *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 8010292:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[1],
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	3304      	adds	r3, #4
 8010298:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 801029a:	469e      	mov	lr, r3
        (ULONG *) extra_parameters[2],
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	3308      	adds	r3, #8
 80102a0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102a2:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	330c      	adds	r3, #12
 80102a8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102aa:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	3310      	adds	r3, #16
 80102b0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102b2:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[5],
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	3314      	adds	r3, #20
 80102b8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102ba:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[6],
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	3318      	adds	r3, #24
 80102c0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102c2:	607b      	str	r3, [r7, #4]
        (ULONG *) extra_parameters[7],
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	331c      	adds	r3, #28
 80102c8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102ca:	603b      	str	r3, [r7, #0]
        (TX_THREAD **) extra_parameters[8]
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	3320      	adds	r3, #32
 80102d0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80102d2:	9306      	str	r3, [sp, #24]
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	9305      	str	r3, [sp, #20]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	9304      	str	r3, [sp, #16]
 80102dc:	9603      	str	r6, [sp, #12]
 80102de:	9502      	str	r5, [sp, #8]
 80102e0:	9401      	str	r4, [sp, #4]
 80102e2:	9200      	str	r2, [sp, #0]
 80102e4:	4673      	mov	r3, lr
 80102e6:	4662      	mov	r2, ip
 80102e8:	f004 fb26 	bl	8014938 <_tx_thread_performance_info_get>
 80102ec:	61f8      	str	r0, [r7, #28]
    );
    return(return_value);
 80102ee:	69fb      	ldr	r3, [r7, #28]
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3724      	adds	r7, #36	; 0x24
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102f8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch>:
    ULONG *wait_aborts, -> extra_parameters[6]
    ULONG *non_idle_returns, -> extra_parameters[7]
    ULONG *idle_returns -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80102f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102fa:	b091      	sub	sp, #68	; 0x44
 80102fc:	af08      	add	r7, sp, #32
 80102fe:	6178      	str	r0, [r7, #20]
 8010300:	6139      	str	r1, [r7, #16]
 8010302:	60fa      	str	r2, [r7, #12]
 8010304:	60bb      	str	r3, [r7, #8]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	f003 0302 	and.w	r3, r3, #2
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 8230 	beq.w	8010774 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x47c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	f113 0f05 	cmn.w	r3, #5
 801031a:	d81d      	bhi.n	8010358 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x60>
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010320:	461a      	mov	r2, r3
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	4293      	cmp	r3, r2
 8010326:	d306      	bcc.n	8010336 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3e>
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	1d1a      	adds	r2, r3, #4
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010330:	3301      	adds	r3, #1
 8010332:	429a      	cmp	r2, r3
 8010334:	d915      	bls.n	8010362 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x6a>
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801033c:	693a      	ldr	r2, [r7, #16]
 801033e:	429a      	cmp	r2, r3
 8010340:	d30a      	bcc.n	8010358 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x60>
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	1d1a      	adds	r2, r3, #4
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010352:	440b      	add	r3, r1
 8010354:	429a      	cmp	r2, r3
 8010356:	d904      	bls.n	8010362 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x6a>
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 801035e:	23f4      	movs	r3, #244	; 0xf4
 8010360:	e23b      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f113 0f05 	cmn.w	r3, #5
 8010368:	d81d      	bhi.n	80103a6 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xae>
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036e:	461a      	mov	r2, r3
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4293      	cmp	r3, r2
 8010374:	d306      	bcc.n	8010384 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x8c>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	1d1a      	adds	r2, r3, #4
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037e:	3301      	adds	r3, #1
 8010380:	429a      	cmp	r2, r3
 8010382:	d915      	bls.n	80103b0 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xb8>
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	429a      	cmp	r2, r3
 801038e:	d30a      	bcc.n	80103a6 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xae>
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	1d1a      	adds	r2, r3, #4
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80103a0:	440b      	add	r3, r1
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d904      	bls.n	80103b0 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xb8>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d001      	beq.n	80103b0 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 80103ac:	23f4      	movs	r3, #244	; 0xf4
 80103ae:	e214      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	f113 0f25 	cmn.w	r3, #37	; 0x25
 80103b6:	d81f      	bhi.n	80103f8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x100>
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103bc:	461a      	mov	r2, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d807      	bhi.n	80103d4 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xdc>
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ce:	3301      	adds	r3, #1
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d913      	bls.n	80103fc <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x104>
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d80b      	bhi.n	80103f8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x100>
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80103f2:	440b      	add	r3, r1
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d901      	bls.n	80103fc <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 80103f8:	23f4      	movs	r3, #244	; 0xf4
 80103fa:	e1ee      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f113 0f05 	cmn.w	r3, #5
 8010404:	d820      	bhi.n	8010448 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x150>
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801040e:	4293      	cmp	r3, r2
 8010410:	d307      	bcc.n	8010422 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x12a>
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	1d1a      	adds	r2, r3, #4
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801041c:	3301      	adds	r3, #1
 801041e:	429a      	cmp	r2, r3
 8010420:	d918      	bls.n	8010454 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x15c>
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801042c:	429a      	cmp	r2, r3
 801042e:	d30b      	bcc.n	8010448 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x150>
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	1d1a      	adds	r2, r3, #4
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010442:	440b      	add	r3, r1
 8010444:	429a      	cmp	r2, r3
 8010446:	d905      	bls.n	8010454 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x15c>
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d001      	beq.n	8010454 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010450:	23f4      	movs	r3, #244	; 0xf4
 8010452:	e1c2      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	3304      	adds	r3, #4
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f113 0f05 	cmn.w	r3, #5
 801045e:	d824      	bhi.n	80104aa <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1b2>
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	3304      	adds	r3, #4
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	697a      	ldr	r2, [r7, #20]
 8010468:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801046a:	4293      	cmp	r3, r2
 801046c:	d308      	bcc.n	8010480 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x188>
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	3304      	adds	r3, #4
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	1d1a      	adds	r2, r3, #4
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801047a:	3301      	adds	r3, #1
 801047c:	429a      	cmp	r2, r3
 801047e:	d91b      	bls.n	80104b8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1c0>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	3304      	adds	r3, #4
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801048c:	429a      	cmp	r2, r3
 801048e:	d30c      	bcc.n	80104aa <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1b2>
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	3304      	adds	r3, #4
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	1d1a      	adds	r2, r3, #4
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80104a4:	440b      	add	r3, r1
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d906      	bls.n	80104b8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1c0>
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	3304      	adds	r3, #4
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 80104b4:	23f4      	movs	r3, #244	; 0xf4
 80104b6:	e190      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	3308      	adds	r3, #8
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f113 0f05 	cmn.w	r3, #5
 80104c2:	d824      	bhi.n	801050e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x216>
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3308      	adds	r3, #8
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d308      	bcc.n	80104e4 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1ec>
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	3308      	adds	r3, #8
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	1d1a      	adds	r2, r3, #4
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104de:	3301      	adds	r3, #1
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d91b      	bls.n	801051c <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x224>
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	3308      	adds	r3, #8
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d30c      	bcc.n	801050e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x216>
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	3308      	adds	r3, #8
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	1d1a      	adds	r2, r3, #4
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010508:	440b      	add	r3, r1
 801050a:	429a      	cmp	r2, r3
 801050c:	d906      	bls.n	801051c <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x224>
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	3308      	adds	r3, #8
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d001      	beq.n	801051c <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x224>
            return(TXM_MODULE_INVALID_MEMORY);
 8010518:	23f4      	movs	r3, #244	; 0xf4
 801051a:	e15e      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	330c      	adds	r3, #12
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f113 0f05 	cmn.w	r3, #5
 8010526:	d824      	bhi.n	8010572 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x27a>
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	330c      	adds	r3, #12
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	697a      	ldr	r2, [r7, #20]
 8010530:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010532:	4293      	cmp	r3, r2
 8010534:	d308      	bcc.n	8010548 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x250>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	330c      	adds	r3, #12
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	1d1a      	adds	r2, r3, #4
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010542:	3301      	adds	r3, #1
 8010544:	429a      	cmp	r2, r3
 8010546:	d91b      	bls.n	8010580 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x288>
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	330c      	adds	r3, #12
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010554:	429a      	cmp	r2, r3
 8010556:	d30c      	bcc.n	8010572 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x27a>
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	330c      	adds	r3, #12
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	1d1a      	adds	r2, r3, #4
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801056c:	440b      	add	r3, r1
 801056e:	429a      	cmp	r2, r3
 8010570:	d906      	bls.n	8010580 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x288>
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	330c      	adds	r3, #12
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d001      	beq.n	8010580 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x288>
            return(TXM_MODULE_INVALID_MEMORY);
 801057c:	23f4      	movs	r3, #244	; 0xf4
 801057e:	e12c      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	3310      	adds	r3, #16
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f113 0f05 	cmn.w	r3, #5
 801058a:	d824      	bhi.n	80105d6 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x2de>
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	3310      	adds	r3, #16
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	697a      	ldr	r2, [r7, #20]
 8010594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010596:	4293      	cmp	r3, r2
 8010598:	d308      	bcc.n	80105ac <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x2b4>
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	3310      	adds	r3, #16
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	1d1a      	adds	r2, r3, #4
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a6:	3301      	adds	r3, #1
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d91b      	bls.n	80105e4 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x2ec>
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	3310      	adds	r3, #16
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d30c      	bcc.n	80105d6 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x2de>
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	3310      	adds	r3, #16
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	1d1a      	adds	r2, r3, #4
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80105d0:	440b      	add	r3, r1
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d906      	bls.n	80105e4 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x2ec>
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	3310      	adds	r3, #16
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d001      	beq.n	80105e4 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x2ec>
            return(TXM_MODULE_INVALID_MEMORY);
 80105e0:	23f4      	movs	r3, #244	; 0xf4
 80105e2:	e0fa      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(ULONG)))
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	3314      	adds	r3, #20
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f113 0f05 	cmn.w	r3, #5
 80105ee:	d824      	bhi.n	801063a <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x342>
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	3314      	adds	r3, #20
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d308      	bcc.n	8010610 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x318>
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	3314      	adds	r3, #20
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	1d1a      	adds	r2, r3, #4
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801060a:	3301      	adds	r3, #1
 801060c:	429a      	cmp	r2, r3
 801060e:	d91b      	bls.n	8010648 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x350>
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	3314      	adds	r3, #20
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801061c:	429a      	cmp	r2, r3
 801061e:	d30c      	bcc.n	801063a <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x342>
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	3314      	adds	r3, #20
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	1d1a      	adds	r2, r3, #4
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010634:	440b      	add	r3, r1
 8010636:	429a      	cmp	r2, r3
 8010638:	d906      	bls.n	8010648 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x350>
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	3314      	adds	r3, #20
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d001      	beq.n	8010648 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x350>
            return(TXM_MODULE_INVALID_MEMORY);
 8010644:	23f4      	movs	r3, #244	; 0xf4
 8010646:	e0c8      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[6], sizeof(ULONG)))
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	3318      	adds	r3, #24
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f113 0f05 	cmn.w	r3, #5
 8010652:	d824      	bhi.n	801069e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3a6>
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	3318      	adds	r3, #24
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801065e:	4293      	cmp	r3, r2
 8010660:	d308      	bcc.n	8010674 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x37c>
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	3318      	adds	r3, #24
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	1d1a      	adds	r2, r3, #4
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801066e:	3301      	adds	r3, #1
 8010670:	429a      	cmp	r2, r3
 8010672:	d91b      	bls.n	80106ac <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3b4>
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	3318      	adds	r3, #24
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010680:	429a      	cmp	r2, r3
 8010682:	d30c      	bcc.n	801069e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3a6>
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	3318      	adds	r3, #24
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	1d1a      	adds	r2, r3, #4
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010698:	440b      	add	r3, r1
 801069a:	429a      	cmp	r2, r3
 801069c:	d906      	bls.n	80106ac <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3b4>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	3318      	adds	r3, #24
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d001      	beq.n	80106ac <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3b4>
            return(TXM_MODULE_INVALID_MEMORY);
 80106a8:	23f4      	movs	r3, #244	; 0xf4
 80106aa:	e096      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[7], sizeof(ULONG)))
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	331c      	adds	r3, #28
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f113 0f05 	cmn.w	r3, #5
 80106b6:	d824      	bhi.n	8010702 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x40a>
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	331c      	adds	r3, #28
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d308      	bcc.n	80106d8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x3e0>
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	331c      	adds	r3, #28
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	1d1a      	adds	r2, r3, #4
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d2:	3301      	adds	r3, #1
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d91b      	bls.n	8010710 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x418>
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	331c      	adds	r3, #28
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d30c      	bcc.n	8010702 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x40a>
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	331c      	adds	r3, #28
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	1d1a      	adds	r2, r3, #4
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80106fc:	440b      	add	r3, r1
 80106fe:	429a      	cmp	r2, r3
 8010700:	d906      	bls.n	8010710 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x418>
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	331c      	adds	r3, #28
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d001      	beq.n	8010710 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x418>
            return(TXM_MODULE_INVALID_MEMORY);
 801070c:	23f4      	movs	r3, #244	; 0xf4
 801070e:	e064      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[8], sizeof(ULONG)))
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	3320      	adds	r3, #32
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f113 0f05 	cmn.w	r3, #5
 801071a:	d824      	bhi.n	8010766 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x46e>
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	3320      	adds	r3, #32
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010726:	4293      	cmp	r3, r2
 8010728:	d308      	bcc.n	801073c <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x444>
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	3320      	adds	r3, #32
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	1d1a      	adds	r2, r3, #4
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010736:	3301      	adds	r3, #1
 8010738:	429a      	cmp	r2, r3
 801073a:	d91b      	bls.n	8010774 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x47c>
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	3320      	adds	r3, #32
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010748:	429a      	cmp	r2, r3
 801074a:	d30c      	bcc.n	8010766 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x46e>
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	3320      	adds	r3, #32
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	1d1a      	adds	r2, r3, #4
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010760:	440b      	add	r3, r1
 8010762:	429a      	cmp	r2, r3
 8010764:	d906      	bls.n	8010774 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x47c>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	3320      	adds	r3, #32
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x47c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010770:	23f4      	movs	r3, #244	; 0xf4
 8010772:	e032      	b.n	80107da <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x4e2>
    }

    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 8010774:	6938      	ldr	r0, [r7, #16]
 8010776:	68f9      	ldr	r1, [r7, #12]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 801077c:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[1],
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	3304      	adds	r3, #4
 8010782:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 8010784:	469e      	mov	lr, r3
        (ULONG *) extra_parameters[2],
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	3308      	adds	r3, #8
 801078a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 801078c:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	330c      	adds	r3, #12
 8010792:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 8010794:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	3310      	adds	r3, #16
 801079a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 801079c:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[5],
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	3314      	adds	r3, #20
 80107a2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80107a4:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[6],
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	3318      	adds	r3, #24
 80107aa:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80107ac:	607b      	str	r3, [r7, #4]
        (ULONG *) extra_parameters[7],
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	331c      	adds	r3, #28
 80107b2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80107b4:	603b      	str	r3, [r7, #0]
        (ULONG *) extra_parameters[8]
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	3320      	adds	r3, #32
 80107ba:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80107bc:	9306      	str	r3, [sp, #24]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	9305      	str	r3, [sp, #20]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	9304      	str	r3, [sp, #16]
 80107c6:	9603      	str	r6, [sp, #12]
 80107c8:	9502      	str	r5, [sp, #8]
 80107ca:	9401      	str	r4, [sp, #4]
 80107cc:	9200      	str	r2, [sp, #0]
 80107ce:	4673      	mov	r3, lr
 80107d0:	4662      	mov	r2, ip
 80107d2:	f004 f903 	bl	80149dc <_tx_thread_performance_system_info_get>
 80107d6:	61f8      	str	r0, [r7, #28]
    );
    return(return_value);
 80107d8:	69fb      	ldr	r3, [r7, #28]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3724      	adds	r7, #36	; 0x24
 80107de:	46bd      	mov	sp, r7
 80107e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107e2 <_txm_module_manager_tx_thread_preemption_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    UINT new_threshold, -> param_1
    UINT *old_threshold -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_preemption_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b086      	sub	sp, #24
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	60f8      	str	r0, [r7, #12]
 80107ea:	60b9      	str	r1, [r7, #8]
 80107ec:	607a      	str	r2, [r7, #4]
 80107ee:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	f003 0302 	and.w	r3, r3, #2
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d061      	beq.n	80108c0 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xde>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010802:	d81f      	bhi.n	8010844 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x62>
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010808:	461a      	mov	r2, r3
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	4293      	cmp	r3, r2
 801080e:	d307      	bcc.n	8010820 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x3e>
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081a:	3301      	adds	r3, #1
 801081c:	429a      	cmp	r2, r3
 801081e:	d923      	bls.n	8010868 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x86>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	429a      	cmp	r2, r3
 801082a:	d30b      	bcc.n	8010844 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x62>
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801083e:	440b      	add	r3, r1
 8010840:	429a      	cmp	r2, r3
 8010842:	d911      	bls.n	8010868 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x86>
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 801084a:	d812      	bhi.n	8010872 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x90>
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	699b      	ldr	r3, [r3, #24]
 8010850:	461a      	mov	r2, r3
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	4293      	cmp	r3, r2
 8010856:	d30c      	bcc.n	8010872 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x90>
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	69db      	ldr	r3, [r3, #28]
 8010862:	3301      	adds	r3, #1
 8010864:	429a      	cmp	r2, r3
 8010866:	d804      	bhi.n	8010872 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x90>
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 801086e:	23f4      	movs	r3, #244	; 0xf4
 8010870:	e02e      	b.n	80108d0 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xee>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(UINT)))
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	f113 0f05 	cmn.w	r3, #5
 8010878:	d81d      	bhi.n	80108b6 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xd4>
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087e:	461a      	mov	r2, r3
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	4293      	cmp	r3, r2
 8010884:	d306      	bcc.n	8010894 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xb2>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	1d1a      	adds	r2, r3, #4
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801088e:	3301      	adds	r3, #1
 8010890:	429a      	cmp	r2, r3
 8010892:	d915      	bls.n	80108c0 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xde>
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d30a      	bcc.n	80108b6 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xd4>
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	1d1a      	adds	r2, r3, #4
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80108b0:	440b      	add	r3, r1
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d904      	bls.n	80108c0 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xde>
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d001      	beq.n	80108c0 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xde>
            return(TXM_MODULE_INVALID_MEMORY);
 80108bc:	23f4      	movs	r3, #244	; 0xf4
 80108be:	e007      	b.n	80108d0 <_txm_module_manager_tx_thread_preemption_change_dispatch+0xee>
    }

    return_value = (ALIGN_TYPE) _txe_thread_preemption_change(
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	6879      	ldr	r1, [r7, #4]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7f8 fbf6 	bl	80090b8 <_txe_thread_preemption_change>
 80108cc:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (UINT) param_1,
        (UINT *) param_2
    );
    return(return_value);
 80108ce:	697b      	ldr	r3, [r7, #20]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3718      	adds	r7, #24
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <_txm_module_manager_tx_thread_priority_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    UINT new_priority, -> param_1
    UINT *old_priority -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_priority_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
 80108e4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	f003 0302 	and.w	r3, r3, #2
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d061      	beq.n	80109b6 <_txm_module_manager_tx_thread_priority_change_dispatch+0xde>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80108f8:	d81f      	bhi.n	801093a <_txm_module_manager_tx_thread_priority_change_dispatch+0x62>
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108fe:	461a      	mov	r2, r3
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	4293      	cmp	r3, r2
 8010904:	d307      	bcc.n	8010916 <_txm_module_manager_tx_thread_priority_change_dispatch+0x3e>
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010910:	3301      	adds	r3, #1
 8010912:	429a      	cmp	r2, r3
 8010914:	d923      	bls.n	801095e <_txm_module_manager_tx_thread_priority_change_dispatch+0x86>
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	429a      	cmp	r2, r3
 8010920:	d30b      	bcc.n	801093a <_txm_module_manager_tx_thread_priority_change_dispatch+0x62>
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010934:	440b      	add	r3, r1
 8010936:	429a      	cmp	r2, r3
 8010938:	d911      	bls.n	801095e <_txm_module_manager_tx_thread_priority_change_dispatch+0x86>
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010940:	d812      	bhi.n	8010968 <_txm_module_manager_tx_thread_priority_change_dispatch+0x90>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	461a      	mov	r2, r3
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	4293      	cmp	r3, r2
 801094c:	d30c      	bcc.n	8010968 <_txm_module_manager_tx_thread_priority_change_dispatch+0x90>
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	69db      	ldr	r3, [r3, #28]
 8010958:	3301      	adds	r3, #1
 801095a:	429a      	cmp	r2, r3
 801095c:	d804      	bhi.n	8010968 <_txm_module_manager_tx_thread_priority_change_dispatch+0x90>
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d001      	beq.n	8010968 <_txm_module_manager_tx_thread_priority_change_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 8010964:	23f4      	movs	r3, #244	; 0xf4
 8010966:	e02e      	b.n	80109c6 <_txm_module_manager_tx_thread_priority_change_dispatch+0xee>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(UINT)))
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	f113 0f05 	cmn.w	r3, #5
 801096e:	d81d      	bhi.n	80109ac <_txm_module_manager_tx_thread_priority_change_dispatch+0xd4>
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010974:	461a      	mov	r2, r3
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	4293      	cmp	r3, r2
 801097a:	d306      	bcc.n	801098a <_txm_module_manager_tx_thread_priority_change_dispatch+0xb2>
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	1d1a      	adds	r2, r3, #4
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010984:	3301      	adds	r3, #1
 8010986:	429a      	cmp	r2, r3
 8010988:	d915      	bls.n	80109b6 <_txm_module_manager_tx_thread_priority_change_dispatch+0xde>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	429a      	cmp	r2, r3
 8010994:	d30a      	bcc.n	80109ac <_txm_module_manager_tx_thread_priority_change_dispatch+0xd4>
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	1d1a      	adds	r2, r3, #4
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80109a6:	440b      	add	r3, r1
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d904      	bls.n	80109b6 <_txm_module_manager_tx_thread_priority_change_dispatch+0xde>
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <_txm_module_manager_tx_thread_priority_change_dispatch+0xde>
            return(TXM_MODULE_INVALID_MEMORY);
 80109b2:	23f4      	movs	r3, #244	; 0xf4
 80109b4:	e007      	b.n	80109c6 <_txm_module_manager_tx_thread_priority_change_dispatch+0xee>
    }

    return_value = (ALIGN_TYPE) _txe_thread_priority_change(
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	6879      	ldr	r1, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f8 fbb9 	bl	8009134 <_txe_thread_priority_change>
 80109c2:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (UINT) param_1,
        (UINT *) param_2
    );
    return(return_value);
 80109c4:	697b      	ldr	r3, [r7, #20]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}

080109ce <_txm_module_manager_tx_thread_relinquish_dispatch>:
#endif

#ifndef TXM_THREAD_RELINQUISH_CALL_NOT_USED
/* VOID _txe_thread_relinquish(); */
static ALIGN_TYPE _txm_module_manager_tx_thread_relinquish_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b084      	sub	sp, #16
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	60f8      	str	r0, [r7, #12]
 80109d6:	60b9      	str	r1, [r7, #8]
 80109d8:	607a      	str	r2, [r7, #4]
 80109da:	603b      	str	r3, [r7, #0]

    _txe_thread_relinquish();
 80109dc:	f7f8 fbe6 	bl	80091ac <_txe_thread_relinquish>
    return(TX_SUCCESS);
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <_txm_module_manager_tx_thread_reset_dispatch>:
#ifndef TXM_THREAD_RESET_CALL_NOT_USED
/* UINT _txe_thread_reset(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_reset_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b084      	sub	sp, #16
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	f003 0302 	and.w	r3, r3, #2
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d03a      	beq.n	8010a76 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010a06:	d81f      	bhi.n	8010a48 <_txm_module_manager_tx_thread_reset_dispatch+0x5e>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d307      	bcc.n	8010a24 <_txm_module_manager_tx_thread_reset_dispatch+0x3a>
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a1e:	3301      	adds	r3, #1
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d923      	bls.n	8010a6c <_txm_module_manager_tx_thread_reset_dispatch+0x82>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d30b      	bcc.n	8010a48 <_txm_module_manager_tx_thread_reset_dispatch+0x5e>
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010a42:	440b      	add	r3, r1
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d911      	bls.n	8010a6c <_txm_module_manager_tx_thread_reset_dispatch+0x82>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010a4e:	d812      	bhi.n	8010a76 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	699b      	ldr	r3, [r3, #24]
 8010a54:	461a      	mov	r2, r3
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d30c      	bcc.n	8010a76 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	69db      	ldr	r3, [r3, #28]
 8010a66:	3301      	adds	r3, #1
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d804      	bhi.n	8010a76 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d001      	beq.n	8010a76 <_txm_module_manager_tx_thread_reset_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010a72:	23f4      	movs	r3, #244	; 0xf4
 8010a74:	e005      	b.n	8010a82 <_txm_module_manager_tx_thread_reset_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_thread_reset(
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f003 fadb 	bl	8014034 <_txm_module_manager_thread_reset>
 8010a7e:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8010a80:	68fb      	ldr	r3, [r7, #12]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <_txm_module_manager_tx_thread_resume_dispatch>:
#ifndef TXM_THREAD_RESUME_CALL_NOT_USED
/* UINT _txe_thread_resume(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_resume_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b084      	sub	sp, #16
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	f003 0302 	and.w	r3, r3, #2
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d03a      	beq.n	8010b16 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010aa6:	d81f      	bhi.n	8010ae8 <_txm_module_manager_tx_thread_resume_dispatch+0x5e>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aac:	461a      	mov	r2, r3
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d307      	bcc.n	8010ac4 <_txm_module_manager_tx_thread_resume_dispatch+0x3a>
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010abe:	3301      	adds	r3, #1
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d923      	bls.n	8010b0c <_txm_module_manager_tx_thread_resume_dispatch+0x82>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d30b      	bcc.n	8010ae8 <_txm_module_manager_tx_thread_resume_dispatch+0x5e>
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010ae2:	440b      	add	r3, r1
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d911      	bls.n	8010b0c <_txm_module_manager_tx_thread_resume_dispatch+0x82>
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010aee:	d812      	bhi.n	8010b16 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	699b      	ldr	r3, [r3, #24]
 8010af4:	461a      	mov	r2, r3
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d30c      	bcc.n	8010b16 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	69db      	ldr	r3, [r3, #28]
 8010b06:	3301      	adds	r3, #1
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d804      	bhi.n	8010b16 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <_txm_module_manager_tx_thread_resume_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010b12:	23f4      	movs	r3, #244	; 0xf4
 8010b14:	e005      	b.n	8010b22 <_txm_module_manager_tx_thread_resume_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_thread_resume(
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7f8 fb63 	bl	80091e4 <_txe_thread_resume>
 8010b1e:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8010b20:	68fb      	ldr	r3, [r7, #12]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <_txm_module_manager_tx_thread_sleep_dispatch>:
#ifndef TXM_THREAD_SLEEP_CALL_NOT_USED
/* UINT _tx_thread_sleep(
    ULONG timer_ticks -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_sleep_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_thread_sleep(
 8010b34:	6838      	ldr	r0, [r7, #0]
 8010b36:	f7f5 fc21 	bl	800637c <_tx_thread_sleep>
 8010b3a:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <_txm_module_manager_tx_thread_stack_error_notify_dispatch>:
#ifndef TXM_THREAD_STACK_ERROR_NOTIFY_CALL_NOT_USED
/* UINT _tx_thread_stack_error_notify(
    VOID (*stack_error_handler)(TX_THREAD *thread_ptr) -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_stack_error_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010b46:	b580      	push	{r7, lr}
 8010b48:	b084      	sub	sp, #16
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
 8010b4e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	f003 0301 	and.w	r3, r3, #1
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <_txm_module_manager_tx_thread_stack_error_notify_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8010b5c:	23f3      	movs	r3, #243	; 0xf3
 8010b5e:	e005      	b.n	8010b6c <_txm_module_manager_tx_thread_stack_error_notify_dispatch+0x26>

    return_value = (ALIGN_TYPE) _tx_thread_stack_error_notify(
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f5 fc88 	bl	8006478 <_tx_thread_stack_error_notify>
 8010b68:	60f8      	str	r0, [r7, #12]
        (VOID (*)(TX_THREAD *thread_ptr)) param_0
    );
    return(return_value);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <_txm_module_manager_tx_thread_suspend_dispatch>:
#ifndef TXM_THREAD_SUSPEND_CALL_NOT_USED
/* UINT _txe_thread_suspend(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_suspend_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d03a      	beq.n	8010c00 <_txm_module_manager_tx_thread_suspend_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010b90:	d81f      	bhi.n	8010bd2 <_txm_module_manager_tx_thread_suspend_dispatch+0x5e>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b96:	461a      	mov	r2, r3
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	d307      	bcc.n	8010bae <_txm_module_manager_tx_thread_suspend_dispatch+0x3a>
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ba8:	3301      	adds	r3, #1
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d923      	bls.n	8010bf6 <_txm_module_manager_tx_thread_suspend_dispatch+0x82>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010bb4:	683a      	ldr	r2, [r7, #0]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d30b      	bcc.n	8010bd2 <_txm_module_manager_tx_thread_suspend_dispatch+0x5e>
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010bcc:	440b      	add	r3, r1
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d911      	bls.n	8010bf6 <_txm_module_manager_tx_thread_suspend_dispatch+0x82>
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010bd8:	d812      	bhi.n	8010c00 <_txm_module_manager_tx_thread_suspend_dispatch+0x8c>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	461a      	mov	r2, r3
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d30c      	bcc.n	8010c00 <_txm_module_manager_tx_thread_suspend_dispatch+0x8c>
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	69db      	ldr	r3, [r3, #28]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d804      	bhi.n	8010c00 <_txm_module_manager_tx_thread_suspend_dispatch+0x8c>
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <_txm_module_manager_tx_thread_suspend_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010bfc:	23f4      	movs	r3, #244	; 0xf4
 8010bfe:	e005      	b.n	8010c0c <_txm_module_manager_tx_thread_suspend_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_thread_suspend(
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7f8 fb0c 	bl	8009220 <_txe_thread_suspend>
 8010c08:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <_txm_module_manager_tx_thread_system_suspend_dispatch>:
#ifndef TXM_THREAD_SYSTEM_SUSPEND_CALL_NOT_USED
/* VOID _tx_thread_system_suspend(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_system_suspend_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b086      	sub	sp, #24
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]

TX_INTERRUPT_SAVE_AREA

TX_THREAD *thread_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	f003 0302 	and.w	r3, r3, #2
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d041      	beq.n	8010cae <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
    {
        /* Ensure the thread is suspending itself.  */
        if (((TX_THREAD *) param_0) != _tx_thread_current_ptr)
 8010c2a:	683a      	ldr	r2, [r7, #0]
 8010c2c:	4b32      	ldr	r3, [pc, #200]	; (8010cf8 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xe4>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d001      	beq.n	8010c38 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x24>
        {
            return(TXM_MODULE_INVALID_MEMORY);
 8010c34:	23f4      	movs	r3, #244	; 0xf4
 8010c36:	e05b      	b.n	8010cf0 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xdc>
        }
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010c3e:	d81f      	bhi.n	8010c80 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x6c>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c44:	461a      	mov	r2, r3
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d307      	bcc.n	8010c5c <_txm_module_manager_tx_thread_system_suspend_dispatch+0x48>
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c56:	3301      	adds	r3, #1
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d923      	bls.n	8010ca4 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x90>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010c62:	683a      	ldr	r2, [r7, #0]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d30b      	bcc.n	8010c80 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x6c>
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010c7a:	440b      	add	r3, r1
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d911      	bls.n	8010ca4 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x90>
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010c86:	d812      	bhi.n	8010cae <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	699b      	ldr	r3, [r3, #24]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d30c      	bcc.n	8010cae <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	69db      	ldr	r3, [r3, #28]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d804      	bhi.n	8010cae <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <_txm_module_manager_tx_thread_system_suspend_dispatch+0x9a>
            return(TXM_MODULE_INVALID_MEMORY);
 8010caa:	23f4      	movs	r3, #244	; 0xf4
 8010cac:	e020      	b.n	8010cf0 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xdc>
    }

    /* Get the thread pointer.  */
    thread_ptr = (TX_THREAD *) param_0;
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8010cb6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010cb8:	b672      	cpsid	i
    return(primask_value);
 8010cba:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 8010cbc:	613b      	str	r3, [r7, #16]

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Thread state change.  */
    TX_THREAD_STATE_CHANGE(thread_ptr, TX_COMPLETED)

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  0;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010cd0:	4b0a      	ldr	r3, [pc, #40]	; (8010cfc <_txm_module_manager_tx_thread_system_suspend_dispatch+0xe8>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	4a09      	ldr	r2, [pc, #36]	; (8010cfc <_txm_module_manager_tx_thread_system_suspend_dispatch+0xe8>)
 8010cd8:	6013      	str	r3, [r2, #0]
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f383 8810 	msr	PRIMASK, r3
}
 8010ce4:	bf00      	nop
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr);

    _tx_thread_system_suspend(
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7f5 fd93 	bl	8006814 <_tx_thread_system_suspend>
        (TX_THREAD *) param_0
    );
    return(TX_SUCCESS);
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3718      	adds	r7, #24
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	2000ef4c 	.word	0x2000ef4c
 8010cfc:	2000efe8 	.word	0x2000efe8

08010d00 <_txm_module_manager_tx_thread_terminate_dispatch>:
#ifndef TXM_THREAD_TERMINATE_CALL_NOT_USED
/* UINT _txe_thread_terminate(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_terminate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	f003 0302 	and.w	r3, r3, #2
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d03a      	beq.n	8010d8c <_txm_module_manager_tx_thread_terminate_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010d1c:	d81f      	bhi.n	8010d5e <_txm_module_manager_tx_thread_terminate_dispatch+0x5e>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d22:	461a      	mov	r2, r3
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d307      	bcc.n	8010d3a <_txm_module_manager_tx_thread_terminate_dispatch+0x3a>
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d34:	3301      	adds	r3, #1
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d923      	bls.n	8010d82 <_txm_module_manager_tx_thread_terminate_dispatch+0x82>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010d40:	683a      	ldr	r2, [r7, #0]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d30b      	bcc.n	8010d5e <_txm_module_manager_tx_thread_terminate_dispatch+0x5e>
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010d58:	440b      	add	r3, r1
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d911      	bls.n	8010d82 <_txm_module_manager_tx_thread_terminate_dispatch+0x82>
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010d64:	d812      	bhi.n	8010d8c <_txm_module_manager_tx_thread_terminate_dispatch+0x8c>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	699b      	ldr	r3, [r3, #24]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d30c      	bcc.n	8010d8c <_txm_module_manager_tx_thread_terminate_dispatch+0x8c>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	69db      	ldr	r3, [r3, #28]
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d804      	bhi.n	8010d8c <_txm_module_manager_tx_thread_terminate_dispatch+0x8c>
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d001      	beq.n	8010d8c <_txm_module_manager_tx_thread_terminate_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010d88:	23f4      	movs	r3, #244	; 0xf4
 8010d8a:	e005      	b.n	8010d98 <_txm_module_manager_tx_thread_terminate_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_thread_terminate(
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7f8 fa64 	bl	800925c <_txe_thread_terminate>
 8010d94:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8010d96:	68fb      	ldr	r3, [r7, #12]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <_txm_module_manager_tx_thread_time_slice_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    ULONG new_time_slice, -> param_1
    ULONG *old_time_slice -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_time_slice_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	60f8      	str	r0, [r7, #12]
 8010da8:	60b9      	str	r1, [r7, #8]
 8010daa:	607a      	str	r2, [r7, #4]
 8010dac:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	f003 0302 	and.w	r3, r3, #2
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d061      	beq.n	8010e7e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010dc0:	d81f      	bhi.n	8010e02 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x62>
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d307      	bcc.n	8010dde <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x3e>
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dd8:	3301      	adds	r3, #1
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d923      	bls.n	8010e26 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x86>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d30b      	bcc.n	8010e02 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x62>
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010dfc:	440b      	add	r3, r1
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d911      	bls.n	8010e26 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x86>
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010e08:	d812      	bhi.n	8010e30 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	699b      	ldr	r3, [r3, #24]
 8010e0e:	461a      	mov	r2, r3
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d30c      	bcc.n	8010e30 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	69db      	ldr	r3, [r3, #28]
 8010e20:	3301      	adds	r3, #1
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d804      	bhi.n	8010e30 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 8010e2c:	23f4      	movs	r3, #244	; 0xf4
 8010e2e:	e02e      	b.n	8010e8e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xee>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(ULONG)))
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	f113 0f05 	cmn.w	r3, #5
 8010e36:	d81d      	bhi.n	8010e74 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xd4>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d306      	bcc.n	8010e52 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xb2>
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	1d1a      	adds	r2, r3, #4
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d915      	bls.n	8010e7e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d30a      	bcc.n	8010e74 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xd4>
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	1d1a      	adds	r2, r3, #4
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010e6e:	440b      	add	r3, r1
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d904      	bls.n	8010e7e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xde>
            return(TXM_MODULE_INVALID_MEMORY);
 8010e7a:	23f4      	movs	r3, #244	; 0xf4
 8010e7c:	e007      	b.n	8010e8e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0xee>
    }

    return_value = (ALIGN_TYPE) _txe_thread_time_slice_change(
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	683a      	ldr	r2, [r7, #0]
 8010e82:	6879      	ldr	r1, [r7, #4]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7f8 fa15 	bl	80092b4 <_txe_thread_time_slice_change>
 8010e8a:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (ULONG) param_1,
        (ULONG *) param_2
    );
    return(return_value);
 8010e8c:	697b      	ldr	r3, [r7, #20]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3718      	adds	r7, #24
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <_txm_module_manager_tx_thread_wait_abort_dispatch>:
#ifndef TXM_THREAD_WAIT_ABORT_CALL_NOT_USED
/* UINT _txe_thread_wait_abort(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_wait_abort_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b084      	sub	sp, #16
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	f003 0302 	and.w	r3, r3, #2
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d03a      	beq.n	8010f22 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010eb2:	d81f      	bhi.n	8010ef4 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x5e>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eb8:	461a      	mov	r2, r3
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d307      	bcc.n	8010ed0 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x3a>
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eca:	3301      	adds	r3, #1
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d923      	bls.n	8010f18 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x82>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d30b      	bcc.n	8010ef4 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x5e>
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010eee:	440b      	add	r3, r1
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d911      	bls.n	8010f18 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x82>
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010efa:	d812      	bhi.n	8010f22 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x8c>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	461a      	mov	r2, r3
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d30c      	bcc.n	8010f22 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x8c>
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	3301      	adds	r3, #1
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d804      	bhi.n	8010f22 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x8c>
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d001      	beq.n	8010f22 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010f1e:	23f4      	movs	r3, #244	; 0xf4
 8010f20:	e005      	b.n	8010f2e <_txm_module_manager_tx_thread_wait_abort_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_thread_wait_abort(
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7f8 f9fb 	bl	8009320 <_txe_thread_wait_abort>
 8010f2a:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <_txm_module_manager_tx_time_get_dispatch>:
#endif

#ifndef TXM_TIME_GET_CALL_NOT_USED
/* ULONG _tx_time_get(); */
static ALIGN_TYPE _txm_module_manager_tx_time_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b086      	sub	sp, #24
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	607a      	str	r2, [r7, #4]
 8010f42:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_time_get();
 8010f44:	f7f5 ffe0 	bl	8006f08 <_tx_time_get>
 8010f48:	6178      	str	r0, [r7, #20]
    return(return_value);
 8010f4a:	697b      	ldr	r3, [r7, #20]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3718      	adds	r7, #24
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <_txm_module_manager_tx_time_set_dispatch>:
#ifndef TXM_TIME_SET_CALL_NOT_USED
/* VOID _tx_time_set(
    ULONG new_time -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_time_set_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]

    _tx_time_set(
 8010f5e:	6838      	ldr	r0, [r7, #0]
 8010f60:	f7f5 ffee 	bl	8006f40 <_tx_time_set>
        (ULONG) param_0
    );
    return(TX_SUCCESS);
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <_txm_module_manager_tx_timer_activate_dispatch>:
#ifndef TXM_TIMER_ACTIVATE_CALL_NOT_USED
/* UINT _txe_timer_activate(
    TX_TIMER *timer_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_activate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b084      	sub	sp, #16
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	f003 0302 	and.w	r3, r3, #2
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d03a      	beq.n	8010ffa <_txm_module_manager_tx_timer_activate_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8010f8a:	d81f      	bhi.n	8010fcc <_txm_module_manager_tx_timer_activate_dispatch+0x5e>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	461a      	mov	r2, r3
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d307      	bcc.n	8010fa8 <_txm_module_manager_tx_timer_activate_dispatch+0x3a>
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d923      	bls.n	8010ff0 <_txm_module_manager_tx_timer_activate_dispatch+0x82>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010fae:	683a      	ldr	r2, [r7, #0]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d30b      	bcc.n	8010fcc <_txm_module_manager_tx_timer_activate_dispatch+0x5e>
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010fc6:	440b      	add	r3, r1
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d911      	bls.n	8010ff0 <_txm_module_manager_tx_timer_activate_dispatch+0x82>
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8010fd2:	d812      	bhi.n	8010ffa <_txm_module_manager_tx_timer_activate_dispatch+0x8c>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	699b      	ldr	r3, [r3, #24]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d30c      	bcc.n	8010ffa <_txm_module_manager_tx_timer_activate_dispatch+0x8c>
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	69db      	ldr	r3, [r3, #28]
 8010fea:	3301      	adds	r3, #1
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d804      	bhi.n	8010ffa <_txm_module_manager_tx_timer_activate_dispatch+0x8c>
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <_txm_module_manager_tx_timer_activate_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010ff6:	23f4      	movs	r3, #244	; 0xf4
 8010ff8:	e005      	b.n	8011006 <_txm_module_manager_tx_timer_activate_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_timer_activate(
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f8 f9ad 	bl	800935c <_txe_timer_activate>
 8011002:	60f8      	str	r0, [r7, #12]
        (TX_TIMER *) param_0
    );
    return(return_value);
 8011004:	68fb      	ldr	r3, [r7, #12]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <_txm_module_manager_tx_timer_change_dispatch>:
    TX_TIMER *timer_ptr, -> param_0
    ULONG initial_ticks, -> param_1
    ULONG reschedule_ticks -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b086      	sub	sp, #24
 8011012:	af00      	add	r7, sp, #0
 8011014:	60f8      	str	r0, [r7, #12]
 8011016:	60b9      	str	r1, [r7, #8]
 8011018:	607a      	str	r2, [r7, #4]
 801101a:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	f003 0302 	and.w	r3, r3, #2
 8011024:	2b00      	cmp	r3, #0
 8011026:	d03a      	beq.n	801109e <_txm_module_manager_tx_timer_change_dispatch+0x90>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	f113 0f35 	cmn.w	r3, #53	; 0x35
 801102e:	d81f      	bhi.n	8011070 <_txm_module_manager_tx_timer_change_dispatch+0x62>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011034:	461a      	mov	r2, r3
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	4293      	cmp	r3, r2
 801103a:	d307      	bcc.n	801104c <_txm_module_manager_tx_timer_change_dispatch+0x3e>
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011046:	3301      	adds	r3, #1
 8011048:	429a      	cmp	r2, r3
 801104a:	d923      	bls.n	8011094 <_txm_module_manager_tx_timer_change_dispatch+0x86>
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	429a      	cmp	r2, r3
 8011056:	d30b      	bcc.n	8011070 <_txm_module_manager_tx_timer_change_dispatch+0x62>
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801106a:	440b      	add	r3, r1
 801106c:	429a      	cmp	r2, r3
 801106e:	d911      	bls.n	8011094 <_txm_module_manager_tx_timer_change_dispatch+0x86>
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011076:	d812      	bhi.n	801109e <_txm_module_manager_tx_timer_change_dispatch+0x90>
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	699b      	ldr	r3, [r3, #24]
 801107c:	461a      	mov	r2, r3
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	4293      	cmp	r3, r2
 8011082:	d30c      	bcc.n	801109e <_txm_module_manager_tx_timer_change_dispatch+0x90>
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	69db      	ldr	r3, [r3, #28]
 801108e:	3301      	adds	r3, #1
 8011090:	429a      	cmp	r2, r3
 8011092:	d804      	bhi.n	801109e <_txm_module_manager_tx_timer_change_dispatch+0x90>
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d001      	beq.n	801109e <_txm_module_manager_tx_timer_change_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 801109a:	23f4      	movs	r3, #244	; 0xf4
 801109c:	e007      	b.n	80110ae <_txm_module_manager_tx_timer_change_dispatch+0xa0>
    }

    return_value = (ALIGN_TYPE) _txe_timer_change(
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	6879      	ldr	r1, [r7, #4]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7f8 f977 	bl	8009398 <_txe_timer_change>
 80110aa:	6178      	str	r0, [r7, #20]
        (TX_TIMER *) param_0,
        (ULONG) param_1,
        (ULONG) param_2
    );
    return(return_value);
 80110ac:	697b      	ldr	r3, [r7, #20]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
	...

080110b8 <_txm_module_manager_tx_timer_create_dispatch>:
    ULONG reschedule_ticks, -> extra_parameters[3]
    UINT auto_activate, -> extra_parameters[4]
    UINT timer_control_block_size -> extra_parameters[5]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80110b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ba:	b08d      	sub	sp, #52	; 0x34
 80110bc:	af04      	add	r7, sp, #16
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
 80110c4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_TIMER *timer_ptr;
VOID (*expiration_function)(ULONG);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	f003 0302 	and.w	r3, r3, #2
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 8081 	beq.w	80111d6 <_txm_module_manager_tx_timer_create_dispatch+0x11e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_TIMER)))
 80110d4:	4b5d      	ldr	r3, [pc, #372]	; (801124c <_txm_module_manager_tx_timer_create_dispatch+0x194>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d119      	bne.n	8011110 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80110e2:	d815      	bhi.n	8011110 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 80110e4:	4b5a      	ldr	r3, [pc, #360]	; (8011250 <_txm_module_manager_tx_timer_create_dispatch+0x198>)
 80110e6:	699b      	ldr	r3, [r3, #24]
 80110e8:	3310      	adds	r3, #16
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d30f      	bcc.n	8011110 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	3334      	adds	r3, #52	; 0x34
 80110f4:	4a56      	ldr	r2, [pc, #344]	; (8011250 <_txm_module_manager_tx_timer_create_dispatch+0x198>)
 80110f6:	6991      	ldr	r1, [r2, #24]
 80110f8:	4a55      	ldr	r2, [pc, #340]	; (8011250 <_txm_module_manager_tx_timer_create_dispatch+0x198>)
 80110fa:	69d2      	ldr	r2, [r2, #28]
 80110fc:	440a      	add	r2, r1
 80110fe:	4293      	cmp	r3, r2
 8011100:	d806      	bhi.n	8011110 <_txm_module_manager_tx_timer_create_dispatch+0x58>
 8011102:	2134      	movs	r1, #52	; 0x34
 8011104:	68b8      	ldr	r0, [r7, #8]
 8011106:	f003 f937 	bl	8014378 <_txm_module_manager_object_size_check>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d004      	beq.n	801111a <_txm_module_manager_tx_timer_create_dispatch+0x62>
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <_txm_module_manager_tx_timer_create_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 8011116:	23f4      	movs	r3, #244	; 0xf4
 8011118:	e094      	b.n	8011244 <_txm_module_manager_tx_timer_create_dispatch+0x18c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011120:	d01d      	beq.n	801115e <_txm_module_manager_tx_timer_create_dispatch+0xa6>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011126:	461a      	mov	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	4293      	cmp	r3, r2
 801112c:	d306      	bcc.n	801113c <_txm_module_manager_tx_timer_create_dispatch+0x84>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011136:	3301      	adds	r3, #1
 8011138:	429a      	cmp	r2, r3
 801113a:	d926      	bls.n	801118a <_txm_module_manager_tx_timer_create_dispatch+0xd2>
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	429a      	cmp	r2, r3
 8011146:	d30a      	bcc.n	801115e <_txm_module_manager_tx_timer_create_dispatch+0xa6>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011158:	440b      	add	r3, r1
 801115a:	429a      	cmp	r2, r3
 801115c:	d915      	bls.n	801118a <_txm_module_manager_tx_timer_create_dispatch+0xd2>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011164:	d00c      	beq.n	8011180 <_txm_module_manager_tx_timer_create_dispatch+0xc8>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	461a      	mov	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4293      	cmp	r3, r2
 8011170:	d306      	bcc.n	8011180 <_txm_module_manager_tx_timer_create_dispatch+0xc8>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	1c5a      	adds	r2, r3, #1
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	69db      	ldr	r3, [r3, #28]
 801117a:	3301      	adds	r3, #1
 801117c:	429a      	cmp	r2, r3
 801117e:	d904      	bls.n	801118a <_txm_module_manager_tx_timer_create_dispatch+0xd2>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <_txm_module_manager_tx_timer_create_dispatch+0xd2>
            return(TXM_MODULE_INVALID_MEMORY);
 8011186:	23f4      	movs	r3, #244	; 0xf4
 8011188:	e05c      	b.n	8011244 <_txm_module_manager_tx_timer_create_dispatch+0x18c>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[6])))
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	f113 0f19 	cmn.w	r3, #25
 8011190:	d81f      	bhi.n	80111d2 <_txm_module_manager_tx_timer_create_dispatch+0x11a>
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011196:	461a      	mov	r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	429a      	cmp	r2, r3
 801119c:	d807      	bhi.n	80111ae <_txm_module_manager_tx_timer_create_dispatch+0xf6>
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	f103 0218 	add.w	r2, r3, #24
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a8:	3301      	adds	r3, #1
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d913      	bls.n	80111d6 <_txm_module_manager_tx_timer_create_dispatch+0x11e>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d80b      	bhi.n	80111d2 <_txm_module_manager_tx_timer_create_dispatch+0x11a>
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	f103 0218 	add.w	r2, r3, #24
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80111cc:	440b      	add	r3, r1
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d901      	bls.n	80111d6 <_txm_module_manager_tx_timer_create_dispatch+0x11e>
            return(TXM_MODULE_INVALID_MEMORY);
 80111d2:	23f4      	movs	r3, #244	; 0xf4
 80111d4:	e036      	b.n	8011244 <_txm_module_manager_tx_timer_create_dispatch+0x18c>
    }

    /* Is it a disable request?  */
    if ((void *) extra_parameters[0] == TX_NULL)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d102      	bne.n	80111e4 <_txm_module_manager_tx_timer_create_dispatch+0x12c>
    {

        /* Clear the callback.  */
        expiration_function = (VOID (*)(ULONG)) TX_NULL;
 80111de:	2300      	movs	r3, #0
 80111e0:	61fb      	str	r3, [r7, #28]
 80111e2:	e001      	b.n	80111e8 <_txm_module_manager_tx_timer_create_dispatch+0x130>
    }
    else
    {

        /* Set trampoline callback.  */
        expiration_function = _txm_module_manager_timer_notify_trampoline;
 80111e4:	4b1b      	ldr	r3, [pc, #108]	; (8011254 <_txm_module_manager_tx_timer_create_dispatch+0x19c>)
 80111e6:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_timer_create(
 80111e8:	68bc      	ldr	r4, [r7, #8]
 80111ea:	687d      	ldr	r5, [r7, #4]
        (TX_TIMER *) param_0,
        (CHAR *) param_1,
        (VOID (*)(ULONG)) expiration_function,
        (ULONG) extra_parameters[1],
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_timer_create(
 80111f0:	681e      	ldr	r6, [r3, #0]
        (ULONG) extra_parameters[2],
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_timer_create(
 80111f6:	681b      	ldr	r3, [r3, #0]
        (ULONG) extra_parameters[3],
 80111f8:	683a      	ldr	r2, [r7, #0]
 80111fa:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_timer_create(
 80111fc:	6812      	ldr	r2, [r2, #0]
        (UINT) extra_parameters[4],
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	3110      	adds	r1, #16
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011202:	6809      	ldr	r1, [r1, #0]
        (UINT) extra_parameters[5]
 8011204:	6838      	ldr	r0, [r7, #0]
 8011206:	3014      	adds	r0, #20
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011208:	6800      	ldr	r0, [r0, #0]
 801120a:	9003      	str	r0, [sp, #12]
 801120c:	9102      	str	r1, [sp, #8]
 801120e:	9201      	str	r2, [sp, #4]
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	4633      	mov	r3, r6
 8011214:	69fa      	ldr	r2, [r7, #28]
 8011216:	4629      	mov	r1, r5
 8011218:	4620      	mov	r0, r4
 801121a:	f7f8 f8f3 	bl	8009404 <_txe_timer_create>
 801121e:	61b8      	str	r0, [r7, #24]
    );

    if (return_value == TX_SUCCESS)
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d10d      	bne.n	8011242 <_txm_module_manager_tx_timer_create_dispatch+0x18a>
    {

        /* Get the object pointer.  */
        timer_ptr = (TX_TIMER *) param_0;
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	617b      	str	r3, [r7, #20]

        /* Setup trampoline values.  */
        if ((void *) extra_parameters[0] != TX_NULL)
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d007      	beq.n	8011242 <_txm_module_manager_tx_timer_create_dispatch+0x18a>
        {

            timer_ptr -> tx_timer_module_instance = (VOID *) module_instance;
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	62da      	str	r2, [r3, #44]	; 0x2c
            timer_ptr -> tx_timer_module_expiration_function = (VOID (*)(ULONG)) extra_parameters[0];
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	461a      	mov	r2, r3
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    return(return_value);
 8011242:	69bb      	ldr	r3, [r7, #24]
}
 8011244:	4618      	mov	r0, r3
 8011246:	3724      	adds	r7, #36	; 0x24
 8011248:	46bd      	mov	sp, r7
 801124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124c:	2000f600 	.word	0x2000f600
 8011250:	2000f5cc 	.word	0x2000f5cc
 8011254:	08014101 	.word	0x08014101

08011258 <_txm_module_manager_tx_timer_deactivate_dispatch>:
#ifndef TXM_TIMER_DEACTIVATE_CALL_NOT_USED
/* UINT _txe_timer_deactivate(
    TX_TIMER *timer_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_deactivate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	f003 0302 	and.w	r3, r3, #2
 801126a:	2b00      	cmp	r3, #0
 801126c:	d03a      	beq.n	80112e4 <_txm_module_manager_tx_timer_deactivate_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011274:	d81f      	bhi.n	80112b6 <_txm_module_manager_tx_timer_deactivate_dispatch+0x5e>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127a:	461a      	mov	r2, r3
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	4293      	cmp	r3, r2
 8011280:	d307      	bcc.n	8011292 <_txm_module_manager_tx_timer_deactivate_dispatch+0x3a>
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128c:	3301      	adds	r3, #1
 801128e:	429a      	cmp	r2, r3
 8011290:	d923      	bls.n	80112da <_txm_module_manager_tx_timer_deactivate_dispatch+0x82>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011298:	683a      	ldr	r2, [r7, #0]
 801129a:	429a      	cmp	r2, r3
 801129c:	d30b      	bcc.n	80112b6 <_txm_module_manager_tx_timer_deactivate_dispatch+0x5e>
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80112b0:	440b      	add	r3, r1
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d911      	bls.n	80112da <_txm_module_manager_tx_timer_deactivate_dispatch+0x82>
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80112bc:	d812      	bhi.n	80112e4 <_txm_module_manager_tx_timer_deactivate_dispatch+0x8c>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	699b      	ldr	r3, [r3, #24]
 80112c2:	461a      	mov	r2, r3
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d30c      	bcc.n	80112e4 <_txm_module_manager_tx_timer_deactivate_dispatch+0x8c>
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	69db      	ldr	r3, [r3, #28]
 80112d4:	3301      	adds	r3, #1
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d804      	bhi.n	80112e4 <_txm_module_manager_tx_timer_deactivate_dispatch+0x8c>
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d001      	beq.n	80112e4 <_txm_module_manager_tx_timer_deactivate_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 80112e0:	23f4      	movs	r3, #244	; 0xf4
 80112e2:	e005      	b.n	80112f0 <_txm_module_manager_tx_timer_deactivate_dispatch+0x98>
    }

    return_value = (ALIGN_TYPE) _txe_timer_deactivate(
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7f8 f934 	bl	8009554 <_txe_timer_deactivate>
 80112ec:	60f8      	str	r0, [r7, #12]
        (TX_TIMER *) param_0
    );
    return(return_value);
 80112ee:	68fb      	ldr	r3, [r7, #12]
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <_txm_module_manager_tx_timer_delete_dispatch>:
#ifndef TXM_TIMER_DELETE_CALL_NOT_USED
/* UINT _txe_timer_delete(
    TX_TIMER *timer_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	f003 0302 	and.w	r3, r3, #2
 801130a:	2b00      	cmp	r3, #0
 801130c:	d03a      	beq.n	8011384 <_txm_module_manager_tx_timer_delete_dispatch+0x8c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011314:	d81f      	bhi.n	8011356 <_txm_module_manager_tx_timer_delete_dispatch+0x5e>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801131a:	461a      	mov	r2, r3
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	4293      	cmp	r3, r2
 8011320:	d307      	bcc.n	8011332 <_txm_module_manager_tx_timer_delete_dispatch+0x3a>
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801132c:	3301      	adds	r3, #1
 801132e:	429a      	cmp	r2, r3
 8011330:	d923      	bls.n	801137a <_txm_module_manager_tx_timer_delete_dispatch+0x82>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011338:	683a      	ldr	r2, [r7, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d30b      	bcc.n	8011356 <_txm_module_manager_tx_timer_delete_dispatch+0x5e>
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011350:	440b      	add	r3, r1
 8011352:	429a      	cmp	r2, r3
 8011354:	d911      	bls.n	801137a <_txm_module_manager_tx_timer_delete_dispatch+0x82>
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	f113 0f35 	cmn.w	r3, #53	; 0x35
 801135c:	d812      	bhi.n	8011384 <_txm_module_manager_tx_timer_delete_dispatch+0x8c>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	699b      	ldr	r3, [r3, #24]
 8011362:	461a      	mov	r2, r3
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	4293      	cmp	r3, r2
 8011368:	d30c      	bcc.n	8011384 <_txm_module_manager_tx_timer_delete_dispatch+0x8c>
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	69db      	ldr	r3, [r3, #28]
 8011374:	3301      	adds	r3, #1
 8011376:	429a      	cmp	r2, r3
 8011378:	d804      	bhi.n	8011384 <_txm_module_manager_tx_timer_delete_dispatch+0x8c>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d001      	beq.n	8011384 <_txm_module_manager_tx_timer_delete_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8011380:	23f4      	movs	r3, #244	; 0xf4
 8011382:	e00d      	b.n	80113a0 <_txm_module_manager_tx_timer_delete_dispatch+0xa8>
    }

    return_value = (ALIGN_TYPE) _txe_timer_delete(
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	4618      	mov	r0, r3
 8011388:	f7f8 f902 	bl	8009590 <_txe_timer_delete>
 801138c:	60f8      	str	r0, [r7, #12]
        (TX_TIMER *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d104      	bne.n	801139e <_txm_module_manager_tx_timer_delete_dispatch+0xa6>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	4618      	mov	r0, r3
 8011398:	f001 fd12 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 801139c:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 801139e:	68fb      	ldr	r3, [r7, #12]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <_txm_module_manager_tx_timer_info_get_dispatch>:
    ULONG *remaining_ticks, -> extra_parameters[1]
    ULONG *reschedule_ticks, -> extra_parameters[2]
    TX_TIMER **next_timer -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80113a8:	b5b0      	push	{r4, r5, r7, lr}
 80113aa:	b088      	sub	sp, #32
 80113ac:	af02      	add	r7, sp, #8
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
 80113b4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	f003 0302 	and.w	r3, r3, #2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 814a 	beq.w	8011658 <_txm_module_manager_tx_timer_info_get_dispatch+0x2b0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80113ca:	d81f      	bhi.n	801140c <_txm_module_manager_tx_timer_info_get_dispatch+0x64>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d0:	461a      	mov	r2, r3
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d307      	bcc.n	80113e8 <_txm_module_manager_tx_timer_info_get_dispatch+0x40>
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e2:	3301      	adds	r3, #1
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d923      	bls.n	8011430 <_txm_module_manager_tx_timer_info_get_dispatch+0x88>
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80113ee:	68ba      	ldr	r2, [r7, #8]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d30b      	bcc.n	801140c <_txm_module_manager_tx_timer_info_get_dispatch+0x64>
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011406:	440b      	add	r3, r1
 8011408:	429a      	cmp	r2, r3
 801140a:	d911      	bls.n	8011430 <_txm_module_manager_tx_timer_info_get_dispatch+0x88>
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011412:	d812      	bhi.n	801143a <_txm_module_manager_tx_timer_info_get_dispatch+0x92>
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	461a      	mov	r2, r3
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	4293      	cmp	r3, r2
 801141e:	d30c      	bcc.n	801143a <_txm_module_manager_tx_timer_info_get_dispatch+0x92>
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	69db      	ldr	r3, [r3, #28]
 801142a:	3301      	adds	r3, #1
 801142c:	429a      	cmp	r2, r3
 801142e:	d804      	bhi.n	801143a <_txm_module_manager_tx_timer_info_get_dispatch+0x92>
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d001      	beq.n	801143a <_txm_module_manager_tx_timer_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 8011436:	23f4      	movs	r3, #244	; 0xf4
 8011438:	e126      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f113 0f05 	cmn.w	r3, #5
 8011440:	d81d      	bhi.n	801147e <_txm_module_manager_tx_timer_info_get_dispatch+0xd6>
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011446:	461a      	mov	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4293      	cmp	r3, r2
 801144c:	d306      	bcc.n	801145c <_txm_module_manager_tx_timer_info_get_dispatch+0xb4>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	1d1a      	adds	r2, r3, #4
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011456:	3301      	adds	r3, #1
 8011458:	429a      	cmp	r2, r3
 801145a:	d915      	bls.n	8011488 <_txm_module_manager_tx_timer_info_get_dispatch+0xe0>
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	429a      	cmp	r2, r3
 8011466:	d30a      	bcc.n	801147e <_txm_module_manager_tx_timer_info_get_dispatch+0xd6>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	1d1a      	adds	r2, r3, #4
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011478:	440b      	add	r3, r1
 801147a:	429a      	cmp	r2, r3
 801147c:	d904      	bls.n	8011488 <_txm_module_manager_tx_timer_info_get_dispatch+0xe0>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <_txm_module_manager_tx_timer_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 8011484:	23f4      	movs	r3, #244	; 0xf4
 8011486:	e0ff      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	f113 0f11 	cmn.w	r3, #17
 801148e:	d81f      	bhi.n	80114d0 <_txm_module_manager_tx_timer_info_get_dispatch+0x128>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011494:	461a      	mov	r2, r3
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	429a      	cmp	r2, r3
 801149a:	d807      	bhi.n	80114ac <_txm_module_manager_tx_timer_info_get_dispatch+0x104>
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	f103 0210 	add.w	r2, r3, #16
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114a6:	3301      	adds	r3, #1
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d913      	bls.n	80114d4 <_txm_module_manager_tx_timer_info_get_dispatch+0x12c>
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d80b      	bhi.n	80114d0 <_txm_module_manager_tx_timer_info_get_dispatch+0x128>
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	f103 0210 	add.w	r2, r3, #16
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80114ca:	440b      	add	r3, r1
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d901      	bls.n	80114d4 <_txm_module_manager_tx_timer_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 80114d0:	23f4      	movs	r3, #244	; 0xf4
 80114d2:	e0d9      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(UINT)))
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f113 0f05 	cmn.w	r3, #5
 80114dc:	d820      	bhi.n	8011520 <_txm_module_manager_tx_timer_info_get_dispatch+0x178>
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d307      	bcc.n	80114fa <_txm_module_manager_tx_timer_info_get_dispatch+0x152>
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	1d1a      	adds	r2, r3, #4
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f4:	3301      	adds	r3, #1
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d918      	bls.n	801152c <_txm_module_manager_tx_timer_info_get_dispatch+0x184>
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011504:	429a      	cmp	r2, r3
 8011506:	d30b      	bcc.n	8011520 <_txm_module_manager_tx_timer_info_get_dispatch+0x178>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	1d1a      	adds	r2, r3, #4
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801151a:	440b      	add	r3, r1
 801151c:	429a      	cmp	r2, r3
 801151e:	d905      	bls.n	801152c <_txm_module_manager_tx_timer_info_get_dispatch+0x184>
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <_txm_module_manager_tx_timer_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 8011528:	23f4      	movs	r3, #244	; 0xf4
 801152a:	e0ad      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	3304      	adds	r3, #4
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	f113 0f05 	cmn.w	r3, #5
 8011536:	d824      	bhi.n	8011582 <_txm_module_manager_tx_timer_info_get_dispatch+0x1da>
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	3304      	adds	r3, #4
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011542:	4293      	cmp	r3, r2
 8011544:	d308      	bcc.n	8011558 <_txm_module_manager_tx_timer_info_get_dispatch+0x1b0>
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	3304      	adds	r3, #4
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	1d1a      	adds	r2, r3, #4
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011552:	3301      	adds	r3, #1
 8011554:	429a      	cmp	r2, r3
 8011556:	d91b      	bls.n	8011590 <_txm_module_manager_tx_timer_info_get_dispatch+0x1e8>
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	3304      	adds	r3, #4
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011564:	429a      	cmp	r2, r3
 8011566:	d30c      	bcc.n	8011582 <_txm_module_manager_tx_timer_info_get_dispatch+0x1da>
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	3304      	adds	r3, #4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	1d1a      	adds	r2, r3, #4
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801157c:	440b      	add	r3, r1
 801157e:	429a      	cmp	r2, r3
 8011580:	d906      	bls.n	8011590 <_txm_module_manager_tx_timer_info_get_dispatch+0x1e8>
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	3304      	adds	r3, #4
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d001      	beq.n	8011590 <_txm_module_manager_tx_timer_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 801158c:	23f4      	movs	r3, #244	; 0xf4
 801158e:	e07b      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	3308      	adds	r3, #8
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f113 0f05 	cmn.w	r3, #5
 801159a:	d824      	bhi.n	80115e6 <_txm_module_manager_tx_timer_info_get_dispatch+0x23e>
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	3308      	adds	r3, #8
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d308      	bcc.n	80115bc <_txm_module_manager_tx_timer_info_get_dispatch+0x214>
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	3308      	adds	r3, #8
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	1d1a      	adds	r2, r3, #4
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b6:	3301      	adds	r3, #1
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d91b      	bls.n	80115f4 <_txm_module_manager_tx_timer_info_get_dispatch+0x24c>
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	3308      	adds	r3, #8
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d30c      	bcc.n	80115e6 <_txm_module_manager_tx_timer_info_get_dispatch+0x23e>
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	3308      	adds	r3, #8
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	1d1a      	adds	r2, r3, #4
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80115e0:	440b      	add	r3, r1
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d906      	bls.n	80115f4 <_txm_module_manager_tx_timer_info_get_dispatch+0x24c>
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	3308      	adds	r3, #8
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <_txm_module_manager_tx_timer_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 80115f0:	23f4      	movs	r3, #244	; 0xf4
 80115f2:	e049      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(TX_TIMER *)))
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	330c      	adds	r3, #12
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f113 0f05 	cmn.w	r3, #5
 80115fe:	d824      	bhi.n	801164a <_txm_module_manager_tx_timer_info_get_dispatch+0x2a2>
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	330c      	adds	r3, #12
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	68fa      	ldr	r2, [r7, #12]
 8011608:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801160a:	4293      	cmp	r3, r2
 801160c:	d308      	bcc.n	8011620 <_txm_module_manager_tx_timer_info_get_dispatch+0x278>
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	330c      	adds	r3, #12
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	1d1a      	adds	r2, r3, #4
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801161a:	3301      	adds	r3, #1
 801161c:	429a      	cmp	r2, r3
 801161e:	d91b      	bls.n	8011658 <_txm_module_manager_tx_timer_info_get_dispatch+0x2b0>
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	330c      	adds	r3, #12
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801162c:	429a      	cmp	r2, r3
 801162e:	d30c      	bcc.n	801164a <_txm_module_manager_tx_timer_info_get_dispatch+0x2a2>
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	330c      	adds	r3, #12
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	1d1a      	adds	r2, r3, #4
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011644:	440b      	add	r3, r1
 8011646:	429a      	cmp	r2, r3
 8011648:	d906      	bls.n	8011658 <_txm_module_manager_tx_timer_info_get_dispatch+0x2b0>
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	330c      	adds	r3, #12
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <_txm_module_manager_tx_timer_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 8011654:	23f4      	movs	r3, #244	; 0xf4
 8011656:	e017      	b.n	8011688 <_txm_module_manager_tx_timer_info_get_dispatch+0x2e0>
    }

    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8011658:	68b8      	ldr	r0, [r7, #8]
 801165a:	6879      	ldr	r1, [r7, #4]
        (TX_TIMER *) param_0,
        (CHAR **) param_1,
        (UINT *) extra_parameters[0],
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8011660:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	3304      	adds	r3, #4
 8011666:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8011668:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	3308      	adds	r3, #8
 801166e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8011670:	461a      	mov	r2, r3
        (TX_TIMER **) extra_parameters[3]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	330c      	adds	r3, #12
 8011676:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	9200      	str	r2, [sp, #0]
 801167c:	462b      	mov	r3, r5
 801167e:	4622      	mov	r2, r4
 8011680:	f7f7 ffc4 	bl	800960c <_txe_timer_info_get>
 8011684:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8011686:	697b      	ldr	r3, [r7, #20]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bdb0      	pop	{r4, r5, r7, pc}

08011690 <_txm_module_manager_tx_timer_performance_info_get_dispatch>:
    ULONG *deactivates, -> extra_parameters[1]
    ULONG *expirations, -> extra_parameters[2]
    ULONG *expiration_adjusts -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011690:	b5b0      	push	{r4, r5, r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af02      	add	r7, sp, #8
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
 801169c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	f003 0302 	and.w	r3, r3, #2
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f000 814a 	beq.w	8011940 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2b0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80116b2:	d81f      	bhi.n	80116f4 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x64>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b8:	461a      	mov	r2, r3
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	4293      	cmp	r3, r2
 80116be:	d307      	bcc.n	80116d0 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x40>
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	3301      	adds	r3, #1
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d923      	bls.n	8011718 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x88>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80116d6:	68ba      	ldr	r2, [r7, #8]
 80116d8:	429a      	cmp	r2, r3
 80116da:	d30b      	bcc.n	80116f4 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x64>
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80116ee:	440b      	add	r3, r1
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d911      	bls.n	8011718 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x88>
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80116fa:	d812      	bhi.n	8011722 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x92>
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	461a      	mov	r2, r3
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4293      	cmp	r3, r2
 8011706:	d30c      	bcc.n	8011722 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x92>
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	3301      	adds	r3, #1
 8011714:	429a      	cmp	r2, r3
 8011716:	d804      	bhi.n	8011722 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x92>
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 801171e:	23f4      	movs	r3, #244	; 0xf4
 8011720:	e126      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f113 0f05 	cmn.w	r3, #5
 8011728:	d81d      	bhi.n	8011766 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xd6>
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801172e:	461a      	mov	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4293      	cmp	r3, r2
 8011734:	d306      	bcc.n	8011744 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xb4>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	1d1a      	adds	r2, r3, #4
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801173e:	3301      	adds	r3, #1
 8011740:	429a      	cmp	r2, r3
 8011742:	d915      	bls.n	8011770 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xe0>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d30a      	bcc.n	8011766 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xd6>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	1d1a      	adds	r2, r3, #4
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011760:	440b      	add	r3, r1
 8011762:	429a      	cmp	r2, r3
 8011764:	d904      	bls.n	8011770 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xe0>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d001      	beq.n	8011770 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xe0>
            return(TXM_MODULE_INVALID_MEMORY);
 801176c:	23f4      	movs	r3, #244	; 0xf4
 801176e:	e0ff      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	f113 0f11 	cmn.w	r3, #17
 8011776:	d81f      	bhi.n	80117b8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x128>
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177c:	461a      	mov	r2, r3
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	429a      	cmp	r2, r3
 8011782:	d807      	bhi.n	8011794 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x104>
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	f103 0210 	add.w	r2, r3, #16
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801178e:	3301      	adds	r3, #1
 8011790:	429a      	cmp	r2, r3
 8011792:	d913      	bls.n	80117bc <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x12c>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	429a      	cmp	r2, r3
 801179e:	d80b      	bhi.n	80117b8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x128>
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	f103 0210 	add.w	r2, r3, #16
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80117b2:	440b      	add	r3, r1
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d901      	bls.n	80117bc <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x12c>
            return(TXM_MODULE_INVALID_MEMORY);
 80117b8:	23f4      	movs	r3, #244	; 0xf4
 80117ba:	e0d9      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f113 0f05 	cmn.w	r3, #5
 80117c4:	d820      	bhi.n	8011808 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x178>
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	68fa      	ldr	r2, [r7, #12]
 80117cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d307      	bcc.n	80117e2 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x152>
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	1d1a      	adds	r2, r3, #4
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117dc:	3301      	adds	r3, #1
 80117de:	429a      	cmp	r2, r3
 80117e0:	d918      	bls.n	8011814 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x184>
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d30b      	bcc.n	8011808 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x178>
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	1d1a      	adds	r2, r3, #4
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011802:	440b      	add	r3, r1
 8011804:	429a      	cmp	r2, r3
 8011806:	d905      	bls.n	8011814 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x184>
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x184>
            return(TXM_MODULE_INVALID_MEMORY);
 8011810:	23f4      	movs	r3, #244	; 0xf4
 8011812:	e0ad      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	3304      	adds	r3, #4
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f113 0f05 	cmn.w	r3, #5
 801181e:	d824      	bhi.n	801186a <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x1da>
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	3304      	adds	r3, #4
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801182a:	4293      	cmp	r3, r2
 801182c:	d308      	bcc.n	8011840 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x1b0>
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	3304      	adds	r3, #4
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	1d1a      	adds	r2, r3, #4
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801183a:	3301      	adds	r3, #1
 801183c:	429a      	cmp	r2, r3
 801183e:	d91b      	bls.n	8011878 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x1e8>
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	3304      	adds	r3, #4
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801184c:	429a      	cmp	r2, r3
 801184e:	d30c      	bcc.n	801186a <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x1da>
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	3304      	adds	r3, #4
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	1d1a      	adds	r2, r3, #4
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011864:	440b      	add	r3, r1
 8011866:	429a      	cmp	r2, r3
 8011868:	d906      	bls.n	8011878 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x1e8>
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	3304      	adds	r3, #4
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x1e8>
            return(TXM_MODULE_INVALID_MEMORY);
 8011874:	23f4      	movs	r3, #244	; 0xf4
 8011876:	e07b      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	3308      	adds	r3, #8
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f113 0f05 	cmn.w	r3, #5
 8011882:	d824      	bhi.n	80118ce <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x23e>
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	3308      	adds	r3, #8
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801188e:	4293      	cmp	r3, r2
 8011890:	d308      	bcc.n	80118a4 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x214>
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	3308      	adds	r3, #8
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	1d1a      	adds	r2, r3, #4
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801189e:	3301      	adds	r3, #1
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d91b      	bls.n	80118dc <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x24c>
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	3308      	adds	r3, #8
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d30c      	bcc.n	80118ce <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x23e>
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	3308      	adds	r3, #8
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	1d1a      	adds	r2, r3, #4
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80118c8:	440b      	add	r3, r1
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d906      	bls.n	80118dc <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x24c>
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	3308      	adds	r3, #8
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d001      	beq.n	80118dc <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x24c>
            return(TXM_MODULE_INVALID_MEMORY);
 80118d8:	23f4      	movs	r3, #244	; 0xf4
 80118da:	e049      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	330c      	adds	r3, #12
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	f113 0f05 	cmn.w	r3, #5
 80118e6:	d824      	bhi.n	8011932 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2a2>
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	330c      	adds	r3, #12
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	68fa      	ldr	r2, [r7, #12]
 80118f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d308      	bcc.n	8011908 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x278>
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	330c      	adds	r3, #12
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	1d1a      	adds	r2, r3, #4
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011902:	3301      	adds	r3, #1
 8011904:	429a      	cmp	r2, r3
 8011906:	d91b      	bls.n	8011940 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2b0>
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	330c      	adds	r3, #12
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011914:	429a      	cmp	r2, r3
 8011916:	d30c      	bcc.n	8011932 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2a2>
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	330c      	adds	r3, #12
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	1d1a      	adds	r2, r3, #4
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801192c:	440b      	add	r3, r1
 801192e:	429a      	cmp	r2, r3
 8011930:	d906      	bls.n	8011940 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2b0>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	330c      	adds	r3, #12
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2b0>
            return(TXM_MODULE_INVALID_MEMORY);
 801193c:	23f4      	movs	r3, #244	; 0xf4
 801193e:	e017      	b.n	8011970 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x2e0>
    }

    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8011940:	68b8      	ldr	r0, [r7, #8]
 8011942:	6879      	ldr	r1, [r7, #4]
        (TX_TIMER *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8011948:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	3304      	adds	r3, #4
 801194e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8011950:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	3308      	adds	r3, #8
 8011956:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8011958:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3]
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	330c      	adds	r3, #12
 801195e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	9200      	str	r2, [sp, #0]
 8011964:	462b      	mov	r3, r5
 8011966:	4622      	mov	r2, r4
 8011968:	f003 f88a 	bl	8014a80 <_tx_timer_performance_info_get>
 801196c:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 801196e:	697b      	ldr	r3, [r7, #20]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3718      	adds	r7, #24
 8011974:	46bd      	mov	sp, r7
 8011976:	bdb0      	pop	{r4, r5, r7, pc}

08011978 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch>:
    ULONG *deactivates, -> extra_parameters[0]
    ULONG *expirations, -> extra_parameters[1]
    ULONG *expiration_adjusts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011978:	b590      	push	{r4, r7, lr}
 801197a:	b089      	sub	sp, #36	; 0x24
 801197c:	af02      	add	r7, sp, #8
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	607a      	str	r2, [r7, #4]
 8011984:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	f003 0302 	and.w	r3, r3, #2
 801198e:	2b00      	cmp	r3, #0
 8011990:	f000 8104 	beq.w	8011b9c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x224>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	f113 0f05 	cmn.w	r3, #5
 801199a:	d81d      	bhi.n	80119d8 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x60>
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a0:	461a      	mov	r2, r3
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d306      	bcc.n	80119b6 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x3e>
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	1d1a      	adds	r2, r3, #4
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119b0:	3301      	adds	r3, #1
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d915      	bls.n	80119e2 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x6a>
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80119bc:	68ba      	ldr	r2, [r7, #8]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d30a      	bcc.n	80119d8 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x60>
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	1d1a      	adds	r2, r3, #4
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80119d2:	440b      	add	r3, r1
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d904      	bls.n	80119e2 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x6a>
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d001      	beq.n	80119e2 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x6a>
            return(TXM_MODULE_INVALID_MEMORY);
 80119de:	23f4      	movs	r3, #244	; 0xf4
 80119e0:	e0ee      	b.n	8011bc0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x248>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f113 0f05 	cmn.w	r3, #5
 80119e8:	d81d      	bhi.n	8011a26 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xae>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ee:	461a      	mov	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d306      	bcc.n	8011a04 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x8c>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	1d1a      	adds	r2, r3, #4
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119fe:	3301      	adds	r3, #1
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d915      	bls.n	8011a30 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xb8>
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d30a      	bcc.n	8011a26 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xae>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	1d1a      	adds	r2, r3, #4
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011a20:	440b      	add	r3, r1
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d904      	bls.n	8011a30 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xb8>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xb8>
            return(TXM_MODULE_INVALID_MEMORY);
 8011a2c:	23f4      	movs	r3, #244	; 0xf4
 8011a2e:	e0c7      	b.n	8011bc0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x248>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	f113 0f0d 	cmn.w	r3, #13
 8011a36:	d81f      	bhi.n	8011a78 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x100>
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d807      	bhi.n	8011a54 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xdc>
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	f103 020c 	add.w	r2, r3, #12
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a4e:	3301      	adds	r3, #1
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d913      	bls.n	8011a7c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x104>
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d80b      	bhi.n	8011a78 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x100>
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	f103 020c 	add.w	r2, r3, #12
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011a72:	440b      	add	r3, r1
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d901      	bls.n	8011a7c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x104>
            return(TXM_MODULE_INVALID_MEMORY);
 8011a78:	23f4      	movs	r3, #244	; 0xf4
 8011a7a:	e0a1      	b.n	8011bc0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x248>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f113 0f05 	cmn.w	r3, #5
 8011a84:	d820      	bhi.n	8011ac8 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x150>
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	68fa      	ldr	r2, [r7, #12]
 8011a8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d307      	bcc.n	8011aa2 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x12a>
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	1d1a      	adds	r2, r3, #4
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d918      	bls.n	8011ad4 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x15c>
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d30b      	bcc.n	8011ac8 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x150>
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	1d1a      	adds	r2, r3, #4
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011ac2:	440b      	add	r3, r1
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d905      	bls.n	8011ad4 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x15c>
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d001      	beq.n	8011ad4 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x15c>
            return(TXM_MODULE_INVALID_MEMORY);
 8011ad0:	23f4      	movs	r3, #244	; 0xf4
 8011ad2:	e075      	b.n	8011bc0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x248>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f113 0f05 	cmn.w	r3, #5
 8011ade:	d824      	bhi.n	8011b2a <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x1b2>
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	3304      	adds	r3, #4
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	68fa      	ldr	r2, [r7, #12]
 8011ae8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d308      	bcc.n	8011b00 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x188>
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	3304      	adds	r3, #4
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	1d1a      	adds	r2, r3, #4
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011afa:	3301      	adds	r3, #1
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d91b      	bls.n	8011b38 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x1c0>
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	3304      	adds	r3, #4
 8011b04:	681a      	ldr	r2, [r3, #0]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d30c      	bcc.n	8011b2a <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x1b2>
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	3304      	adds	r3, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	1d1a      	adds	r2, r3, #4
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011b24:	440b      	add	r3, r1
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d906      	bls.n	8011b38 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x1c0>
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d001      	beq.n	8011b38 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x1c0>
            return(TXM_MODULE_INVALID_MEMORY);
 8011b34:	23f4      	movs	r3, #244	; 0xf4
 8011b36:	e043      	b.n	8011bc0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x248>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	3308      	adds	r3, #8
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f113 0f05 	cmn.w	r3, #5
 8011b42:	d824      	bhi.n	8011b8e <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x216>
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	3308      	adds	r3, #8
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d308      	bcc.n	8011b64 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x1ec>
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	3308      	adds	r3, #8
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	1d1a      	adds	r2, r3, #4
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5e:	3301      	adds	r3, #1
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d91b      	bls.n	8011b9c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x224>
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	3308      	adds	r3, #8
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d30c      	bcc.n	8011b8e <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x216>
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	3308      	adds	r3, #8
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	1d1a      	adds	r2, r3, #4
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011b88:	440b      	add	r3, r1
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d906      	bls.n	8011b9c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x224>
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	3308      	adds	r3, #8
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d001      	beq.n	8011b9c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x224>
            return(TXM_MODULE_INVALID_MEMORY);
 8011b98:	23f4      	movs	r3, #244	; 0xf4
 8011b9a:	e011      	b.n	8011bc0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x248>
    }

    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8011b9c:	68b8      	ldr	r0, [r7, #8]
 8011b9e:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8011ba4:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	3304      	adds	r3, #4
 8011baa:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8011bac:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	3308      	adds	r3, #8
 8011bb2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	4623      	mov	r3, r4
 8011bb8:	f002 ff96 	bl	8014ae8 <_tx_timer_performance_system_info_get>
 8011bbc:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8011bbe:	697b      	ldr	r3, [r7, #20]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	371c      	adds	r7, #28
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd90      	pop	{r4, r7, pc}

08011bc8 <_txm_module_manager_tx_trace_buffer_full_notify_dispatch>:
#ifndef TXM_TRACE_BUFFER_FULL_NOTIFY_CALL_NOT_USED
/* UINT _tx_trace_buffer_full_notify(
    VOID (*full_buffer_callback)(VOID *buffer) -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_buffer_full_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_trace_buffer_full_notify(
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f002 ffb5 	bl	8014b44 <_tx_trace_buffer_full_notify>
 8011bda:	60f8      	str	r0, [r7, #12]
        (VOID (*)(VOID *buffer)) param_0
    );
    return(return_value);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <_txm_module_manager_tx_trace_disable_dispatch>:
#endif

#ifndef TXM_TRACE_DISABLE_CALL_NOT_USED
/* UINT _tx_trace_disable(); */
static ALIGN_TYPE _txm_module_manager_tx_trace_disable_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b086      	sub	sp, #24
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	60f8      	str	r0, [r7, #12]
 8011bee:	60b9      	str	r1, [r7, #8]
 8011bf0:	607a      	str	r2, [r7, #4]
 8011bf2:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	f003 0301 	and.w	r3, r3, #1
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d001      	beq.n	8011c04 <_txm_module_manager_tx_trace_disable_dispatch+0x1e>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8011c00:	23f3      	movs	r3, #243	; 0xf3
 8011c02:	e003      	b.n	8011c0c <_txm_module_manager_tx_trace_disable_dispatch+0x26>

    return_value = (ALIGN_TYPE) _tx_trace_disable();
 8011c04:	f002 ffb1 	bl	8014b6a <_tx_trace_disable>
 8011c08:	6178      	str	r0, [r7, #20]
    return(return_value);
 8011c0a:	697b      	ldr	r3, [r7, #20]
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <_txm_module_manager_tx_trace_enable_dispatch>:
    VOID *trace_buffer_start, -> param_0
    ULONG trace_buffer_size, -> param_1
    ULONG registry_entries -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_enable_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	607a      	str	r2, [r7, #4]
 8011c20:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	f003 0301 	and.w	r3, r3, #1
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <_txm_module_manager_tx_trace_enable_dispatch+0x1e>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8011c2e:	23f3      	movs	r3, #243	; 0xf3
 8011c30:	e007      	b.n	8011c42 <_txm_module_manager_tx_trace_enable_dispatch+0x2e>

    return_value = (ALIGN_TYPE) _tx_trace_enable(
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	683a      	ldr	r2, [r7, #0]
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f002 ff9e 	bl	8014b7a <_tx_trace_enable>
 8011c3e:	6178      	str	r0, [r7, #20]
        (VOID *) param_0,
        (ULONG) param_1,
        (ULONG) param_2
    );
    return(return_value);
 8011c40:	697b      	ldr	r3, [r7, #20]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3718      	adds	r7, #24
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <_txm_module_manager_tx_trace_event_filter_dispatch>:
#ifndef TXM_TRACE_EVENT_FILTER_CALL_NOT_USED
/* UINT _tx_trace_event_filter(
    ULONG event_filter_bits -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_event_filter_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b084      	sub	sp, #16
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_trace_event_filter(
 8011c54:	6838      	ldr	r0, [r7, #0]
 8011c56:	f002 ffb1 	bl	8014bbc <_tx_trace_event_filter>
 8011c5a:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <_txm_module_manager_tx_trace_event_unfilter_dispatch>:
#ifndef TXM_TRACE_EVENT_UNFILTER_CALL_NOT_USED
/* UINT _tx_trace_event_unfilter(
    ULONG event_unfilter_bits -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_event_unfilter_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b084      	sub	sp, #16
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
 8011c6e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_trace_event_unfilter(
 8011c70:	6838      	ldr	r0, [r7, #0]
 8011c72:	f002 ffb6 	bl	8014be2 <_tx_trace_event_unfilter>
 8011c76:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 8011c78:	68fb      	ldr	r3, [r7, #12]
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <_txm_module_manager_tx_trace_interrupt_control_dispatch>:
#ifndef TXM_TRACE_INTERRUPT_CONTROL_CALL_NOT_USED
/* UINT _tx_trace_interrupt_control(
    UINT new_posture -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_interrupt_control_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b084      	sub	sp, #16
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
 8011c8a:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	f003 0301 	and.w	r3, r3, #1
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d001      	beq.n	8011c9c <_txm_module_manager_tx_trace_interrupt_control_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8011c98:	23f3      	movs	r3, #243	; 0xf3
 8011c9a:	e004      	b.n	8011ca6 <_txm_module_manager_tx_trace_interrupt_control_dispatch+0x24>

    return_value = (ALIGN_TYPE) _tx_trace_interrupt_control(
 8011c9c:	6838      	ldr	r0, [r7, #0]
 8011c9e:	f002 ffb3 	bl	8014c08 <_tx_trace_interrupt_control>
 8011ca2:	60f8      	str	r0, [r7, #12]
        (UINT) param_0
    );
    return(return_value);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <_txm_module_manager_tx_trace_isr_enter_insert_dispatch>:
#ifndef TXM_TRACE_ISR_ENTER_INSERT_CALL_NOT_USED
/* VOID _tx_trace_isr_enter_insert(
    ULONG isr_id -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_isr_enter_insert_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b082      	sub	sp, #8
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	6039      	str	r1, [r7, #0]

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <_txm_module_manager_tx_trace_isr_enter_insert_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8011cc4:	23f3      	movs	r3, #243	; 0xf3
 8011cc6:	e003      	b.n	8011cd0 <_txm_module_manager_tx_trace_isr_enter_insert_dispatch+0x22>

    _tx_trace_isr_enter_insert(
 8011cc8:	6838      	ldr	r0, [r7, #0]
 8011cca:	f002 ffaa 	bl	8014c22 <_tx_trace_isr_enter_insert>
        (ULONG) param_0
    );
    return(TX_SUCCESS);
 8011cce:	2300      	movs	r3, #0
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <_txm_module_manager_tx_trace_isr_exit_insert_dispatch>:
#ifndef TXM_TRACE_ISR_EXIT_INSERT_CALL_NOT_USED
/* VOID _tx_trace_isr_exit_insert(
    ULONG isr_id -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_isr_exit_insert_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	68db      	ldr	r3, [r3, #12]
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d001      	beq.n	8011cf2 <_txm_module_manager_tx_trace_isr_exit_insert_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8011cee:	23f3      	movs	r3, #243	; 0xf3
 8011cf0:	e003      	b.n	8011cfa <_txm_module_manager_tx_trace_isr_exit_insert_dispatch+0x22>

    _tx_trace_isr_exit_insert(
 8011cf2:	6838      	ldr	r0, [r7, #0]
 8011cf4:	f002 ffae 	bl	8014c54 <_tx_trace_isr_exit_insert>
        (ULONG) param_0
    );
    return(TX_SUCCESS);
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <_txm_module_manager_tx_trace_user_event_insert_dispatch>:
    ULONG info_field_2, -> extra_parameters[0]
    ULONG info_field_3, -> extra_parameters[1]
    ULONG info_field_4 -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_user_event_insert_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b088      	sub	sp, #32
 8011d06:	af02      	add	r7, sp, #8
 8011d08:	60f8      	str	r0, [r7, #12]
 8011d0a:	60b9      	str	r1, [r7, #8]
 8011d0c:	607a      	str	r2, [r7, #4]
 8011d0e:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	68db      	ldr	r3, [r3, #12]
 8011d14:	f003 0302 	and.w	r3, r3, #2
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d025      	beq.n	8011d68 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x66>
    {
        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	f113 0f0d 	cmn.w	r3, #13
 8011d22:	d81f      	bhi.n	8011d64 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x62>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d28:	461a      	mov	r2, r3
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d807      	bhi.n	8011d40 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x3e>
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	f103 020c 	add.w	r2, r3, #12
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d913      	bls.n	8011d68 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x66>
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d80b      	bhi.n	8011d64 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x62>
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	f103 020c 	add.w	r2, r3, #12
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011d5e:	440b      	add	r3, r1
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d901      	bls.n	8011d68 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x66>
            return(TXM_MODULE_INVALID_MEMORY);
 8011d64:	23f4      	movs	r3, #244	; 0xf4
 8011d66:	e00f      	b.n	8011d88 <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x86>
    }

    return_value = (ALIGN_TYPE) _tx_trace_user_event_insert(
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	681a      	ldr	r2, [r3, #0]
        (ULONG) param_0,
        (ULONG) param_1,
        (ULONG) extra_parameters[0],
        (ULONG) extra_parameters[1],
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _tx_trace_user_event_insert(
 8011d70:	6819      	ldr	r1, [r3, #0]
        (ULONG) extra_parameters[2]
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _tx_trace_user_event_insert(
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	9300      	str	r3, [sp, #0]
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	68b8      	ldr	r0, [r7, #8]
 8011d80:	f002 ff81 	bl	8014c86 <_tx_trace_user_event_insert>
 8011d84:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8011d86:	697b      	ldr	r3, [r7, #20]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3718      	adds	r7, #24
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <_txm_module_manager_txm_module_object_allocate_dispatch>:
/* UINT _txm_module_object_allocate(
    VOID **object_ptr, -> param_0
    ULONG object_size -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	f003 0302 	and.w	r3, r3, #2
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d026      	beq.n	8011df6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(VOID *)))
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	f113 0f05 	cmn.w	r3, #5
 8011dae:	d81d      	bhi.n	8011dec <_txm_module_manager_txm_module_object_allocate_dispatch+0x5c>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db4:	461a      	mov	r2, r3
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d306      	bcc.n	8011dca <_txm_module_manager_txm_module_object_allocate_dispatch+0x3a>
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	1d1a      	adds	r2, r3, #4
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d915      	bls.n	8011df6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011dd0:	68ba      	ldr	r2, [r7, #8]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d30a      	bcc.n	8011dec <_txm_module_manager_txm_module_object_allocate_dispatch+0x5c>
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	1d1a      	adds	r2, r3, #4
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011de6:	440b      	add	r3, r1
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d904      	bls.n	8011df6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d001      	beq.n	8011df6 <_txm_module_manager_txm_module_object_allocate_dispatch+0x66>
            return(TXM_MODULE_INVALID_MEMORY);
 8011df2:	23f4      	movs	r3, #244	; 0xf4
 8011df4:	e007      	b.n	8011e06 <_txm_module_manager_txm_module_object_allocate_dispatch+0x76>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_allocate(
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	6879      	ldr	r1, [r7, #4]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f000 ff77 	bl	8012cf0 <_txm_module_manager_object_allocate>
 8011e02:	6178      	str	r0, [r7, #20]
        (VOID **) param_0,
        (ULONG) param_1,
        module_instance
    );
    return(return_value);
 8011e04:	697b      	ldr	r3, [r7, #20]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3718      	adds	r7, #24
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
	...

08011e10 <_txm_module_manager_txm_module_object_deallocate_dispatch>:
#ifndef TXM_MODULE_OBJECT_DEALLOCATE_CALL_NOT_USED
/* UINT _txm_module_object_deallocate(
    VOID *object_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_deallocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b086      	sub	sp, #24
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
ALIGN_TYPE return_value;
TXM_MODULE_ALLOCATED_OBJECT *object_ptr;
ALIGN_TYPE object_end;
ALIGN_TYPE object_pool_end;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	f003 0302 	and.w	r3, r3, #2
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d024      	beq.n	8011e70 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x60>
    {
        /* Is the object pool created?  */
        if (_txm_module_manager_object_pool_created == TX_TRUE)
 8011e26:	4b17      	ldr	r3, [pc, #92]	; (8011e84 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x74>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d120      	bne.n	8011e70 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x60>
        {

            /* Get the module allocated object.  */
            object_ptr =  ((TXM_MODULE_ALLOCATED_OBJECT *) param_0) - 1;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	3b10      	subs	r3, #16
 8011e32:	617b      	str	r3, [r7, #20]

            /* Get the end address of the object pool.  */
            object_pool_end = (ALIGN_TYPE) (_txm_module_manager_object_pool.tx_byte_pool_start + _txm_module_manager_object_pool.tx_byte_pool_size);
 8011e34:	4b14      	ldr	r3, [pc, #80]	; (8011e88 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x78>)
 8011e36:	699a      	ldr	r2, [r3, #24]
 8011e38:	4b13      	ldr	r3, [pc, #76]	; (8011e88 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x78>)
 8011e3a:	69db      	ldr	r3, [r3, #28]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	613b      	str	r3, [r7, #16]

            /* Check that the pointer is in the object pool.  */
            if ((ALIGN_TYPE) object_ptr < (ALIGN_TYPE) _txm_module_manager_object_pool.tx_byte_pool_start ||
 8011e40:	4b11      	ldr	r3, [pc, #68]	; (8011e88 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x78>)
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	461a      	mov	r2, r3
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d803      	bhi.n	8011e54 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x44>
                (ALIGN_TYPE) object_ptr >= (ALIGN_TYPE) object_pool_end)
 8011e4c:	697b      	ldr	r3, [r7, #20]
            if ((ALIGN_TYPE) object_ptr < (ALIGN_TYPE) _txm_module_manager_object_pool.tx_byte_pool_start ||
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d801      	bhi.n	8011e58 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x48>
            {
                /* Pointer is outside of the object pool.  */
                return(TXM_MODULE_INVALID_MEMORY);
 8011e54:	23f4      	movs	r3, #244	; 0xf4
 8011e56:	e011      	b.n	8011e7c <_txm_module_manager_txm_module_object_deallocate_dispatch+0x6c>
            }

            /* Get the end addresses of the object.  */
            object_end = ((ALIGN_TYPE) object_ptr) + sizeof(TXM_MODULE_ALLOCATED_OBJECT) + object_ptr -> txm_module_object_size;
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	68da      	ldr	r2, [r3, #12]
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	4413      	add	r3, r2
 8011e60:	3310      	adds	r3, #16
 8011e62:	60fb      	str	r3, [r7, #12]

            /* Check that the object is in the object pool.  */
            if (object_end >= object_pool_end)
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d301      	bcc.n	8011e70 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x60>
            {
                /* Object is outside of the object pool.  */
                return(TXM_MODULE_INVALID_MEMORY);
 8011e6c:	23f4      	movs	r3, #244	; 0xf4
 8011e6e:	e005      	b.n	8011e7c <_txm_module_manager_txm_module_object_deallocate_dispatch+0x6c>
            }
        }
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_deallocate(
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f000 ffa4 	bl	8012dc0 <_txm_module_manager_object_deallocate>
 8011e78:	60b8      	str	r0, [r7, #8]
        (VOID *) param_0
    );
    return(return_value);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3718      	adds	r7, #24
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	2000f600 	.word	0x2000f600
 8011e88:	2000f5cc 	.word	0x2000f5cc

08011e8c <_txm_module_manager_txm_module_object_pointer_get_dispatch>:
    UINT object_type, -> param_0
    CHAR *name, -> param_1
    VOID **object_ptr -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_pointer_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
 8011e98:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	f003 0302 	and.w	r3, r3, #2
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d05e      	beq.n	8011f64 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eac:	d01d      	beq.n	8011eea <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x5e>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d306      	bcc.n	8011ec8 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x3c>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	1c5a      	adds	r2, r3, #1
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d926      	bls.n	8011f16 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d30a      	bcc.n	8011eea <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x5e>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	1c5a      	adds	r2, r3, #1
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011ee4:	440b      	add	r3, r1
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d915      	bls.n	8011f16 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef0:	d00c      	beq.n	8011f0c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x80>
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	699b      	ldr	r3, [r3, #24]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	4293      	cmp	r3, r2
 8011efc:	d306      	bcc.n	8011f0c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x80>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	1c5a      	adds	r2, r3, #1
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	69db      	ldr	r3, [r3, #28]
 8011f06:	3301      	adds	r3, #1
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d904      	bls.n	8011f16 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d001      	beq.n	8011f16 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011f12:	23f4      	movs	r3, #244	; 0xf4
 8011f14:	e02e      	b.n	8011f74 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xe8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(VOID *)))
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	f113 0f05 	cmn.w	r3, #5
 8011f1c:	d81d      	bhi.n	8011f5a <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xce>
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f22:	461a      	mov	r2, r3
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d306      	bcc.n	8011f38 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xac>
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	1d1a      	adds	r2, r3, #4
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f32:	3301      	adds	r3, #1
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d915      	bls.n	8011f64 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011f3e:	683a      	ldr	r2, [r7, #0]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d30a      	bcc.n	8011f5a <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xce>
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	1d1a      	adds	r2, r3, #4
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011f54:	440b      	add	r3, r1
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d904      	bls.n	8011f64 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xd8>
            return(TXM_MODULE_INVALID_MEMORY);
 8011f60:	23f4      	movs	r3, #244	; 0xf4
 8011f62:	e007      	b.n	8011f74 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0xe8>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get(
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	683a      	ldr	r2, [r7, #0]
 8011f68:	4619      	mov	r1, r3
 8011f6a:	68b8      	ldr	r0, [r7, #8]
 8011f6c:	f000 ff8e 	bl	8012e8c <_txm_module_manager_object_pointer_get>
 8011f70:	6178      	str	r0, [r7, #20]
        (UINT) param_0,
        (CHAR *) param_1,
        (VOID **) param_2
    );
    return(return_value);
 8011f72:	697b      	ldr	r3, [r7, #20]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3718      	adds	r7, #24
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch>:
    CHAR *name, -> param_1
    UINT name_length, -> extra_parameters[0]
    VOID **object_ptr -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_pointer_get_extended_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b086      	sub	sp, #24
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	f003 0302 	and.w	r3, r3, #2
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f000 8090 	beq.w	80120b8 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x13c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9e:	d01d      	beq.n	8011fdc <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x60>
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d306      	bcc.n	8011fba <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x3e>
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	1c5a      	adds	r2, r3, #1
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d926      	bls.n	8012008 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x8c>
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d30a      	bcc.n	8011fdc <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x60>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	1c5a      	adds	r2, r3, #1
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011fd6:	440b      	add	r3, r1
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d915      	bls.n	8012008 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x8c>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe2:	d00c      	beq.n	8011ffe <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x82>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	699b      	ldr	r3, [r3, #24]
 8011fe8:	461a      	mov	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d306      	bcc.n	8011ffe <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x82>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	69db      	ldr	r3, [r3, #28]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d904      	bls.n	8012008 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x8c>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d001      	beq.n	8012008 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x8c>
            return(TXM_MODULE_INVALID_MEMORY);
 8012004:	23f4      	movs	r3, #244	; 0xf4
 8012006:	e062      	b.n	80120ce <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x152>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	f113 0f09 	cmn.w	r3, #9
 801200e:	d81f      	bhi.n	8012050 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xd4>
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012014:	461a      	mov	r2, r3
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	429a      	cmp	r2, r3
 801201a:	d807      	bhi.n	801202c <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xb0>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	f103 0208 	add.w	r2, r3, #8
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012026:	3301      	adds	r3, #1
 8012028:	429a      	cmp	r2, r3
 801202a:	d913      	bls.n	8012054 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xd8>
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	429a      	cmp	r2, r3
 8012036:	d80b      	bhi.n	8012050 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xd4>
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	f103 0208 	add.w	r2, r3, #8
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801204a:	440b      	add	r3, r1
 801204c:	429a      	cmp	r2, r3
 801204e:	d901      	bls.n	8012054 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xd8>
            return(TXM_MODULE_INVALID_MEMORY);
 8012050:	23f4      	movs	r3, #244	; 0xf4
 8012052:	e03c      	b.n	80120ce <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x152>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(VOID *)))
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	3304      	adds	r3, #4
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f113 0f05 	cmn.w	r3, #5
 801205e:	d824      	bhi.n	80120aa <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x12e>
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	3304      	adds	r3, #4
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	68fa      	ldr	r2, [r7, #12]
 8012068:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801206a:	4293      	cmp	r3, r2
 801206c:	d308      	bcc.n	8012080 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x104>
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	3304      	adds	r3, #4
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	1d1a      	adds	r2, r3, #4
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801207a:	3301      	adds	r3, #1
 801207c:	429a      	cmp	r2, r3
 801207e:	d91b      	bls.n	80120b8 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x13c>
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	3304      	adds	r3, #4
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801208c:	429a      	cmp	r2, r3
 801208e:	d30c      	bcc.n	80120aa <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x12e>
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	3304      	adds	r3, #4
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	1d1a      	adds	r2, r3, #4
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80120a4:	440b      	add	r3, r1
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d906      	bls.n	80120b8 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x13c>
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	3304      	adds	r3, #4
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d001      	beq.n	80120b8 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x13c>
            return(TXM_MODULE_INVALID_MEMORY);
 80120b4:	23f4      	movs	r3, #244	; 0xf4
 80120b6:	e00a      	b.n	80120ce <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x152>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get_extended(
 80120b8:	6879      	ldr	r1, [r7, #4]
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	681a      	ldr	r2, [r3, #0]
        (UINT) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (VOID **) extra_parameters[1]
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	3304      	adds	r3, #4
 80120c2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get_extended(
 80120c4:	68b8      	ldr	r0, [r7, #8]
 80120c6:	f000 fef5 	bl	8012eb4 <_txm_module_manager_object_pointer_get_extended>
 80120ca:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 80120cc:	697b      	ldr	r3, [r7, #20]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3718      	adds	r7, #24
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
	...

080120d8 <_txm_module_manager_kernel_dispatch>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ALIGN_TYPE _txm_module_manager_kernel_dispatch(ULONG kernel_request, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
 80120e4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value = TX_NOT_AVAILABLE;
 80120e6:	231d      	movs	r3, #29
 80120e8:	617b      	str	r3, [r7, #20]
TXM_MODULE_INSTANCE *module_instance;


    /* Get the module instance.  */
    module_instance = _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 80120ea:	4bba      	ldr	r3, [pc, #744]	; (80123d4 <_txm_module_manager_kernel_dispatch+0x2fc>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120f2:	613b      	str	r3, [r7, #16]

    /* Sanity-check for a valid module instance.  */
    if (module_instance == TX_NULL)
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d101      	bne.n	80120fe <_txm_module_manager_kernel_dispatch+0x26>
    {
        /* Just return!  */
        return(TXM_MODULE_INVALID);
 80120fa:	23f2      	movs	r3, #242	; 0xf2
 80120fc:	e387      	b.n	801280e <_txm_module_manager_kernel_dispatch+0x736>
    }

    switch (kernel_request)
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	3b01      	subs	r3, #1
 8012102:	2b5f      	cmp	r3, #95	; 0x5f
 8012104:	f200 8374 	bhi.w	80127f0 <_txm_module_manager_kernel_dispatch+0x718>
 8012108:	a201      	add	r2, pc, #4	; (adr r2, 8012110 <_txm_module_manager_kernel_dispatch+0x38>)
 801210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210e:	bf00      	nop
 8012110:	08012291 	.word	0x08012291
 8012114:	080122a1 	.word	0x080122a1
 8012118:	080122b1 	.word	0x080122b1
 801211c:	080122bd 	.word	0x080122bd
 8012120:	080122cd 	.word	0x080122cd
 8012124:	080122dd 	.word	0x080122dd
 8012128:	080122ed 	.word	0x080122ed
 801212c:	080122f9 	.word	0x080122f9
 8012130:	08012305 	.word	0x08012305
 8012134:	08012315 	.word	0x08012315
 8012138:	08012325 	.word	0x08012325
 801213c:	08012331 	.word	0x08012331
 8012140:	08012341 	.word	0x08012341
 8012144:	08012351 	.word	0x08012351
 8012148:	08012361 	.word	0x08012361
 801214c:	0801236d 	.word	0x0801236d
 8012150:	08012379 	.word	0x08012379
 8012154:	08012389 	.word	0x08012389
 8012158:	08012395 	.word	0x08012395
 801215c:	080123a5 	.word	0x080123a5
 8012160:	080123b5 	.word	0x080123b5
 8012164:	080123c5 	.word	0x080123c5
 8012168:	080123d9 	.word	0x080123d9
 801216c:	080123e9 	.word	0x080123e9
 8012170:	080125e3 	.word	0x080125e3
 8012174:	080123f7 	.word	0x080123f7
 8012178:	08012407 	.word	0x08012407
 801217c:	08012413 	.word	0x08012413
 8012180:	08012421 	.word	0x08012421
 8012184:	08012431 	.word	0x08012431
 8012188:	08012441 	.word	0x08012441
 801218c:	08012451 	.word	0x08012451
 8012190:	0801245d 	.word	0x0801245d
 8012194:	08012469 	.word	0x08012469
 8012198:	08012479 	.word	0x08012479
 801219c:	08012485 	.word	0x08012485
 80121a0:	08012491 	.word	0x08012491
 80121a4:	080124a1 	.word	0x080124a1
 80121a8:	080124b1 	.word	0x080124b1
 80121ac:	080124c1 	.word	0x080124c1
 80121b0:	080124d1 	.word	0x080124d1
 80121b4:	080124dd 	.word	0x080124dd
 80121b8:	080124ed 	.word	0x080124ed
 80121bc:	080124fd 	.word	0x080124fd
 80121c0:	0801250b 	.word	0x0801250b
 80121c4:	08012519 	.word	0x08012519
 80121c8:	08012529 	.word	0x08012529
 80121cc:	08012535 	.word	0x08012535
 80121d0:	08012543 	.word	0x08012543
 80121d4:	08012553 	.word	0x08012553
 80121d8:	08012563 	.word	0x08012563
 80121dc:	08012573 	.word	0x08012573
 80121e0:	0801257f 	.word	0x0801257f
 80121e4:	0801258b 	.word	0x0801258b
 80121e8:	08012599 	.word	0x08012599
 80121ec:	080125a9 	.word	0x080125a9
 80121f0:	080125b5 	.word	0x080125b5
 80121f4:	080125c3 	.word	0x080125c3
 80121f8:	080125d3 	.word	0x080125d3
 80121fc:	080125ef 	.word	0x080125ef
 8012200:	080125ff 	.word	0x080125ff
 8012204:	0801260f 	.word	0x0801260f
 8012208:	0801261f 	.word	0x0801261f
 801220c:	0801262f 	.word	0x0801262f
 8012210:	0801263f 	.word	0x0801263f
 8012214:	0801264b 	.word	0x0801264b
 8012218:	08012657 	.word	0x08012657
 801221c:	08012663 	.word	0x08012663
 8012220:	0801266f 	.word	0x0801266f
 8012224:	08012687 	.word	0x08012687
 8012228:	08012693 	.word	0x08012693
 801222c:	080126a3 	.word	0x080126a3
 8012230:	080126af 	.word	0x080126af
 8012234:	080126bf 	.word	0x080126bf
 8012238:	080126cb 	.word	0x080126cb
 801223c:	080126d7 	.word	0x080126d7
 8012240:	080126e7 	.word	0x080126e7
 8012244:	080126f7 	.word	0x080126f7
 8012248:	08012703 	.word	0x08012703
 801224c:	0801270f 	.word	0x0801270f
 8012250:	0801271f 	.word	0x0801271f
 8012254:	0801272f 	.word	0x0801272f
 8012258:	0801275b 	.word	0x0801275b
 801225c:	0801276b 	.word	0x0801276b
 8012260:	08012777 	.word	0x08012777
 8012264:	0801274b 	.word	0x0801274b
 8012268:	08012783 	.word	0x08012783
 801226c:	0801278f 	.word	0x0801278f
 8012270:	0801279b 	.word	0x0801279b
 8012274:	0801273f 	.word	0x0801273f
 8012278:	080127a7 	.word	0x080127a7
 801227c:	0801267b 	.word	0x0801267b
 8012280:	080127d1 	.word	0x080127d1
 8012284:	080127e1 	.word	0x080127e1
 8012288:	080127b7 	.word	0x080127b7
 801228c:	080127c5 	.word	0x080127c5
    {
    #ifndef TXM_BLOCK_ALLOCATE_CALL_NOT_USED
    case TXM_BLOCK_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_tx_block_allocate_dispatch(module_instance, param_0, param_1, param_2);
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	68b9      	ldr	r1, [r7, #8]
 8012296:	6938      	ldr	r0, [r7, #16]
 8012298:	f7f8 f80a 	bl	800a2b0 <_txm_module_manager_tx_block_allocate_dispatch>
 801229c:	6178      	str	r0, [r7, #20]
        break;
 801229e:	e2b5      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_CREATE_CALL_NOT_USED
    case TXM_BLOCK_POOL_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	68b9      	ldr	r1, [r7, #8]
 80122a6:	6938      	ldr	r0, [r7, #16]
 80122a8:	f7f8 f87e 	bl	800a3a8 <_txm_module_manager_tx_block_pool_create_dispatch>
 80122ac:	6178      	str	r0, [r7, #20]
        break;
 80122ae:	e2ad      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_DELETE_CALL_NOT_USED
    case TXM_BLOCK_POOL_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_delete_dispatch(module_instance, param_0);
 80122b0:	68b9      	ldr	r1, [r7, #8]
 80122b2:	6938      	ldr	r0, [r7, #16]
 80122b4:	f7f8 f964 	bl	800a580 <_txm_module_manager_tx_block_pool_delete_dispatch>
 80122b8:	6178      	str	r0, [r7, #20]
        break;
 80122ba:	e2a7      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_INFO_GET_CALL_NOT_USED
    case TXM_BLOCK_POOL_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	68b9      	ldr	r1, [r7, #8]
 80122c2:	6938      	ldr	r0, [r7, #16]
 80122c4:	f7f8 f9b4 	bl	800a630 <_txm_module_manager_tx_block_pool_info_get_dispatch>
 80122c8:	6178      	str	r0, [r7, #20]
        break;
 80122ca:	e29f      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	68b9      	ldr	r1, [r7, #8]
 80122d2:	6938      	ldr	r0, [r7, #16]
 80122d4:	f7f8 fb57 	bl	800a986 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch>
 80122d8:	6178      	str	r0, [r7, #20]
        break;
 80122da:	e297      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	68b9      	ldr	r1, [r7, #8]
 80122e2:	6938      	ldr	r0, [r7, #16]
 80122e4:	f7f8 fc8b 	bl	800abfe <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch>
 80122e8:	6178      	str	r0, [r7, #20]
        break;
 80122ea:	e28f      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_PRIORITIZE_CALL_NOT_USED
    case TXM_BLOCK_POOL_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_prioritize_dispatch(module_instance, param_0);
 80122ec:	68b9      	ldr	r1, [r7, #8]
 80122ee:	6938      	ldr	r0, [r7, #16]
 80122f0:	f7f8 fd75 	bl	800adde <_txm_module_manager_tx_block_pool_prioritize_dispatch>
 80122f4:	6178      	str	r0, [r7, #20]
        break;
 80122f6:	e289      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_RELEASE_CALL_NOT_USED
    case TXM_BLOCK_RELEASE_CALL:
    {
        return_value = _txm_module_manager_tx_block_release_dispatch(module_instance, param_0);
 80122f8:	68b9      	ldr	r1, [r7, #8]
 80122fa:	6938      	ldr	r0, [r7, #16]
 80122fc:	f7f8 fdbf 	bl	800ae7e <_txm_module_manager_tx_block_release_dispatch>
 8012300:	6178      	str	r0, [r7, #20]
        break;
 8012302:	e283      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_ALLOCATE_CALL_NOT_USED
    case TXM_BYTE_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_allocate_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	68b9      	ldr	r1, [r7, #8]
 801230a:	6938      	ldr	r0, [r7, #16]
 801230c:	f7f8 fdfa 	bl	800af04 <_txm_module_manager_tx_byte_allocate_dispatch>
 8012310:	6178      	str	r0, [r7, #20]
        break;
 8012312:	e27b      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_CREATE_CALL_NOT_USED
    case TXM_BYTE_POOL_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	68b9      	ldr	r1, [r7, #8]
 801231a:	6938      	ldr	r0, [r7, #16]
 801231c:	f7f8 fe98 	bl	800b050 <_txm_module_manager_tx_byte_pool_create_dispatch>
 8012320:	6178      	str	r0, [r7, #20]
        break;
 8012322:	e273      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_DELETE_CALL_NOT_USED
    case TXM_BYTE_POOL_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_delete_dispatch(module_instance, param_0);
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	6938      	ldr	r0, [r7, #16]
 8012328:	f7f8 ff72 	bl	800b210 <_txm_module_manager_tx_byte_pool_delete_dispatch>
 801232c:	6178      	str	r0, [r7, #20]
        break;
 801232e:	e26d      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_INFO_GET_CALL_NOT_USED
    case TXM_BYTE_POOL_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	68b9      	ldr	r1, [r7, #8]
 8012336:	6938      	ldr	r0, [r7, #16]
 8012338:	f7f8 ffc2 	bl	800b2c0 <_txm_module_manager_tx_byte_pool_info_get_dispatch>
 801233c:	6178      	str	r0, [r7, #20]
        break;
 801233e:	e265      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	68b9      	ldr	r1, [r7, #8]
 8012346:	6938      	ldr	r0, [r7, #16]
 8012348:	f7f9 f965 	bl	800b616 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch>
 801234c:	6178      	str	r0, [r7, #20]
        break;
 801234e:	e25d      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	68b9      	ldr	r1, [r7, #8]
 8012356:	6938      	ldr	r0, [r7, #16]
 8012358:	f7f9 fb3f 	bl	800b9da <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch>
 801235c:	6178      	str	r0, [r7, #20]
        break;
 801235e:	e255      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_PRIORITIZE_CALL_NOT_USED
    case TXM_BYTE_POOL_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_prioritize_dispatch(module_instance, param_0);
 8012360:	68b9      	ldr	r1, [r7, #8]
 8012362:	6938      	ldr	r0, [r7, #16]
 8012364:	f7f9 fcd0 	bl	800bd08 <_txm_module_manager_tx_byte_pool_prioritize_dispatch>
 8012368:	6178      	str	r0, [r7, #20]
        break;
 801236a:	e24f      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_RELEASE_CALL_NOT_USED
    case TXM_BYTE_RELEASE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_release_dispatch(module_instance, param_0);
 801236c:	68b9      	ldr	r1, [r7, #8]
 801236e:	6938      	ldr	r0, [r7, #16]
 8012370:	f7f9 fd1a 	bl	800bda8 <_txm_module_manager_tx_byte_release_dispatch>
 8012374:	6178      	str	r0, [r7, #20]
        break;
 8012376:	e249      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_CREATE_CALL_NOT_USED
    case TXM_EVENT_FLAGS_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_create_dispatch(module_instance, param_0, param_1, param_2);
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	68b9      	ldr	r1, [r7, #8]
 801237e:	6938      	ldr	r0, [r7, #16]
 8012380:	f7f9 fd58 	bl	800be34 <_txm_module_manager_tx_event_flags_create_dispatch>
 8012384:	6178      	str	r0, [r7, #20]
        break;
 8012386:	e241      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_DELETE_CALL_NOT_USED
    case TXM_EVENT_FLAGS_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_delete_dispatch(module_instance, param_0);
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	6938      	ldr	r0, [r7, #16]
 801238c:	f7f9 fdca 	bl	800bf24 <_txm_module_manager_tx_event_flags_delete_dispatch>
 8012390:	6178      	str	r0, [r7, #20]
        break;
 8012392:	e23b      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	68b9      	ldr	r1, [r7, #8]
 801239a:	6938      	ldr	r0, [r7, #16]
 801239c:	f7f9 fe1a 	bl	800bfd4 <_txm_module_manager_tx_event_flags_get_dispatch>
 80123a0:	6178      	str	r0, [r7, #20]
        break;
 80123a2:	e233      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_INFO_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	68b9      	ldr	r1, [r7, #8]
 80123aa:	6938      	ldr	r0, [r7, #16]
 80123ac:	f7f9 fec8 	bl	800c140 <_txm_module_manager_tx_event_flags_info_get_dispatch>
 80123b0:	6178      	str	r0, [r7, #20]
        break;
 80123b2:	e22b      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	68b9      	ldr	r1, [r7, #8]
 80123ba:	6938      	ldr	r0, [r7, #16]
 80123bc:	f7fa f834 	bl	800c428 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch>
 80123c0:	6178      	str	r0, [r7, #20]
        break;
 80123c2:	e223      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	68b9      	ldr	r1, [r7, #8]
 80123ca:	6938      	ldr	r0, [r7, #16]
 80123cc:	f7fa f968 	bl	800c6a0 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch>
 80123d0:	6178      	str	r0, [r7, #20]
        break;
 80123d2:	e21b      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
 80123d4:	2000ef4c 	.word	0x2000ef4c
    #endif

    #ifndef TXM_EVENT_FLAGS_SET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_SET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_set_dispatch(module_instance, param_0, param_1, param_2);
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	68b9      	ldr	r1, [r7, #8]
 80123de:	6938      	ldr	r0, [r7, #16]
 80123e0:	f7fa fa4e 	bl	800c880 <_txm_module_manager_tx_event_flags_set_dispatch>
 80123e4:	6178      	str	r0, [r7, #20]
        break;
 80123e6:	e211      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_SET_NOTIFY_CALL_NOT_USED
    case TXM_EVENT_FLAGS_SET_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_set_notify_dispatch(module_instance, param_0, param_1);
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	68b9      	ldr	r1, [r7, #8]
 80123ec:	6938      	ldr	r0, [r7, #16]
 80123ee:	f7fa fa9b 	bl	800c928 <_txm_module_manager_tx_event_flags_set_notify_dispatch>
 80123f2:	6178      	str	r0, [r7, #20]
        break;
 80123f4:	e20a      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_CREATE_CALL_NOT_USED
    case TXM_MUTEX_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	68b9      	ldr	r1, [r7, #8]
 80123fc:	6938      	ldr	r0, [r7, #16]
 80123fe:	f7fa fb03 	bl	800ca08 <_txm_module_manager_tx_mutex_create_dispatch>
 8012402:	6178      	str	r0, [r7, #20]
        break;
 8012404:	e202      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_DELETE_CALL_NOT_USED
    case TXM_MUTEX_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_delete_dispatch(module_instance, param_0);
 8012406:	68b9      	ldr	r1, [r7, #8]
 8012408:	6938      	ldr	r0, [r7, #16]
 801240a:	f7fa fb9f 	bl	800cb4c <_txm_module_manager_tx_mutex_delete_dispatch>
 801240e:	6178      	str	r0, [r7, #20]
        break;
 8012410:	e1fc      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_GET_CALL_NOT_USED
    case TXM_MUTEX_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_get_dispatch(module_instance, param_0, param_1);
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	68b9      	ldr	r1, [r7, #8]
 8012416:	6938      	ldr	r0, [r7, #16]
 8012418:	f7fa fbf0 	bl	800cbfc <_txm_module_manager_tx_mutex_get_dispatch>
 801241c:	6178      	str	r0, [r7, #20]
        break;
 801241e:	e1f5      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_INFO_GET_CALL_NOT_USED
    case TXM_MUTEX_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	68b9      	ldr	r1, [r7, #8]
 8012426:	6938      	ldr	r0, [r7, #16]
 8012428:	f7fa fc3a 	bl	800cca0 <_txm_module_manager_tx_mutex_info_get_dispatch>
 801242c:	6178      	str	r0, [r7, #20]
        break;
 801242e:	e1ed      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_MUTEX_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	68b9      	ldr	r1, [r7, #8]
 8012436:	6938      	ldr	r0, [r7, #16]
 8012438:	f7fa fddd 	bl	800cff6 <_txm_module_manager_tx_mutex_performance_info_get_dispatch>
 801243c:	6178      	str	r0, [r7, #20]
        break;
 801243e:	e1e5      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	68b9      	ldr	r1, [r7, #8]
 8012446:	6938      	ldr	r0, [r7, #16]
 8012448:	f7fa ff80 	bl	800d34c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch>
 801244c:	6178      	str	r0, [r7, #20]
        break;
 801244e:	e1dd      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PRIORITIZE_CALL_NOT_USED
    case TXM_MUTEX_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_prioritize_dispatch(module_instance, param_0);
 8012450:	68b9      	ldr	r1, [r7, #8]
 8012452:	6938      	ldr	r0, [r7, #16]
 8012454:	f7fb f8da 	bl	800d60c <_txm_module_manager_tx_mutex_prioritize_dispatch>
 8012458:	6178      	str	r0, [r7, #20]
        break;
 801245a:	e1d7      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PUT_CALL_NOT_USED
    case TXM_MUTEX_PUT_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_put_dispatch(module_instance, param_0);
 801245c:	68b9      	ldr	r1, [r7, #8]
 801245e:	6938      	ldr	r0, [r7, #16]
 8012460:	f7fb f924 	bl	800d6ac <_txm_module_manager_tx_mutex_put_dispatch>
 8012464:	6178      	str	r0, [r7, #20]
        break;
 8012466:	e1d1      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_CREATE_CALL_NOT_USED
    case TXM_QUEUE_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	68b9      	ldr	r1, [r7, #8]
 801246e:	6938      	ldr	r0, [r7, #16]
 8012470:	f7fb f96c 	bl	800d74c <_txm_module_manager_tx_queue_create_dispatch>
 8012474:	6178      	str	r0, [r7, #20]
        break;
 8012476:	e1c9      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_DELETE_CALL_NOT_USED
    case TXM_QUEUE_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_delete_dispatch(module_instance, param_0);
 8012478:	68b9      	ldr	r1, [r7, #8]
 801247a:	6938      	ldr	r0, [r7, #16]
 801247c:	f7fb fa52 	bl	800d924 <_txm_module_manager_tx_queue_delete_dispatch>
 8012480:	6178      	str	r0, [r7, #20]
        break;
 8012482:	e1c3      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_FLUSH_CALL_NOT_USED
    case TXM_QUEUE_FLUSH_CALL:
    {
        return_value = _txm_module_manager_tx_queue_flush_dispatch(module_instance, param_0);
 8012484:	68b9      	ldr	r1, [r7, #8]
 8012486:	6938      	ldr	r0, [r7, #16]
 8012488:	f7fb faa4 	bl	800d9d4 <_txm_module_manager_tx_queue_flush_dispatch>
 801248c:	6178      	str	r0, [r7, #20]
        break;
 801248e:	e1bd      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_FRONT_SEND_CALL_NOT_USED
    case TXM_QUEUE_FRONT_SEND_CALL:
    {
        return_value = _txm_module_manager_tx_queue_front_send_dispatch(module_instance, param_0, param_1, param_2);
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	68b9      	ldr	r1, [r7, #8]
 8012496:	6938      	ldr	r0, [r7, #16]
 8012498:	f7fb faec 	bl	800da74 <_txm_module_manager_tx_queue_front_send_dispatch>
 801249c:	6178      	str	r0, [r7, #20]
        break;
 801249e:	e1b5      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_INFO_GET_CALL_NOT_USED
    case TXM_QUEUE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_queue_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	68b9      	ldr	r1, [r7, #8]
 80124a6:	6938      	ldr	r0, [r7, #16]
 80124a8:	f7fb fb7f 	bl	800dbaa <_txm_module_manager_tx_queue_info_get_dispatch>
 80124ac:	6178      	str	r0, [r7, #20]
        break;
 80124ae:	e1ad      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_QUEUE_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_queue_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	68b9      	ldr	r1, [r7, #8]
 80124b6:	6938      	ldr	r0, [r7, #16]
 80124b8:	f7fb fd22 	bl	800df00 <_txm_module_manager_tx_queue_performance_info_get_dispatch>
 80124bc:	6178      	str	r0, [r7, #20]
        break;
 80124be:	e1a5      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_queue_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	68b9      	ldr	r1, [r7, #8]
 80124c6:	6938      	ldr	r0, [r7, #16]
 80124c8:	f7fb fec5 	bl	800e256 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch>
 80124cc:	6178      	str	r0, [r7, #20]
        break;
 80124ce:	e19d      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_PRIORITIZE_CALL_NOT_USED
    case TXM_QUEUE_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_prioritize_dispatch(module_instance, param_0);
 80124d0:	68b9      	ldr	r1, [r7, #8]
 80124d2:	6938      	ldr	r0, [r7, #16]
 80124d4:	f7fc f81f 	bl	800e516 <_txm_module_manager_tx_queue_prioritize_dispatch>
 80124d8:	6178      	str	r0, [r7, #20]
        break;
 80124da:	e197      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_RECEIVE_CALL_NOT_USED
    case TXM_QUEUE_RECEIVE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_receive_dispatch(module_instance, param_0, param_1, param_2);
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	68b9      	ldr	r1, [r7, #8]
 80124e2:	6938      	ldr	r0, [r7, #16]
 80124e4:	f7fc f867 	bl	800e5b6 <_txm_module_manager_tx_queue_receive_dispatch>
 80124e8:	6178      	str	r0, [r7, #20]
        break;
 80124ea:	e18f      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif
    
    #ifndef TXM_QUEUE_SEND_CALL_NOT_USED
    case TXM_QUEUE_SEND_CALL:
    {
        return_value = _txm_module_manager_tx_queue_send_dispatch(module_instance, param_0, param_1, param_2);
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	68b9      	ldr	r1, [r7, #8]
 80124f2:	6938      	ldr	r0, [r7, #16]
 80124f4:	f7fc f8e6 	bl	800e6c4 <_txm_module_manager_tx_queue_send_dispatch>
 80124f8:	6178      	str	r0, [r7, #20]
        break;
 80124fa:	e187      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_SEND_NOTIFY_CALL_NOT_USED
    case TXM_QUEUE_SEND_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_queue_send_notify_dispatch(module_instance, param_0, param_1);
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	68b9      	ldr	r1, [r7, #8]
 8012500:	6938      	ldr	r0, [r7, #16]
 8012502:	f7fc f97f 	bl	800e804 <_txm_module_manager_tx_queue_send_notify_dispatch>
 8012506:	6178      	str	r0, [r7, #20]
        break;
 8012508:	e180      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_CEILING_PUT_CALL_NOT_USED
    case TXM_SEMAPHORE_CEILING_PUT_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_ceiling_put_dispatch(module_instance, param_0, param_1);
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	68b9      	ldr	r1, [r7, #8]
 801250e:	6938      	ldr	r0, [r7, #16]
 8012510:	f7fc f9e8 	bl	800e8e4 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch>
 8012514:	6178      	str	r0, [r7, #20]
        break;
 8012516:	e179      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_CREATE_CALL_NOT_USED
    case TXM_SEMAPHORE_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	68b9      	ldr	r1, [r7, #8]
 801251e:	6938      	ldr	r0, [r7, #16]
 8012520:	f7fc fa32 	bl	800e988 <_txm_module_manager_tx_semaphore_create_dispatch>
 8012524:	6178      	str	r0, [r7, #20]
        break;
 8012526:	e171      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_DELETE_CALL_NOT_USED
    case TXM_SEMAPHORE_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_delete_dispatch(module_instance, param_0);
 8012528:	68b9      	ldr	r1, [r7, #8]
 801252a:	6938      	ldr	r0, [r7, #16]
 801252c:	f7fc face 	bl	800eacc <_txm_module_manager_tx_semaphore_delete_dispatch>
 8012530:	6178      	str	r0, [r7, #20]
        break;
 8012532:	e16b      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_get_dispatch(module_instance, param_0, param_1);
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	68b9      	ldr	r1, [r7, #8]
 8012538:	6938      	ldr	r0, [r7, #16]
 801253a:	f7fc fb1f 	bl	800eb7c <_txm_module_manager_tx_semaphore_get_dispatch>
 801253e:	6178      	str	r0, [r7, #20]
        break;
 8012540:	e164      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_INFO_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	68b9      	ldr	r1, [r7, #8]
 8012548:	6938      	ldr	r0, [r7, #16]
 801254a:	f7fc fb69 	bl	800ec20 <_txm_module_manager_tx_semaphore_info_get_dispatch>
 801254e:	6178      	str	r0, [r7, #20]
        break;
 8012550:	e15c      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	68b9      	ldr	r1, [r7, #8]
 8012558:	6938      	ldr	r0, [r7, #16]
 801255a:	f7fc fcd5 	bl	800ef08 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch>
 801255e:	6178      	str	r0, [r7, #20]
        break;
 8012560:	e154      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	68b9      	ldr	r1, [r7, #8]
 8012568:	6938      	ldr	r0, [r7, #16]
 801256a:	f7fc fe09 	bl	800f180 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch>
 801256e:	6178      	str	r0, [r7, #20]
        break;
 8012570:	e14c      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PRIORITIZE_CALL_NOT_USED
    case TXM_SEMAPHORE_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_prioritize_dispatch(module_instance, param_0);
 8012572:	68b9      	ldr	r1, [r7, #8]
 8012574:	6938      	ldr	r0, [r7, #16]
 8012576:	f7fc fef3 	bl	800f360 <_txm_module_manager_tx_semaphore_prioritize_dispatch>
 801257a:	6178      	str	r0, [r7, #20]
        break;
 801257c:	e146      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PUT_CALL_NOT_USED
    case TXM_SEMAPHORE_PUT_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_put_dispatch(module_instance, param_0);
 801257e:	68b9      	ldr	r1, [r7, #8]
 8012580:	6938      	ldr	r0, [r7, #16]
 8012582:	f7fc ff3d 	bl	800f400 <_txm_module_manager_tx_semaphore_put_dispatch>
 8012586:	6178      	str	r0, [r7, #20]
        break;
 8012588:	e140      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PUT_NOTIFY_CALL_NOT_USED
    case TXM_SEMAPHORE_PUT_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_put_notify_dispatch(module_instance, param_0, param_1);
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	68b9      	ldr	r1, [r7, #8]
 801258e:	6938      	ldr	r0, [r7, #16]
 8012590:	f7fc ff86 	bl	800f4a0 <_txm_module_manager_tx_semaphore_put_notify_dispatch>
 8012594:	6178      	str	r0, [r7, #20]
        break;
 8012596:	e139      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_CREATE_CALL_NOT_USED
    case TXM_THREAD_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	68b9      	ldr	r1, [r7, #8]
 801259e:	6938      	ldr	r0, [r7, #16]
 80125a0:	f7fc ffee 	bl	800f580 <_txm_module_manager_tx_thread_create_dispatch>
 80125a4:	6178      	str	r0, [r7, #20]
        break;
 80125a6:	e131      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_DELETE_CALL_NOT_USED
    case TXM_THREAD_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_delete_dispatch(module_instance, param_0);
 80125a8:	68b9      	ldr	r1, [r7, #8]
 80125aa:	6938      	ldr	r0, [r7, #16]
 80125ac:	f7fd f90a 	bl	800f7c4 <_txm_module_manager_tx_thread_delete_dispatch>
 80125b0:	6178      	str	r0, [r7, #20]
        break;
 80125b2:	e12b      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL_NOT_USED
    case TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_entry_exit_notify_dispatch(module_instance, param_0, param_1);
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	68b9      	ldr	r1, [r7, #8]
 80125b8:	6938      	ldr	r0, [r7, #16]
 80125ba:	f7fd f95b 	bl	800f874 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch>
 80125be:	6178      	str	r0, [r7, #20]
        break;
 80125c0:	e124      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_IDENTIFY_CALL_NOT_USED
    case TXM_THREAD_IDENTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_identify_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	68b9      	ldr	r1, [r7, #8]
 80125c8:	6938      	ldr	r0, [r7, #16]
 80125ca:	f7fd f9cd 	bl	800f968 <_txm_module_manager_tx_thread_identify_dispatch>
 80125ce:	6178      	str	r0, [r7, #20]
        break;
 80125d0:	e11c      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_INFO_GET_CALL_NOT_USED
    case TXM_THREAD_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	68b9      	ldr	r1, [r7, #8]
 80125d8:	6938      	ldr	r0, [r7, #16]
 80125da:	f7fd f9d5 	bl	800f988 <_txm_module_manager_tx_thread_info_get_dispatch>
 80125de:	6178      	str	r0, [r7, #20]
        break;
 80125e0:	e114      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_INTERRUPT_CONTROL_CALL_NOT_USED
    case TXM_THREAD_INTERRUPT_CONTROL_CALL:
    {
        return_value = _txm_module_manager_tx_thread_interrupt_control_dispatch(module_instance, param_0);
 80125e2:	68b9      	ldr	r1, [r7, #8]
 80125e4:	6938      	ldr	r0, [r7, #16]
 80125e6:	f7fd fbe8 	bl	800fdba <_txm_module_manager_tx_thread_interrupt_control_dispatch>
 80125ea:	6178      	str	r0, [r7, #20]
        break;
 80125ec:	e10e      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_THREAD_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	68b9      	ldr	r1, [r7, #8]
 80125f4:	6938      	ldr	r0, [r7, #16]
 80125f6:	f7fd fbf6 	bl	800fde6 <_txm_module_manager_tx_thread_performance_info_get_dispatch>
 80125fa:	6178      	str	r0, [r7, #20]
        break;
 80125fc:	e106      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	68b9      	ldr	r1, [r7, #8]
 8012604:	6938      	ldr	r0, [r7, #16]
 8012606:	f7fd fe77 	bl	80102f8 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch>
 801260a:	6178      	str	r0, [r7, #20]
        break;
 801260c:	e0fe      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PREEMPTION_CHANGE_CALL_NOT_USED
    case TXM_THREAD_PREEMPTION_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_preemption_change_dispatch(module_instance, param_0, param_1, param_2);
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	68b9      	ldr	r1, [r7, #8]
 8012614:	6938      	ldr	r0, [r7, #16]
 8012616:	f7fe f8e4 	bl	80107e2 <_txm_module_manager_tx_thread_preemption_change_dispatch>
 801261a:	6178      	str	r0, [r7, #20]
        break;
 801261c:	e0f6      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PRIORITY_CHANGE_CALL_NOT_USED
    case TXM_THREAD_PRIORITY_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_priority_change_dispatch(module_instance, param_0, param_1, param_2);
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	68b9      	ldr	r1, [r7, #8]
 8012624:	6938      	ldr	r0, [r7, #16]
 8012626:	f7fe f957 	bl	80108d8 <_txm_module_manager_tx_thread_priority_change_dispatch>
 801262a:	6178      	str	r0, [r7, #20]
        break;
 801262c:	e0ee      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_RELINQUISH_CALL_NOT_USED
    case TXM_THREAD_RELINQUISH_CALL:
    {
        return_value = _txm_module_manager_tx_thread_relinquish_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	68b9      	ldr	r1, [r7, #8]
 8012634:	6938      	ldr	r0, [r7, #16]
 8012636:	f7fe f9ca 	bl	80109ce <_txm_module_manager_tx_thread_relinquish_dispatch>
 801263a:	6178      	str	r0, [r7, #20]
        break;
 801263c:	e0e6      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_RESET_CALL_NOT_USED
    case TXM_THREAD_RESET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_reset_dispatch(module_instance, param_0);
 801263e:	68b9      	ldr	r1, [r7, #8]
 8012640:	6938      	ldr	r0, [r7, #16]
 8012642:	f7fe f9d2 	bl	80109ea <_txm_module_manager_tx_thread_reset_dispatch>
 8012646:	6178      	str	r0, [r7, #20]
        break;
 8012648:	e0e0      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_RESUME_CALL_NOT_USED
    case TXM_THREAD_RESUME_CALL:
    {
        return_value = _txm_module_manager_tx_thread_resume_dispatch(module_instance, param_0);
 801264a:	68b9      	ldr	r1, [r7, #8]
 801264c:	6938      	ldr	r0, [r7, #16]
 801264e:	f7fe fa1c 	bl	8010a8a <_txm_module_manager_tx_thread_resume_dispatch>
 8012652:	6178      	str	r0, [r7, #20]
        break;
 8012654:	e0da      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_SLEEP_CALL_NOT_USED
    case TXM_THREAD_SLEEP_CALL:
    {
        return_value = _txm_module_manager_tx_thread_sleep_dispatch(module_instance, param_0);
 8012656:	68b9      	ldr	r1, [r7, #8]
 8012658:	6938      	ldr	r0, [r7, #16]
 801265a:	f7fe fa66 	bl	8010b2a <_txm_module_manager_tx_thread_sleep_dispatch>
 801265e:	6178      	str	r0, [r7, #20]
        break;
 8012660:	e0d4      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_STACK_ERROR_NOTIFY_CALL_NOT_USED
    case TXM_THREAD_STACK_ERROR_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_stack_error_notify_dispatch(module_instance, param_0);
 8012662:	68b9      	ldr	r1, [r7, #8]
 8012664:	6938      	ldr	r0, [r7, #16]
 8012666:	f7fe fa6e 	bl	8010b46 <_txm_module_manager_tx_thread_stack_error_notify_dispatch>
 801266a:	6178      	str	r0, [r7, #20]
        break;
 801266c:	e0ce      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_SUSPEND_CALL_NOT_USED
    case TXM_THREAD_SUSPEND_CALL:
    {
        return_value = _txm_module_manager_tx_thread_suspend_dispatch(module_instance, param_0);
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	6938      	ldr	r0, [r7, #16]
 8012672:	f7fe fa7f 	bl	8010b74 <_txm_module_manager_tx_thread_suspend_dispatch>
 8012676:	6178      	str	r0, [r7, #20]
        break;
 8012678:	e0c8      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_SYSTEM_SUSPEND_CALL_NOT_USED
    case TXM_THREAD_SYSTEM_SUSPEND_CALL:
    {
        return_value = _txm_module_manager_tx_thread_system_suspend_dispatch(module_instance, param_0);
 801267a:	68b9      	ldr	r1, [r7, #8]
 801267c:	6938      	ldr	r0, [r7, #16]
 801267e:	f7fe fac9 	bl	8010c14 <_txm_module_manager_tx_thread_system_suspend_dispatch>
 8012682:	6178      	str	r0, [r7, #20]
        break;
 8012684:	e0c2      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_TERMINATE_CALL_NOT_USED
    case TXM_THREAD_TERMINATE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_terminate_dispatch(module_instance, param_0);
 8012686:	68b9      	ldr	r1, [r7, #8]
 8012688:	6938      	ldr	r0, [r7, #16]
 801268a:	f7fe fb39 	bl	8010d00 <_txm_module_manager_tx_thread_terminate_dispatch>
 801268e:	6178      	str	r0, [r7, #20]
        break;
 8012690:	e0bc      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_TIME_SLICE_CHANGE_CALL_NOT_USED
    case TXM_THREAD_TIME_SLICE_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_time_slice_change_dispatch(module_instance, param_0, param_1, param_2);
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	68b9      	ldr	r1, [r7, #8]
 8012698:	6938      	ldr	r0, [r7, #16]
 801269a:	f7fe fb81 	bl	8010da0 <_txm_module_manager_tx_thread_time_slice_change_dispatch>
 801269e:	6178      	str	r0, [r7, #20]
        break;
 80126a0:	e0b4      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_WAIT_ABORT_CALL_NOT_USED
    case TXM_THREAD_WAIT_ABORT_CALL:
    {
        return_value = _txm_module_manager_tx_thread_wait_abort_dispatch(module_instance, param_0);
 80126a2:	68b9      	ldr	r1, [r7, #8]
 80126a4:	6938      	ldr	r0, [r7, #16]
 80126a6:	f7fe fbf6 	bl	8010e96 <_txm_module_manager_tx_thread_wait_abort_dispatch>
 80126aa:	6178      	str	r0, [r7, #20]
        break;
 80126ac:	e0ae      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIME_GET_CALL_NOT_USED
    case TXM_TIME_GET_CALL:
    {
        return_value = _txm_module_manager_tx_time_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	68b9      	ldr	r1, [r7, #8]
 80126b4:	6938      	ldr	r0, [r7, #16]
 80126b6:	f7fe fc3e 	bl	8010f36 <_txm_module_manager_tx_time_get_dispatch>
 80126ba:	6178      	str	r0, [r7, #20]
        break;
 80126bc:	e0a6      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIME_SET_CALL_NOT_USED
    case TXM_TIME_SET_CALL:
    {
        return_value = _txm_module_manager_tx_time_set_dispatch(module_instance, param_0);
 80126be:	68b9      	ldr	r1, [r7, #8]
 80126c0:	6938      	ldr	r0, [r7, #16]
 80126c2:	f7fe fc47 	bl	8010f54 <_txm_module_manager_tx_time_set_dispatch>
 80126c6:	6178      	str	r0, [r7, #20]
        break;
 80126c8:	e0a0      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_ACTIVATE_CALL_NOT_USED
    case TXM_TIMER_ACTIVATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_activate_dispatch(module_instance, param_0);
 80126ca:	68b9      	ldr	r1, [r7, #8]
 80126cc:	6938      	ldr	r0, [r7, #16]
 80126ce:	f7fe fc4e 	bl	8010f6e <_txm_module_manager_tx_timer_activate_dispatch>
 80126d2:	6178      	str	r0, [r7, #20]
        break;
 80126d4:	e09a      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_CHANGE_CALL_NOT_USED
    case TXM_TIMER_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_change_dispatch(module_instance, param_0, param_1, param_2);
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	68b9      	ldr	r1, [r7, #8]
 80126dc:	6938      	ldr	r0, [r7, #16]
 80126de:	f7fe fc96 	bl	801100e <_txm_module_manager_tx_timer_change_dispatch>
 80126e2:	6178      	str	r0, [r7, #20]
        break;
 80126e4:	e092      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_CREATE_CALL_NOT_USED
    case TXM_TIMER_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	68b9      	ldr	r1, [r7, #8]
 80126ec:	6938      	ldr	r0, [r7, #16]
 80126ee:	f7fe fce3 	bl	80110b8 <_txm_module_manager_tx_timer_create_dispatch>
 80126f2:	6178      	str	r0, [r7, #20]
        break;
 80126f4:	e08a      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_DEACTIVATE_CALL_NOT_USED
    case TXM_TIMER_DEACTIVATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_deactivate_dispatch(module_instance, param_0);
 80126f6:	68b9      	ldr	r1, [r7, #8]
 80126f8:	6938      	ldr	r0, [r7, #16]
 80126fa:	f7fe fdad 	bl	8011258 <_txm_module_manager_tx_timer_deactivate_dispatch>
 80126fe:	6178      	str	r0, [r7, #20]
        break;
 8012700:	e084      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_DELETE_CALL_NOT_USED
    case TXM_TIMER_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_delete_dispatch(module_instance, param_0);
 8012702:	68b9      	ldr	r1, [r7, #8]
 8012704:	6938      	ldr	r0, [r7, #16]
 8012706:	f7fe fdf7 	bl	80112f8 <_txm_module_manager_tx_timer_delete_dispatch>
 801270a:	6178      	str	r0, [r7, #20]
        break;
 801270c:	e07e      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_INFO_GET_CALL_NOT_USED
    case TXM_TIMER_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_timer_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	68b9      	ldr	r1, [r7, #8]
 8012714:	6938      	ldr	r0, [r7, #16]
 8012716:	f7fe fe47 	bl	80113a8 <_txm_module_manager_tx_timer_info_get_dispatch>
 801271a:	6178      	str	r0, [r7, #20]
        break;
 801271c:	e076      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_TIMER_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_timer_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	68b9      	ldr	r1, [r7, #8]
 8012724:	6938      	ldr	r0, [r7, #16]
 8012726:	f7fe ffb3 	bl	8011690 <_txm_module_manager_tx_timer_performance_info_get_dispatch>
 801272a:	6178      	str	r0, [r7, #20]
        break;
 801272c:	e06e      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_timer_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	68b9      	ldr	r1, [r7, #8]
 8012734:	6938      	ldr	r0, [r7, #16]
 8012736:	f7ff f91f 	bl	8011978 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch>
 801273a:	6178      	str	r0, [r7, #20]
        break;
 801273c:	e066      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_BUFFER_FULL_NOTIFY_CALL_NOT_USED
    case TXM_TRACE_BUFFER_FULL_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_trace_buffer_full_notify_dispatch(module_instance, param_0);
 801273e:	68b9      	ldr	r1, [r7, #8]
 8012740:	6938      	ldr	r0, [r7, #16]
 8012742:	f7ff fa41 	bl	8011bc8 <_txm_module_manager_tx_trace_buffer_full_notify_dispatch>
 8012746:	6178      	str	r0, [r7, #20]
        break;
 8012748:	e060      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_DISABLE_CALL_NOT_USED
    case TXM_TRACE_DISABLE_CALL:
    {
        return_value = _txm_module_manager_tx_trace_disable_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	68b9      	ldr	r1, [r7, #8]
 8012750:	6938      	ldr	r0, [r7, #16]
 8012752:	f7ff fa48 	bl	8011be6 <_txm_module_manager_tx_trace_disable_dispatch>
 8012756:	6178      	str	r0, [r7, #20]
        break;
 8012758:	e058      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_ENABLE_CALL_NOT_USED
    case TXM_TRACE_ENABLE_CALL:
    {
        return_value = _txm_module_manager_tx_trace_enable_dispatch(module_instance, param_0, param_1, param_2);
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	6938      	ldr	r0, [r7, #16]
 8012762:	f7ff fa57 	bl	8011c14 <_txm_module_manager_tx_trace_enable_dispatch>
 8012766:	6178      	str	r0, [r7, #20]
        break;
 8012768:	e050      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_EVENT_FILTER_CALL_NOT_USED
    case TXM_TRACE_EVENT_FILTER_CALL:
    {
        return_value = _txm_module_manager_tx_trace_event_filter_dispatch(module_instance, param_0);
 801276a:	68b9      	ldr	r1, [r7, #8]
 801276c:	6938      	ldr	r0, [r7, #16]
 801276e:	f7ff fa6c 	bl	8011c4a <_txm_module_manager_tx_trace_event_filter_dispatch>
 8012772:	6178      	str	r0, [r7, #20]
        break;
 8012774:	e04a      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_EVENT_UNFILTER_CALL_NOT_USED
    case TXM_TRACE_EVENT_UNFILTER_CALL:
    {
        return_value = _txm_module_manager_tx_trace_event_unfilter_dispatch(module_instance, param_0);
 8012776:	68b9      	ldr	r1, [r7, #8]
 8012778:	6938      	ldr	r0, [r7, #16]
 801277a:	f7ff fa74 	bl	8011c66 <_txm_module_manager_tx_trace_event_unfilter_dispatch>
 801277e:	6178      	str	r0, [r7, #20]
        break;
 8012780:	e044      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_INTERRUPT_CONTROL_CALL_NOT_USED
    case TXM_TRACE_INTERRUPT_CONTROL_CALL:
    {
        return_value = _txm_module_manager_tx_trace_interrupt_control_dispatch(module_instance, param_0);
 8012782:	68b9      	ldr	r1, [r7, #8]
 8012784:	6938      	ldr	r0, [r7, #16]
 8012786:	f7ff fa7c 	bl	8011c82 <_txm_module_manager_tx_trace_interrupt_control_dispatch>
 801278a:	6178      	str	r0, [r7, #20]
        break;
 801278c:	e03e      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_ISR_ENTER_INSERT_CALL_NOT_USED
    case TXM_TRACE_ISR_ENTER_INSERT_CALL:
    {
        return_value = _txm_module_manager_tx_trace_isr_enter_insert_dispatch(module_instance, param_0);
 801278e:	68b9      	ldr	r1, [r7, #8]
 8012790:	6938      	ldr	r0, [r7, #16]
 8012792:	f7ff fa8c 	bl	8011cae <_txm_module_manager_tx_trace_isr_enter_insert_dispatch>
 8012796:	6178      	str	r0, [r7, #20]
        break;
 8012798:	e038      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_ISR_EXIT_INSERT_CALL_NOT_USED
    case TXM_TRACE_ISR_EXIT_INSERT_CALL:
    {
        return_value = _txm_module_manager_tx_trace_isr_exit_insert_dispatch(module_instance, param_0);
 801279a:	68b9      	ldr	r1, [r7, #8]
 801279c:	6938      	ldr	r0, [r7, #16]
 801279e:	f7ff fa9b 	bl	8011cd8 <_txm_module_manager_tx_trace_isr_exit_insert_dispatch>
 80127a2:	6178      	str	r0, [r7, #20]
        break;
 80127a4:	e032      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_USER_EVENT_INSERT_CALL_NOT_USED
    case TXM_TRACE_USER_EVENT_INSERT_CALL:
    {
        return_value = _txm_module_manager_tx_trace_user_event_insert_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	68b9      	ldr	r1, [r7, #8]
 80127ac:	6938      	ldr	r0, [r7, #16]
 80127ae:	f7ff faa8 	bl	8011d02 <_txm_module_manager_tx_trace_user_event_insert_dispatch>
 80127b2:	6178      	str	r0, [r7, #20]
        break;
 80127b4:	e02a      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_ALLOCATE_CALL_NOT_USED
    case TXM_MODULE_OBJECT_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_allocate_dispatch(module_instance, param_0, param_1);
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	68b9      	ldr	r1, [r7, #8]
 80127ba:	6938      	ldr	r0, [r7, #16]
 80127bc:	f7ff fae8 	bl	8011d90 <_txm_module_manager_txm_module_object_allocate_dispatch>
 80127c0:	6178      	str	r0, [r7, #20]
        break;
 80127c2:	e023      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_DEALLOCATE_CALL_NOT_USED
    case TXM_MODULE_OBJECT_DEALLOCATE_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_deallocate_dispatch(module_instance, param_0);
 80127c4:	68b9      	ldr	r1, [r7, #8]
 80127c6:	6938      	ldr	r0, [r7, #16]
 80127c8:	f7ff fb22 	bl	8011e10 <_txm_module_manager_txm_module_object_deallocate_dispatch>
 80127cc:	6178      	str	r0, [r7, #20]
        break;
 80127ce:	e01d      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_POINTER_GET_CALL_NOT_USED
    case TXM_MODULE_OBJECT_POINTER_GET_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_pointer_get_dispatch(module_instance, param_0, param_1, param_2);
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	68b9      	ldr	r1, [r7, #8]
 80127d6:	6938      	ldr	r0, [r7, #16]
 80127d8:	f7ff fb58 	bl	8011e8c <_txm_module_manager_txm_module_object_pointer_get_dispatch>
 80127dc:	6178      	str	r0, [r7, #20]
        break;
 80127de:	e015      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL_NOT_USED
    case TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_pointer_get_extended_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	68b9      	ldr	r1, [r7, #8]
 80127e6:	6938      	ldr	r0, [r7, #16]
 80127e8:	f7ff fbc8 	bl	8011f7c <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch>
 80127ec:	6178      	str	r0, [r7, #20]
        break;
 80127ee:	e00d      	b.n	801280c <_txm_module_manager_kernel_dispatch+0x734>
        }
#endif

        #ifndef TXM_MODULE_APPLICATION_REQUEST_CALL_NOT_USED
        /* Determine if an application request is present.  */
        if (kernel_request >= TXM_APPLICATION_REQUEST_ID_BASE)
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127f6:	d308      	bcc.n	801280a <_txm_module_manager_kernel_dispatch+0x732>
        {
            /* Yes, call the module manager function that the application defines in order to
               support application-specific requests.  */
            return_value =  (ALIGN_TYPE)  _txm_module_manager_application_request(kernel_request-TXM_APPLICATION_REQUEST_ID_BASE, param_0, param_1, param_2);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f5a3 3080 	sub.w	r0, r3, #65536	; 0x10000
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	68b9      	ldr	r1, [r7, #8]
 8012804:	f7f7 f8e3 	bl	80099ce <_txm_module_manager_application_request>
 8012808:	6178      	str	r0, [r7, #20]
            return_value =  _txm_module_manager_usbx_dispatch(module_instance, kernel_request, param_0, param_1, param_2);
        }
#endif

        /* Unhandled kernel request, return an error!  */
        break;
 801280a:	bf00      	nop
    }
    }

    return(return_value);
 801280c:	697b      	ldr	r3, [r7, #20]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3718      	adds	r7, #24
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop

08012818 <_txm_module_manager_memory_fault_handler>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_memory_fault_handler(VOID)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0

TXM_MODULE_INSTANCE     *module_instance_ptr;
TX_THREAD               *thread_ptr;

    /* Pickup the current thread.  */
    thread_ptr =  _tx_thread_current_ptr;
 801281e:	4b0f      	ldr	r3, [pc, #60]	; (801285c <_txm_module_manager_memory_fault_handler+0x44>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	603b      	str	r3, [r7, #0]

    /* Initialize the module instance pointer to NULL.  */
    module_instance_ptr =  TX_NULL;
 8012824:	2300      	movs	r3, #0
 8012826:	607b      	str	r3, [r7, #4]
    
    /* Is there a thread?  */
    if (thread_ptr)
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d008      	beq.n	8012840 <_txm_module_manager_memory_fault_handler+0x28>
    {
        /* Pickup the module instance.  */
        module_instance_ptr =  thread_ptr -> tx_thread_module_instance_ptr;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012834:	607b      	str	r3, [r7, #4]

        /* Terminate the current thread.  */
        _tx_thread_terminate(_tx_thread_current_ptr);
 8012836:	4b09      	ldr	r3, [pc, #36]	; (801285c <_txm_module_manager_memory_fault_handler+0x44>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4618      	mov	r0, r3
 801283c:	f7f4 f976 	bl	8006b2c <_tx_thread_terminate>
    }
    
    /* Determine if there is a user memory fault notification callback.  */
    if (_txm_module_manager_fault_notify)
 8012840:	4b07      	ldr	r3, [pc, #28]	; (8012860 <_txm_module_manager_memory_fault_handler+0x48>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d004      	beq.n	8012852 <_txm_module_manager_memory_fault_handler+0x3a>
    {
        /* Yes, call the user's notification memory fault callback.  */
        (_txm_module_manager_fault_notify)(thread_ptr, module_instance_ptr);
 8012848:	4b05      	ldr	r3, [pc, #20]	; (8012860 <_txm_module_manager_memory_fault_handler+0x48>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	6879      	ldr	r1, [r7, #4]
 801284e:	6838      	ldr	r0, [r7, #0]
 8012850:	4798      	blx	r3
    }
}
 8012852:	bf00      	nop
 8012854:	3708      	adds	r7, #8
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	2000ef4c 	.word	0x2000ef4c
 8012860:	2000f64c 	.word	0x2000f64c

08012864 <_txm_module_manager_memory_fault_notify>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_memory_fault_notify(VOID (*notify_function)(TX_THREAD *, TXM_MODULE_INSTANCE *))
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
    /* Setup notification function.  */
    _txm_module_manager_fault_notify =  notify_function;
 801286c:	4a04      	ldr	r2, [pc, #16]	; (8012880 <_txm_module_manager_memory_fault_notify+0x1c>)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6013      	str	r3, [r2, #0]
    
    /* Return success.  */
    return(TX_SUCCESS);
 8012872:	2300      	movs	r3, #0
}
 8012874:	4618      	mov	r0, r3
 8012876:	370c      	adds	r7, #12
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	2000f64c 	.word	0x2000f64c

08012884 <_txm_module_manager_region_size_get>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_module_manager_region_size_get(ULONG block_size)
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]

ULONG   return_value;

    /* Process relative to the input block size.  */
    if (block_size == 32)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b20      	cmp	r3, #32
 8012890:	d102      	bne.n	8012898 <_txm_module_manager_region_size_get+0x14>
    {
        return_value =  0x04;
 8012892:	2304      	movs	r3, #4
 8012894:	60fb      	str	r3, [r7, #12]
 8012896:	e06f      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 64)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2b40      	cmp	r3, #64	; 0x40
 801289c:	d102      	bne.n	80128a4 <_txm_module_manager_region_size_get+0x20>
    {
        return_value =  0x05;
 801289e:	2305      	movs	r3, #5
 80128a0:	60fb      	str	r3, [r7, #12]
 80128a2:	e069      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 128)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b80      	cmp	r3, #128	; 0x80
 80128a8:	d102      	bne.n	80128b0 <_txm_module_manager_region_size_get+0x2c>
    {
        return_value =  0x06;
 80128aa:	2306      	movs	r3, #6
 80128ac:	60fb      	str	r3, [r7, #12]
 80128ae:	e063      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 256)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128b6:	d102      	bne.n	80128be <_txm_module_manager_region_size_get+0x3a>
    {
        return_value =  0x07;
 80128b8:	2307      	movs	r3, #7
 80128ba:	60fb      	str	r3, [r7, #12]
 80128bc:	e05c      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 512)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128c4:	d102      	bne.n	80128cc <_txm_module_manager_region_size_get+0x48>
    {
        return_value =  0x08;
 80128c6:	2308      	movs	r3, #8
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	e055      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 1024)
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80128d2:	d102      	bne.n	80128da <_txm_module_manager_region_size_get+0x56>
    {
        return_value =  0x09;
 80128d4:	2309      	movs	r3, #9
 80128d6:	60fb      	str	r3, [r7, #12]
 80128d8:	e04e      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 2048)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80128e0:	d102      	bne.n	80128e8 <_txm_module_manager_region_size_get+0x64>
    {
        return_value =  0x0A;
 80128e2:	230a      	movs	r3, #10
 80128e4:	60fb      	str	r3, [r7, #12]
 80128e6:	e047      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 4096)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80128ee:	d102      	bne.n	80128f6 <_txm_module_manager_region_size_get+0x72>
    {
        return_value =  0x0B;
 80128f0:	230b      	movs	r3, #11
 80128f2:	60fb      	str	r3, [r7, #12]
 80128f4:	e040      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 8192)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80128fc:	d102      	bne.n	8012904 <_txm_module_manager_region_size_get+0x80>
    {
        return_value =  0x0C;
 80128fe:	230c      	movs	r3, #12
 8012900:	60fb      	str	r3, [r7, #12]
 8012902:	e039      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 16384)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801290a:	d102      	bne.n	8012912 <_txm_module_manager_region_size_get+0x8e>
    {
        return_value =  0x0D;
 801290c:	230d      	movs	r3, #13
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	e032      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 32768)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012918:	d102      	bne.n	8012920 <_txm_module_manager_region_size_get+0x9c>
    {
        return_value =  0x0E;
 801291a:	230e      	movs	r3, #14
 801291c:	60fb      	str	r3, [r7, #12]
 801291e:	e02b      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 65536)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012926:	d102      	bne.n	801292e <_txm_module_manager_region_size_get+0xaa>
    {
        return_value =  0x0F;
 8012928:	230f      	movs	r3, #15
 801292a:	60fb      	str	r3, [r7, #12]
 801292c:	e024      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 131072)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012934:	d102      	bne.n	801293c <_txm_module_manager_region_size_get+0xb8>
    {
        return_value =  0x10;
 8012936:	2310      	movs	r3, #16
 8012938:	60fb      	str	r3, [r7, #12]
 801293a:	e01d      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 262144)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012942:	d102      	bne.n	801294a <_txm_module_manager_region_size_get+0xc6>
    {
        return_value =  0x11;
 8012944:	2311      	movs	r3, #17
 8012946:	60fb      	str	r3, [r7, #12]
 8012948:	e016      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 524288)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012950:	d102      	bne.n	8012958 <_txm_module_manager_region_size_get+0xd4>
    {
        return_value =  0x12;
 8012952:	2312      	movs	r3, #18
 8012954:	60fb      	str	r3, [r7, #12]
 8012956:	e00f      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 1048576)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801295e:	d102      	bne.n	8012966 <_txm_module_manager_region_size_get+0xe2>
    {
        return_value =  0x13;
 8012960:	2313      	movs	r3, #19
 8012962:	60fb      	str	r3, [r7, #12]
 8012964:	e008      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 2097152)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801296c:	d102      	bne.n	8012974 <_txm_module_manager_region_size_get+0xf0>
    {
        return_value =  0x14;
 801296e:	2314      	movs	r3, #20
 8012970:	60fb      	str	r3, [r7, #12]
 8012972:	e001      	b.n	8012978 <_txm_module_manager_region_size_get+0xf4>
    }
    else
    {
        /* Max 4MB MPU pages for modules.  */
        return_value =  0x15;
 8012974:	2315      	movs	r3, #21
 8012976:	60fb      	str	r3, [r7, #12]
    }

    return(return_value);
 8012978:	68fb      	ldr	r3, [r7, #12]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3714      	adds	r7, #20
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <_txm_module_manager_calculate_srd_bits>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_module_manager_calculate_srd_bits(ULONG block_size, ULONG length)
{
 8012986:	b480      	push	{r7}
 8012988:	b085      	sub	sp, #20
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
 801298e:	6039      	str	r1, [r7, #0]

ULONG   srd_bits = 0;
 8012990:	2300      	movs	r3, #0
 8012992:	60fb      	str	r3, [r7, #12]
UINT    srd_bit_index;

    /* length is smaller than block_size, set SRD bits if block_size is 256 or more. */
    if((block_size >= 256) && (length < block_size))
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2bff      	cmp	r3, #255	; 0xff
 8012998:	d929      	bls.n	80129ee <_txm_module_manager_calculate_srd_bits+0x68>
 801299a:	683a      	ldr	r2, [r7, #0]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d225      	bcs.n	80129ee <_txm_module_manager_calculate_srd_bits+0x68>
    {
        /* Divide block_size by 8 by shifting right 3. Result is size of subregion.  */
        block_size = block_size >> 3;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	08db      	lsrs	r3, r3, #3
 80129a6:	607b      	str	r3, [r7, #4]
        
        /* Set SRD index into attribute register. */
        srd_bit_index = 8;
 80129a8:	2308      	movs	r3, #8
 80129aa:	60bb      	str	r3, [r7, #8]
        
        /* If subregion overlaps length, move to the next subregion. */
        while(length > block_size)
 80129ac:	e006      	b.n	80129bc <_txm_module_manager_calculate_srd_bits+0x36>
        {
            length = length - block_size;
 80129ae:	683a      	ldr	r2, [r7, #0]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	1ad3      	subs	r3, r2, r3
 80129b4:	603b      	str	r3, [r7, #0]
            srd_bit_index++;
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	3301      	adds	r3, #1
 80129ba:	60bb      	str	r3, [r7, #8]
        while(length > block_size)
 80129bc:	683a      	ldr	r2, [r7, #0]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d8f4      	bhi.n	80129ae <_txm_module_manager_calculate_srd_bits+0x28>
        }
        /* Check for a portion of code remaining. */
        if(length)
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00e      	beq.n	80129e8 <_txm_module_manager_calculate_srd_bits+0x62>
        {
            srd_bit_index++;
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	3301      	adds	r3, #1
 80129ce:	60bb      	str	r3, [r7, #8]
        }
        
        /* Set unused subregion bits. */
        while(srd_bit_index < 16)
 80129d0:	e00a      	b.n	80129e8 <_txm_module_manager_calculate_srd_bits+0x62>
        {
            srd_bits = srd_bits | (0x1 << srd_bit_index);
 80129d2:	2201      	movs	r2, #1
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	fa02 f303 	lsl.w	r3, r2, r3
 80129da:	461a      	mov	r2, r3
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4313      	orrs	r3, r2
 80129e0:	60fb      	str	r3, [r7, #12]
            srd_bit_index++;
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	3301      	adds	r3, #1
 80129e6:	60bb      	str	r3, [r7, #8]
        while(srd_bit_index < 16)
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	2b0f      	cmp	r3, #15
 80129ec:	d9f1      	bls.n	80129d2 <_txm_module_manager_calculate_srd_bits+0x4c>
        }
    }
    
    return(srd_bits);
 80129ee:	68fb      	ldr	r3, [r7, #12]
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3714      	adds	r7, #20
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <_txm_module_manager_mm_register_setup>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_mm_register_setup(TXM_MODULE_INSTANCE *module_instance)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b090      	sub	sp, #64	; 0x40
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
ULONG   callback_stack_size;
ULONG   block_size;
ULONG   base_address_register;
ULONG   base_attribute_register;
ULONG   region_size;
ULONG   srd_bits = 0;
 8012a04:	2300      	movs	r3, #0
 8012a06:	627b      	str	r3, [r7, #36]	; 0x24
UINT    mpu_register = 0;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	623b      	str	r3, [r7, #32]
UINT    i;


    /* Setup the first region for the ThreadX trampoline code.  */
    /* Set base register to user mode entry, which is guaranteed to be at least 32-byte aligned.  */
    base_address_register =  (ULONG) _txm_module_manager_user_mode_entry;
 8012a0c:	4b8c      	ldr	r3, [pc, #560]	; (8012c40 <_txm_module_manager_mm_register_setup+0x244>)
 8012a0e:	617b      	str	r3, [r7, #20]
    
    /* Mask address to proper range,  region 0, set Valid bit. */
    base_address_register =  (base_address_register & 0xFFFFFFE0) | mpu_register | 0x10;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	f023 021f 	bic.w	r2, r3, #31
 8012a16:	6a3b      	ldr	r3, [r7, #32]
 8012a18:	4313      	orrs	r3, r2
 8012a1a:	f043 0310 	orr.w	r3, r3, #16
 8012a1e:	617b      	str	r3, [r7, #20]
    module_instance -> txm_module_instance_mpu_registers[0] =  base_address_register;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	665a      	str	r2, [r3, #100]	; 0x64
    
    /* Attributes: read only, write-back, shareable, size 32 bytes, region enabled. */
    module_instance -> txm_module_instance_mpu_registers[1] =  0x06070009;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4a86      	ldr	r2, [pc, #536]	; (8012c44 <_txm_module_manager_mm_register_setup+0x248>)
 8012a2a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Initialize the MPU register.  */
    mpu_register =  1;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	623b      	str	r3, [r7, #32]

    /* Initialize the MPU table index.  */
    mpu_table_index = 2;
 8012a30:	2302      	movs	r3, #2
 8012a32:	61fb      	str	r3, [r7, #28]

    /* Setup values for code area.  */
    code_address =  (ULONG) module_instance -> txm_module_instance_code_start;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	699b      	ldr	r3, [r3, #24]
 8012a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    code_size =     module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_code_size;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a40:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* Check if shared memory was set up. If so, only 3 entries are available for
       code protection. If not set up, 4 code entries are available.  */
    if(module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MANAGER_SHARED_MPU_INDEX] == 0)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d15d      	bne.n	8012b08 <_txm_module_manager_mm_register_setup+0x10c>
           2. 1/4 of the largest power of two that is greater than or equal to code size.
           3. Largest power of 2 that fits in the remaining space.
           4. Smallest power of 2 that exceeds the remaining space, minimum 32. */
        
        /* Now loop through to setup MPU protection for the code area.  */
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES; i++)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	61bb      	str	r3, [r7, #24]
 8012a50:	e056      	b.n	8012b00 <_txm_module_manager_mm_register_setup+0x104>
        {
            /* First two MPU blocks are 1/4 of the largest power of two
               that is greater than or equal to code size.  */
            if (i < 2)
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d806      	bhi.n	8012a66 <_txm_module_manager_mm_register_setup+0x6a>
            {
                block_size = _txm_power_of_two_block_size(code_size) >> 2;
 8012a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a5a:	f7f6 fdff 	bl	800965c <_txm_power_of_two_block_size>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	089b      	lsrs	r3, r3, #2
 8012a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a64:	e01b      	b.n	8012a9e <_txm_module_manager_mm_register_setup+0xa2>
            }
            
            /* Third MPU block is the largest power of 2 that fits in the remaining space. */
            else if (i == 2)
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	d10b      	bne.n	8012a84 <_txm_module_manager_mm_register_setup+0x88>
            {
                /* Subtract (block_size*2) from code_size to calculate remaining space.  */
                code_size =  code_size - (block_size << 1);
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a72:	1ad3      	subs	r3, r2, r3
 8012a74:	63bb      	str	r3, [r7, #56]	; 0x38
                block_size = _txm_power_of_two_block_size(code_size) >> 1;
 8012a76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a78:	f7f6 fdf0 	bl	800965c <_txm_power_of_two_block_size>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	085b      	lsrs	r3, r3, #1
 8012a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a82:	e00c      	b.n	8012a9e <_txm_module_manager_mm_register_setup+0xa2>
            
            /* Last MPU block is the smallest power of 2 that exceeds the remaining space, minimum 32. */
            else
            {
                /* Calculate remaining space.  */
                code_size =  code_size - block_size;
 8012a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	63bb      	str	r3, [r7, #56]	; 0x38
                block_size = _txm_power_of_two_block_size(code_size);
 8012a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a8e:	f7f6 fde5 	bl	800965c <_txm_power_of_two_block_size>
 8012a92:	62f8      	str	r0, [r7, #44]	; 0x2c
                srd_bits = _txm_module_manager_calculate_srd_bits(block_size, code_size);
 8012a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a98:	f7ff ff75 	bl	8012986 <_txm_module_manager_calculate_srd_bits>
 8012a9c:	6278      	str	r0, [r7, #36]	; 0x24
            }
            
            /* Build the base address register.  */
            base_address_register =  (code_address & ~(block_size - 1)) | mpu_register | 0x10;
 8012a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa0:	425a      	negs	r2, r3
 8012aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa4:	401a      	ands	r2, r3
 8012aa6:	6a3b      	ldr	r3, [r7, #32]
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	f043 0310 	orr.w	r3, r3, #16
 8012aae:	617b      	str	r3, [r7, #20]
            
            /* Calculate the region size information.  */
            region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8012ab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ab2:	f7ff fee7 	bl	8012884 <_txm_module_manager_region_size_get>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	613b      	str	r3, [r7, #16]
            
            /* Build the base attribute register. */
            base_attribute_register =  region_size | srd_bits | 0x06070001;
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac0:	431a      	orrs	r2, r3
 8012ac2:	4b61      	ldr	r3, [pc, #388]	; (8012c48 <_txm_module_manager_mm_register_setup+0x24c>)
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	62bb      	str	r3, [r7, #40]	; 0x28
            
            /* Setup the MPU Base Address Register.  */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index] =  base_address_register;
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	3318      	adds	r3, #24
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	4413      	add	r3, r2
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	605a      	str	r2, [r3, #4]
            
            /* Setup the MPU Base Attribute Register.   */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index+1] =  base_attribute_register;
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	3318      	adds	r3, #24
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	4413      	add	r3, r2
 8012ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ae4:	605a      	str	r2, [r3, #4]

            /* Adjust the code address.  */
            code_address =  code_address + block_size;
 8012ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	4413      	add	r3, r2
 8012aec:	63fb      	str	r3, [r7, #60]	; 0x3c
            
            /* Move MPU table index.  */
            mpu_table_index =  mpu_table_index + 2;
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	3302      	adds	r3, #2
 8012af2:	61fb      	str	r3, [r7, #28]
            
            /* Increment the MPU register index.  */
            mpu_register++;
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	3301      	adds	r3, #1
 8012af8:	623b      	str	r3, [r7, #32]
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES; i++)
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	3301      	adds	r3, #1
 8012afe:	61bb      	str	r3, [r7, #24]
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	2b03      	cmp	r3, #3
 8012b04:	d9a5      	bls.n	8012a52 <_txm_module_manager_mm_register_setup+0x56>
 8012b06:	e062      	b.n	8012bce <_txm_module_manager_mm_register_setup+0x1d2>
    
    /* Only 3 code entries available.  */
    else
    {
        /* Calculate block size, one code entry taken up by shared memory.  */
        block_size = _txm_power_of_two_block_size(code_size / (TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1));
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	4a50      	ldr	r2, [pc, #320]	; (8012c4c <_txm_module_manager_mm_register_setup+0x250>)
 8012b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8012b10:	085b      	lsrs	r3, r3, #1
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7f6 fda2 	bl	800965c <_txm_power_of_two_block_size>
 8012b18:	62f8      	str	r0, [r7, #44]	; 0x2c
        
        /* Calculate the region size information.  */
        region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8012b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b1c:	f7ff feb2 	bl	8012884 <_txm_module_manager_region_size_get>
 8012b20:	4603      	mov	r3, r0
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	613b      	str	r3, [r7, #16]
        
        /* Now loop through to setup MPU protection for the code area.  */
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1; i++)
 8012b26:	2300      	movs	r3, #0
 8012b28:	61bb      	str	r3, [r7, #24]
 8012b2a:	e047      	b.n	8012bbc <_txm_module_manager_mm_register_setup+0x1c0>
        {
            /* Build the base address register.  */
            base_address_register = (code_address & ~(block_size - 1)) | mpu_register | 0x10;
 8012b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2e:	425a      	negs	r2, r3
 8012b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b32:	401a      	ands	r2, r3
 8012b34:	6a3b      	ldr	r3, [r7, #32]
 8012b36:	4313      	orrs	r3, r2
 8012b38:	f043 0310 	orr.w	r3, r3, #16
 8012b3c:	617b      	str	r3, [r7, #20]
            
            /* Check if SRD bits need to be set.  */
            if (code_size < block_size)
 8012b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d204      	bcs.n	8012b50 <_txm_module_manager_mm_register_setup+0x154>
            {
                srd_bits = _txm_module_manager_calculate_srd_bits(block_size, code_size);
 8012b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b4a:	f7ff ff1c 	bl	8012986 <_txm_module_manager_calculate_srd_bits>
 8012b4e:	6278      	str	r0, [r7, #36]	; 0x24
            }
            
            /* Build the base attribute register. */
            base_attribute_register =  region_size | srd_bits | 0x06070000;
 8012b50:	693a      	ldr	r2, [r7, #16]
 8012b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b54:	4313      	orrs	r3, r2
 8012b56:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8012b5a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8012b5e:	62bb      	str	r3, [r7, #40]	; 0x28
            
            /* Is there still some code?  If so set the region enable bit.  */
            if (code_size)
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d003      	beq.n	8012b6e <_txm_module_manager_mm_register_setup+0x172>
            {
                /* Set the region enable bit.  */
                base_attribute_register =  base_attribute_register | 0x1;
 8012b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b68:	f043 0301 	orr.w	r3, r3, #1
 8012b6c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            /* Setup the MPU Base Address Register.  */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index] =  base_address_register;
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	3318      	adds	r3, #24
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	4413      	add	r3, r2
 8012b78:	697a      	ldr	r2, [r7, #20]
 8012b7a:	605a      	str	r2, [r3, #4]
            
            /* Setup the MPU Base Attribute Register.   */
            module_instance -> txm_module_instance_mpu_registers[mpu_table_index+1] =  base_attribute_register;
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	3318      	adds	r3, #24
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	4413      	add	r3, r2
 8012b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b8a:	605a      	str	r2, [r3, #4]
            
            /* Adjust the code address.  */
            code_address =  code_address + block_size;
 8012b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b90:	4413      	add	r3, r2
 8012b92:	63fb      	str	r3, [r7, #60]	; 0x3c
            
            /* Decrement the code size.  */
            if (code_size > block_size)
 8012b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d904      	bls.n	8012ba6 <_txm_module_manager_mm_register_setup+0x1aa>
            {
                code_size =  code_size - block_size;
 8012b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ba4:	e001      	b.n	8012baa <_txm_module_manager_mm_register_setup+0x1ae>
            }
            else
            {
                code_size =  0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            
            /* Move MPU table index.  */
            mpu_table_index =  mpu_table_index + 2;
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	3302      	adds	r3, #2
 8012bae:	61fb      	str	r3, [r7, #28]
            
            /* Increment the MPU register index.  */
            mpu_register++;
 8012bb0:	6a3b      	ldr	r3, [r7, #32]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	623b      	str	r3, [r7, #32]
        for (i = 0; i < TXM_MODULE_MANAGER_CODE_MPU_ENTRIES - 1; i++)
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	61bb      	str	r3, [r7, #24]
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	2b02      	cmp	r3, #2
 8012bc0:	d9b4      	bls.n	8012b2c <_txm_module_manager_mm_register_setup+0x130>
        }
        
        /* Adjust indeces to pass over the shared memory entry.  */
        /* Move MPU table index.  */
        mpu_table_index =  mpu_table_index + 2;
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	3302      	adds	r3, #2
 8012bc6:	61fb      	str	r3, [r7, #28]
        
        /* Increment the MPU register index.  */
        mpu_register++;
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	623b      	str	r3, [r7, #32]
    }
    
    /* Setup values for data area.  */
    data_address =  (ULONG) module_instance -> txm_module_instance_data_start;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd2:	637b      	str	r3, [r7, #52]	; 0x34
    /* Adjust the size of the module elements to be aligned to the default alignment. We do this
       so that when we partition the allocated memory, we can simply place these regions right beside
       each other without having to align their pointers. Note this only works when they all have
       the same alignment.  */
    
    data_size =             module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_data_size;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bda:	633b      	str	r3, [r7, #48]	; 0x30
    start_stop_stack_size = module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_start_stop_stack_size;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012be2:	60fb      	str	r3, [r7, #12]
    callback_stack_size =   module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_callback_stack_size;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bea:	60bb      	str	r3, [r7, #8]
    
    data_size =              ((data_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8012bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bee:	3303      	adds	r3, #3
 8012bf0:	f023 0303 	bic.w	r3, r3, #3
 8012bf4:	633b      	str	r3, [r7, #48]	; 0x30

    start_stop_stack_size =  ((start_stop_stack_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	3303      	adds	r3, #3
 8012bfa:	f023 0303 	bic.w	r3, r3, #3
 8012bfe:	60fb      	str	r3, [r7, #12]

    callback_stack_size =    ((callback_stack_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	3303      	adds	r3, #3
 8012c04:	f023 0303 	bic.w	r3, r3, #3
 8012c08:	60bb      	str	r3, [r7, #8]

    /* Update the data size to include thread stacks.  */
    data_size = data_size + start_stop_stack_size + callback_stack_size;
 8012c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	4413      	add	r3, r2
 8012c10:	68ba      	ldr	r2, [r7, #8]
 8012c12:	4413      	add	r3, r2
 8012c14:	633b      	str	r3, [r7, #48]	; 0x30
    
    block_size = _txm_power_of_two_block_size(data_size / TXM_MODULE_MANAGER_DATA_MPU_ENTRIES);
 8012c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c18:	4a0c      	ldr	r2, [pc, #48]	; (8012c4c <_txm_module_manager_mm_register_setup+0x250>)
 8012c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8012c1e:	085b      	lsrs	r3, r3, #1
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f6 fd1b 	bl	800965c <_txm_power_of_two_block_size>
 8012c26:	62f8      	str	r0, [r7, #44]	; 0x2c
    
    /* Reset SRD bitfield.  */
    srd_bits = 0;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Calculate the region size information.  */
    region_size =   (_txm_module_manager_region_size_get(block_size) << 1);
 8012c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c2e:	f7ff fe29 	bl	8012884 <_txm_module_manager_region_size_get>
 8012c32:	4603      	mov	r3, r0
 8012c34:	005b      	lsls	r3, r3, #1
 8012c36:	613b      	str	r3, [r7, #16]
    
    /* Now loop through to setup MPU protection for the data area.  */
    for (i = 0; i < TXM_MODULE_MANAGER_DATA_MPU_ENTRIES; i++)
 8012c38:	2300      	movs	r3, #0
 8012c3a:	61bb      	str	r3, [r7, #24]
 8012c3c:	e050      	b.n	8012ce0 <_txm_module_manager_mm_register_setup+0x2e4>
 8012c3e:	bf00      	nop
 8012c40:	080005a1 	.word	0x080005a1
 8012c44:	06070009 	.word	0x06070009
 8012c48:	06070001 	.word	0x06070001
 8012c4c:	aaaaaaab 	.word	0xaaaaaaab
    {
        /* Build the base address register.  */
        base_address_register =  (data_address & ~(block_size - 1)) | mpu_register | 0x10;
 8012c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c52:	425a      	negs	r2, r3
 8012c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c56:	401a      	ands	r2, r3
 8012c58:	6a3b      	ldr	r3, [r7, #32]
 8012c5a:	4313      	orrs	r3, r2
 8012c5c:	f043 0310 	orr.w	r3, r3, #16
 8012c60:	617b      	str	r3, [r7, #20]
        
        /* Check if SRD bits need to be set.  */
        if (data_size < block_size)
 8012c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d204      	bcs.n	8012c74 <_txm_module_manager_mm_register_setup+0x278>
        {
            srd_bits = _txm_module_manager_calculate_srd_bits(block_size, data_size);
 8012c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c6e:	f7ff fe8a 	bl	8012986 <_txm_module_manager_calculate_srd_bits>
 8012c72:	6278      	str	r0, [r7, #36]	; 0x24
        }
        
        /* Build the base attribute register. */
        base_attribute_register =  region_size | srd_bits | 0x13070000;
 8012c74:	693a      	ldr	r2, [r7, #16]
 8012c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c78:	4313      	orrs	r3, r2
 8012c7a:	f043 5398 	orr.w	r3, r3, #318767104	; 0x13000000
 8012c7e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8012c82:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Is there still some data?  If so set the region enable bit.  */
        if (data_size)
 8012c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d003      	beq.n	8012c92 <_txm_module_manager_mm_register_setup+0x296>
        {
            /* Set the region enable bit.  */
            base_attribute_register =  base_attribute_register | 0x1;
 8012c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8c:	f043 0301 	orr.w	r3, r3, #1
 8012c90:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        /* Setup the MPU Base Address Register.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index] =  base_address_register;
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	69fb      	ldr	r3, [r7, #28]
 8012c96:	3318      	adds	r3, #24
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	4413      	add	r3, r2
 8012c9c:	697a      	ldr	r2, [r7, #20]
 8012c9e:	605a      	str	r2, [r3, #4]
        
        /* Setup the MPU Base Attribute Register.   */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index+1] =  base_attribute_register;
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	3318      	adds	r3, #24
 8012ca8:	009b      	lsls	r3, r3, #2
 8012caa:	4413      	add	r3, r2
 8012cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cae:	605a      	str	r2, [r3, #4]

        /* Adjust the data address.  */
        data_address =  data_address + block_size;
 8012cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb4:	4413      	add	r3, r2
 8012cb6:	637b      	str	r3, [r7, #52]	; 0x34
        
        /* Decrement the data size.  */
        if (data_size > block_size)
 8012cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d904      	bls.n	8012cca <_txm_module_manager_mm_register_setup+0x2ce>
        {
            data_size =  data_size - block_size;
 8012cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8012cc8:	e001      	b.n	8012cce <_txm_module_manager_mm_register_setup+0x2d2>
        }
        else
        {
            data_size =  0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	633b      	str	r3, [r7, #48]	; 0x30
        }
        
        /* Move MPU table index.  */
        mpu_table_index =  mpu_table_index + 2;
 8012cce:	69fb      	ldr	r3, [r7, #28]
 8012cd0:	3302      	adds	r3, #2
 8012cd2:	61fb      	str	r3, [r7, #28]
        
        /* Increment the MPU register index.  */
        mpu_register++;
 8012cd4:	6a3b      	ldr	r3, [r7, #32]
 8012cd6:	3301      	adds	r3, #1
 8012cd8:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TXM_MODULE_MANAGER_DATA_MPU_ENTRIES; i++)
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	61bb      	str	r3, [r7, #24]
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	2b02      	cmp	r3, #2
 8012ce4:	d9b4      	bls.n	8012c50 <_txm_module_manager_mm_register_setup+0x254>
    }

#endif
}
 8012ce6:	bf00      	nop
 8012ce8:	bf00      	nop
 8012cea:	3740      	adds	r7, #64	; 0x40
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <_txm_module_manager_object_allocate>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_manager_object_allocate(VOID **object_ptr_ptr, ULONG object_size, TXM_MODULE_INSTANCE *module_instance)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
TXM_MODULE_ALLOCATED_OBJECT *object_ptr;
UINT                        return_value;


    /* Ensure the object pointer pointer is valid. */
    if (object_ptr_ptr == (VOID **) TX_NULL)
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d101      	bne.n	8012d06 <_txm_module_manager_object_allocate+0x16>
    {

        /* The object pointer pointer is invalid, return an error.  */
        return(TXM_MODULE_INVALID_MEMORY);
 8012d02:	23f4      	movs	r3, #244	; 0xf4
 8012d04:	e052      	b.n	8012dac <_txm_module_manager_object_allocate+0xbc>
    }

    /* Initialize the return pointer to NULL.  */
    *((VOID **) object_ptr_ptr) =  TX_NULL;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	601a      	str	r2, [r3, #0]

    /* Get module manager protection mutex.  */
    _txe_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8012d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8012d10:	4828      	ldr	r0, [pc, #160]	; (8012db4 <_txm_module_manager_object_allocate+0xc4>)
 8012d12:	f7f5 fb83 	bl	800841c <_txe_mutex_get>

    /* Determine if an object pool was created.  */
    if (_txm_module_manager_object_pool_created)
 8012d16:	4b28      	ldr	r3, [pc, #160]	; (8012db8 <_txm_module_manager_object_allocate+0xc8>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d040      	beq.n	8012da0 <_txm_module_manager_object_allocate+0xb0>

    TXM_MODULE_ALLOCATED_OBJECT   *next_object, *previous_object;

        /* Allocate the object requested by the module - adding an extra ULONG in order to
           store the module instance pointer.  */
        return_value =  (ULONG)  _txe_byte_allocate(&_txm_module_manager_object_pool, (VOID **) &object_ptr,
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	f103 0210 	add.w	r2, r3, #16
 8012d24:	f107 0110 	add.w	r1, r7, #16
 8012d28:	2300      	movs	r3, #0
 8012d2a:	4824      	ldr	r0, [pc, #144]	; (8012dbc <_txm_module_manager_object_allocate+0xcc>)
 8012d2c:	f7f4 ff34 	bl	8007b98 <_txe_byte_allocate>
 8012d30:	61f8      	str	r0, [r7, #28]
            (ULONG) (object_size + sizeof(TXM_MODULE_ALLOCATED_OBJECT)), TX_NO_WAIT);

        /* Determine if the request was successful.  */
        if (return_value == TX_SUCCESS)
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d135      	bne.n	8012da4 <_txm_module_manager_object_allocate+0xb4>
        {
            /* Yes, now store the module instance in the allocated memory block.  */

            /* Link the allocated memory to the module instance.  */
            if (module_instance -> txm_module_instance_object_list_count++ == 0)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8012d3e:	1c59      	adds	r1, r3, #1
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	f8c2 147c 	str.w	r1, [r2, #1148]	; 0x47c
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d10a      	bne.n	8012d60 <_txm_module_manager_object_allocate+0x70>
            {
                /* The allocated object list is empty.  Add object to empty list.  */
                module_instance -> txm_module_instance_object_list_head =  object_ptr;
 8012d4a:	693a      	ldr	r2, [r7, #16]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
                object_ptr -> txm_module_allocated_object_next =           object_ptr;
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	693a      	ldr	r2, [r7, #16]
 8012d56:	605a      	str	r2, [r3, #4]
                object_ptr -> txm_module_allocated_object_previous =       object_ptr;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	693a      	ldr	r2, [r7, #16]
 8012d5c:	609a      	str	r2, [r3, #8]
 8012d5e:	e012      	b.n	8012d86 <_txm_module_manager_object_allocate+0x96>
            }
            else
            {
                /* This list is not NULL, add to the end of the list.  */
                next_object =      module_instance -> txm_module_instance_object_list_head;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
 8012d66:	61bb      	str	r3, [r7, #24]
                previous_object =  next_object -> txm_module_allocated_object_previous;
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	689b      	ldr	r3, [r3, #8]
 8012d6c:	617b      	str	r3, [r7, #20]

                /* Place the new object in the list.  */
                next_object -> txm_module_allocated_object_previous =  object_ptr;
 8012d6e:	693a      	ldr	r2, [r7, #16]
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	609a      	str	r2, [r3, #8]
                previous_object -> txm_module_allocated_object_next =  object_ptr;
 8012d74:	693a      	ldr	r2, [r7, #16]
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	605a      	str	r2, [r3, #4]

                /* Setup this object's allocated links.  */
                object_ptr -> txm_module_allocated_object_previous =  previous_object;
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	697a      	ldr	r2, [r7, #20]
 8012d7e:	609a      	str	r2, [r3, #8]
                object_ptr -> txm_module_allocated_object_next =      next_object;
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	69ba      	ldr	r2, [r7, #24]
 8012d84:	605a      	str	r2, [r3, #4]
            }

            /* Setup the module instance pointer in the allocated object.  */
            object_ptr -> txm_module_allocated_object_module_instance =  module_instance;
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	687a      	ldr	r2, [r7, #4]
 8012d8a:	601a      	str	r2, [r3, #0]

            /* Set the object size. */
            object_ptr -> txm_module_object_size =  object_size;
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	60da      	str	r2, [r3, #12]

            /* Move the object pointer forward. This is what the module is given. */
            object_ptr++;
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	3310      	adds	r3, #16
 8012d96:	613b      	str	r3, [r7, #16]

            /* Return this pointer to the application.  */
            *((VOID **) object_ptr_ptr) =  object_ptr;
 8012d98:	693a      	ldr	r2, [r7, #16]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	601a      	str	r2, [r3, #0]
 8012d9e:	e001      	b.n	8012da4 <_txm_module_manager_object_allocate+0xb4>
        }
    }
    else
    {
        /* Set return value to not enabled.  */
        return_value =  TX_NOT_AVAILABLE;
 8012da0:	231d      	movs	r3, #29
 8012da2:	61fb      	str	r3, [r7, #28]
    }

    /* Release the protection mutex.  */
    _txe_mutex_put(&_txm_module_manager_mutex);
 8012da4:	4803      	ldr	r0, [pc, #12]	; (8012db4 <_txm_module_manager_object_allocate+0xc4>)
 8012da6:	f7f5 fbdb 	bl	8008560 <_txe_mutex_put>

    return(return_value);
 8012daa:	69fb      	ldr	r3, [r7, #28]
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3720      	adds	r7, #32
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	2000f604 	.word	0x2000f604
 8012db8:	2000f600 	.word	0x2000f600
 8012dbc:	2000f5cc 	.word	0x2000f5cc

08012dc0 <_txm_module_manager_object_deallocate>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_deallocate(VOID *object_ptr)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b088      	sub	sp, #32
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
TXM_MODULE_INSTANCE         *module_instance;
TXM_MODULE_ALLOCATED_OBJECT *module_allocated_object_ptr;
UINT                        return_value;

    /* Get module manager protection mutex.  */
    _txe_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8012dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8012dcc:	482c      	ldr	r0, [pc, #176]	; (8012e80 <_txm_module_manager_object_deallocate+0xc0>)
 8012dce:	f7f5 fb25 	bl	800841c <_txe_mutex_get>

    /* Determine if an object pool was created.  */
    if (_txm_module_manager_object_pool_created)
 8012dd2:	4b2c      	ldr	r3, [pc, #176]	; (8012e84 <_txm_module_manager_object_deallocate+0xc4>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d047      	beq.n	8012e6a <_txm_module_manager_object_deallocate+0xaa>
    {

    TXM_MODULE_ALLOCATED_OBJECT   *next_object, *previous_object;

        /* Pickup module instance pointer.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 8012dda:	4b2b      	ldr	r3, [pc, #172]	; (8012e88 <_txm_module_manager_object_deallocate+0xc8>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012de2:	61bb      	str	r3, [r7, #24]

        /* Setup the memory pointer.  */
        module_allocated_object_ptr =  (TXM_MODULE_ALLOCATED_OBJECT *) object_ptr;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	617b      	str	r3, [r7, #20]

        /* Position the object pointer backwards to position back to the module manager information.  */
        previous_object =  module_allocated_object_ptr--;
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	f1a3 0210 	sub.w	r2, r3, #16
 8012dee:	617a      	str	r2, [r7, #20]
 8012df0:	613b      	str	r3, [r7, #16]

        /* Make sure the object is valid.  */
        if ((module_allocated_object_ptr == TX_NULL) || (module_allocated_object_ptr -> txm_module_allocated_object_module_instance != module_instance) || (module_instance -> txm_module_instance_object_list_count == 0))
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d009      	beq.n	8012e0c <_txm_module_manager_object_deallocate+0x4c>
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	69ba      	ldr	r2, [r7, #24]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d104      	bne.n	8012e0c <_txm_module_manager_object_deallocate+0x4c>
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <_txm_module_manager_object_deallocate+0x52>
        {
            /* Set return value to invalid pointer.  */
            return_value =  TX_PTR_ERROR;
 8012e0c:	2303      	movs	r3, #3
 8012e0e:	61fb      	str	r3, [r7, #28]
 8012e10:	e02d      	b.n	8012e6e <_txm_module_manager_object_deallocate+0xae>
        }
        else
        {

            /* Unlink the node.  */
            if ((--module_instance -> txm_module_instance_object_list_count) == 0)
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8012e18:	1e5a      	subs	r2, r3, #1
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d104      	bne.n	8012e34 <_txm_module_manager_object_deallocate+0x74>
            {
                /* Only allocated object, just set the allocated list to NULL.  */
                module_instance -> txm_module_instance_object_list_head =  TX_NULL;
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
 8012e32:	e015      	b.n	8012e60 <_txm_module_manager_object_deallocate+0xa0>
            }
            else
            {
                /* Otherwise, not the only allocated object, link-up the neighbors.  */
                next_object =                                           module_allocated_object_ptr -> txm_module_allocated_object_next;
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	60fb      	str	r3, [r7, #12]
                previous_object =                                       module_allocated_object_ptr -> txm_module_allocated_object_previous;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	689b      	ldr	r3, [r3, #8]
 8012e3e:	613b      	str	r3, [r7, #16]
                next_object -> txm_module_allocated_object_previous =   previous_object;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	693a      	ldr	r2, [r7, #16]
 8012e44:	609a      	str	r2, [r3, #8]
                previous_object -> txm_module_allocated_object_next =   next_object;
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	605a      	str	r2, [r3, #4]

                /* See if we have to update the allocated object list head pointer.  */
                if (module_instance -> txm_module_instance_object_list_head == module_allocated_object_ptr)
 8012e4c:	69bb      	ldr	r3, [r7, #24]
 8012e4e:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
 8012e52:	697a      	ldr	r2, [r7, #20]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d103      	bne.n	8012e60 <_txm_module_manager_object_deallocate+0xa0>
                {
                    /* Yes, move the head pointer to the next link. */
                    module_instance -> txm_module_instance_object_list_head =  next_object;
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	68fa      	ldr	r2, [r7, #12]
 8012e5c:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
                }
            }

            /* Release the object memory.  */
            return_value =  (ULONG)  _txe_byte_release((VOID *) module_allocated_object_ptr);
 8012e60:	6978      	ldr	r0, [r7, #20]
 8012e62:	f7f5 f82f 	bl	8007ec4 <_txe_byte_release>
 8012e66:	61f8      	str	r0, [r7, #28]
 8012e68:	e001      	b.n	8012e6e <_txm_module_manager_object_deallocate+0xae>
        }
    }
    else
    {
        /* Set return value to not enabled.  */
        return_value =  TX_NOT_AVAILABLE;
 8012e6a:	231d      	movs	r3, #29
 8012e6c:	61fb      	str	r3, [r7, #28]
    }

    /* Release the protection mutex.  */
    _txe_mutex_put(&_txm_module_manager_mutex);
 8012e6e:	4804      	ldr	r0, [pc, #16]	; (8012e80 <_txm_module_manager_object_deallocate+0xc0>)
 8012e70:	f7f5 fb76 	bl	8008560 <_txe_mutex_put>

    return(return_value);
 8012e74:	69fb      	ldr	r3, [r7, #28]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3720      	adds	r7, #32
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	2000f604 	.word	0x2000f604
 8012e84:	2000f600 	.word	0x2000f600
 8012e88:	2000ef4c 	.word	0x2000ef4c

08012e8c <_txm_module_manager_object_pointer_get>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b086      	sub	sp, #24
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call the secure version of this function with the maximum length
       possible since none was passed.  */
    status =  _txm_module_manager_object_pointer_get_extended(object_type, name, TXM_MODULE_MANAGER_UTIL_MAX_VALUE_OF_TYPE_UNSIGNED(UINT), object_ptr);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9e:	68b9      	ldr	r1, [r7, #8]
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f000 f807 	bl	8012eb4 <_txm_module_manager_object_pointer_get_extended>
 8012ea6:	6178      	str	r0, [r7, #20]
    return(status);
 8012ea8:	697b      	ldr	r3, [r7, #20]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3718      	adds	r7, #24
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
	...

08012eb4 <_txm_module_manager_object_pointer_get_extended>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pointer_get_extended(UINT object_type, CHAR *search_name, UINT search_name_length, VOID **object_ptr)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b094      	sub	sp, #80	; 0x50
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
UINT                    status;
TXM_MODULE_INSTANCE     *module_instance;


    /* Determine if the name or object pointer are NULL.  */
    if ((search_name == TX_NULL) || (object_ptr == TX_NULL))
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d002      	beq.n	8012ece <_txm_module_manager_object_pointer_get_extended+0x1a>
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d101      	bne.n	8012ed2 <_txm_module_manager_object_pointer_get_extended+0x1e>
    {

        /* Return error!  */
        return(TX_PTR_ERROR);
 8012ece:	2303      	movs	r3, #3
 8012ed0:	e19f      	b.n	8013212 <_txm_module_manager_object_pointer_get_extended+0x35e>
    }

    /* Default status to not found.  */
    status =  TX_NO_INSTANCE;
 8012ed2:	230d      	movs	r3, #13
 8012ed4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Set the return value to NULL.  */
    *object_ptr =  TX_NULL;
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012edc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ee0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012ee2:	b672      	cpsid	i
    return(primask_value);
 8012ee4:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts.  */
    TX_DISABLE
 8012ee6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  This will keep other threads from creating and deleting threads.  */
    _tx_thread_preempt_disable++;
 8012ee8:	4b8f      	ldr	r3, [pc, #572]	; (8013128 <_txm_module_manager_object_pointer_get_extended+0x274>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	3301      	adds	r3, #1
 8012eee:	4a8e      	ldr	r2, [pc, #568]	; (8013128 <_txm_module_manager_object_pointer_get_extended+0x274>)
 8012ef0:	6013      	str	r3, [r2, #0]
 8012ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	f383 8810 	msr	PRIMASK, r3
}
 8012efc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Process relative to the object type.  */
    switch(object_type)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	3b01      	subs	r3, #1
 8012f02:	2b07      	cmp	r3, #7
 8012f04:	f200 816e 	bhi.w	80131e4 <_txm_module_manager_object_pointer_get_extended+0x330>
 8012f08:	a201      	add	r2, pc, #4	; (adr r2, 8012f10 <_txm_module_manager_object_pointer_get_extended+0x5c>)
 8012f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f0e:	bf00      	nop
 8012f10:	080130d7 	.word	0x080130d7
 8012f14:	0801317d 	.word	0x0801317d
 8012f18:	08013005 	.word	0x08013005
 8012f1c:	08013091 	.word	0x08013091
 8012f20:	08012fbf 	.word	0x08012fbf
 8012f24:	0801304b 	.word	0x0801304b
 8012f28:	08012f31 	.word	0x08012f31
 8012f2c:	08012f79 	.word	0x08012f79
    /* Determine if a thread object is requested.  */
    case TXM_THREAD_OBJECT:
    {

        /* Loop to find the first matching thread.  */
        i = 0;
 8012f30:	2300      	movs	r3, #0
 8012f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        thread_ptr =  _tx_thread_created_ptr;
 8012f34:	4b7d      	ldr	r3, [pc, #500]	; (801312c <_txm_module_manager_object_pointer_get_extended+0x278>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < _tx_thread_created_count)
 8012f3a:	e017      	b.n	8012f6c <_txm_module_manager_object_pointer_get_extended+0xb8>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, thread_ptr -> tx_thread_name))
 8012f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f40:	461a      	mov	r2, r3
 8012f42:	6879      	ldr	r1, [r7, #4]
 8012f44:	68b8      	ldr	r0, [r7, #8]
 8012f46:	f001 fa30 	bl	80143aa <_txm_module_manager_object_name_compare>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d006      	beq.n	8012f5e <_txm_module_manager_object_pointer_get_extended+0xaa>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) thread_ptr;
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012f54:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 8012f56:	2300      	movs	r3, #0
 8012f58:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8012f5a:	bf00      	nop
            i++;

            /* Move to next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
        }
        break;
 8012f5c:	e145      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8012f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f60:	3301      	adds	r3, #1
 8012f62:	62fb      	str	r3, [r7, #44]	; 0x2c
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 8012f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < _tx_thread_created_count)
 8012f6c:	4b70      	ldr	r3, [pc, #448]	; (8013130 <_txm_module_manager_object_pointer_get_extended+0x27c>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d3e2      	bcc.n	8012f3c <_txm_module_manager_object_pointer_get_extended+0x88>
        break;
 8012f76:	e138      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a timer object is requested.  */
    case TXM_TIMER_OBJECT:
    {

        /* Loop to find the first matching timer.  */
        i = 0;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        timer_ptr =  _tx_timer_created_ptr;
 8012f7c:	4b6d      	ldr	r3, [pc, #436]	; (8013134 <_txm_module_manager_object_pointer_get_extended+0x280>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	64bb      	str	r3, [r7, #72]	; 0x48
        while (i < _tx_timer_created_count)
 8012f82:	e016      	b.n	8012fb2 <_txm_module_manager_object_pointer_get_extended+0xfe>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, timer_ptr -> tx_timer_name))
 8012f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	461a      	mov	r2, r3
 8012f8a:	6879      	ldr	r1, [r7, #4]
 8012f8c:	68b8      	ldr	r0, [r7, #8]
 8012f8e:	f001 fa0c 	bl	80143aa <_txm_module_manager_object_name_compare>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d006      	beq.n	8012fa6 <_txm_module_manager_object_pointer_get_extended+0xf2>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) timer_ptr;
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f9c:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8012fa2:	bf00      	nop
            i++;

            /* Move to next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
        }
        break;
 8012fa4:	e121      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8012fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa8:	3301      	adds	r3, #1
 8012faa:	62fb      	str	r3, [r7, #44]	; 0x2c
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 8012fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb0:	64bb      	str	r3, [r7, #72]	; 0x48
        while (i < _tx_timer_created_count)
 8012fb2:	4b61      	ldr	r3, [pc, #388]	; (8013138 <_txm_module_manager_object_pointer_get_extended+0x284>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d3e3      	bcc.n	8012f84 <_txm_module_manager_object_pointer_get_extended+0xd0>
        break;
 8012fbc:	e115      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a queue object is requested.  */
    case TXM_QUEUE_OBJECT:
    {

        /* Loop to find the first matching queue.  */
        i = 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        queue_ptr =  _tx_queue_created_ptr;
 8012fc2:	4b5e      	ldr	r3, [pc, #376]	; (801313c <_txm_module_manager_object_pointer_get_extended+0x288>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	647b      	str	r3, [r7, #68]	; 0x44
        while (i < _tx_queue_created_count)
 8012fc8:	e016      	b.n	8012ff8 <_txm_module_manager_object_pointer_get_extended+0x144>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, queue_ptr -> tx_queue_name))
 8012fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	6879      	ldr	r1, [r7, #4]
 8012fd2:	68b8      	ldr	r0, [r7, #8]
 8012fd4:	f001 f9e9 	bl	80143aa <_txm_module_manager_object_name_compare>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d006      	beq.n	8012fec <_txm_module_manager_object_pointer_get_extended+0x138>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) queue_ptr;
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fe2:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8012fe8:	bf00      	nop
            i++;

            /* Move to next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
        }
        break;
 8012fea:	e0fe      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8012fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fee:	3301      	adds	r3, #1
 8012ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 8012ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ff6:	647b      	str	r3, [r7, #68]	; 0x44
        while (i < _tx_queue_created_count)
 8012ff8:	4b51      	ldr	r3, [pc, #324]	; (8013140 <_txm_module_manager_object_pointer_get_extended+0x28c>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d3e3      	bcc.n	8012fca <_txm_module_manager_object_pointer_get_extended+0x116>
        break;
 8013002:	e0f2      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a event flags object is requested.  */
    case TXM_EVENT_FLAGS_OBJECT:
    {

        /* Loop to find the first matching event flags group.  */
        i = 0;
 8013004:	2300      	movs	r3, #0
 8013006:	62fb      	str	r3, [r7, #44]	; 0x2c
        events_ptr =  _tx_event_flags_created_ptr;
 8013008:	4b4e      	ldr	r3, [pc, #312]	; (8013144 <_txm_module_manager_object_pointer_get_extended+0x290>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	643b      	str	r3, [r7, #64]	; 0x40
        while (i < _tx_event_flags_created_count)
 801300e:	e016      	b.n	801303e <_txm_module_manager_object_pointer_get_extended+0x18a>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, events_ptr -> tx_event_flags_group_name))
 8013010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	461a      	mov	r2, r3
 8013016:	6879      	ldr	r1, [r7, #4]
 8013018:	68b8      	ldr	r0, [r7, #8]
 801301a:	f001 f9c6 	bl	80143aa <_txm_module_manager_object_name_compare>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d006      	beq.n	8013032 <_txm_module_manager_object_pointer_get_extended+0x17e>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) events_ptr;
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013028:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 801302a:	2300      	movs	r3, #0
 801302c:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 801302e:	bf00      	nop
            i++;

            /* Move to next event flags group.  */
            events_ptr =  events_ptr -> tx_event_flags_group_created_next;
        }
        break;
 8013030:	e0db      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8013032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013034:	3301      	adds	r3, #1
 8013036:	62fb      	str	r3, [r7, #44]	; 0x2c
            events_ptr =  events_ptr -> tx_event_flags_group_created_next;
 8013038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801303a:	699b      	ldr	r3, [r3, #24]
 801303c:	643b      	str	r3, [r7, #64]	; 0x40
        while (i < _tx_event_flags_created_count)
 801303e:	4b42      	ldr	r3, [pc, #264]	; (8013148 <_txm_module_manager_object_pointer_get_extended+0x294>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013044:	429a      	cmp	r2, r3
 8013046:	d3e3      	bcc.n	8013010 <_txm_module_manager_object_pointer_get_extended+0x15c>
        break;
 8013048:	e0cf      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a semaphore object is requested.  */
    case TXM_SEMAPHORE_OBJECT:
    {

        /* Loop to find the first matching semaphore.  */
        i = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	62fb      	str	r3, [r7, #44]	; 0x2c
        semaphore_ptr =  _tx_semaphore_created_ptr;
 801304e:	4b3f      	ldr	r3, [pc, #252]	; (801314c <_txm_module_manager_object_pointer_get_extended+0x298>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (i < _tx_semaphore_created_count)
 8013054:	e016      	b.n	8013084 <_txm_module_manager_object_pointer_get_extended+0x1d0>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, semaphore_ptr -> tx_semaphore_name))
 8013056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	461a      	mov	r2, r3
 801305c:	6879      	ldr	r1, [r7, #4]
 801305e:	68b8      	ldr	r0, [r7, #8]
 8013060:	f001 f9a3 	bl	80143aa <_txm_module_manager_object_name_compare>
 8013064:	4603      	mov	r3, r0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d006      	beq.n	8013078 <_txm_module_manager_object_pointer_get_extended+0x1c4>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) semaphore_ptr;
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801306e:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 8013070:	2300      	movs	r3, #0
 8013072:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8013074:	bf00      	nop
            i++;

            /* Move to next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
        }
        break;
 8013076:	e0b8      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8013078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307a:	3301      	adds	r3, #1
 801307c:	62fb      	str	r3, [r7, #44]	; 0x2c
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 801307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013080:	695b      	ldr	r3, [r3, #20]
 8013082:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (i < _tx_semaphore_created_count)
 8013084:	4b32      	ldr	r3, [pc, #200]	; (8013150 <_txm_module_manager_object_pointer_get_extended+0x29c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801308a:	429a      	cmp	r2, r3
 801308c:	d3e3      	bcc.n	8013056 <_txm_module_manager_object_pointer_get_extended+0x1a2>
        break;
 801308e:	e0ac      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a mutex object is requested.  */
    case TXM_MUTEX_OBJECT:
    {

        /* Loop to find the first matching mutex.  */
        i = 0;
 8013090:	2300      	movs	r3, #0
 8013092:	62fb      	str	r3, [r7, #44]	; 0x2c
        mutex_ptr =  _tx_mutex_created_ptr;
 8013094:	4b2f      	ldr	r3, [pc, #188]	; (8013154 <_txm_module_manager_object_pointer_get_extended+0x2a0>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	63bb      	str	r3, [r7, #56]	; 0x38
        while (i < _tx_mutex_created_count)
 801309a:	e016      	b.n	80130ca <_txm_module_manager_object_pointer_get_extended+0x216>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, mutex_ptr -> tx_mutex_name))
 801309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	461a      	mov	r2, r3
 80130a2:	6879      	ldr	r1, [r7, #4]
 80130a4:	68b8      	ldr	r0, [r7, #8]
 80130a6:	f001 f980 	bl	80143aa <_txm_module_manager_object_name_compare>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d006      	beq.n	80130be <_txm_module_manager_object_pointer_get_extended+0x20a>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) mutex_ptr;
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130b4:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 80130b6:	2300      	movs	r3, #0
 80130b8:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80130ba:	bf00      	nop
            i++;

            /* Move to next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
        }
        break;
 80130bc:	e095      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 80130be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c0:	3301      	adds	r3, #1
 80130c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 80130c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c6:	6a1b      	ldr	r3, [r3, #32]
 80130c8:	63bb      	str	r3, [r7, #56]	; 0x38
        while (i < _tx_mutex_created_count)
 80130ca:	4b23      	ldr	r3, [pc, #140]	; (8013158 <_txm_module_manager_object_pointer_get_extended+0x2a4>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d3e3      	bcc.n	801309c <_txm_module_manager_object_pointer_get_extended+0x1e8>
        break;
 80130d4:	e089      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a block pool object is requested.  */
    case TXM_BLOCK_POOL_OBJECT:
    {

        /* Get the module instance.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 80130d6:	4b21      	ldr	r3, [pc, #132]	; (801315c <_txm_module_manager_object_pointer_get_extended+0x2a8>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130de:	623b      	str	r3, [r7, #32]

        /* Is a module making this request?  */
        if (module_instance != TX_NULL)
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d008      	beq.n	80130f8 <_txm_module_manager_object_pointer_get_extended+0x244>
        {

            /* Is memory protection enabled?  */
            if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80130e6:	6a3b      	ldr	r3, [r7, #32]
 80130e8:	68db      	ldr	r3, [r3, #12]
 80130ea:	f003 0302 	and.w	r3, r3, #2
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d002      	beq.n	80130f8 <_txm_module_manager_object_pointer_get_extended+0x244>
            {

                /* Modules with memory protection can only access block pools they created.  */
                status =  TXM_MODULE_INVALID;
 80130f2:	23f2      	movs	r3, #242	; 0xf2
 80130f4:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80130f6:	e078      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            }
        }

        /* Loop to find the first matching block pool.  */
        i = 0;
 80130f8:	2300      	movs	r3, #0
 80130fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        block_pool_ptr =  _tx_block_pool_created_ptr;
 80130fc:	4b18      	ldr	r3, [pc, #96]	; (8013160 <_txm_module_manager_object_pointer_get_extended+0x2ac>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	637b      	str	r3, [r7, #52]	; 0x34
        while (i < _tx_block_pool_created_count)
 8013102:	e035      	b.n	8013170 <_txm_module_manager_object_pointer_get_extended+0x2bc>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, block_pool_ptr -> tx_block_pool_name))
 8013104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	461a      	mov	r2, r3
 801310a:	6879      	ldr	r1, [r7, #4]
 801310c:	68b8      	ldr	r0, [r7, #8]
 801310e:	f001 f94c 	bl	80143aa <_txm_module_manager_object_name_compare>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d025      	beq.n	8013164 <_txm_module_manager_object_pointer_get_extended+0x2b0>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) block_pool_ptr;
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801311c:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 801311e:	2300      	movs	r3, #0
 8013120:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8013122:	bf00      	nop
            i++;

            /* Move to next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
        }
        break;
 8013124:	e061      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
 8013126:	bf00      	nop
 8013128:	2000efe8 	.word	0x2000efe8
 801312c:	2000ef54 	.word	0x2000ef54
 8013130:	2000ef58 	.word	0x2000ef58
 8013134:	2000f08c 	.word	0x2000f08c
 8013138:	2000f090 	.word	0x2000f090
 801313c:	2000ef1c 	.word	0x2000ef1c
 8013140:	2000ef20 	.word	0x2000ef20
 8013144:	2000ef24 	.word	0x2000ef24
 8013148:	2000ef28 	.word	0x2000ef28
 801314c:	2000ef14 	.word	0x2000ef14
 8013150:	2000ef18 	.word	0x2000ef18
 8013154:	2000ef2c 	.word	0x2000ef2c
 8013158:	2000ef30 	.word	0x2000ef30
 801315c:	2000ef4c 	.word	0x2000ef4c
 8013160:	2000ef34 	.word	0x2000ef34
            i++;
 8013164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013166:	3301      	adds	r3, #1
 8013168:	62fb      	str	r3, [r7, #44]	; 0x2c
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 801316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801316e:	637b      	str	r3, [r7, #52]	; 0x34
        while (i < _tx_block_pool_created_count)
 8013170:	4b2a      	ldr	r3, [pc, #168]	; (801321c <_txm_module_manager_object_pointer_get_extended+0x368>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013176:	429a      	cmp	r2, r3
 8013178:	d3c4      	bcc.n	8013104 <_txm_module_manager_object_pointer_get_extended+0x250>
        break;
 801317a:	e036      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a byte pool object is requested.  */
    case TXM_BYTE_POOL_OBJECT:
    {

        /* Get the module instance.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 801317c:	4b28      	ldr	r3, [pc, #160]	; (8013220 <_txm_module_manager_object_pointer_get_extended+0x36c>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013184:	623b      	str	r3, [r7, #32]

        /* Is a module making this request?  */
        if (module_instance != TX_NULL)
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d008      	beq.n	801319e <_txm_module_manager_object_pointer_get_extended+0x2ea>
        {

            /* Is memory protection enabled?  */
            if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801318c:	6a3b      	ldr	r3, [r7, #32]
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	f003 0302 	and.w	r3, r3, #2
 8013194:	2b00      	cmp	r3, #0
 8013196:	d002      	beq.n	801319e <_txm_module_manager_object_pointer_get_extended+0x2ea>
            {

                /* Modules with memory protection can only access block pools they created.  */
                status =  TXM_MODULE_INVALID;
 8013198:	23f2      	movs	r3, #242	; 0xf2
 801319a:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 801319c:	e025      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            }
        }

        /* Loop to find the first matching byte pool.  */
        i = 0;
 801319e:	2300      	movs	r3, #0
 80131a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 80131a2:	4b20      	ldr	r3, [pc, #128]	; (8013224 <_txm_module_manager_object_pointer_get_extended+0x370>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	633b      	str	r3, [r7, #48]	; 0x30
        while (i < _tx_byte_pool_created_count)
 80131a8:	e016      	b.n	80131d8 <_txm_module_manager_object_pointer_get_extended+0x324>
        {

            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, byte_pool_ptr -> tx_byte_pool_name))
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	461a      	mov	r2, r3
 80131b0:	6879      	ldr	r1, [r7, #4]
 80131b2:	68b8      	ldr	r0, [r7, #8]
 80131b4:	f001 f8f9 	bl	80143aa <_txm_module_manager_object_name_compare>
 80131b8:	4603      	mov	r3, r0
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d006      	beq.n	80131cc <_txm_module_manager_object_pointer_get_extended+0x318>
            {

                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) byte_pool_ptr;
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131c2:	601a      	str	r2, [r3, #0]

                /* Set the the status to success!  */
                status =  TX_SUCCESS;
 80131c4:	2300      	movs	r3, #0
 80131c6:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80131c8:	bf00      	nop
            i++;

            /* Move to next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
        }
        break;
 80131ca:	e00e      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 80131cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ce:	3301      	adds	r3, #1
 80131d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 80131d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131d6:	633b      	str	r3, [r7, #48]	; 0x30
        while (i < _tx_byte_pool_created_count)
 80131d8:	4b13      	ldr	r3, [pc, #76]	; (8013228 <_txm_module_manager_object_pointer_get_extended+0x374>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131de:	429a      	cmp	r2, r3
 80131e0:	d3e3      	bcc.n	80131aa <_txm_module_manager_object_pointer_get_extended+0x2f6>
        break;
 80131e2:	e002      	b.n	80131ea <_txm_module_manager_object_pointer_get_extended+0x336>
    }

    default:

        /* Invalid object ID.  */
        status =  TX_OPTION_ERROR;
 80131e4:	2308      	movs	r3, #8
 80131e6:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Call the USBX object get function.  */
            status =  _txm_module_manager_usbx_object_pointer_get(object_type, search_name, search_name_length, object_ptr);
        }
#endif

        break;
 80131e8:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80131ea:	f3ef 8310 	mrs	r3, PRIMASK
 80131ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80131f0:	b672      	cpsid	i
    return(primask_value);
 80131f2:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80131f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Enable preemption again.  */
    _tx_thread_preempt_disable--;
 80131f6:	4b0d      	ldr	r3, [pc, #52]	; (801322c <_txm_module_manager_object_pointer_get_extended+0x378>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	3b01      	subs	r3, #1
 80131fc:	4a0b      	ldr	r2, [pc, #44]	; (801322c <_txm_module_manager_object_pointer_get_extended+0x378>)
 80131fe:	6013      	str	r3, [r2, #0]
 8013200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013202:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	f383 8810 	msr	PRIMASK, r3
}
 801320a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801320c:	f7f3 f9b6 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(status);
 8013210:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013212:	4618      	mov	r0, r3
 8013214:	3750      	adds	r7, #80	; 0x50
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	2000ef38 	.word	0x2000ef38
 8013220:	2000ef4c 	.word	0x2000ef4c
 8013224:	2000ef3c 	.word	0x2000ef3c
 8013228:	2000ef40 	.word	0x2000ef40
 801322c:	2000efe8 	.word	0x2000efe8

08013230 <_txm_module_manager_object_pool_create>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pool_create(VOID *object_memory, ULONG object_memory_size)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]

    /* Create a byte pool for allocating RAM areas for modules.  */
    _tx_byte_pool_create(&_txm_module_manager_object_pool, "Module Manager Object Pool", object_memory, object_memory_size);
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	4906      	ldr	r1, [pc, #24]	; (8013258 <_txm_module_manager_object_pool_create+0x28>)
 8013240:	4806      	ldr	r0, [pc, #24]	; (801325c <_txm_module_manager_object_pool_create+0x2c>)
 8013242:	f7ef f949 	bl	80024d8 <_tx_byte_pool_create>

    /* Indicate the module manager object pool has been created.  */
    _txm_module_manager_object_pool_created =  TX_TRUE;
 8013246:	4b06      	ldr	r3, [pc, #24]	; (8013260 <_txm_module_manager_object_pool_create+0x30>)
 8013248:	2201      	movs	r2, #1
 801324a:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 801324c:	2300      	movs	r3, #0
}
 801324e:	4618      	mov	r0, r3
 8013250:	3708      	adds	r7, #8
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	08015f58 	.word	0x08015f58
 801325c:	2000f5cc 	.word	0x2000f5cc
 8013260:	2000f600 	.word	0x2000f600

08013264 <_txm_module_manager_properties_get>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_properties_get(TXM_MODULE_INSTANCE *module_instance, ULONG *module_properties_ptr)
{
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 801326e:	4b11      	ldr	r3, [pc, #68]	; (80132b4 <_txm_module_manager_properties_get+0x50>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	2b01      	cmp	r3, #1
 8013274:	d001      	beq.n	801327a <_txm_module_manager_properties_get+0x16>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 8013276:	231d      	movs	r3, #29
 8013278:	e015      	b.n	80132a6 <_txm_module_manager_properties_get+0x42>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d101      	bne.n	8013284 <_txm_module_manager_properties_get+0x20>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013280:	2303      	movs	r3, #3
 8013282:	e010      	b.n	80132a6 <_txm_module_manager_properties_get+0x42>
    }

    /* Check the module ID.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a0b      	ldr	r2, [pc, #44]	; (80132b8 <_txm_module_manager_properties_get+0x54>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d001      	beq.n	8013292 <_txm_module_manager_properties_get+0x2e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 801328e:	2303      	movs	r3, #3
 8013290:	e009      	b.n	80132a6 <_txm_module_manager_properties_get+0x42>
    }

    /* Check for non-null buffer.  */
    if (module_properties_ptr == TX_NULL)
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d101      	bne.n	801329c <_txm_module_manager_properties_get+0x38>
    {

        /* Invalid buffer pointer.  */
        return(TX_PTR_ERROR);
 8013298:	2303      	movs	r3, #3
 801329a:	e004      	b.n	80132a6 <_txm_module_manager_properties_get+0x42>
    }

    /* Simply return the property bitmap.  */
    *module_properties_ptr =  module_instance -> txm_module_instance_property_flags;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	68da      	ldr	r2, [r3, #12]
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 80132a4:	2300      	movs	r3, #0
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	2000f640 	.word	0x2000f640
 80132b8:	4d4f4455 	.word	0x4d4f4455

080132bc <_txm_module_manager_queue_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_queue_notify_trampoline(TX_QUEUE *queue_ptr)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b096      	sub	sp, #88	; 0x58
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80132c4:	f3ef 8310 	mrs	r3, PRIMASK
 80132c8:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" CPSID i" : : : "memory" );
 80132ca:	b672      	cpsid	i
    return(primask_value);
 80132cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80132ce:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) queue_ptr -> tx_queue_module_instance;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132d4:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80132d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d034      	beq.n	8013346 <_txm_module_manager_queue_notify_trampoline+0x8a>
 80132dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	4a20      	ldr	r2, [pc, #128]	; (8013364 <_txm_module_manager_queue_notify_trampoline+0xa8>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d12f      	bne.n	8013346 <_txm_module_manager_queue_notify_trampoline+0x8a>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 80132e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132e8:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80132ea:	2b02      	cmp	r3, #2
 80132ec:	d12b      	bne.n	8013346 <_txm_module_manager_queue_notify_trampoline+0x8a>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 80132ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80132f4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_QUEUE_SEND_CALLBACK;
 80132f6:	2302      	movs	r3, #2
 80132f8:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 80132fa:	2301      	movs	r3, #1
 80132fc:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) queue_ptr -> tx_queue_send_module_notify;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013302:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) queue_ptr;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 8013308:	2300      	movs	r3, #0
 801330a:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 801330c:	2300      	movs	r3, #0
 801330e:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 8013310:	2300      	movs	r3, #0
 8013312:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 8013314:	2300      	movs	r3, #0
 8013316:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 8013318:	2300      	movs	r3, #0
 801331a:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 801331c:	2300      	movs	r3, #0
 801331e:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 8013320:	2300      	movs	r3, #0
 8013322:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 8013324:	2300      	movs	r3, #0
 8013326:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 8013328:	2300      	movs	r3, #0
 801332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801332c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801332e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013332:	f383 8810 	msr	PRIMASK, r3
}
 8013336:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 8013338:	f107 030c 	add.w	r3, r7, #12
 801333c:	4619      	mov	r1, r3
 801333e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013340:	f7f6 fb54 	bl	80099ec <_txm_module_manager_callback_request>
 8013344:	e00a      	b.n	801335c <_txm_module_manager_queue_notify_trampoline+0xa0>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 8013346:	4b08      	ldr	r3, [pc, #32]	; (8013368 <_txm_module_manager_queue_notify_trampoline+0xac>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	3301      	adds	r3, #1
 801334c:	4a06      	ldr	r2, [pc, #24]	; (8013368 <_txm_module_manager_queue_notify_trampoline+0xac>)
 801334e:	6013      	str	r3, [r2, #0]
 8013350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013352:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013356:	f383 8810 	msr	PRIMASK, r3
}
 801335a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 801335c:	bf00      	nop
 801335e:	3758      	adds	r7, #88	; 0x58
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	4d4f4455 	.word	0x4d4f4455
 8013368:	2000f648 	.word	0x2000f648

0801336c <_txm_module_manager_semaphore_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_semaphore_notify_trampoline(TX_SEMAPHORE *semaphore_ptr)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b096      	sub	sp, #88	; 0x58
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013374:	f3ef 8310 	mrs	r3, PRIMASK
 8013378:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" CPSID i" : : : "memory" );
 801337a:	b672      	cpsid	i
    return(primask_value);
 801337c:	6cbb      	ldr	r3, [r7, #72]	; 0x48


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801337e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) semaphore_ptr -> tx_semaphore_module_instance;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6a1b      	ldr	r3, [r3, #32]
 8013384:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8013386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013388:	2b00      	cmp	r3, #0
 801338a:	d034      	beq.n	80133f6 <_txm_module_manager_semaphore_notify_trampoline+0x8a>
 801338c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	4a20      	ldr	r2, [pc, #128]	; (8013414 <_txm_module_manager_semaphore_notify_trampoline+0xa8>)
 8013392:	4293      	cmp	r3, r2
 8013394:	d12f      	bne.n	80133f6 <_txm_module_manager_semaphore_notify_trampoline+0x8a>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 8013396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013398:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 801339a:	2b02      	cmp	r3, #2
 801339c:	d12b      	bne.n	80133f6 <_txm_module_manager_semaphore_notify_trampoline+0x8a>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 801339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80133a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_SEMAPHORE_PUT_CALLBACK;
 80133a6:	2303      	movs	r3, #3
 80133a8:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 80133aa:	2301      	movs	r3, #1
 80133ac:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) semaphore_ptr -> tx_semaphore_put_module_notify;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b2:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) semaphore_ptr;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 80133b8:	2300      	movs	r3, #0
 80133ba:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 80133bc:	2300      	movs	r3, #0
 80133be:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 80133c4:	2300      	movs	r3, #0
 80133c6:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 80133d0:	2300      	movs	r3, #0
 80133d2:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 80133d4:	2300      	movs	r3, #0
 80133d6:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 80133d8:	2300      	movs	r3, #0
 80133da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80133dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133de:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80133e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133e2:	f383 8810 	msr	PRIMASK, r3
}
 80133e6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 80133e8:	f107 030c 	add.w	r3, r7, #12
 80133ec:	4619      	mov	r1, r3
 80133ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80133f0:	f7f6 fafc 	bl	80099ec <_txm_module_manager_callback_request>
 80133f4:	e00a      	b.n	801340c <_txm_module_manager_semaphore_notify_trampoline+0xa0>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 80133f6:	4b08      	ldr	r3, [pc, #32]	; (8013418 <_txm_module_manager_semaphore_notify_trampoline+0xac>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	3301      	adds	r3, #1
 80133fc:	4a06      	ldr	r2, [pc, #24]	; (8013418 <_txm_module_manager_semaphore_notify_trampoline+0xac>)
 80133fe:	6013      	str	r3, [r2, #0]
 8013400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013402:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013406:	f383 8810 	msr	PRIMASK, r3
}
 801340a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 801340c:	bf00      	nop
 801340e:	3758      	adds	r7, #88	; 0x58
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	4d4f4455 	.word	0x4d4f4455
 8013418:	2000f648 	.word	0x2000f648

0801341c <_txm_module_manager_start>:
/*  12-31-2020      Scott Larson            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_start(TXM_MODULE_INSTANCE *module_instance)
{
 801341c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801341e:	b091      	sub	sp, #68	; 0x44
 8013420:	af0a      	add	r7, sp, #40	; 0x28
 8013422:	60f8      	str	r0, [r7, #12]

UINT    status;


    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8013424:	4b6e      	ldr	r3, [pc, #440]	; (80135e0 <_txm_module_manager_start+0x1c4>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b01      	cmp	r3, #1
 801342a:	d001      	beq.n	8013430 <_txm_module_manager_start+0x14>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 801342c:	231d      	movs	r3, #29
 801342e:	e0d3      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d101      	bne.n	801343a <_txm_module_manager_start+0x1e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013436:	2303      	movs	r3, #3
 8013438:	e0ce      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 801343a:	f04f 31ff 	mov.w	r1, #4294967295
 801343e:	4869      	ldr	r0, [pc, #420]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 8013440:	f7f0 fb32 	bl	8003aa8 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	4a67      	ldr	r2, [pc, #412]	; (80135e8 <_txm_module_manager_start+0x1cc>)
 801344a:	4293      	cmp	r3, r2
 801344c:	d004      	beq.n	8013458 <_txm_module_manager_start+0x3c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 801344e:	4865      	ldr	r0, [pc, #404]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 8013450:	f7f0 fde8 	bl	8004024 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013454:	2303      	movs	r3, #3
 8013456:	e0bf      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Determine if the module instance is in the loaded state.  */
    if ((module_instance -> txm_module_instance_state != TXM_MODULE_LOADED) && (module_instance -> txm_module_instance_state != TXM_MODULE_STOPPED))
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	689b      	ldr	r3, [r3, #8]
 801345c:	2b01      	cmp	r3, #1
 801345e:	d008      	beq.n	8013472 <_txm_module_manager_start+0x56>
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	689b      	ldr	r3, [r3, #8]
 8013464:	2b04      	cmp	r3, #4
 8013466:	d004      	beq.n	8013472 <_txm_module_manager_start+0x56>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013468:	485e      	ldr	r0, [pc, #376]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 801346a:	f7f0 fddb 	bl	8004024 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 801346e:	2310      	movs	r3, #16
 8013470:	e0b2      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Check the priorities of the start/stop and callback request threads. */
    if (module_instance -> txm_module_instance_start_stop_priority < module_instance -> txm_module_instance_maximum_priority ||
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 801347e:	429a      	cmp	r2, r3
 8013480:	d307      	bcc.n	8013492 <_txm_module_manager_start+0x76>
        module_instance -> txm_module_instance_callback_priority < module_instance -> txm_module_instance_maximum_priority)
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f8d3 246c 	ldr.w	r2, [r3, #1132]	; 0x46c
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
    if (module_instance -> txm_module_instance_start_stop_priority < module_instance -> txm_module_instance_maximum_priority ||
 801348e:	429a      	cmp	r2, r3
 8013490:	d204      	bcs.n	801349c <_txm_module_manager_start+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013492:	4854      	ldr	r0, [pc, #336]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 8013494:	f7f0 fdc6 	bl	8004024 <_tx_mutex_put>

        /* At least one thread has an invalid priority.  */
        return(TX_PRIORITY_ERROR);
 8013498:	230f      	movs	r3, #15
 801349a:	e09d      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Create the module's callback request queue.  */
    status = _tx_queue_create(&(module_instance -> txm_module_instance_callback_request_queue), "Module Callback Request Queue", (sizeof(TXM_MODULE_CALLBACK_MESSAGE)/sizeof(ULONG)),
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f503 701f 	add.w	r0, r3, #636	; 0x27c
                              module_instance -> txm_module_instance_callback_request_queue_area, sizeof(module_instance -> txm_module_instance_callback_request_queue_area));
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
    status = _tx_queue_create(&(module_instance -> txm_module_instance_callback_request_queue), "Module Callback Request Queue", (sizeof(TXM_MODULE_CALLBACK_MESSAGE)/sizeof(ULONG)),
 80134a8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80134ac:	9200      	str	r2, [sp, #0]
 80134ae:	220d      	movs	r2, #13
 80134b0:	494e      	ldr	r1, [pc, #312]	; (80135ec <_txm_module_manager_start+0x1d0>)
 80134b2:	f7f1 f817 	bl	80044e4 <_tx_queue_create>
 80134b6:	6178      	str	r0, [r7, #20]

    /* Determine if there was an error.  */
    if (status)
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d004      	beq.n	80134c8 <_txm_module_manager_start+0xac>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80134be:	4849      	ldr	r0, [pc, #292]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 80134c0:	f7f0 fdb0 	bl	8004024 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 80134c4:	2310      	movs	r3, #16
 80134c6:	e087      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Create the module start thread.  */
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f103 06ac 	add.w	r6, r3, #172	; 0xac
                                                "Module Start Thread",
                                                module_instance -> txm_module_instance_shell_entry_function,
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134d2:	60bb      	str	r3, [r7, #8]
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80134d8:	6079      	str	r1, [r7, #4]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80134e4:	68f9      	ldr	r1, [r7, #12]
 80134e6:	f8d1 1460 	ldr.w	r1, [r1, #1120]	; 0x460
                                                module_instance -> txm_module_instance_start_thread_entry,
                                                module_instance -> txm_module_instance_application_module_id,
                                                module_instance -> txm_module_instance_start_stop_stack_start_address,
                                                module_instance -> txm_module_instance_start_stop_stack_size,
                                                (UINT) module_instance -> txm_module_instance_start_stop_priority,
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f8d0 0464 	ldr.w	r0, [r0, #1124]	; 0x464
                                                (UINT) module_instance -> txm_module_instance_start_stop_priority,
 80134f0:	68fc      	ldr	r4, [r7, #12]
 80134f2:	f8d4 4464 	ldr.w	r4, [r4, #1124]	; 0x464
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80134f6:	68fd      	ldr	r5, [r7, #12]
 80134f8:	9508      	str	r5, [sp, #32]
 80134fa:	25e8      	movs	r5, #232	; 0xe8
 80134fc:	9507      	str	r5, [sp, #28]
 80134fe:	2500      	movs	r5, #0
 8013500:	9506      	str	r5, [sp, #24]
 8013502:	2504      	movs	r5, #4
 8013504:	9505      	str	r5, [sp, #20]
 8013506:	9404      	str	r4, [sp, #16]
 8013508:	9003      	str	r0, [sp, #12]
 801350a:	9102      	str	r1, [sp, #8]
 801350c:	9201      	str	r2, [sp, #4]
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	68ba      	ldr	r2, [r7, #8]
 8013514:	4936      	ldr	r1, [pc, #216]	; (80135f0 <_txm_module_manager_start+0x1d4>)
 8013516:	4630      	mov	r0, r6
 8013518:	f000 facc 	bl	8013ab4 <_txm_module_manager_thread_create>
 801351c:	6178      	str	r0, [r7, #20]
                                                TX_DONT_START,
                                                sizeof(TX_THREAD),
                                                module_instance);

    /* Determine if the thread create was successful.  */
    if (status != TX_SUCCESS)
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00a      	beq.n	801353a <_txm_module_manager_start+0x11e>
    {

        /* Delete the callback notification queue.  */
        _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801352a:	4618      	mov	r0, r3
 801352c:	f7f1 f84c 	bl	80045c8 <_tx_queue_delete>

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013530:	482c      	ldr	r0, [pc, #176]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 8013532:	f7f0 fd77 	bl	8004024 <_tx_mutex_put>

        /* Return the error status.  */
        return(status);
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	e04e      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }

    /* Create the module callback thread.  */
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f503 76ca 	add.w	r6, r3, #404	; 0x194
                                                "Module Callback Request Thread",
                                                module_instance -> txm_module_instance_shell_entry_function,
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013544:	60bb      	str	r3, [r7, #8]
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	6e19      	ldr	r1, [r3, #96]	; 0x60
 801354a:	6079      	str	r1, [r7, #4]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013556:	68f9      	ldr	r1, [r7, #12]
 8013558:	f8d1 1468 	ldr.w	r1, [r1, #1128]	; 0x468
                                                module_instance -> txm_module_instance_callback_request_thread_entry,
                                                module_instance -> txm_module_instance_application_module_id,
                                                module_instance -> txm_module_instance_callback_stack_start_address,
                                                module_instance -> txm_module_instance_callback_stack_size,
                                                (UINT) module_instance -> txm_module_instance_callback_priority,
 801355c:	68f8      	ldr	r0, [r7, #12]
 801355e:	f8d0 046c 	ldr.w	r0, [r0, #1132]	; 0x46c
                                                (UINT) module_instance -> txm_module_instance_callback_priority,
 8013562:	68fc      	ldr	r4, [r7, #12]
 8013564:	f8d4 446c 	ldr.w	r4, [r4, #1132]	; 0x46c
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 8013568:	68fd      	ldr	r5, [r7, #12]
 801356a:	9508      	str	r5, [sp, #32]
 801356c:	25e8      	movs	r5, #232	; 0xe8
 801356e:	9507      	str	r5, [sp, #28]
 8013570:	2500      	movs	r5, #0
 8013572:	9506      	str	r5, [sp, #24]
 8013574:	2500      	movs	r5, #0
 8013576:	9505      	str	r5, [sp, #20]
 8013578:	9404      	str	r4, [sp, #16]
 801357a:	9003      	str	r0, [sp, #12]
 801357c:	9102      	str	r1, [sp, #8]
 801357e:	9201      	str	r2, [sp, #4]
 8013580:	9300      	str	r3, [sp, #0]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	68ba      	ldr	r2, [r7, #8]
 8013586:	491b      	ldr	r1, [pc, #108]	; (80135f4 <_txm_module_manager_start+0x1d8>)
 8013588:	4630      	mov	r0, r6
 801358a:	f000 fa93 	bl	8013ab4 <_txm_module_manager_thread_create>
 801358e:	6178      	str	r0, [r7, #20]
                                                TX_DONT_START,
                                                sizeof(TX_THREAD),
                                                module_instance);

    /* Determine if the thread create was successful.  */
    if (status != TX_SUCCESS)
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d014      	beq.n	80135c0 <_txm_module_manager_start+0x1a4>
    {

        /* Terminate the start thread.  */
        _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	33ac      	adds	r3, #172	; 0xac
 801359a:	4618      	mov	r0, r3
 801359c:	f7f3 fac6 	bl	8006b2c <_tx_thread_terminate>

        /* Delete the start thread.  */
        _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	33ac      	adds	r3, #172	; 0xac
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f2 fb55 	bl	8005c54 <_tx_thread_delete>

        /* Delete the callback notification queue.  */
        _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7f1 f809 	bl	80045c8 <_tx_queue_delete>

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80135b6:	480b      	ldr	r0, [pc, #44]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 80135b8:	f7f0 fd34 	bl	8004024 <_tx_mutex_put>

        /* Return the error status.  */
        return(status);
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	e00b      	b.n	80135d8 <_txm_module_manager_start+0x1bc>
    }


    /* Set the module state to started.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STARTED;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2202      	movs	r2, #2
 80135c4:	609a      	str	r2, [r3, #8]

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 80135c6:	4807      	ldr	r0, [pc, #28]	; (80135e4 <_txm_module_manager_start+0x1c8>)
 80135c8:	f7f0 fd2c 	bl	8004024 <_tx_mutex_put>

    /* Resume the module's start thread.  */
    _tx_thread_resume(&(module_instance -> txm_module_instance_start_stop_thread));
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	33ac      	adds	r3, #172	; 0xac
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f2 fe17 	bl	8006204 <_tx_thread_resume>

    /* Return success.  */
    return(TX_SUCCESS);
 80135d6:	2300      	movs	r3, #0
}
 80135d8:	4618      	mov	r0, r3
 80135da:	371c      	adds	r7, #28
 80135dc:	46bd      	mov	sp, r7
 80135de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135e0:	2000f640 	.word	0x2000f640
 80135e4:	2000f604 	.word	0x2000f604
 80135e8:	4d4f4455 	.word	0x4d4f4455
 80135ec:	08015f74 	.word	0x08015f74
 80135f0:	08015f94 	.word	0x08015f94
 80135f4:	08015fa8 	.word	0x08015fa8

080135f8 <_txm_module_manager_stop>:
/*                                            object delete underflow,    */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_stop(TXM_MODULE_INSTANCE *module_instance)
{
 80135f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135fa:	b0a9      	sub	sp, #164	; 0xa4
 80135fc:	af0a      	add	r7, sp, #40	; 0x28
 80135fe:	60f8      	str	r0, [r7, #12]
ULONG                           i;
TXM_MODULE_ALLOCATED_OBJECT     *object_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013600:	4b9a      	ldr	r3, [pc, #616]	; (801386c <_txm_module_manager_stop+0x274>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8013606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013608:	2b00      	cmp	r3, #0
 801360a:	d101      	bne.n	8013610 <_txm_module_manager_stop+0x18>
    {

        /* Illegal caller of this service.  */
        return(TX_CALLER_ERROR);
 801360c:	2313      	movs	r3, #19
 801360e:	e234      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013610:	f3ef 8305 	mrs	r3, IPSR
 8013614:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8013616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    }

    /* Is the caller an ISR or Initialization?  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8013618:	4b95      	ldr	r3, [pc, #596]	; (8013870 <_txm_module_manager_stop+0x278>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	4313      	orrs	r3, r2
 801361e:	2b00      	cmp	r3, #0
 8013620:	d001      	beq.n	8013626 <_txm_module_manager_stop+0x2e>
    {

        /* Illegal caller of this service.  */
        return(TX_CALLER_ERROR);
 8013622:	2313      	movs	r3, #19
 8013624:	e229      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for invalid caller of this function.  First check for a calling thread.  */
    if (thread_ptr == &_tx_timer_thread)
 8013626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013628:	4a92      	ldr	r2, [pc, #584]	; (8013874 <_txm_module_manager_stop+0x27c>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d101      	bne.n	8013632 <_txm_module_manager_stop+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        return(TX_CALLER_ERROR);
 801362e:	2313      	movs	r3, #19
 8013630:	e223      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    }
#endif

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8013632:	4b91      	ldr	r3, [pc, #580]	; (8013878 <_txm_module_manager_stop+0x280>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b01      	cmp	r3, #1
 8013638:	d001      	beq.n	801363e <_txm_module_manager_stop+0x46>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 801363a:	231d      	movs	r3, #29
 801363c:	e21d      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d101      	bne.n	8013648 <_txm_module_manager_stop+0x50>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013644:	2303      	movs	r3, #3
 8013646:	e218      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8013648:	f04f 31ff 	mov.w	r1, #4294967295
 801364c:	488b      	ldr	r0, [pc, #556]	; (801387c <_txm_module_manager_stop+0x284>)
 801364e:	f7f0 fa2b 	bl	8003aa8 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	4a8a      	ldr	r2, [pc, #552]	; (8013880 <_txm_module_manager_stop+0x288>)
 8013658:	4293      	cmp	r3, r2
 801365a:	d004      	beq.n	8013666 <_txm_module_manager_stop+0x6e>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 801365c:	4887      	ldr	r0, [pc, #540]	; (801387c <_txm_module_manager_stop+0x284>)
 801365e:	f7f0 fce1 	bl	8004024 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013662:	2303      	movs	r3, #3
 8013664:	e209      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    }

    /* Determine if the module instance is in the loaded state.  */
    if (module_instance -> txm_module_instance_state != TXM_MODULE_STARTED)
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	689b      	ldr	r3, [r3, #8]
 801366a:	2b02      	cmp	r3, #2
 801366c:	d004      	beq.n	8013678 <_txm_module_manager_stop+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 801366e:	4883      	ldr	r0, [pc, #524]	; (801387c <_txm_module_manager_stop+0x284>)
 8013670:	f7f0 fcd8 	bl	8004024 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 8013674:	2310      	movs	r3, #16
 8013676:	e200      	b.n	8013a7a <_txm_module_manager_stop+0x482>
    }

    /* Set the module state to indicate the module is stopping.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STOPPING;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2203      	movs	r2, #3
 801367c:	609a      	str	r2, [r3, #8]

    /* This thread was previously used as the start thread. So first, make sure it is terminated and deleted before doing anything else.  */
    _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	33ac      	adds	r3, #172	; 0xac
 8013682:	4618      	mov	r0, r3
 8013684:	f7f3 fa52 	bl	8006b2c <_tx_thread_terminate>
    _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	33ac      	adds	r3, #172	; 0xac
 801368c:	4618      	mov	r0, r3
 801368e:	f7f2 fae1 	bl	8005c54 <_tx_thread_delete>

    /* Determine if there is a module stop function.  */
    if (module_instance -> txm_module_instance_stop_thread_entry)
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013696:	2b00      	cmp	r3, #0
 8013698:	d044      	beq.n	8013724 <_txm_module_manager_stop+0x12c>
    {

        /* Yes, there is a stop function.  Build a thread for executing the module stop function.  */

        /* Create the module stop thread.  */
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f103 06ac 	add.w	r6, r3, #172	; 0xac
                                          "Module Stop Thread",
                                          module_instance -> txm_module_instance_shell_entry_function,
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136a4:	60bb      	str	r3, [r7, #8]
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80136aa:	6079      	str	r1, [r7, #4]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 80136b2:	68fa      	ldr	r2, [r7, #12]
 80136b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80136b6:	68f9      	ldr	r1, [r7, #12]
 80136b8:	f8d1 1460 	ldr.w	r1, [r1, #1120]	; 0x460
                                          module_instance -> txm_module_instance_stop_thread_entry,
                                          module_instance -> txm_module_instance_application_module_id,
                                          module_instance -> txm_module_instance_start_stop_stack_start_address,
                                          module_instance -> txm_module_instance_start_stop_stack_size,
                                          (UINT) module_instance -> txm_module_instance_start_stop_priority,
 80136bc:	68f8      	ldr	r0, [r7, #12]
 80136be:	f8d0 0464 	ldr.w	r0, [r0, #1124]	; 0x464
                                          (UINT) module_instance -> txm_module_instance_start_stop_priority,
 80136c2:	68fc      	ldr	r4, [r7, #12]
 80136c4:	f8d4 4464 	ldr.w	r4, [r4, #1124]	; 0x464
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80136c8:	68fd      	ldr	r5, [r7, #12]
 80136ca:	9508      	str	r5, [sp, #32]
 80136cc:	25e8      	movs	r5, #232	; 0xe8
 80136ce:	9507      	str	r5, [sp, #28]
 80136d0:	2501      	movs	r5, #1
 80136d2:	9506      	str	r5, [sp, #24]
 80136d4:	2504      	movs	r5, #4
 80136d6:	9505      	str	r5, [sp, #20]
 80136d8:	9404      	str	r4, [sp, #16]
 80136da:	9003      	str	r0, [sp, #12]
 80136dc:	9102      	str	r1, [sp, #8]
 80136de:	9201      	str	r2, [sp, #4]
 80136e0:	9300      	str	r3, [sp, #0]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	4967      	ldr	r1, [pc, #412]	; (8013884 <_txm_module_manager_stop+0x28c>)
 80136e8:	4630      	mov	r0, r6
 80136ea:	f000 f9e3 	bl	8013ab4 <_txm_module_manager_thread_create>
                                          TX_AUTO_START,
                                          sizeof(TX_THREAD),
                                          module_instance);

        /* Wait for the stop thread to complete.  */
        i =  0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	657b      	str	r3, [r7, #84]	; 0x54
        while ((i < TXM_MODULE_TIMEOUT) && (module_instance -> txm_module_instance_start_stop_thread.tx_thread_state != TX_COMPLETED))
 80136f2:	e005      	b.n	8013700 <_txm_module_manager_stop+0x108>
        {

            /* Sleep to let the module stop thread run.  */
            _tx_thread_sleep(1);
 80136f4:	2001      	movs	r0, #1
 80136f6:	f7f2 fe41 	bl	800637c <_tx_thread_sleep>

            /* Increment the counter.  */
            i++;
 80136fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136fc:	3301      	adds	r3, #1
 80136fe:	657b      	str	r3, [r7, #84]	; 0x54
        while ((i < TXM_MODULE_TIMEOUT) && (module_instance -> txm_module_instance_start_stop_thread.tx_thread_state != TX_COMPLETED))
 8013700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013702:	2b63      	cmp	r3, #99	; 0x63
 8013704:	d804      	bhi.n	8013710 <_txm_module_manager_stop+0x118>
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801370c:	2b01      	cmp	r3, #1
 801370e:	d1f1      	bne.n	80136f4 <_txm_module_manager_stop+0xfc>
        }

        /* At this point, we need to terminate and delete the stop thread.  */
        _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	33ac      	adds	r3, #172	; 0xac
 8013714:	4618      	mov	r0, r3
 8013716:	f7f3 fa09 	bl	8006b2c <_tx_thread_terminate>
        _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	33ac      	adds	r3, #172	; 0xac
 801371e:	4618      	mov	r0, r3
 8013720:	f7f2 fa98 	bl	8005c54 <_tx_thread_delete>
    }

    /* Delete the module's callback thread and queue for the callback thread.  */
    _tx_thread_terminate(&(module_instance -> txm_module_instance_callback_request_thread));
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 801372a:	4618      	mov	r0, r3
 801372c:	f7f3 f9fe 	bl	8006b2c <_tx_thread_terminate>
    _tx_thread_delete(&(module_instance -> txm_module_instance_callback_request_thread));
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8013736:	4618      	mov	r0, r3
 8013738:	f7f2 fa8c 	bl	8005c54 <_tx_thread_delete>
    _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8013742:	4618      	mov	r0, r3
 8013744:	f7f0 ff40 	bl	80045c8 <_tx_queue_delete>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013748:	f3ef 8310 	mrs	r3, PRIMASK
 801374c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801374e:	b672      	cpsid	i
    return(primask_value);
 8013750:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts.  */
    TX_DISABLE
 8013752:	653b      	str	r3, [r7, #80]	; 0x50

    /* Temporarily disable preemption.  This will keep other threads from creating and deleting threads.  */
    _tx_thread_preempt_disable++;
 8013754:	4b4c      	ldr	r3, [pc, #304]	; (8013888 <_txm_module_manager_stop+0x290>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	3301      	adds	r3, #1
 801375a:	4a4b      	ldr	r2, [pc, #300]	; (8013888 <_txm_module_manager_stop+0x290>)
 801375c:	6013      	str	r3, [r2, #0]
 801375e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013760:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013762:	6a3b      	ldr	r3, [r7, #32]
 8013764:	f383 8810 	msr	PRIMASK, r3
}
 8013768:	bf00      	nop
    /* Call the USBX stop function.  */
    _txm_module_manager_usbx_stop(module_instance);
#endif

    /* Loop to delete any and all threads created by the module.  */
    i = _tx_thread_created_count;
 801376a:	4b48      	ldr	r3, [pc, #288]	; (801388c <_txm_module_manager_stop+0x294>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	657b      	str	r3, [r7, #84]	; 0x54
    thread_ptr =  _tx_thread_created_ptr;
 8013770:	4b47      	ldr	r3, [pc, #284]	; (8013890 <_txm_module_manager_stop+0x298>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	677b      	str	r3, [r7, #116]	; 0x74
    while (i--)
 8013776:	e022      	b.n	80137be <_txm_module_manager_stop+0x1c6>
    {

        /* Pickup the next thread pointer.  */
        next_thread_ptr =  thread_ptr -> tx_thread_created_next;
 8013778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801377e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if the thread control block is inside the module.  */
        if ( (((CHAR *) thread_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013784:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013786:	429a      	cmp	r2, r3
 8013788:	d30b      	bcc.n	80137a2 <_txm_module_manager_stop+0x1aa>
             (((CHAR *) thread_ptr) < ((CHAR *) module_instance -> txm_module_instance_data_end)))
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if ( (((CHAR *) thread_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 801378e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013790:	429a      	cmp	r2, r3
 8013792:	d206      	bcs.n	80137a2 <_txm_module_manager_stop+0x1aa>
        {

            /* Terminate and delete this thread, since it is part of this module.  */
            _tx_thread_terminate(thread_ptr);
 8013794:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013796:	f7f3 f9c9 	bl	8006b2c <_tx_thread_terminate>
            _tx_thread_delete(thread_ptr);
 801379a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801379c:	f7f2 fa5a 	bl	8005c54 <_tx_thread_delete>
 80137a0:	e00b      	b.n	80137ba <_txm_module_manager_stop+0x1c2>
        }

        /* Is this thread part of the module?  */
        else if (thread_ptr -> tx_thread_module_instance_ptr == module_instance)
 80137a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d105      	bne.n	80137ba <_txm_module_manager_stop+0x1c2>
        {

            /* Terminate and delete this thread, since it is part of this module.  */
            _tx_thread_terminate(thread_ptr);
 80137ae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137b0:	f7f3 f9bc 	bl	8006b2c <_tx_thread_terminate>
            _tx_thread_delete(thread_ptr);
 80137b4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137b6:	f7f2 fa4d 	bl	8005c54 <_tx_thread_delete>
        }

        /* Move to next thread.  */
        thread_ptr =  next_thread_ptr;
 80137ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137bc:	677b      	str	r3, [r7, #116]	; 0x74
    while (i--)
 80137be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137c0:	1e5a      	subs	r2, r3, #1
 80137c2:	657a      	str	r2, [r7, #84]	; 0x54
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1d7      	bne.n	8013778 <_txm_module_manager_stop+0x180>
    }

    /* Loop to delete any and all timers created by the module.  */
    i = _tx_timer_created_count;
 80137c8:	4b32      	ldr	r3, [pc, #200]	; (8013894 <_txm_module_manager_stop+0x29c>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	657b      	str	r3, [r7, #84]	; 0x54
    timer_ptr =  _tx_timer_created_ptr;
 80137ce:	4b32      	ldr	r3, [pc, #200]	; (8013898 <_txm_module_manager_stop+0x2a0>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	673b      	str	r3, [r7, #112]	; 0x70
    while (i--)
 80137d4:	e012      	b.n	80137fc <_txm_module_manager_stop+0x204>
    {

        /* Pickup the next timer pointer.  */
        next_timer_ptr =  timer_ptr -> tx_timer_created_next;
 80137d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137da:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check if this module created this timer.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) timer_ptr);
 80137dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f000 fd90 	bl	8014304 <_txm_module_manager_created_object_check>
 80137e4:	4603      	mov	r3, r0
 80137e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 80137ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d102      	bne.n	80137f8 <_txm_module_manager_stop+0x200>
        {

            /* Delete this timer, since it is part of this module.  */
            _tx_timer_delete(timer_ptr);
 80137f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80137f4:	f7f3 fd18 	bl	8007228 <_tx_timer_delete>
        }

        /* Move to next timer.  */
        timer_ptr =  next_timer_ptr;
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	673b      	str	r3, [r7, #112]	; 0x70
    while (i--)
 80137fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137fe:	1e5a      	subs	r2, r3, #1
 8013800:	657a      	str	r2, [r7, #84]	; 0x54
 8013802:	2b00      	cmp	r3, #0
 8013804:	d1e7      	bne.n	80137d6 <_txm_module_manager_stop+0x1de>
    }

    /* Loop to delete any and all queues created by the module.  */
    i = _tx_queue_created_count;
 8013806:	4b25      	ldr	r3, [pc, #148]	; (801389c <_txm_module_manager_stop+0x2a4>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	657b      	str	r3, [r7, #84]	; 0x54
    queue_ptr =  _tx_queue_created_ptr;
 801380c:	4b24      	ldr	r3, [pc, #144]	; (80138a0 <_txm_module_manager_stop+0x2a8>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (i--)
 8013812:	e01f      	b.n	8013854 <_txm_module_manager_stop+0x25c>
    {

        /* Pickup the next queue pointer.  */
        next_queue_ptr =   queue_ptr -> tx_queue_created_next;
 8013814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013818:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the queue callback function is associated with this module.  */
        if ((queue_ptr -> tx_queue_module_instance == module_instance) &&
 801381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	429a      	cmp	r2, r3
 8013822:	d107      	bne.n	8013834 <_txm_module_manager_stop+0x23c>
            (queue_ptr -> tx_queue_send_notify == _txm_module_manager_queue_notify_trampoline))
 8013824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if ((queue_ptr -> tx_queue_module_instance == module_instance) &&
 8013828:	4a1e      	ldr	r2, [pc, #120]	; (80138a4 <_txm_module_manager_stop+0x2ac>)
 801382a:	4293      	cmp	r3, r2
 801382c:	d102      	bne.n	8013834 <_txm_module_manager_stop+0x23c>
        {

            /* Clear the callback notification for this queue since it is no longer valid.  */
            queue_ptr -> tx_queue_send_notify =  TX_NULL;
 801382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013830:	2200      	movs	r2, #0
 8013832:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif

        /* Check if this module created this queue.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) queue_ptr);
 8013834:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013836:	68f8      	ldr	r0, [r7, #12]
 8013838:	f000 fd64 	bl	8014304 <_txm_module_manager_created_object_check>
 801383c:	4603      	mov	r3, r0
 801383e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013842:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013846:	2b01      	cmp	r3, #1
 8013848:	d102      	bne.n	8013850 <_txm_module_manager_stop+0x258>
        {

            /* Delete this queue, since it is part of this module.  */
            _tx_queue_delete(queue_ptr);
 801384a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801384c:	f7f0 febc 	bl	80045c8 <_tx_queue_delete>
        }

        /* Move to next queue.  */
        queue_ptr =  next_queue_ptr;
 8013850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013852:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (i--)
 8013854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013856:	1e5a      	subs	r2, r3, #1
 8013858:	657a      	str	r2, [r7, #84]	; 0x54
 801385a:	2b00      	cmp	r3, #0
 801385c:	d1da      	bne.n	8013814 <_txm_module_manager_stop+0x21c>
    }

    /* Loop to delete any and all event flag groups created by the module.  */
    i = _tx_event_flags_created_count;
 801385e:	4b12      	ldr	r3, [pc, #72]	; (80138a8 <_txm_module_manager_stop+0x2b0>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	657b      	str	r3, [r7, #84]	; 0x54
    events_ptr =  _tx_event_flags_created_ptr;
 8013864:	4b11      	ldr	r3, [pc, #68]	; (80138ac <_txm_module_manager_stop+0x2b4>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 801386a:	e041      	b.n	80138f0 <_txm_module_manager_stop+0x2f8>
 801386c:	2000ef4c 	.word	0x2000ef4c
 8013870:	20000018 	.word	0x20000018
 8013874:	2000f098 	.word	0x2000f098
 8013878:	2000f640 	.word	0x2000f640
 801387c:	2000f604 	.word	0x2000f604
 8013880:	4d4f4455 	.word	0x4d4f4455
 8013884:	08015fc8 	.word	0x08015fc8
 8013888:	2000efe8 	.word	0x2000efe8
 801388c:	2000ef58 	.word	0x2000ef58
 8013890:	2000ef54 	.word	0x2000ef54
 8013894:	2000f090 	.word	0x2000f090
 8013898:	2000f08c 	.word	0x2000f08c
 801389c:	2000ef20 	.word	0x2000ef20
 80138a0:	2000ef1c 	.word	0x2000ef1c
 80138a4:	080132bd 	.word	0x080132bd
 80138a8:	2000ef28 	.word	0x2000ef28
 80138ac:	2000ef24 	.word	0x2000ef24
    {

        /* Pickup the next event flags group pointer.  */
        next_events_ptr =   events_ptr -> tx_event_flags_group_created_next;
 80138b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138b2:	699b      	ldr	r3, [r3, #24]
 80138b4:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the event flags callback function is associated with this module.  */
        if ((events_ptr -> tx_event_flags_group_module_instance == module_instance) &&
 80138b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ba:	68fa      	ldr	r2, [r7, #12]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d107      	bne.n	80138d0 <_txm_module_manager_stop+0x2d8>
            (events_ptr -> tx_event_flags_group_set_notify == _txm_module_manager_event_flags_notify_trampoline))
 80138c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((events_ptr -> tx_event_flags_group_module_instance == module_instance) &&
 80138c4:	4a6f      	ldr	r2, [pc, #444]	; (8013a84 <_txm_module_manager_stop+0x48c>)
 80138c6:	4293      	cmp	r3, r2
 80138c8:	d102      	bne.n	80138d0 <_txm_module_manager_stop+0x2d8>
        {

            /* Clear the callback notification for this event flag group since it is no longer valid.  */
            events_ptr -> tx_event_flags_group_set_notify =  TX_NULL;
 80138ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138cc:	2200      	movs	r2, #0
 80138ce:	625a      	str	r2, [r3, #36]	; 0x24
        }
#endif

        /* Check if this module created this event flags.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) events_ptr);
 80138d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80138d2:	68f8      	ldr	r0, [r7, #12]
 80138d4:	f000 fd16 	bl	8014304 <_txm_module_manager_created_object_check>
 80138d8:	4603      	mov	r3, r0
 80138da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 80138de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d102      	bne.n	80138ec <_txm_module_manager_stop+0x2f4>
        {

            /* Delete this event flags group, since it is part of this module.  */
            _tx_event_flags_delete(events_ptr);
 80138e6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80138e8:	f7ef fafc 	bl	8002ee4 <_tx_event_flags_delete>
        }

        /* Move to next event flags group.  */
        events_ptr =  next_events_ptr;
 80138ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ee:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 80138f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138f2:	1e5a      	subs	r2, r3, #1
 80138f4:	657a      	str	r2, [r7, #84]	; 0x54
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d1da      	bne.n	80138b0 <_txm_module_manager_stop+0x2b8>
    }

    /* Loop to delete any and all semaphores created by the module.  */
    i = _tx_semaphore_created_count;
 80138fa:	4b63      	ldr	r3, [pc, #396]	; (8013a88 <_txm_module_manager_stop+0x490>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	657b      	str	r3, [r7, #84]	; 0x54
    semaphore_ptr =  _tx_semaphore_created_ptr;
 8013900:	4b62      	ldr	r3, [pc, #392]	; (8013a8c <_txm_module_manager_stop+0x494>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	667b      	str	r3, [r7, #100]	; 0x64
    while (i--)
 8013906:	e01f      	b.n	8013948 <_txm_module_manager_stop+0x350>
    {

        /* Pickup the next semaphore pointer.  */
        next_semaphore_ptr =   semaphore_ptr -> tx_semaphore_created_next;
 8013908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801390a:	695b      	ldr	r3, [r3, #20]
 801390c:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the semaphore callback function is associated with this module.  */
        if ((semaphore_ptr -> tx_semaphore_module_instance == module_instance) &&
 801390e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013910:	6a1b      	ldr	r3, [r3, #32]
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	429a      	cmp	r2, r3
 8013916:	d107      	bne.n	8013928 <_txm_module_manager_stop+0x330>
            (semaphore_ptr -> tx_semaphore_put_notify == _txm_module_manager_semaphore_notify_trampoline))
 8013918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801391a:	69db      	ldr	r3, [r3, #28]
        if ((semaphore_ptr -> tx_semaphore_module_instance == module_instance) &&
 801391c:	4a5c      	ldr	r2, [pc, #368]	; (8013a90 <_txm_module_manager_stop+0x498>)
 801391e:	4293      	cmp	r3, r2
 8013920:	d102      	bne.n	8013928 <_txm_module_manager_stop+0x330>
        {

            /* Clear the callback notification for this semaphore since it is no longer valid.  */
            semaphore_ptr -> tx_semaphore_put_notify =  TX_NULL;
 8013922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013924:	2200      	movs	r2, #0
 8013926:	61da      	str	r2, [r3, #28]
        }
#endif

        /* Check if this module created this semaphore.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) semaphore_ptr);
 8013928:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801392a:	68f8      	ldr	r0, [r7, #12]
 801392c:	f000 fcea 	bl	8014304 <_txm_module_manager_created_object_check>
 8013930:	4603      	mov	r3, r0
 8013932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013936:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801393a:	2b01      	cmp	r3, #1
 801393c:	d102      	bne.n	8013944 <_txm_module_manager_stop+0x34c>
        {

            /* Delete this semaphore, since it is part of this module.  */
            _tx_semaphore_delete(semaphore_ptr);
 801393e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013940:	f7f1 fe16 	bl	8005570 <_tx_semaphore_delete>
        }

        /* Move to next semaphore.  */
        semaphore_ptr =  next_semaphore_ptr;
 8013944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013946:	667b      	str	r3, [r7, #100]	; 0x64
    while (i--)
 8013948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801394a:	1e5a      	subs	r2, r3, #1
 801394c:	657a      	str	r2, [r7, #84]	; 0x54
 801394e:	2b00      	cmp	r3, #0
 8013950:	d1da      	bne.n	8013908 <_txm_module_manager_stop+0x310>
    }

    /* Loop to delete any and all mutexes created by the module.  */
    i = _tx_mutex_created_count;
 8013952:	4b50      	ldr	r3, [pc, #320]	; (8013a94 <_txm_module_manager_stop+0x49c>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	657b      	str	r3, [r7, #84]	; 0x54
    mutex_ptr =  _tx_mutex_created_ptr;
 8013958:	4b4f      	ldr	r3, [pc, #316]	; (8013a98 <_txm_module_manager_stop+0x4a0>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	663b      	str	r3, [r7, #96]	; 0x60
    while (i--)
 801395e:	e012      	b.n	8013986 <_txm_module_manager_stop+0x38e>
    {

        /* Pickup the next mutex pointer.  */
        next_mutex_ptr =   mutex_ptr -> tx_mutex_created_next;
 8013960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013962:	6a1b      	ldr	r3, [r3, #32]
 8013964:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Check if this module created this mutex.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) mutex_ptr);
 8013966:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f000 fccb 	bl	8014304 <_txm_module_manager_created_object_check>
 801396e:	4603      	mov	r3, r0
 8013970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013978:	2b01      	cmp	r3, #1
 801397a:	d102      	bne.n	8013982 <_txm_module_manager_stop+0x38a>
        {

            /* Delete this mutex, since it is part of this module.  */
            _tx_mutex_delete(mutex_ptr);
 801397c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801397e:	f7ef fff1 	bl	8003964 <_tx_mutex_delete>
        }

        /* Move to next mutex.  */
        mutex_ptr =  next_mutex_ptr;
 8013982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013984:	663b      	str	r3, [r7, #96]	; 0x60
    while (i--)
 8013986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013988:	1e5a      	subs	r2, r3, #1
 801398a:	657a      	str	r2, [r7, #84]	; 0x54
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1e7      	bne.n	8013960 <_txm_module_manager_stop+0x368>
    }

    /* Loop to delete any and all block pools created by the module.  */
    i = _tx_block_pool_created_count;
 8013990:	4b42      	ldr	r3, [pc, #264]	; (8013a9c <_txm_module_manager_stop+0x4a4>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	657b      	str	r3, [r7, #84]	; 0x54
    block_pool_ptr =  _tx_block_pool_created_ptr;
 8013996:	4b42      	ldr	r3, [pc, #264]	; (8013aa0 <_txm_module_manager_stop+0x4a8>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (i--)
 801399c:	e012      	b.n	80139c4 <_txm_module_manager_stop+0x3cc>
    {

        /* Pickup the next block pool pointer.  */
        next_block_pool_ptr =   block_pool_ptr -> tx_block_pool_created_next;
 801399e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139a2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Check if this module created this block pool.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) block_pool_ptr);
 80139a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80139a6:	68f8      	ldr	r0, [r7, #12]
 80139a8:	f000 fcac 	bl	8014304 <_txm_module_manager_created_object_check>
 80139ac:	4603      	mov	r3, r0
 80139ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 80139b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d102      	bne.n	80139c0 <_txm_module_manager_stop+0x3c8>
        {

            /* Delete this block pool, since it is part of this module.  */
            _tx_block_pool_delete(block_pool_ptr);
 80139ba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80139bc:	f7ee fa66 	bl	8001e8c <_tx_block_pool_delete>
        }

        /* Move to next block pool.  */
        block_pool_ptr =  next_block_pool_ptr;
 80139c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (i--)
 80139c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139c6:	1e5a      	subs	r2, r3, #1
 80139c8:	657a      	str	r2, [r7, #84]	; 0x54
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d1e7      	bne.n	801399e <_txm_module_manager_stop+0x3a6>
    }

    /* Loop to delete any and all byte pools created by the module.  */
    i = _tx_byte_pool_created_count;
 80139ce:	4b35      	ldr	r3, [pc, #212]	; (8013aa4 <_txm_module_manager_stop+0x4ac>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	657b      	str	r3, [r7, #84]	; 0x54
    byte_pool_ptr =  _tx_byte_pool_created_ptr;
 80139d4:	4b34      	ldr	r3, [pc, #208]	; (8013aa8 <_txm_module_manager_stop+0x4b0>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i--)
 80139da:	e012      	b.n	8013a02 <_txm_module_manager_stop+0x40a>
    {

        /* Pickup the next byte pool pointer.  */
        next_byte_pool_ptr =   byte_pool_ptr -> tx_byte_pool_created_next;
 80139dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e0:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Check if this module created this byte pool.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) byte_pool_ptr);
 80139e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f000 fc8d 	bl	8014304 <_txm_module_manager_created_object_check>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 80139f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d102      	bne.n	80139fe <_txm_module_manager_stop+0x406>
        {

            /* Delete this byte pool, since it is part of this module.  */
            _tx_byte_pool_delete(byte_pool_ptr);
 80139f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80139fa:	f7ee fe01 	bl	8002600 <_tx_byte_pool_delete>
        }

        /* Move to next byte pool.  */
        byte_pool_ptr =  next_byte_pool_ptr;
 80139fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a00:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i--)
 8013a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a04:	1e5a      	subs	r2, r3, #1
 8013a06:	657a      	str	r2, [r7, #84]	; 0x54
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d1e7      	bne.n	80139dc <_txm_module_manager_stop+0x3e4>
        }
    }
#endif

    /* Delete the allocated objects for this module.  */
    while (module_instance -> txm_module_instance_object_list_count != 0)
 8013a0c:	e012      	b.n	8013a34 <_txm_module_manager_stop+0x43c>
    {
        /* Pickup the current object pointer.  */
        object_ptr =  module_instance -> txm_module_instance_object_list_head;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
 8013a14:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Move the head pointer forward.  */
        module_instance -> txm_module_instance_object_list_head =  object_ptr -> txm_module_allocated_object_next;
 8013a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a18:	685a      	ldr	r2, [r3, #4]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478

        /* Release the object.  */
        _tx_byte_release((VOID *) object_ptr);
 8013a20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013a22:	f7ef f873 	bl	8002b0c <_tx_byte_release>

        /* Decrement count.  */
        module_instance -> txm_module_instance_object_list_count--;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8013a2c:	1e5a      	subs	r2, r3, #1
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
    while (module_instance -> txm_module_instance_object_list_count != 0)
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1e7      	bne.n	8013a0e <_txm_module_manager_stop+0x416>
    }

    /* Set the allocated list head pointer to NULL.  */
    module_instance -> txm_module_instance_object_list_head =  TX_NULL;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2200      	movs	r2, #0
 8013a42:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013a46:	f3ef 8310 	mrs	r3, PRIMASK
 8013a4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013a4c:	b672      	cpsid	i
    return(primask_value);
 8013a4e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8013a50:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable preemption again.  */
    _tx_thread_preempt_disable--;
 8013a52:	4b16      	ldr	r3, [pc, #88]	; (8013aac <_txm_module_manager_stop+0x4b4>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	4a14      	ldr	r2, [pc, #80]	; (8013aac <_txm_module_manager_stop+0x4b4>)
 8013a5a:	6013      	str	r3, [r2, #0]

    /* Set the module state to indicate the module is stopped.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STOPPED;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2204      	movs	r2, #4
 8013a60:	609a      	str	r2, [r3, #8]
 8013a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	f383 8810 	msr	PRIMASK, r3
}
 8013a6c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 8013a6e:	4810      	ldr	r0, [pc, #64]	; (8013ab0 <_txm_module_manager_stop+0x4b8>)
 8013a70:	f7f0 fad8 	bl	8004024 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013a74:	f7f2 fd82 	bl	800657c <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(TX_SUCCESS);
 8013a78:	2300      	movs	r3, #0
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	377c      	adds	r7, #124	; 0x7c
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a82:	bf00      	nop
 8013a84:	08009b45 	.word	0x08009b45
 8013a88:	2000ef18 	.word	0x2000ef18
 8013a8c:	2000ef14 	.word	0x2000ef14
 8013a90:	0801336d 	.word	0x0801336d
 8013a94:	2000ef30 	.word	0x2000ef30
 8013a98:	2000ef2c 	.word	0x2000ef2c
 8013a9c:	2000ef38 	.word	0x2000ef38
 8013aa0:	2000ef34 	.word	0x2000ef34
 8013aa4:	2000ef40 	.word	0x2000ef40
 8013aa8:	2000ef3c 	.word	0x2000ef3c
 8013aac:	2000efe8 	.word	0x2000efe8
 8013ab0:	2000f604 	.word	0x2000f604

08013ab4 <_txm_module_manager_thread_create>:
                            VOID (*shell_function)(TX_THREAD *, TXM_MODULE_INSTANCE *),
                            VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start,
                            UINT thread_control_block_size, TXM_MODULE_INSTANCE *module_instance)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b09c      	sub	sp, #112	; 0x70
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	603b      	str	r3, [r7, #0]
UINT                    core_index;
#endif
TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	667b      	str	r3, [r7, #100]	; 0x64
TXM_MODULE_THREAD_ENTRY_INFO *thread_entry_info;
VOID                    *stack_end;
ULONG                   i;

    /* First, check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <_txm_module_manager_thread_create+0x1c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 8013acc:	230e      	movs	r3, #14
 8013ace:	e226      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013ad4:	2be8      	cmp	r3, #232	; 0xe8
 8013ad6:	d001      	beq.n	8013adc <_txm_module_manager_thread_create+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 8013ad8:	230e      	movs	r3, #14
 8013ada:	e220      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013adc:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013ae2:	b672      	cpsid	i
    return(primask_value);
 8013ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8013ae6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8013ae8:	4b5b      	ldr	r3, [pc, #364]	; (8013c58 <_txm_module_manager_thread_create+0x1a4>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	3301      	adds	r3, #1
 8013aee:	4a5a      	ldr	r2, [pc, #360]	; (8013c58 <_txm_module_manager_thread_create+0x1a4>)
 8013af0:	6013      	str	r3, [r2, #0]
 8013af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013af4:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013af8:	f383 8810 	msr	PRIMASK, r3
}
 8013afc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Next see if it is already in the created list.  */
    next_thread =  _tx_thread_created_ptr;
 8013afe:	4b57      	ldr	r3, [pc, #348]	; (8013c5c <_txm_module_manager_thread_create+0x1a8>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    stack_end   =  (VOID *) (((UCHAR *) ((VOID *) stack_start)) + (stack_size - 1));
 8013b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013b0c:	4413      	add	r3, r2
 8013b0e:	65bb      	str	r3, [r7, #88]	; 0x58
    for (i = 0; i < _tx_thread_created_count; i++)
 8013b10:	2300      	movs	r3, #0
 8013b12:	663b      	str	r3, [r7, #96]	; 0x60
 8013b14:	e017      	b.n	8013b46 <_txm_module_manager_thread_create+0x92>
    {

        /* Determine if this thread matches the thread in the list.  */
        if (thread_ptr == next_thread)
 8013b16:	68fa      	ldr	r2, [r7, #12]
 8013b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d019      	beq.n	8013b52 <_txm_module_manager_thread_create+0x9e>

            break;
        }

        /* Check the stack pointer to see if it overlaps with this thread's stack.  */
        if ((((UCHAR *) ((VOID *) stack_start)) <= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_end))) &&
 8013b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d807      	bhi.n	8013b38 <_txm_module_manager_thread_create+0x84>
            (((UCHAR *) ((VOID *) stack_end)) >= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_start))))
 8013b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b2a:	68db      	ldr	r3, [r3, #12]
        if ((((UCHAR *) ((VOID *) stack_start)) <= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_end))) &&
 8013b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d302      	bcc.n	8013b38 <_txm_module_manager_thread_create+0x84>
        {
            /* Stacks overlap, clear the stack pointer to force a stack error below.  */
            stack_start =  TX_NULL;
 8013b32:	2300      	movs	r3, #0
 8013b34:	67fb      	str	r3, [r7, #124]	; 0x7c
            break;
 8013b36:	e00d      	b.n	8013b54 <_txm_module_manager_thread_create+0xa0>
        }

        /* Move to the next thread.  */
        next_thread =  next_thread -> tx_thread_created_next;
 8013b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 0; i < _tx_thread_created_count; i++)
 8013b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b42:	3301      	adds	r3, #1
 8013b44:	663b      	str	r3, [r7, #96]	; 0x60
 8013b46:	4b46      	ldr	r3, [pc, #280]	; (8013c60 <_txm_module_manager_thread_create+0x1ac>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d3e2      	bcc.n	8013b16 <_txm_module_manager_thread_create+0x62>
 8013b50:	e000      	b.n	8013b54 <_txm_module_manager_thread_create+0xa0>
            break;
 8013b52:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013b54:	f3ef 8310 	mrs	r3, PRIMASK
 8013b58:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013b5a:	b672      	cpsid	i
    return(primask_value);
 8013b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8013b5e:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Decrement the preempt disable flag.  */
    _tx_thread_preempt_disable--;
 8013b60:	4b3d      	ldr	r3, [pc, #244]	; (8013c58 <_txm_module_manager_thread_create+0x1a4>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	3b01      	subs	r3, #1
 8013b66:	4a3c      	ldr	r2, [pc, #240]	; (8013c58 <_txm_module_manager_thread_create+0x1a4>)
 8013b68:	6013      	str	r3, [r2, #0]
 8013b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b70:	f383 8810 	msr	PRIMASK, r3
}
 8013b74:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013b76:	f7f2 fd01 	bl	800657c <_tx_thread_system_preempt_check>

    /* At this point, check to see if there is a duplicate thread.  */
    if (thread_ptr == next_thread)
 8013b7a:	68fa      	ldr	r2, [r7, #12]
 8013b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d101      	bne.n	8013b86 <_txm_module_manager_thread_create+0xd2>
    {

        /* Thread is already created, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 8013b82:	230e      	movs	r3, #14
 8013b84:	e1cb      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Check for invalid starting address of stack.  */
    if (stack_start == TX_NULL)
 8013b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <_txm_module_manager_thread_create+0xdc>
    {

        /* Invalid stack or entry point, return appropriate error code.  */
        return(TX_PTR_ERROR);
 8013b8c:	2303      	movs	r3, #3
 8013b8e:	e1c6      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Check for invalid thread entry point.  */
    if (entry_function == TX_NULL)
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d101      	bne.n	8013b9a <_txm_module_manager_thread_create+0xe6>
    {

        /* Invalid stack or entry point, return appropriate error code.  */
        return(TX_PTR_ERROR);
 8013b96:	2303      	movs	r3, #3
 8013b98:	e1c1      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Check the stack size.  */
    if (stack_size < TX_MINIMUM_STACK)
 8013b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013b9e:	2bc7      	cmp	r3, #199	; 0xc7
 8013ba0:	d801      	bhi.n	8013ba6 <_txm_module_manager_thread_create+0xf2>
    {

        /* Stack is not big enough, return appropriate error code.  */
        return(TX_SIZE_ERROR);
 8013ba2:	2305      	movs	r3, #5
 8013ba4:	e1bb      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 8013ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013baa:	2b1f      	cmp	r3, #31
 8013bac:	d901      	bls.n	8013bb2 <_txm_module_manager_thread_create+0xfe>
    {

        /* Invalid priority selected, return appropriate error code.  */
        return(TX_PRIORITY_ERROR);
 8013bae:	230f      	movs	r3, #15
 8013bb0:	e1b5      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Check preemption threshold. */
    if (preempt_threshold > priority)
 8013bb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d901      	bls.n	8013bc2 <_txm_module_manager_thread_create+0x10e>
    {

        /* Invalid preempt threshold, return appropriate error code.  */
        return(TX_THRESH_ERROR);
 8013bbe:	2318      	movs	r3, #24
 8013bc0:	e1ad      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    }

    /* Check the start selection.  */
    if (auto_start > TX_AUTO_START)
 8013bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	d901      	bls.n	8013bce <_txm_module_manager_thread_create+0x11a>
    {

        /* Invalid auto start selection, return appropriate error code.  */
        return(TX_START_ERROR);
 8013bca:	2310      	movs	r3, #16
 8013bcc:	e1a7      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
#ifndef TX_TIMER_PROCESS_IN_ISR
    {
        TX_THREAD *current_thread;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8013bce:	4b25      	ldr	r3, [pc, #148]	; (8013c64 <_txm_module_manager_thread_create+0x1b0>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (current_thread == &_tx_timer_thread)
 8013bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bd6:	4a24      	ldr	r2, [pc, #144]	; (8013c68 <_txm_module_manager_thread_create+0x1b4>)
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d101      	bne.n	8013be0 <_txm_module_manager_thread_create+0x12c>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 8013bdc:	2313      	movs	r3, #19
 8013bde:	e19e      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013be0:	f3ef 8305 	mrs	r3, IPSR
 8013be4:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8013be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
        }
    }
#endif

    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8013be8:	4b20      	ldr	r3, [pc, #128]	; (8013c6c <_txm_module_manager_thread_create+0x1b8>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	4313      	orrs	r3, r2
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d00b      	beq.n	8013c0a <_txm_module_manager_thread_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013bf2:	f3ef 8305 	mrs	r3, IPSR
 8013bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8013bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013bfa:	4b1c      	ldr	r3, [pc, #112]	; (8013c6c <_txm_module_manager_thread_create+0x1b8>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	4313      	orrs	r3, r2
 8013c00:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013c04:	d201      	bcs.n	8013c0a <_txm_module_manager_thread_create+0x156>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 8013c06:	2313      	movs	r3, #19
 8013c08:	e189      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8013c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013c0e:	21ef      	movs	r1, #239	; 0xef
 8013c10:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013c12:	f001 fa6f 	bl	80150f4 <memset>
    stack_start =  TX_ALIGN_TYPE_TO_POINTER_CONVERT(updated_stack_start);
#endif

    /* Allocate the thread entry information at the top of thread's stack - Leaving one
       ULONG worth of 0xEF pattern between the actual stack and the entry info structure.  */
    stack_size =  stack_size - (sizeof(TXM_MODULE_THREAD_ENTRY_INFO) + (3*sizeof(ULONG)));
 8013c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c1a:	3b3c      	subs	r3, #60	; 0x3c
 8013c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, sizeof(TX_THREAD));
 8013c20:	22e8      	movs	r2, #232	; 0xe8
 8013c22:	2100      	movs	r1, #0
 8013c24:	68f8      	ldr	r0, [r7, #12]
 8013c26:	f001 fa65 	bl	80150f4 <memset>

#if TXM_MODULE_MEMORY_PROTECTION
    /* If this is a memory protected module, allocate a kernel stack.  */
    if((module_instance -> txm_module_instance_property_flags) & TXM_MODULE_MEMORY_PROTECTION)
 8013c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	f003 0302 	and.w	r3, r3, #2
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d034      	beq.n	8013ca2 <_txm_module_manager_thread_create+0x1ee>
    {
        ULONG status;

        /* Allocate kernel stack space. */
        status = _txm_module_manager_object_allocate((VOID **) &(thread_ptr -> tx_thread_module_kernel_stack_start), TXM_MODULE_KERNEL_STACK_SIZE, module_instance);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	33a4      	adds	r3, #164	; 0xa4
 8013c3c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013c40:	f44f 7140 	mov.w	r1, #768	; 0x300
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7ff f853 	bl	8012cf0 <_txm_module_manager_object_allocate>
 8013c4a:	6538      	str	r0, [r7, #80]	; 0x50
        if(status)
 8013c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d00e      	beq.n	8013c70 <_txm_module_manager_thread_create+0x1bc>
        {
            return(status);
 8013c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c54:	e163      	b.n	8013f1e <_txm_module_manager_thread_create+0x46a>
 8013c56:	bf00      	nop
 8013c58:	2000efe8 	.word	0x2000efe8
 8013c5c:	2000ef54 	.word	0x2000ef54
 8013c60:	2000ef58 	.word	0x2000ef58
 8013c64:	2000ef4c 	.word	0x2000ef4c
 8013c68:	2000f098 	.word	0x2000f098
 8013c6c:	20000018 	.word	0x20000018

#ifndef TX_DISABLE_STACK_FILLING
        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_module_kernel_stack_start, ((UCHAR) TX_STACK_FILL), TXM_MODULE_KERNEL_STACK_SIZE);
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8013c7a:	21ef      	movs	r1, #239	; 0xef
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f001 fa39 	bl	80150f4 <memset>
#endif

        /* Align kernel stack pointer.  */
        thread_ptr -> tx_thread_module_kernel_stack_end = (VOID *) (((ALIGN_TYPE)(thread_ptr -> tx_thread_module_kernel_stack_start) + TXM_MODULE_KERNEL_STACK_SIZE) & ~0x07);
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013c8c:	f023 0307 	bic.w	r3, r3, #7
 8013c90:	461a      	mov	r2, r3
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

        /* Set kernel stack size.  */
        thread_ptr -> tx_thread_module_kernel_stack_size = TXM_MODULE_KERNEL_STACK_SIZE;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8013c9e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Place the stack parameters into the thread's control block.  */
    thread_ptr -> tx_thread_module_stack_start =  stack_start;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013ca6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    thread_ptr -> tx_thread_module_stack_size =   stack_size;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cb0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =                name_ptr;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	68ba      	ldr	r2, [r7, #8]
 8013cb8:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =               entry_function;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	683a      	ldr	r2, [r7, #0]
 8013cbe:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =     entry_input;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013cc4:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =         stack_start;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013cca:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =          stack_size;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cd2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =            priority;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013cda:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =       priority;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013ce2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    thread_ptr -> tx_thread_time_slice =          time_slice;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013cec:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =      time_slice;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013cf4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =    ((UINT) TX_MAX_PRIORITIES);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2220      	movs	r2, #32
 8013cfa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    thread_ptr -> tx_thread_smp_core_mapped =  0;
#endif
#endif

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8013cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d00:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8013d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013d06:	3b01      	subs	r3, #1
 8013d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d0a:	4413      	add	r3, r2
 8013d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d12:	611a      	str	r2, [r3, #16]
#if TXM_MODULE_MEMORY_PROTECTION
    thread_ptr -> tx_thread_module_stack_end =  thread_ptr -> tx_thread_stack_end;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	691a      	ldr	r2, [r3, #16]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TXM_MODULE_MEMORY_PROTECTION */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013d24:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013d2c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2203      	movs	r2, #3
 8013d34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	4a7b      	ldr	r2, [pc, #492]	; (8013f28 <_txm_module_manager_thread_create+0x474>)
 8013d3a:	655a      	str	r2, [r3, #84]	; 0x54
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Setup pointer to the thread entry information structure, which will live at the top of each
       module thread's stack. This will allow the module thread entry function to avoid direct
       access to the actual thread control block.  */
    thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((UCHAR *) thread_ptr -> tx_thread_stack_end) + (2*sizeof(ULONG)) + 1);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	691b      	ldr	r3, [r3, #16]
 8013d46:	3309      	adds	r3, #9
 8013d48:	64bb      	str	r3, [r7, #72]	; 0x48
    thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((ALIGN_TYPE)(thread_entry_info)) & (~0x3));
 8013d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d4c:	f023 0303 	bic.w	r3, r3, #3
 8013d50:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Build the thread entry information structure.  */
    thread_entry_info -> txm_module_thread_entry_info_thread =                   thread_ptr;
 8013d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d54:	68fa      	ldr	r2, [r7, #12]
 8013d56:	601a      	str	r2, [r3, #0]
    thread_entry_info -> txm_module_thread_entry_info_module =                   module_instance;
 8013d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013d5e:	605a      	str	r2, [r3, #4]
    thread_entry_info -> txm_module_thread_entry_info_data_base_address =        module_instance -> txm_module_instance_module_data_base_address;
 8013d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d68:	609a      	str	r2, [r3, #8]
    thread_entry_info -> txm_module_thread_entry_info_code_base_address =        module_instance -> txm_module_instance_code_start;
 8013d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d6e:	699a      	ldr	r2, [r3, #24]
 8013d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d72:	60da      	str	r2, [r3, #12]
    thread_entry_info -> txm_module_thread_entry_info_entry =                    thread_ptr -> tx_thread_entry;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d7a:	611a      	str	r2, [r3, #16]
    thread_entry_info -> txm_module_thread_entry_info_parameter =                thread_ptr -> tx_thread_entry_parameter;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d82:	615a      	str	r2, [r3, #20]
    thread_entry_info -> txm_module_thread_entry_info_callback_request_queue =   &(module_instance -> txm_module_instance_callback_request_queue);
 8013d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d88:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8013d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d8e:	625a      	str	r2, [r3, #36]	; 0x24
    thread_entry_info -> txm_module_thread_entry_info_callback_request_thread =  &(module_instance -> txm_module_instance_callback_request_thread);
 8013d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d94:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 8013d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d9a:	621a      	str	r2, [r3, #32]

    /* Populate thread control block with some stock information from the module.  */
    TXM_MODULE_MANAGER_THREAD_SETUP(thread_ptr, module_instance)
 8013d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	f003 0201 	and.w	r2, r3, #1
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8013dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	f003 0201 	and.w	r2, r3, #1
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d003      	beq.n	8013dce <_txm_module_manager_thread_create+0x31a>
 8013dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dc8:	4a58      	ldr	r2, [pc, #352]	; (8013f2c <_txm_module_manager_thread_create+0x478>)
 8013dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8013dcc:	e002      	b.n	8013dd4 <_txm_module_manager_thread_create+0x320>
 8013dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dd0:	4a57      	ldr	r2, [pc, #348]	; (8013f30 <_txm_module_manager_thread_create+0x47c>)
 8013dd2:	62da      	str	r2, [r3, #44]	; 0x2c

#ifndef TX_DISABLE_NOTIFY_CALLBACKS
    thread_entry_info ->  txm_module_thread_entry_info_exit_notify =        thread_ptr -> tx_thread_entry_exit_notify;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8013dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ddc:	619a      	str	r2, [r3, #24]
#else /* TX_DISABLE_NOTIFY_CALLBACKS */
    thread_entry_info ->  txm_module_thread_entry_info_exit_notify =        TX_NULL;
#endif /* TX_DISABLE_NOTIFY_CALLBACKS */
    if (thread_ptr -> tx_thread_entry == module_instance -> txm_module_instance_start_thread_entry)
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d103      	bne.n	8013df4 <_txm_module_manager_thread_create+0x340>
        thread_entry_info ->  txm_module_thread_entry_info_start_thread =   TX_TRUE;
 8013dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dee:	2201      	movs	r2, #1
 8013df0:	61da      	str	r2, [r3, #28]
 8013df2:	e002      	b.n	8013dfa <_txm_module_manager_thread_create+0x346>
    else
        thread_entry_info ->  txm_module_thread_entry_info_start_thread =   TX_FALSE;
 8013df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013df6:	2200      	movs	r2, #0
 8013df8:	61da      	str	r2, [r3, #28]

    /* Place pointers to the thread info and module instance in the thread control block.  */
    thread_ptr -> tx_thread_module_instance_ptr =    (VOID *) module_instance;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013e00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    thread_ptr -> tx_thread_module_entry_info_ptr =  (VOID *) thread_entry_info;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Place the thread entry information pointer in the thread control block so it can be picked up
       in the following stack build function. This is supplied to the module's shell entry function
       to avoid direct access to the actual thread control block. Note that this is overwritten
       with the actual stack pointer at the end of stack build.  */
    thread_ptr -> tx_thread_stack_ptr =  (VOID *) thread_entry_info;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e10:	609a      	str	r2, [r3, #8]

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _txm_module_manager_thread_stack_build(thread_ptr, shell_function);
 8013e12:	6879      	ldr	r1, [r7, #4]
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7ec fc73 	bl	8000700 <_txm_module_manager_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013e20:	b672      	cpsid	i
    return(primask_value);
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8013e24:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	4a42      	ldr	r2, [pc, #264]	; (8013f34 <_txm_module_manager_thread_create+0x480>)
 8013e2a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8013e2c:	4b42      	ldr	r3, [pc, #264]	; (8013f38 <_txm_module_manager_thread_create+0x484>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d10b      	bne.n	8013e4c <_txm_module_manager_thread_create+0x398>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8013e34:	4a41      	ldr	r2, [pc, #260]	; (8013f3c <_txm_module_manager_thread_create+0x488>)
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8013e4a:	e016      	b.n	8013e7a <_txm_module_manager_thread_create+0x3c6>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8013e4c:	4b3b      	ldr	r3, [pc, #236]	; (8013f3c <_txm_module_manager_thread_create+0x488>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	66fb      	str	r3, [r7, #108]	; 0x6c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8013e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e58:	647b      	str	r3, [r7, #68]	; 0x44

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8013e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e5c:	68fa      	ldr	r2, [r7, #12]
 8013e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8013e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8013e7a:	4b2f      	ldr	r3, [pc, #188]	; (8013f38 <_txm_module_manager_thread_create+0x484>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	4a2d      	ldr	r2, [pc, #180]	; (8013f38 <_txm_module_manager_thread_create+0x484>)
 8013e82:	6013      	str	r3, [r2, #0]
#else /* TX_THREAD_SMP */

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013e84:	4b2e      	ldr	r3, [pc, #184]	; (8013f40 <_txm_module_manager_thread_create+0x48c>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	3301      	adds	r3, #1
 8013e8a:	4a2d      	ldr	r2, [pc, #180]	; (8013f40 <_txm_module_manager_thread_create+0x48c>)
 8013e8c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8013e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d129      	bne.n	8013eea <_txm_module_manager_thread_create+0x436>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e96:	f3ef 8305 	mrs	r3, IPSR
 8013e9a:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8013e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8013e9e:	4b29      	ldr	r3, [pc, #164]	; (8013f44 <_txm_module_manager_thread_create+0x490>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	4313      	orrs	r3, r2
 8013ea4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013ea8:	d30d      	bcc.n	8013ec6 <_txm_module_manager_thread_create+0x412>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8013eaa:	4b27      	ldr	r3, [pc, #156]	; (8013f48 <_txm_module_manager_thread_create+0x494>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	66bb      	str	r3, [r7, #104]	; 0x68

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8013eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d009      	beq.n	8013eca <_txm_module_manager_thread_create+0x416>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8013eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eba:	667b      	str	r3, [r7, #100]	; 0x64

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8013ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8013ec4:	e001      	b.n	8013eca <_txm_module_manager_thread_create+0x416>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8013eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ecc:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013ece:	6a3b      	ldr	r3, [r7, #32]
 8013ed0:	f383 8810 	msr	PRIMASK, r3
}
 8013ed4:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	f7f2 fb8a 	bl	80065f0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8013edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d01c      	beq.n	8013f1c <_txm_module_manager_thread_create+0x468>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8013ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ee4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8013ee8:	e018      	b.n	8013f1c <_txm_module_manager_thread_create+0x468>
 8013eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013eec:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	f383 8810 	msr	PRIMASK, r3
}
 8013ef4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8013efa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013efc:	b672      	cpsid	i
    return(primask_value);
 8013efe:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8013f00:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8013f02:	4b0f      	ldr	r3, [pc, #60]	; (8013f40 <_txm_module_manager_thread_create+0x48c>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	3b01      	subs	r3, #1
 8013f08:	4a0d      	ldr	r2, [pc, #52]	; (8013f40 <_txm_module_manager_thread_create+0x48c>)
 8013f0a:	6013      	str	r3, [r2, #0]
 8013f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013f0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	f383 8810 	msr	PRIMASK, r3
}
 8013f16:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013f18:	f7f2 fb30 	bl	800657c <_tx_thread_system_preempt_check>
    }

#endif /* TX_THREAD_SMP */

    /* Return success.  */
    return(TX_SUCCESS);
 8013f1c:	2300      	movs	r3, #0
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3770      	adds	r7, #112	; 0x70
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	08006da9 	.word	0x08006da9
 8013f2c:	080005a1 	.word	0x080005a1
 8013f30:	080120d9 	.word	0x080120d9
 8013f34:	54485244 	.word	0x54485244
 8013f38:	2000ef58 	.word	0x2000ef58
 8013f3c:	2000ef54 	.word	0x2000ef54
 8013f40:	2000efe8 	.word	0x2000efe8
 8013f44:	20000018 	.word	0x20000018
 8013f48:	2000ef50 	.word	0x2000ef50

08013f4c <_txm_module_manager_thread_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_thread_notify_trampoline(TX_THREAD *thread_ptr, UINT type)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b098      	sub	sp, #96	; 0x60
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013f56:	f3ef 8310 	mrs	r3, PRIMASK
 8013f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013f5c:	b672      	cpsid	i
    return(primask_value);
 8013f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8013f60:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if the thread is valid.  */
    if ((thread_ptr) && (thread_ptr -> tx_thread_id == TX_THREAD_ID))
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d050      	beq.n	801400a <_txm_module_manager_thread_notify_trampoline+0xbe>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a2e      	ldr	r2, [pc, #184]	; (8014028 <_txm_module_manager_thread_notify_trampoline+0xdc>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d14b      	bne.n	801400a <_txm_module_manager_thread_notify_trampoline+0xbe>
    {

        /* Pickup the module instance pointer.  */
        module_instance =  (TXM_MODULE_INSTANCE *) thread_ptr -> tx_thread_module_instance_ptr;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f78:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the module's thread pointer.  */
        thread_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) thread_ptr -> tx_thread_module_entry_info_ptr;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013f80:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if this module is still valid.  */
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8013f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d034      	beq.n	8013ff2 <_txm_module_manager_thread_notify_trampoline+0xa6>
 8013f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4a27      	ldr	r2, [pc, #156]	; (801402c <_txm_module_manager_thread_notify_trampoline+0xe0>)
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	d12f      	bne.n	8013ff2 <_txm_module_manager_thread_notify_trampoline+0xa6>
            (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 8013f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f94:	689b      	ldr	r3, [r3, #8]
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8013f96:	2b02      	cmp	r3, #2
 8013f98:	d12b      	bne.n	8013ff2 <_txm_module_manager_thread_notify_trampoline+0xa6>
        {

            /* Yes, the module is still valid.  */

            /* Pickup the module's callback message queue.  */
            module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 8013f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8013fa0:	653b      	str	r3, [r7, #80]	; 0x50

            /* Build the queue notification message.  */
            callback_message.txm_module_callback_message_type =                  TXM_THREAD_ENTRY_EXIT_CALLBACK;
 8013fa2:	2304      	movs	r3, #4
 8013fa4:	60fb      	str	r3, [r7, #12]
            callback_message.txm_module_callback_message_activation_count =      1;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	613b      	str	r3, [r7, #16]
            callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) thread_info -> txm_module_thread_entry_info_exit_notify;
 8013faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fac:	699b      	ldr	r3, [r3, #24]
 8013fae:	617b      	str	r3, [r7, #20]
            callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) thread_ptr;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	61bb      	str	r3, [r7, #24]
            callback_message.txm_module_callback_message_param_2 =               (ALIGN_TYPE) type;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	61fb      	str	r3, [r7, #28]
            callback_message.txm_module_callback_message_param_3 =               0;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	623b      	str	r3, [r7, #32]
            callback_message.txm_module_callback_message_param_4 =               0;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	627b      	str	r3, [r7, #36]	; 0x24
            callback_message.txm_module_callback_message_param_5 =               0;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	62bb      	str	r3, [r7, #40]	; 0x28
            callback_message.txm_module_callback_message_param_6 =               0;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            callback_message.txm_module_callback_message_param_7 =               0;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	633b      	str	r3, [r7, #48]	; 0x30
            callback_message.txm_module_callback_message_param_8 =               0;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	637b      	str	r3, [r7, #52]	; 0x34
            callback_message.txm_module_callback_message_reserved1 =             0;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	63bb      	str	r3, [r7, #56]	; 0x38
            callback_message.txm_module_callback_message_reserved2 =             0;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fda:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fde:	f383 8810 	msr	PRIMASK, r3
}
 8013fe2:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Call the general processing that will place the callback on the
               module's callback request queue.  */
            _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 8013fe4:	f107 030c 	add.w	r3, r7, #12
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013fec:	f7f5 fcfe 	bl	80099ec <_txm_module_manager_callback_request>
 8013ff0:	e00a      	b.n	8014008 <_txm_module_manager_thread_notify_trampoline+0xbc>
        {

            /* Module no longer valid.  */

            /* Error, increment the error counter and return.  */
            _txm_module_manager_callback_error_count++;
 8013ff2:	4b0f      	ldr	r3, [pc, #60]	; (8014030 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	4a0d      	ldr	r2, [pc, #52]	; (8014030 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 8013ffa:	6013      	str	r3, [r2, #0]
 8013ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ffe:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014002:	f383 8810 	msr	PRIMASK, r3
}
 8014006:	bf00      	nop
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8014008:	e00a      	b.n	8014020 <_txm_module_manager_thread_notify_trampoline+0xd4>
    {

        /* Thread pointer is not valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 801400a:	4b09      	ldr	r3, [pc, #36]	; (8014030 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	3301      	adds	r3, #1
 8014010:	4a07      	ldr	r2, [pc, #28]	; (8014030 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 8014012:	6013      	str	r3, [r2, #0]
 8014014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014016:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801401a:	f383 8810 	msr	PRIMASK, r3
}
 801401e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 8014020:	bf00      	nop
 8014022:	3760      	adds	r7, #96	; 0x60
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	54485244 	.word	0x54485244
 801402c:	4d4f4455 	.word	0x4d4f4455
 8014030:	2000f648 	.word	0x2000f648

08014034 <_txm_module_manager_thread_reset>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_thread_reset(TX_THREAD *thread_ptr)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b08c      	sub	sp, #48	; 0x30
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
UINT            status;
TXM_MODULE_INSTANCE             *module_instance;
TXM_MODULE_THREAD_ENTRY_INFO    *thread_entry_info;

    /* Default a successful completion status.  */
    status =  TX_SUCCESS;
 801403c:	2300      	movs	r3, #0
 801403e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014040:	f3ef 8310 	mrs	r3, PRIMASK
 8014044:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014046:	b672      	cpsid	i
    return(primask_value);
 8014048:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts.  */
    TX_DISABLE
 801404a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801404c:	4b2b      	ldr	r3, [pc, #172]	; (80140fc <_txm_module_manager_thread_reset+0xc8>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for a call from the current thread, which is not allowed!  */
    if (current_thread == thread_ptr)
 8014052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	429a      	cmp	r2, r3
 8014058:	d108      	bne.n	801406c <_txm_module_manager_thread_reset+0x38>
 801405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	f383 8810 	msr	PRIMASK, r3
}
 8014064:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Thread not completed or terminated - return an error!  */
        status =  TX_NOT_DONE;
 8014066:	2320      	movs	r3, #32
 8014068:	62bb      	str	r3, [r7, #40]	; 0x28
 801406a:	e009      	b.n	8014080 <_txm_module_manager_thread_reset+0x4c>
    }
    else
    {

        /* Check for proper status of this thread to reset.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014070:	2b01      	cmp	r3, #1
 8014072:	d005      	beq.n	8014080 <_txm_module_manager_thread_reset+0x4c>
        {

            /* Now check for terminated state.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014078:	2b02      	cmp	r3, #2
 801407a:	d001      	beq.n	8014080 <_txm_module_manager_thread_reset+0x4c>
            {

                /* Thread not completed or terminated - return an error!  */
                status =  TX_NOT_DONE;
 801407c:	2320      	movs	r3, #32
 801407e:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
    }

    /* Is the request valid?  */
    if (status == TX_SUCCESS)
 8014080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014082:	2b00      	cmp	r3, #0
 8014084:	d12e      	bne.n	80140e4 <_txm_module_manager_thread_reset+0xb0>
    {

        /* Modify the thread status to prevent additional reset calls.  */
        thread_ptr -> tx_thread_state =  TX_NOT_DONE;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2220      	movs	r2, #32
 801408a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Get the module instance.  */
        module_instance =  thread_ptr -> tx_thread_module_instance_ptr;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014092:	623b      	str	r3, [r7, #32]
 8014094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014096:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f383 8810 	msr	PRIMASK, r3
}
 801409e:	bf00      	nop
#ifndef TX_DISABLE_STACK_FILLING

        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_stack_start, ((UCHAR) TX_STACK_FILL), thread_ptr -> tx_thread_stack_size);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	68d8      	ldr	r0, [r3, #12]
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	695b      	ldr	r3, [r3, #20]
 80140a8:	461a      	mov	r2, r3
 80140aa:	21ef      	movs	r1, #239	; 0xef
 80140ac:	f001 f822 	bl	80150f4 <memset>
#endif

        /* Setup pointer to the thread entry information structure, which will live at the top of each
           module thread's stack. This will allow the module thread entry function to avoid direct
           access to the actual thread control block.  */
        thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((UCHAR *) thread_ptr -> tx_thread_stack_end) + (2*sizeof(ULONG)) + 1);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	691b      	ldr	r3, [r3, #16]
 80140b4:	3309      	adds	r3, #9
 80140b6:	61fb      	str	r3, [r7, #28]
        thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((ALIGN_TYPE)(thread_entry_info)) & (~0x3));
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	f023 0303 	bic.w	r3, r3, #3
 80140be:	61fb      	str	r3, [r7, #28]

        /* Place the thread entry information pointer in the thread control block so it can be picked up
           in the following stack build function. This is supplied to the module's shell entry function
           to avoid direct access to the actual thread control block. Note that this is overwritten
           with the actual stack pointer at the end of stack build.  */
        thread_ptr -> tx_thread_stack_ptr =  (VOID *) thread_entry_info;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	69fa      	ldr	r2, [r7, #28]
 80140c4:	609a      	str	r2, [r3, #8]

        /* Call the target specific stack frame building routine to build the
           thread's initial stack and to setup the actual stack pointer in the
           control block.  */
        _txm_module_manager_thread_stack_build(thread_ptr, module_instance -> txm_module_instance_shell_entry_function);
 80140c6:	6a3b      	ldr	r3, [r7, #32]
 80140c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140ca:	4619      	mov	r1, r3
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7ec fb17 	bl	8000700 <_txm_module_manager_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80140d2:	f3ef 8310 	mrs	r3, PRIMASK
 80140d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80140d8:	b672      	cpsid	i
    return(primask_value);
 80140da:	693b      	ldr	r3, [r7, #16]

        /* Disable interrupts.  */
        TX_DISABLE
 80140dc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Finally, move into a suspended state to allow for the thread to be resumed.  */
        thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2203      	movs	r2, #3
 80140e2:	631a      	str	r2, [r3, #48]	; 0x30
 80140e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	f383 8810 	msr	PRIMASK, r3
}
 80140ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status to caller.  */
    return(status);
 80140f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3730      	adds	r7, #48	; 0x30
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	2000ef4c 	.word	0x2000ef4c

08014100 <_txm_module_manager_timer_notify_trampoline>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_timer_notify_trampoline(ULONG id)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b098      	sub	sp, #96	; 0x60
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014108:	f3ef 8310 	mrs	r3, PRIMASK
 801410c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 801410e:	b672      	cpsid	i
    return(primask_value);
 8014110:	6c7b      	ldr	r3, [r7, #68]	; 0x44


    /* We now know the callback is for a module.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8014112:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Our expired timer pointer points to the internal timer,
     * we need to get to the full timer pointer.  */
    /* Pickup the current internal timer pointer.  */
    internal_ptr =  (CHAR *) _tx_timer_expired_timer_ptr;
 8014114:	4b2a      	ldr	r3, [pc, #168]	; (80141c0 <_txm_module_manager_timer_notify_trampoline+0xc0>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the timer pointer from the internal pointer.  */
    TX_USER_TIMER_POINTER_GET((TX_TIMER_INTERNAL *) internal_ptr, timer_ptr);
 801411a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801411c:	657b      	str	r3, [r7, #84]	; 0x54
 801411e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014120:	653b      	str	r3, [r7, #80]	; 0x50
 8014122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014124:	3b08      	subs	r3, #8
 8014126:	657b      	str	r3, [r7, #84]	; 0x54
 8014128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801412a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) timer_ptr -> tx_timer_module_instance;
 801412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014130:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8014132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014134:	2b00      	cmp	r3, #0
 8014136:	d034      	beq.n	80141a2 <_txm_module_manager_timer_notify_trampoline+0xa2>
 8014138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	4a21      	ldr	r2, [pc, #132]	; (80141c4 <_txm_module_manager_timer_notify_trampoline+0xc4>)
 801413e:	4293      	cmp	r3, r2
 8014140:	d12f      	bne.n	80141a2 <_txm_module_manager_timer_notify_trampoline+0xa2>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 8014142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014144:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8014146:	2b02      	cmp	r3, #2
 8014148:	d12b      	bne.n	80141a2 <_txm_module_manager_timer_notify_trampoline+0xa2>
    {

        /* Yes, the module is still valid.  */

        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 801414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801414c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014150:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_TIMER_CALLBACK;
 8014152:	2300      	movs	r3, #0
 8014154:	60bb      	str	r3, [r7, #8]
        callback_message.txm_module_callback_message_activation_count =      1;
 8014156:	2301      	movs	r3, #1
 8014158:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) timer_ptr -> tx_timer_module_expiration_function;
 801415a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801415e:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_param_1 =               (ULONG) id;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_2 =               0;
 8014164:	2300      	movs	r3, #0
 8014166:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_3 =               0;
 8014168:	2300      	movs	r3, #0
 801416a:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_4 =               0;
 801416c:	2300      	movs	r3, #0
 801416e:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_5 =               0;
 8014170:	2300      	movs	r3, #0
 8014172:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_6 =               0;
 8014174:	2300      	movs	r3, #0
 8014176:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_7 =               0;
 8014178:	2300      	movs	r3, #0
 801417a:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_8 =               0;
 801417c:	2300      	movs	r3, #0
 801417e:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_reserved1 =             0;
 8014180:	2300      	movs	r3, #0
 8014182:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved2 =             0;
 8014184:	2300      	movs	r3, #0
 8014186:	63bb      	str	r3, [r7, #56]	; 0x38
 8014188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801418a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801418e:	f383 8810 	msr	PRIMASK, r3
}
 8014192:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the general processing that will place the callback on the
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 8014194:	f107 0308 	add.w	r3, r7, #8
 8014198:	4619      	mov	r1, r3
 801419a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801419c:	f7f5 fc26 	bl	80099ec <_txm_module_manager_callback_request>
 80141a0:	e00a      	b.n	80141b8 <_txm_module_manager_timer_notify_trampoline+0xb8>
    {

        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 80141a2:	4b09      	ldr	r3, [pc, #36]	; (80141c8 <_txm_module_manager_timer_notify_trampoline+0xc8>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	3301      	adds	r3, #1
 80141a8:	4a07      	ldr	r2, [pc, #28]	; (80141c8 <_txm_module_manager_timer_notify_trampoline+0xc8>)
 80141aa:	6013      	str	r3, [r2, #0]
 80141ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80141b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141b2:	f383 8810 	msr	PRIMASK, r3
}
 80141b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 80141b8:	bf00      	nop
 80141ba:	3760      	adds	r7, #96	; 0x60
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	2000f094 	.word	0x2000f094
 80141c4:	4d4f4455 	.word	0x4d4f4455
 80141c8:	2000f648 	.word	0x2000f648

080141cc <_txm_module_manager_unload>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_unload(TXM_MODULE_INSTANCE *module_instance)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b08a      	sub	sp, #40	; 0x28
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80141d4:	f3ef 8305 	mrs	r3, IPSR
 80141d8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80141da:	697a      	ldr	r2, [r7, #20]
TXM_MODULE_INSTANCE *next_module, *previous_module;
CHAR                *memory_ptr;


    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 80141dc:	4b43      	ldr	r3, [pc, #268]	; (80142ec <_txm_module_manager_unload+0x120>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	4313      	orrs	r3, r2
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d00b      	beq.n	80141fe <_txm_module_manager_unload+0x32>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80141e6:	f3ef 8305 	mrs	r3, IPSR
 80141ea:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80141ec:	693a      	ldr	r2, [r7, #16]
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80141ee:	4b3f      	ldr	r3, [pc, #252]	; (80142ec <_txm_module_manager_unload+0x120>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4313      	orrs	r3, r2
 80141f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80141f8:	d201      	bcs.n	80141fe <_txm_module_manager_unload+0x32>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 80141fa:	2313      	movs	r3, #19
 80141fc:	e071      	b.n	80142e2 <_txm_module_manager_unload+0x116>
        }
    }

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 80141fe:	4b3c      	ldr	r3, [pc, #240]	; (80142f0 <_txm_module_manager_unload+0x124>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d001      	beq.n	801420a <_txm_module_manager_unload+0x3e>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 8014206:	231d      	movs	r3, #29
 8014208:	e06b      	b.n	80142e2 <_txm_module_manager_unload+0x116>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d101      	bne.n	8014214 <_txm_module_manager_unload+0x48>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8014210:	2303      	movs	r3, #3
 8014212:	e066      	b.n	80142e2 <_txm_module_manager_unload+0x116>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8014214:	f04f 31ff 	mov.w	r1, #4294967295
 8014218:	4836      	ldr	r0, [pc, #216]	; (80142f4 <_txm_module_manager_unload+0x128>)
 801421a:	f7ef fc45 	bl	8003aa8 <_tx_mutex_get>

    /* Determine if the module is already valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	4a35      	ldr	r2, [pc, #212]	; (80142f8 <_txm_module_manager_unload+0x12c>)
 8014224:	4293      	cmp	r3, r2
 8014226:	d004      	beq.n	8014232 <_txm_module_manager_unload+0x66>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8014228:	4832      	ldr	r0, [pc, #200]	; (80142f4 <_txm_module_manager_unload+0x128>)
 801422a:	f7ef fefb 	bl	8004024 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 801422e:	2303      	movs	r3, #3
 8014230:	e057      	b.n	80142e2 <_txm_module_manager_unload+0x116>
    }

    /* Determine if the module instance is in the  state.  */
    if ((module_instance -> txm_module_instance_state != TXM_MODULE_LOADED) && (module_instance -> txm_module_instance_state != TXM_MODULE_STOPPED))
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	2b01      	cmp	r3, #1
 8014238:	d008      	beq.n	801424c <_txm_module_manager_unload+0x80>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	2b04      	cmp	r3, #4
 8014240:	d004      	beq.n	801424c <_txm_module_manager_unload+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8014242:	482c      	ldr	r0, [pc, #176]	; (80142f4 <_txm_module_manager_unload+0x128>)
 8014244:	f7ef feee 	bl	8004024 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_NOT_DONE);
 8014248:	2320      	movs	r3, #32
 801424a:	e04a      	b.n	80142e2 <_txm_module_manager_unload+0x116>
    }

    /* Pickup the module data memory allocation address.  */
    memory_ptr =  module_instance -> txm_module_instance_data_allocation_ptr;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014250:	627b      	str	r3, [r7, #36]	; 0x24

    /* Release the module's data memory.  */
    _tx_byte_release(memory_ptr);
 8014252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014254:	f7ee fc5a 	bl	8002b0c <_tx_byte_release>

    /* Determine if there was memory allocated for the code.  */
    if (module_instance -> txm_module_instance_code_allocation_ptr)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	691b      	ldr	r3, [r3, #16]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d005      	beq.n	801426c <_txm_module_manager_unload+0xa0>
    {

        /* Yes, release the module's code memory.  */
        memory_ptr =  module_instance -> txm_module_instance_code_allocation_ptr;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	691b      	ldr	r3, [r3, #16]
 8014264:	627b      	str	r3, [r7, #36]	; 0x24

        /* Release the module's data memory.  */
        _tx_byte_release(memory_ptr);
 8014266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014268:	f7ee fc50 	bl	8002b0c <_tx_byte_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801426c:	f3ef 8310 	mrs	r3, PRIMASK
 8014270:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014272:	b672      	cpsid	i
    return(primask_value);
 8014274:	68fb      	ldr	r3, [r7, #12]
    }

    /* Temporarily disable interrupts.  */
    TX_DISABLE
 8014276:	623b      	str	r3, [r7, #32]

    /* Clear some of the module information.  */
    module_instance -> txm_module_instance_id =     0;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2200      	movs	r2, #0
 801427c:	601a      	str	r2, [r3, #0]
    module_instance -> txm_module_instance_state =  TXM_MODULE_UNLOADED;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2205      	movs	r2, #5
 8014282:	609a      	str	r2, [r3, #8]
    TXM_MODULE_MANAGER_MODULE_UNLOAD(module_instance);

    /* Remove the module from the linked list of loaded modules.  */

    /* See if the module is the only one on the list.  */
    if ((--_txm_module_manger_loaded_count) == 0)
 8014284:	4b1d      	ldr	r3, [pc, #116]	; (80142fc <_txm_module_manager_unload+0x130>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	3b01      	subs	r3, #1
 801428a:	4a1c      	ldr	r2, [pc, #112]	; (80142fc <_txm_module_manager_unload+0x130>)
 801428c:	6013      	str	r3, [r2, #0]
 801428e:	4b1b      	ldr	r3, [pc, #108]	; (80142fc <_txm_module_manager_unload+0x130>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d103      	bne.n	801429e <_txm_module_manager_unload+0xd2>
    {

        /* Only created module, just set the created list to NULL.  */
        _txm_module_manager_loaded_list_ptr =  TX_NULL;
 8014296:	4b1a      	ldr	r3, [pc, #104]	; (8014300 <_txm_module_manager_unload+0x134>)
 8014298:	2200      	movs	r2, #0
 801429a:	601a      	str	r2, [r3, #0]
 801429c:	e017      	b.n	80142ce <_txm_module_manager_unload+0x102>
    }
    else
    {

        /* Otherwise, not the only created module, link-up the neighbors.  */
        next_module =                                module_instance -> txm_module_instance_loaded_next;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 80142a4:	61fb      	str	r3, [r7, #28]
        previous_module =                            module_instance -> txm_module_instance_loaded_previous;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80142ac:	61bb      	str	r3, [r7, #24]
        next_module -> txm_module_instance_loaded_previous =  previous_module;
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	69ba      	ldr	r2, [r7, #24]
 80142b2:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
        previous_module -> txm_module_instance_loaded_next =  next_module;
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	69fa      	ldr	r2, [r7, #28]
 80142ba:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

        /* See if we have to update the created list head pointer.  */
        if (_txm_module_manager_loaded_list_ptr == module_instance)
 80142be:	4b10      	ldr	r3, [pc, #64]	; (8014300 <_txm_module_manager_unload+0x134>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d102      	bne.n	80142ce <_txm_module_manager_unload+0x102>
        {

            /* Yes, move the head pointer to the next link. */
            _txm_module_manager_loaded_list_ptr =  next_module;
 80142c8:	4a0d      	ldr	r2, [pc, #52]	; (8014300 <_txm_module_manager_unload+0x134>)
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	6013      	str	r3, [r2, #0]
 80142ce:	6a3b      	ldr	r3, [r7, #32]
 80142d0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	f383 8810 	msr	PRIMASK, r3
}
 80142d8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 80142da:	4806      	ldr	r0, [pc, #24]	; (80142f4 <_txm_module_manager_unload+0x128>)
 80142dc:	f7ef fea2 	bl	8004024 <_tx_mutex_put>

    /* Return success.  */
    return(TX_SUCCESS);
 80142e0:	2300      	movs	r3, #0
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3728      	adds	r7, #40	; 0x28
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	20000018 	.word	0x20000018
 80142f0:	2000f640 	.word	0x2000f640
 80142f4:	2000f604 	.word	0x2000f604
 80142f8:	4d4f4455 	.word	0x4d4f4455
 80142fc:	2000f63c 	.word	0x2000f63c
 8014300:	2000f638 	.word	0x2000f638

08014304 <_txm_module_manager_created_object_check>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UCHAR _txm_module_manager_created_object_check(TXM_MODULE_INSTANCE *module_instance, VOID *object_ptr)
{
 8014304:	b480      	push	{r7}
 8014306:	b085      	sub	sp, #20
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]

TXM_MODULE_ALLOCATED_OBJECT     *allocated_object_ptr;

    /* Determine if the socket control block is inside the module.  */
    if ( (((CHAR *) object_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	429a      	cmp	r2, r3
 8014316:	d306      	bcc.n	8014326 <_txm_module_manager_created_object_check+0x22>
         (((CHAR *) object_ptr) < ((CHAR *) module_instance -> txm_module_instance_data_end)))
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if ( (((CHAR *) object_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 801431c:	683a      	ldr	r2, [r7, #0]
 801431e:	429a      	cmp	r2, r3
 8014320:	d201      	bcs.n	8014326 <_txm_module_manager_created_object_check+0x22>
    {
        return TX_TRUE;
 8014322:	2301      	movs	r3, #1
 8014324:	e01d      	b.n	8014362 <_txm_module_manager_created_object_check+0x5e>
    }

    /* Determine if this object control block was allocated by this module instance.  */
    else if (_txm_module_manager_object_pool_created)
 8014326:	4b12      	ldr	r3, [pc, #72]	; (8014370 <_txm_module_manager_created_object_check+0x6c>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d018      	beq.n	8014360 <_txm_module_manager_created_object_check+0x5c>
    {

        /* Determine if the current object is from the pool of dynamically allocated objects.  */
        if ((((UCHAR *) object_ptr) >= _txm_module_manager_object_pool.tx_byte_pool_start) &&
 801432e:	4b11      	ldr	r3, [pc, #68]	; (8014374 <_txm_module_manager_created_object_check+0x70>)
 8014330:	699b      	ldr	r3, [r3, #24]
 8014332:	683a      	ldr	r2, [r7, #0]
 8014334:	429a      	cmp	r2, r3
 8014336:	d313      	bcc.n	8014360 <_txm_module_manager_created_object_check+0x5c>
            (((UCHAR *) object_ptr) < (_txm_module_manager_object_pool.tx_byte_pool_start + _txm_module_manager_object_pool.tx_byte_pool_size)))
 8014338:	4b0e      	ldr	r3, [pc, #56]	; (8014374 <_txm_module_manager_created_object_check+0x70>)
 801433a:	699a      	ldr	r2, [r3, #24]
 801433c:	4b0d      	ldr	r3, [pc, #52]	; (8014374 <_txm_module_manager_created_object_check+0x70>)
 801433e:	69db      	ldr	r3, [r3, #28]
 8014340:	4413      	add	r3, r2
        if ((((UCHAR *) object_ptr) >= _txm_module_manager_object_pool.tx_byte_pool_start) &&
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	429a      	cmp	r2, r3
 8014346:	d20b      	bcs.n	8014360 <_txm_module_manager_created_object_check+0x5c>
        {

            /* Pickup object pointer.  */
            allocated_object_ptr =  (TXM_MODULE_ALLOCATED_OBJECT *) object_ptr;
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	60fb      	str	r3, [r7, #12]

            /* Move back to get the header information.  */
            allocated_object_ptr--;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	3b10      	subs	r3, #16
 8014350:	60fb      	str	r3, [r7, #12]

            /* Now determine if this object belongs to this module.  */
            if (allocated_object_ptr -> txm_module_allocated_object_module_instance == module_instance)
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	429a      	cmp	r2, r3
 801435a:	d101      	bne.n	8014360 <_txm_module_manager_created_object_check+0x5c>
            {
                return TX_TRUE;
 801435c:	2301      	movs	r3, #1
 801435e:	e000      	b.n	8014362 <_txm_module_manager_created_object_check+0x5e>
            }
        }
    }

    return TX_FALSE;
 8014360:	2300      	movs	r3, #0
}
 8014362:	4618      	mov	r0, r3
 8014364:	3714      	adds	r7, #20
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop
 8014370:	2000f600 	.word	0x2000f600
 8014374:	2000f5cc 	.word	0x2000f5cc

08014378 <_txm_module_manager_object_size_check>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_size_check(ALIGN_TYPE object_ptr, ULONG object_size)
{
 8014378:	b480      	push	{r7}
 801437a:	b085      	sub	sp, #20
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
TXM_MODULE_ALLOCATED_OBJECT *module_allocated_object_ptr;
UINT                        return_value;

    /* Pickup the allocated object pointer.  */
    module_allocated_object_ptr = ((TXM_MODULE_ALLOCATED_OBJECT *) object_ptr) - 1;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	3b10      	subs	r3, #16
 8014386:	60bb      	str	r3, [r7, #8]

    /* Does the allocated memory match the expected object size?  */
    if (module_allocated_object_ptr -> txm_module_object_size == object_size)
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	683a      	ldr	r2, [r7, #0]
 801438e:	429a      	cmp	r2, r3
 8014390:	d102      	bne.n	8014398 <_txm_module_manager_object_size_check+0x20>
        return_value =  TX_SUCCESS;
 8014392:	2300      	movs	r3, #0
 8014394:	60fb      	str	r3, [r7, #12]
 8014396:	e001      	b.n	801439c <_txm_module_manager_object_size_check+0x24>
    else
        return_value =  TXM_MODULE_INVALID_MEMORY;
 8014398:	23f4      	movs	r3, #244	; 0xf4
 801439a:	60fb      	str	r3, [r7, #12]

    return(return_value);
 801439c:	68fb      	ldr	r3, [r7, #12]
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3714      	adds	r7, #20
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr

080143aa <_txm_module_manager_object_name_compare>:
/*                                                                        */
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_name_compare(CHAR *search_name, UINT search_name_length, CHAR *object_name)
{
 80143aa:	b480      	push	{r7}
 80143ac:	b087      	sub	sp, #28
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	60f8      	str	r0, [r7, #12]
 80143b2:	60b9      	str	r1, [r7, #8]
 80143b4:	607a      	str	r2, [r7, #4]
CHAR    object_name_char;


    /* Is the object name null? Note that the search name has already been checked
       by the caller.  */
    if (object_name == TX_NULL)
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d101      	bne.n	80143c0 <_txm_module_manager_object_name_compare+0x16>
    {

        /* The strings can't match.  */
        return(TX_FALSE);
 80143bc:	2300      	movs	r3, #0
 80143be:	e01f      	b.n	8014400 <_txm_module_manager_object_name_compare+0x56>
    /* Loop through the names.  */
    while (1)
    {

        /* Get the current characters from each name.  */
        search_name_char =  *search_name;
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	75fb      	strb	r3, [r7, #23]
        object_name_char =  *object_name;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	75bb      	strb	r3, [r7, #22]

        /* Check for match.  */
        if (search_name_char == object_name_char)
 80143cc:	7dfa      	ldrb	r2, [r7, #23]
 80143ce:	7dbb      	ldrb	r3, [r7, #22]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d104      	bne.n	80143de <_txm_module_manager_object_name_compare+0x34>
        {

            /* Are they null-terminators?  */
            if (search_name_char == '\0')
 80143d4:	7dfb      	ldrb	r3, [r7, #23]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d103      	bne.n	80143e2 <_txm_module_manager_object_name_compare+0x38>
            {

                /* The strings match.  */
                return(TX_TRUE);
 80143da:	2301      	movs	r3, #1
 80143dc:	e010      	b.n	8014400 <_txm_module_manager_object_name_compare+0x56>
        }
        else
        {

            /* The strings don't match.  */
            return(TX_FALSE);
 80143de:	2300      	movs	r3, #0
 80143e0:	e00e      	b.n	8014400 <_txm_module_manager_object_name_compare+0x56>
        }

        /* Are we at the end of the search name?  */
        if (search_name_length == 0)
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d101      	bne.n	80143ec <_txm_module_manager_object_name_compare+0x42>
        {

            /* The strings don't match.  */
            return(TX_FALSE);
 80143e8:	2300      	movs	r3, #0
 80143ea:	e009      	b.n	8014400 <_txm_module_manager_object_name_compare+0x56>
        }

        /* Move to next character.  */
        search_name++;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	3301      	adds	r3, #1
 80143f0:	60fb      	str	r3, [r7, #12]
        object_name++;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	3301      	adds	r3, #1
 80143f6:	607b      	str	r3, [r7, #4]
        search_name_length--;
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	3b01      	subs	r3, #1
 80143fc:	60bb      	str	r3, [r7, #8]
        search_name_char =  *search_name;
 80143fe:	e7df      	b.n	80143c0 <_txm_module_manager_object_name_compare+0x16>
    }
}
 8014400:	4618      	mov	r0, r3
 8014402:	371c      	adds	r7, #28
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <_txm_module_manager_util_code_allocation_size_and_alignment_get>:
/*  09-30-2020      Scott Larson            Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_util_code_allocation_size_and_alignment_get(TXM_MODULE_PREAMBLE *module_preamble,
                                                                      ULONG *code_alignment_dest, ULONG *code_allocation_size_dest)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b08a      	sub	sp, #40	; 0x28
 8014410:	af02      	add	r7, sp, #8
 8014412:	60f8      	str	r0, [r7, #12]
 8014414:	60b9      	str	r1, [r7, #8]
 8014416:	607a      	str	r2, [r7, #4]
ULONG   data_size_ignored;
ULONG   data_alignment_ignored;


    /* Pickup the module code size.  */
    code_size =  module_preamble -> txm_module_preamble_code_size;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801441c:	61fb      	str	r3, [r7, #28]

    /* Adjust the size of the module elements to be aligned to the default alignment.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(code_size, TXM_MODULE_CODE_ALIGNMENT, code_size);
 801441e:	69fb      	ldr	r3, [r7, #28]
 8014420:	f113 0f05 	cmn.w	r3, #5
 8014424:	d901      	bls.n	801442a <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x1e>
 8014426:	23f8      	movs	r3, #248	; 0xf8
 8014428:	e02a      	b.n	8014480 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x74>
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	3304      	adds	r3, #4
 801442e:	61fb      	str	r3, [r7, #28]
    code_size =  ((code_size - 1)/TXM_MODULE_CODE_ALIGNMENT) * TXM_MODULE_CODE_ALIGNMENT;
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	3b01      	subs	r3, #1
 8014434:	f023 0303 	bic.w	r3, r3, #3
 8014438:	61fb      	str	r3, [r7, #28]

    /* Setup the default code and data alignments.  */
    code_alignment =  (ULONG) TXM_MODULE_CODE_ALIGNMENT;
 801443a:	2304      	movs	r3, #4
 801443c:	61bb      	str	r3, [r7, #24]

    /* Get the port-specific alignment for the code size. Note we only want code so we pass 'null' values for data.  */
    data_size_ignored = 1;
 801443e:	2301      	movs	r3, #1
 8014440:	617b      	str	r3, [r7, #20]
    data_alignment_ignored = 1;
 8014442:	2301      	movs	r3, #1
 8014444:	613b      	str	r3, [r7, #16]
    TXM_MODULE_MANAGER_ALIGNMENT_ADJUST(module_preamble, code_size, code_alignment, data_size_ignored, data_alignment_ignored)
 8014446:	f107 0014 	add.w	r0, r7, #20
 801444a:	f107 0218 	add.w	r2, r7, #24
 801444e:	f107 011c 	add.w	r1, r7, #28
 8014452:	f107 0310 	add.w	r3, r7, #16
 8014456:	9300      	str	r3, [sp, #0]
 8014458:	4603      	mov	r3, r0
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f7f5 f932 	bl	80096c4 <_txm_module_manager_alignment_adjust>

    /* Calculate the code memory allocation size.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(code_size, code_alignment, *code_allocation_size_dest);
 8014460:	69fb      	ldr	r3, [r7, #28]
 8014462:	43da      	mvns	r2, r3
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	429a      	cmp	r2, r3
 8014468:	d201      	bcs.n	801446e <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x62>
 801446a:	23f8      	movs	r3, #248	; 0xf8
 801446c:	e008      	b.n	8014480 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x74>
 801446e:	69fa      	ldr	r2, [r7, #28]
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	441a      	add	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	601a      	str	r2, [r3, #0]

    /* Write the alignment result into the caller's destination address.  */
    *code_alignment_dest =  code_alignment;
 8014478:	69ba      	ldr	r2, [r7, #24]
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 801447e:	2300      	movs	r3, #0
}
 8014480:	4618      	mov	r0, r3
 8014482:	3720      	adds	r7, #32
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <_tx_block_pool_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases,
                    ULONG *suspensions, ULONG *timeouts)
{
 8014488:	b480      	push	{r7}
 801448a:	b087      	sub	sp, #28
 801448c:	af00      	add	r7, sp, #0
 801448e:	60f8      	str	r0, [r7, #12]
 8014490:	60b9      	str	r1, [r7, #8]
 8014492:	607a      	str	r2, [r7, #4]
 8014494:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (pool_ptr != TX_NULL)
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d002      	beq.n	80144a2 <_tx_block_pool_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801449c:	23ff      	movs	r3, #255	; 0xff
 801449e:	617b      	str	r3, [r7, #20]
 80144a0:	e019      	b.n	80144d6 <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (allocates != TX_NULL)
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d002      	beq.n	80144ae <_tx_block_pool_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80144a8:	23ff      	movs	r3, #255	; 0xff
 80144aa:	617b      	str	r3, [r7, #20]
 80144ac:	e013      	b.n	80144d6 <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (releases != TX_NULL)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d002      	beq.n	80144ba <_tx_block_pool_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80144b4:	23ff      	movs	r3, #255	; 0xff
 80144b6:	617b      	str	r3, [r7, #20]
 80144b8:	e00d      	b.n	80144d6 <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (suspensions != TX_NULL)
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <_tx_block_pool_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80144c0:	23ff      	movs	r3, #255	; 0xff
 80144c2:	617b      	str	r3, [r7, #20]
 80144c4:	e007      	b.n	80144d6 <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (timeouts != TX_NULL)
 80144c6:	6a3b      	ldr	r3, [r7, #32]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d002      	beq.n	80144d2 <_tx_block_pool_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80144cc:	23ff      	movs	r3, #255	; 0xff
 80144ce:	617b      	str	r3, [r7, #20]
 80144d0:	e001      	b.n	80144d6 <_tx_block_pool_performance_info_get+0x4e>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80144d2:	23ff      	movs	r3, #255	; 0xff
 80144d4:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 80144d6:	697b      	ldr	r3, [r7, #20]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	371c      	adds	r7, #28
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr

080144e4 <_tx_block_pool_performance_system_info_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b087      	sub	sp, #28
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	60f8      	str	r0, [r7, #12]
 80144ec:	60b9      	str	r1, [r7, #8]
 80144ee:	607a      	str	r2, [r7, #4]
 80144f0:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (allocates != TX_NULL)
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d002      	beq.n	80144fe <_tx_block_pool_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80144f8:	23ff      	movs	r3, #255	; 0xff
 80144fa:	617b      	str	r3, [r7, #20]
 80144fc:	e013      	b.n	8014526 <_tx_block_pool_performance_system_info_get+0x42>
    }
    else if (releases != TX_NULL)
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d002      	beq.n	801450a <_tx_block_pool_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014504:	23ff      	movs	r3, #255	; 0xff
 8014506:	617b      	str	r3, [r7, #20]
 8014508:	e00d      	b.n	8014526 <_tx_block_pool_performance_system_info_get+0x42>
    }
    else if (suspensions != TX_NULL)
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d002      	beq.n	8014516 <_tx_block_pool_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014510:	23ff      	movs	r3, #255	; 0xff
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	e007      	b.n	8014526 <_tx_block_pool_performance_system_info_get+0x42>
    }
    else if (timeouts != TX_NULL)
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d002      	beq.n	8014522 <_tx_block_pool_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801451c:	23ff      	movs	r3, #255	; 0xff
 801451e:	617b      	str	r3, [r7, #20]
 8014520:	e001      	b.n	8014526 <_tx_block_pool_performance_system_info_get+0x42>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014522:	23ff      	movs	r3, #255	; 0xff
 8014524:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014526:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014528:	4618      	mov	r0, r3
 801452a:	371c      	adds	r7, #28
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr

08014534 <_tx_byte_pool_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases,
                    ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8014534:	b480      	push	{r7}
 8014536:	b087      	sub	sp, #28
 8014538:	af00      	add	r7, sp, #0
 801453a:	60f8      	str	r0, [r7, #12]
 801453c:	60b9      	str	r1, [r7, #8]
 801453e:	607a      	str	r2, [r7, #4]
 8014540:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (pool_ptr != TX_NULL)
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <_tx_byte_pool_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014548:	23ff      	movs	r3, #255	; 0xff
 801454a:	617b      	str	r3, [r7, #20]
 801454c:	e02b      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (allocates != TX_NULL)
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d002      	beq.n	801455a <_tx_byte_pool_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014554:	23ff      	movs	r3, #255	; 0xff
 8014556:	617b      	str	r3, [r7, #20]
 8014558:	e025      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (releases != TX_NULL)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d002      	beq.n	8014566 <_tx_byte_pool_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014560:	23ff      	movs	r3, #255	; 0xff
 8014562:	617b      	str	r3, [r7, #20]
 8014564:	e01f      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (fragments_searched != TX_NULL)
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d002      	beq.n	8014572 <_tx_byte_pool_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801456c:	23ff      	movs	r3, #255	; 0xff
 801456e:	617b      	str	r3, [r7, #20]
 8014570:	e019      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (merges != TX_NULL)
 8014572:	6a3b      	ldr	r3, [r7, #32]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d002      	beq.n	801457e <_tx_byte_pool_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014578:	23ff      	movs	r3, #255	; 0xff
 801457a:	617b      	str	r3, [r7, #20]
 801457c:	e013      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (splits != TX_NULL)
 801457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <_tx_byte_pool_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014584:	23ff      	movs	r3, #255	; 0xff
 8014586:	617b      	str	r3, [r7, #20]
 8014588:	e00d      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (suspensions != TX_NULL)
 801458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <_tx_byte_pool_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014590:	23ff      	movs	r3, #255	; 0xff
 8014592:	617b      	str	r3, [r7, #20]
 8014594:	e007      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (timeouts != TX_NULL)
 8014596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014598:	2b00      	cmp	r3, #0
 801459a:	d002      	beq.n	80145a2 <_tx_byte_pool_performance_info_get+0x6e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801459c:	23ff      	movs	r3, #255	; 0xff
 801459e:	617b      	str	r3, [r7, #20]
 80145a0:	e001      	b.n	80145a6 <_tx_byte_pool_performance_info_get+0x72>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80145a2:	23ff      	movs	r3, #255	; 0xff
 80145a4:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80145a6:	697b      	ldr	r3, [r7, #20]
#endif
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	371c      	adds	r7, #28
 80145ac:	46bd      	mov	sp, r7
 80145ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b2:	4770      	bx	lr

080145b4 <_tx_byte_pool_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases,
                    ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b087      	sub	sp, #28
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	60f8      	str	r0, [r7, #12]
 80145bc:	60b9      	str	r1, [r7, #8]
 80145be:	607a      	str	r2, [r7, #4]
 80145c0:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (allocates != TX_NULL)
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d002      	beq.n	80145ce <_tx_byte_pool_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80145c8:	23ff      	movs	r3, #255	; 0xff
 80145ca:	617b      	str	r3, [r7, #20]
 80145cc:	e025      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (releases != TX_NULL)
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d002      	beq.n	80145da <_tx_byte_pool_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80145d4:	23ff      	movs	r3, #255	; 0xff
 80145d6:	617b      	str	r3, [r7, #20]
 80145d8:	e01f      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (fragments_searched != TX_NULL)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d002      	beq.n	80145e6 <_tx_byte_pool_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80145e0:	23ff      	movs	r3, #255	; 0xff
 80145e2:	617b      	str	r3, [r7, #20]
 80145e4:	e019      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (merges != TX_NULL)
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d002      	beq.n	80145f2 <_tx_byte_pool_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80145ec:	23ff      	movs	r3, #255	; 0xff
 80145ee:	617b      	str	r3, [r7, #20]
 80145f0:	e013      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (splits != TX_NULL)
 80145f2:	6a3b      	ldr	r3, [r7, #32]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d002      	beq.n	80145fe <_tx_byte_pool_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80145f8:	23ff      	movs	r3, #255	; 0xff
 80145fa:	617b      	str	r3, [r7, #20]
 80145fc:	e00d      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (suspensions != TX_NULL)
 80145fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014600:	2b00      	cmp	r3, #0
 8014602:	d002      	beq.n	801460a <_tx_byte_pool_performance_system_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014604:	23ff      	movs	r3, #255	; 0xff
 8014606:	617b      	str	r3, [r7, #20]
 8014608:	e007      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (timeouts != TX_NULL)
 801460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801460c:	2b00      	cmp	r3, #0
 801460e:	d002      	beq.n	8014616 <_tx_byte_pool_performance_system_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014610:	23ff      	movs	r3, #255	; 0xff
 8014612:	617b      	str	r3, [r7, #20]
 8014614:	e001      	b.n	801461a <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014616:	23ff      	movs	r3, #255	; 0xff
 8014618:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801461a:	697b      	ldr	r3, [r7, #20]
#endif
}
 801461c:	4618      	mov	r0, r3
 801461e:	371c      	adds	r7, #28
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <_tx_event_flags_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets,
                    ULONG *suspensions, ULONG *timeouts)
{
 8014628:	b480      	push	{r7}
 801462a:	b087      	sub	sp, #28
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (group_ptr != TX_NULL)
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d002      	beq.n	8014642 <_tx_event_flags_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801463c:	23ff      	movs	r3, #255	; 0xff
 801463e:	617b      	str	r3, [r7, #20]
 8014640:	e019      	b.n	8014676 <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (sets != TX_NULL)
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d002      	beq.n	801464e <_tx_event_flags_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014648:	23ff      	movs	r3, #255	; 0xff
 801464a:	617b      	str	r3, [r7, #20]
 801464c:	e013      	b.n	8014676 <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (gets != TX_NULL)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d002      	beq.n	801465a <_tx_event_flags_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014654:	23ff      	movs	r3, #255	; 0xff
 8014656:	617b      	str	r3, [r7, #20]
 8014658:	e00d      	b.n	8014676 <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (suspensions != TX_NULL)
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d002      	beq.n	8014666 <_tx_event_flags_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014660:	23ff      	movs	r3, #255	; 0xff
 8014662:	617b      	str	r3, [r7, #20]
 8014664:	e007      	b.n	8014676 <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (timeouts != TX_NULL)
 8014666:	6a3b      	ldr	r3, [r7, #32]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d002      	beq.n	8014672 <_tx_event_flags_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801466c:	23ff      	movs	r3, #255	; 0xff
 801466e:	617b      	str	r3, [r7, #20]
 8014670:	e001      	b.n	8014676 <_tx_event_flags_performance_info_get+0x4e>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014672:	23ff      	movs	r3, #255	; 0xff
 8014674:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014676:	697b      	ldr	r3, [r7, #20]
}
 8014678:	4618      	mov	r0, r3
 801467a:	371c      	adds	r7, #28
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <_tx_event_flags_performance_system_info_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8014684:	b480      	push	{r7}
 8014686:	b087      	sub	sp, #28
 8014688:	af00      	add	r7, sp, #0
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	607a      	str	r2, [r7, #4]
 8014690:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (sets != TX_NULL)
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d002      	beq.n	801469e <_tx_event_flags_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014698:	23ff      	movs	r3, #255	; 0xff
 801469a:	617b      	str	r3, [r7, #20]
 801469c:	e013      	b.n	80146c6 <_tx_event_flags_performance_system_info_get+0x42>
    }
    else if (gets != TX_NULL)
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d002      	beq.n	80146aa <_tx_event_flags_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80146a4:	23ff      	movs	r3, #255	; 0xff
 80146a6:	617b      	str	r3, [r7, #20]
 80146a8:	e00d      	b.n	80146c6 <_tx_event_flags_performance_system_info_get+0x42>
    }
    else if (suspensions != TX_NULL)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <_tx_event_flags_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80146b0:	23ff      	movs	r3, #255	; 0xff
 80146b2:	617b      	str	r3, [r7, #20]
 80146b4:	e007      	b.n	80146c6 <_tx_event_flags_performance_system_info_get+0x42>
    }
    else if (timeouts != TX_NULL)
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d002      	beq.n	80146c2 <_tx_event_flags_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80146bc:	23ff      	movs	r3, #255	; 0xff
 80146be:	617b      	str	r3, [r7, #20]
 80146c0:	e001      	b.n	80146c6 <_tx_event_flags_performance_system_info_get+0x42>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80146c2:	23ff      	movs	r3, #255	; 0xff
 80146c4:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80146c6:	697b      	ldr	r3, [r7, #20]
#endif
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	371c      	adds	r7, #28
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr

080146d4 <_tx_mutex_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets,
                    ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b087      	sub	sp, #28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (mutex_ptr != TX_NULL)
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <_tx_mutex_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80146e8:	23ff      	movs	r3, #255	; 0xff
 80146ea:	617b      	str	r3, [r7, #20]
 80146ec:	e025      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else if (puts != TX_NULL)
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d002      	beq.n	80146fa <_tx_mutex_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80146f4:	23ff      	movs	r3, #255	; 0xff
 80146f6:	617b      	str	r3, [r7, #20]
 80146f8:	e01f      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else if (gets != TX_NULL)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d002      	beq.n	8014706 <_tx_mutex_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014700:	23ff      	movs	r3, #255	; 0xff
 8014702:	617b      	str	r3, [r7, #20]
 8014704:	e019      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else if (suspensions != TX_NULL)
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d002      	beq.n	8014712 <_tx_mutex_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801470c:	23ff      	movs	r3, #255	; 0xff
 801470e:	617b      	str	r3, [r7, #20]
 8014710:	e013      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else if (timeouts != TX_NULL)
 8014712:	6a3b      	ldr	r3, [r7, #32]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <_tx_mutex_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014718:	23ff      	movs	r3, #255	; 0xff
 801471a:	617b      	str	r3, [r7, #20]
 801471c:	e00d      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else if (inversions != TX_NULL)
 801471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014720:	2b00      	cmp	r3, #0
 8014722:	d002      	beq.n	801472a <_tx_mutex_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014724:	23ff      	movs	r3, #255	; 0xff
 8014726:	617b      	str	r3, [r7, #20]
 8014728:	e007      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else if (inheritances != TX_NULL)
 801472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801472c:	2b00      	cmp	r3, #0
 801472e:	d002      	beq.n	8014736 <_tx_mutex_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014730:	23ff      	movs	r3, #255	; 0xff
 8014732:	617b      	str	r3, [r7, #20]
 8014734:	e001      	b.n	801473a <_tx_mutex_performance_info_get+0x66>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014736:	23ff      	movs	r3, #255	; 0xff
 8014738:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 801473a:	697b      	ldr	r3, [r7, #20]
}
 801473c:	4618      	mov	r0, r3
 801473e:	371c      	adds	r7, #28
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <_tx_mutex_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions,
                                ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8014748:	b480      	push	{r7}
 801474a:	b087      	sub	sp, #28
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	607a      	str	r2, [r7, #4]
 8014754:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (puts != TX_NULL)
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d002      	beq.n	8014762 <_tx_mutex_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801475c:	23ff      	movs	r3, #255	; 0xff
 801475e:	617b      	str	r3, [r7, #20]
 8014760:	e01f      	b.n	80147a2 <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (gets != TX_NULL)
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d002      	beq.n	801476e <_tx_mutex_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014768:	23ff      	movs	r3, #255	; 0xff
 801476a:	617b      	str	r3, [r7, #20]
 801476c:	e019      	b.n	80147a2 <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (suspensions != TX_NULL)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d002      	beq.n	801477a <_tx_mutex_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014774:	23ff      	movs	r3, #255	; 0xff
 8014776:	617b      	str	r3, [r7, #20]
 8014778:	e013      	b.n	80147a2 <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (timeouts != TX_NULL)
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <_tx_mutex_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014780:	23ff      	movs	r3, #255	; 0xff
 8014782:	617b      	str	r3, [r7, #20]
 8014784:	e00d      	b.n	80147a2 <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (inversions != TX_NULL)
 8014786:	6a3b      	ldr	r3, [r7, #32]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d002      	beq.n	8014792 <_tx_mutex_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801478c:	23ff      	movs	r3, #255	; 0xff
 801478e:	617b      	str	r3, [r7, #20]
 8014790:	e007      	b.n	80147a2 <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (inheritances != TX_NULL)
 8014792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014794:	2b00      	cmp	r3, #0
 8014796:	d002      	beq.n	801479e <_tx_mutex_performance_system_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014798:	23ff      	movs	r3, #255	; 0xff
 801479a:	617b      	str	r3, [r7, #20]
 801479c:	e001      	b.n	80147a2 <_tx_mutex_performance_system_info_get+0x5a>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801479e:	23ff      	movs	r3, #255	; 0xff
 80147a0:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80147a2:	697b      	ldr	r3, [r7, #20]
#endif
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	371c      	adds	r7, #28
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <_tx_queue_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received,
                    ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b087      	sub	sp, #28
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
 80147bc:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (queue_ptr != TX_NULL)
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <_tx_queue_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80147c4:	23ff      	movs	r3, #255	; 0xff
 80147c6:	617b      	str	r3, [r7, #20]
 80147c8:	e025      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else if (messages_sent != TX_NULL)
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d002      	beq.n	80147d6 <_tx_queue_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80147d0:	23ff      	movs	r3, #255	; 0xff
 80147d2:	617b      	str	r3, [r7, #20]
 80147d4:	e01f      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else if (messages_received != TX_NULL)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <_tx_queue_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80147dc:	23ff      	movs	r3, #255	; 0xff
 80147de:	617b      	str	r3, [r7, #20]
 80147e0:	e019      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else if (empty_suspensions != TX_NULL)
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d002      	beq.n	80147ee <_tx_queue_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80147e8:	23ff      	movs	r3, #255	; 0xff
 80147ea:	617b      	str	r3, [r7, #20]
 80147ec:	e013      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else if (full_suspensions != TX_NULL)
 80147ee:	6a3b      	ldr	r3, [r7, #32]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <_tx_queue_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80147f4:	23ff      	movs	r3, #255	; 0xff
 80147f6:	617b      	str	r3, [r7, #20]
 80147f8:	e00d      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else if (full_errors != TX_NULL)
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d002      	beq.n	8014806 <_tx_queue_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014800:	23ff      	movs	r3, #255	; 0xff
 8014802:	617b      	str	r3, [r7, #20]
 8014804:	e007      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else if (timeouts != TX_NULL)
 8014806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014808:	2b00      	cmp	r3, #0
 801480a:	d002      	beq.n	8014812 <_tx_queue_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801480c:	23ff      	movs	r3, #255	; 0xff
 801480e:	617b      	str	r3, [r7, #20]
 8014810:	e001      	b.n	8014816 <_tx_queue_performance_info_get+0x66>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014812:	23ff      	movs	r3, #255	; 0xff
 8014814:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014816:	697b      	ldr	r3, [r7, #20]
}
 8014818:	4618      	mov	r0, r3
 801481a:	371c      	adds	r7, #28
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <_tx_queue_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received,
                    ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8014824:	b480      	push	{r7}
 8014826:	b087      	sub	sp, #28
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	607a      	str	r2, [r7, #4]
 8014830:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (messages_sent != TX_NULL)
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d002      	beq.n	801483e <_tx_queue_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014838:	23ff      	movs	r3, #255	; 0xff
 801483a:	617b      	str	r3, [r7, #20]
 801483c:	e01f      	b.n	801487e <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (messages_received != TX_NULL)
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d002      	beq.n	801484a <_tx_queue_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014844:	23ff      	movs	r3, #255	; 0xff
 8014846:	617b      	str	r3, [r7, #20]
 8014848:	e019      	b.n	801487e <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (empty_suspensions != TX_NULL)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d002      	beq.n	8014856 <_tx_queue_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014850:	23ff      	movs	r3, #255	; 0xff
 8014852:	617b      	str	r3, [r7, #20]
 8014854:	e013      	b.n	801487e <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (full_suspensions != TX_NULL)
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d002      	beq.n	8014862 <_tx_queue_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801485c:	23ff      	movs	r3, #255	; 0xff
 801485e:	617b      	str	r3, [r7, #20]
 8014860:	e00d      	b.n	801487e <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (full_errors != TX_NULL)
 8014862:	6a3b      	ldr	r3, [r7, #32]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d002      	beq.n	801486e <_tx_queue_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014868:	23ff      	movs	r3, #255	; 0xff
 801486a:	617b      	str	r3, [r7, #20]
 801486c:	e007      	b.n	801487e <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (timeouts != TX_NULL)
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	2b00      	cmp	r3, #0
 8014872:	d002      	beq.n	801487a <_tx_queue_performance_system_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014874:	23ff      	movs	r3, #255	; 0xff
 8014876:	617b      	str	r3, [r7, #20]
 8014878:	e001      	b.n	801487e <_tx_queue_performance_system_info_get+0x5a>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801487a:	23ff      	movs	r3, #255	; 0xff
 801487c:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801487e:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014880:	4618      	mov	r0, r3
 8014882:	371c      	adds	r7, #28
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr

0801488c <_tx_semaphore_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets,
                    ULONG *suspensions, ULONG *timeouts)
{
 801488c:	b480      	push	{r7}
 801488e:	b087      	sub	sp, #28
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	607a      	str	r2, [r7, #4]
 8014898:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (semaphore_ptr != TX_NULL)
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d002      	beq.n	80148a6 <_tx_semaphore_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148a0:	23ff      	movs	r3, #255	; 0xff
 80148a2:	617b      	str	r3, [r7, #20]
 80148a4:	e019      	b.n	80148da <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (puts != TX_NULL)
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d002      	beq.n	80148b2 <_tx_semaphore_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148ac:	23ff      	movs	r3, #255	; 0xff
 80148ae:	617b      	str	r3, [r7, #20]
 80148b0:	e013      	b.n	80148da <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (gets != TX_NULL)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d002      	beq.n	80148be <_tx_semaphore_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148b8:	23ff      	movs	r3, #255	; 0xff
 80148ba:	617b      	str	r3, [r7, #20]
 80148bc:	e00d      	b.n	80148da <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (suspensions != TX_NULL)
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d002      	beq.n	80148ca <_tx_semaphore_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148c4:	23ff      	movs	r3, #255	; 0xff
 80148c6:	617b      	str	r3, [r7, #20]
 80148c8:	e007      	b.n	80148da <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (timeouts != TX_NULL)
 80148ca:	6a3b      	ldr	r3, [r7, #32]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <_tx_semaphore_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148d0:	23ff      	movs	r3, #255	; 0xff
 80148d2:	617b      	str	r3, [r7, #20]
 80148d4:	e001      	b.n	80148da <_tx_semaphore_performance_info_get+0x4e>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148d6:	23ff      	movs	r3, #255	; 0xff
 80148d8:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 80148da:	697b      	ldr	r3, [r7, #20]
}
 80148dc:	4618      	mov	r0, r3
 80148de:	371c      	adds	r7, #28
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr

080148e8 <_tx_semaphore_performance_system_info_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b087      	sub	sp, #28
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	607a      	str	r2, [r7, #4]
 80148f4:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (puts != TX_NULL)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d002      	beq.n	8014902 <_tx_semaphore_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80148fc:	23ff      	movs	r3, #255	; 0xff
 80148fe:	617b      	str	r3, [r7, #20]
 8014900:	e013      	b.n	801492a <_tx_semaphore_performance_system_info_get+0x42>
    }
    else if (gets != TX_NULL)
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <_tx_semaphore_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014908:	23ff      	movs	r3, #255	; 0xff
 801490a:	617b      	str	r3, [r7, #20]
 801490c:	e00d      	b.n	801492a <_tx_semaphore_performance_system_info_get+0x42>
    }
    else if (suspensions != TX_NULL)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d002      	beq.n	801491a <_tx_semaphore_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014914:	23ff      	movs	r3, #255	; 0xff
 8014916:	617b      	str	r3, [r7, #20]
 8014918:	e007      	b.n	801492a <_tx_semaphore_performance_system_info_get+0x42>
    }
    else if (timeouts != TX_NULL)
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d002      	beq.n	8014926 <_tx_semaphore_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014920:	23ff      	movs	r3, #255	; 0xff
 8014922:	617b      	str	r3, [r7, #20]
 8014924:	e001      	b.n	801492a <_tx_semaphore_performance_system_info_get+0x42>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014926:	23ff      	movs	r3, #255	; 0xff
 8014928:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801492a:	697b      	ldr	r3, [r7, #20]
#endif
}
 801492c:	4618      	mov	r0, r3
 801492e:	371c      	adds	r7, #28
 8014930:	46bd      	mov	sp, r7
 8014932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014936:	4770      	bx	lr

08014938 <_tx_thread_performance_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions,
                ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions,
                ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 8014938:	b480      	push	{r7}
 801493a:	b087      	sub	sp, #28
 801493c:	af00      	add	r7, sp, #0
 801493e:	60f8      	str	r0, [r7, #12]
 8014940:	60b9      	str	r1, [r7, #8]
 8014942:	607a      	str	r2, [r7, #4]
 8014944:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (thread_ptr != TX_NULL)
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d002      	beq.n	8014952 <_tx_thread_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801494c:	23ff      	movs	r3, #255	; 0xff
 801494e:	617b      	str	r3, [r7, #20]
 8014950:	e03d      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (resumptions != TX_NULL)
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d002      	beq.n	801495e <_tx_thread_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014958:	23ff      	movs	r3, #255	; 0xff
 801495a:	617b      	str	r3, [r7, #20]
 801495c:	e037      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (suspensions != TX_NULL)
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <_tx_thread_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014964:	23ff      	movs	r3, #255	; 0xff
 8014966:	617b      	str	r3, [r7, #20]
 8014968:	e031      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (solicited_preemptions != TX_NULL)
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d002      	beq.n	8014976 <_tx_thread_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014970:	23ff      	movs	r3, #255	; 0xff
 8014972:	617b      	str	r3, [r7, #20]
 8014974:	e02b      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (interrupt_preemptions != TX_NULL)
 8014976:	6a3b      	ldr	r3, [r7, #32]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d002      	beq.n	8014982 <_tx_thread_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801497c:	23ff      	movs	r3, #255	; 0xff
 801497e:	617b      	str	r3, [r7, #20]
 8014980:	e025      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (priority_inversions != TX_NULL)
 8014982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014984:	2b00      	cmp	r3, #0
 8014986:	d002      	beq.n	801498e <_tx_thread_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014988:	23ff      	movs	r3, #255	; 0xff
 801498a:	617b      	str	r3, [r7, #20]
 801498c:	e01f      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (time_slices != TX_NULL)
 801498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014990:	2b00      	cmp	r3, #0
 8014992:	d002      	beq.n	801499a <_tx_thread_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014994:	23ff      	movs	r3, #255	; 0xff
 8014996:	617b      	str	r3, [r7, #20]
 8014998:	e019      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (relinquishes != TX_NULL)
 801499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <_tx_thread_performance_info_get+0x6e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149a0:	23ff      	movs	r3, #255	; 0xff
 80149a2:	617b      	str	r3, [r7, #20]
 80149a4:	e013      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (timeouts != TX_NULL)
 80149a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d002      	beq.n	80149b2 <_tx_thread_performance_info_get+0x7a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149ac:	23ff      	movs	r3, #255	; 0xff
 80149ae:	617b      	str	r3, [r7, #20]
 80149b0:	e00d      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (wait_aborts != TX_NULL)
 80149b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d002      	beq.n	80149be <_tx_thread_performance_info_get+0x86>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149b8:	23ff      	movs	r3, #255	; 0xff
 80149ba:	617b      	str	r3, [r7, #20]
 80149bc:	e007      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else if (last_preempted_by != TX_NULL)
 80149be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d002      	beq.n	80149ca <_tx_thread_performance_info_get+0x92>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149c4:	23ff      	movs	r3, #255	; 0xff
 80149c6:	617b      	str	r3, [r7, #20]
 80149c8:	e001      	b.n	80149ce <_tx_thread_performance_info_get+0x96>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149ca:	23ff      	movs	r3, #255	; 0xff
 80149cc:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 80149ce:	697b      	ldr	r3, [r7, #20]
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	371c      	adds	r7, #28
 80149d4:	46bd      	mov	sp, r7
 80149d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149da:	4770      	bx	lr

080149dc <_tx_thread_performance_system_info_get>:
/**************************************************************************/
UINT  _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions,
                ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions,
                ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts,
                ULONG *non_idle_returns, ULONG *idle_returns)
{
 80149dc:	b480      	push	{r7}
 80149de:	b087      	sub	sp, #28
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	607a      	str	r2, [r7, #4]
 80149e8:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (resumptions != TX_NULL)
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d002      	beq.n	80149f6 <_tx_thread_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149f0:	23ff      	movs	r3, #255	; 0xff
 80149f2:	617b      	str	r3, [r7, #20]
 80149f4:	e03d      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (suspensions != TX_NULL)
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d002      	beq.n	8014a02 <_tx_thread_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149fc:	23ff      	movs	r3, #255	; 0xff
 80149fe:	617b      	str	r3, [r7, #20]
 8014a00:	e037      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (solicited_preemptions != TX_NULL)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d002      	beq.n	8014a0e <_tx_thread_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a08:	23ff      	movs	r3, #255	; 0xff
 8014a0a:	617b      	str	r3, [r7, #20]
 8014a0c:	e031      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (interrupt_preemptions != TX_NULL)
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d002      	beq.n	8014a1a <_tx_thread_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a14:	23ff      	movs	r3, #255	; 0xff
 8014a16:	617b      	str	r3, [r7, #20]
 8014a18:	e02b      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (priority_inversions != TX_NULL)
 8014a1a:	6a3b      	ldr	r3, [r7, #32]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <_tx_thread_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a20:	23ff      	movs	r3, #255	; 0xff
 8014a22:	617b      	str	r3, [r7, #20]
 8014a24:	e025      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (time_slices != TX_NULL)
 8014a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <_tx_thread_performance_system_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a2c:	23ff      	movs	r3, #255	; 0xff
 8014a2e:	617b      	str	r3, [r7, #20]
 8014a30:	e01f      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (relinquishes != TX_NULL)
 8014a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d002      	beq.n	8014a3e <_tx_thread_performance_system_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a38:	23ff      	movs	r3, #255	; 0xff
 8014a3a:	617b      	str	r3, [r7, #20]
 8014a3c:	e019      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (timeouts != TX_NULL)
 8014a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <_tx_thread_performance_system_info_get+0x6e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a44:	23ff      	movs	r3, #255	; 0xff
 8014a46:	617b      	str	r3, [r7, #20]
 8014a48:	e013      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (wait_aborts != TX_NULL)
 8014a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d002      	beq.n	8014a56 <_tx_thread_performance_system_info_get+0x7a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a50:	23ff      	movs	r3, #255	; 0xff
 8014a52:	617b      	str	r3, [r7, #20]
 8014a54:	e00d      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (non_idle_returns != TX_NULL)
 8014a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d002      	beq.n	8014a62 <_tx_thread_performance_system_info_get+0x86>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a5c:	23ff      	movs	r3, #255	; 0xff
 8014a5e:	617b      	str	r3, [r7, #20]
 8014a60:	e007      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else if (idle_returns != TX_NULL)
 8014a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d002      	beq.n	8014a6e <_tx_thread_performance_system_info_get+0x92>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a68:	23ff      	movs	r3, #255	; 0xff
 8014a6a:	617b      	str	r3, [r7, #20]
 8014a6c:	e001      	b.n	8014a72 <_tx_thread_performance_system_info_get+0x96>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a6e:	23ff      	movs	r3, #255	; 0xff
 8014a70:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014a72:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	371c      	adds	r7, #28
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <_tx_timer_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates,
                    ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8014a80:	b480      	push	{r7}
 8014a82:	b087      	sub	sp, #28
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	607a      	str	r2, [r7, #4]
 8014a8c:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (timer_ptr != TX_NULL)
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <_tx_timer_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a94:	23ff      	movs	r3, #255	; 0xff
 8014a96:	617b      	str	r3, [r7, #20]
 8014a98:	e01f      	b.n	8014ada <_tx_timer_performance_info_get+0x5a>
    }
    else if (activates != TX_NULL)
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d002      	beq.n	8014aa6 <_tx_timer_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014aa0:	23ff      	movs	r3, #255	; 0xff
 8014aa2:	617b      	str	r3, [r7, #20]
 8014aa4:	e019      	b.n	8014ada <_tx_timer_performance_info_get+0x5a>
    }
    else if (reactivates != TX_NULL)
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d002      	beq.n	8014ab2 <_tx_timer_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014aac:	23ff      	movs	r3, #255	; 0xff
 8014aae:	617b      	str	r3, [r7, #20]
 8014ab0:	e013      	b.n	8014ada <_tx_timer_performance_info_get+0x5a>
    }
    else if (deactivates != TX_NULL)
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d002      	beq.n	8014abe <_tx_timer_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ab8:	23ff      	movs	r3, #255	; 0xff
 8014aba:	617b      	str	r3, [r7, #20]
 8014abc:	e00d      	b.n	8014ada <_tx_timer_performance_info_get+0x5a>
    }
    else if (expirations != TX_NULL)
 8014abe:	6a3b      	ldr	r3, [r7, #32]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d002      	beq.n	8014aca <_tx_timer_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ac4:	23ff      	movs	r3, #255	; 0xff
 8014ac6:	617b      	str	r3, [r7, #20]
 8014ac8:	e007      	b.n	8014ada <_tx_timer_performance_info_get+0x5a>
    }
    else if (expiration_adjusts != TX_NULL)
 8014aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d002      	beq.n	8014ad6 <_tx_timer_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ad0:	23ff      	movs	r3, #255	; 0xff
 8014ad2:	617b      	str	r3, [r7, #20]
 8014ad4:	e001      	b.n	8014ada <_tx_timer_performance_info_get+0x5a>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ad6:	23ff      	movs	r3, #255	; 0xff
 8014ad8:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014ada:	697b      	ldr	r3, [r7, #20]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	371c      	adds	r7, #28
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <_tx_timer_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates,
                    ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b087      	sub	sp, #28
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	607a      	str	r2, [r7, #4]
 8014af4:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (activates != TX_NULL)
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d002      	beq.n	8014b02 <_tx_timer_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014afc:	23ff      	movs	r3, #255	; 0xff
 8014afe:	617b      	str	r3, [r7, #20]
 8014b00:	e019      	b.n	8014b36 <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (reactivates != TX_NULL)
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d002      	beq.n	8014b0e <_tx_timer_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b08:	23ff      	movs	r3, #255	; 0xff
 8014b0a:	617b      	str	r3, [r7, #20]
 8014b0c:	e013      	b.n	8014b36 <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (deactivates != TX_NULL)
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d002      	beq.n	8014b1a <_tx_timer_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b14:	23ff      	movs	r3, #255	; 0xff
 8014b16:	617b      	str	r3, [r7, #20]
 8014b18:	e00d      	b.n	8014b36 <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (expirations != TX_NULL)
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d002      	beq.n	8014b26 <_tx_timer_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b20:	23ff      	movs	r3, #255	; 0xff
 8014b22:	617b      	str	r3, [r7, #20]
 8014b24:	e007      	b.n	8014b36 <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (expiration_adjusts != TX_NULL)
 8014b26:	6a3b      	ldr	r3, [r7, #32]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d002      	beq.n	8014b32 <_tx_timer_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b2c:	23ff      	movs	r3, #255	; 0xff
 8014b2e:	617b      	str	r3, [r7, #20]
 8014b30:	e001      	b.n	8014b36 <_tx_timer_performance_system_info_get+0x4e>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b32:	23ff      	movs	r3, #255	; 0xff
 8014b34:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014b36:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	371c      	adds	r7, #28
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr

08014b44 <_tx_trace_buffer_full_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 8014b44:	b480      	push	{r7}
 8014b46:	b085      	sub	sp, #20
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (full_buffer_callback != TX_NULL)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d002      	beq.n	8014b58 <_tx_trace_buffer_full_notify+0x14>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b52:	23ff      	movs	r3, #255	; 0xff
 8014b54:	60fb      	str	r3, [r7, #12]
 8014b56:	e001      	b.n	8014b5c <_tx_trace_buffer_full_notify+0x18>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b58:	23ff      	movs	r3, #255	; 0xff
 8014b5a:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014b5c:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3714      	adds	r7, #20
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr

08014b6a <_tx_trace_disable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_disable(VOID)
{
 8014b6a:	b480      	push	{r7}
 8014b6c:	af00      	add	r7, sp, #0
    return(status);

#else

    /* Trace not enabled, return an error.  */
    return(TX_FEATURE_NOT_ENABLED);
 8014b6e:	23ff      	movs	r3, #255	; 0xff
#endif
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr

08014b7a <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8014b7a:	b480      	push	{r7}
 8014b7c:	b087      	sub	sp, #28
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	60f8      	str	r0, [r7, #12]
 8014b82:	60b9      	str	r1, [r7, #8]
 8014b84:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (trace_buffer_start != TX_NULL)
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d002      	beq.n	8014b92 <_tx_trace_enable+0x18>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b8c:	23ff      	movs	r3, #255	; 0xff
 8014b8e:	617b      	str	r3, [r7, #20]
 8014b90:	e00d      	b.n	8014bae <_tx_trace_enable+0x34>
    }
    else if (trace_buffer_size == ((ULONG) 0))
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <_tx_trace_enable+0x24>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b98:	23ff      	movs	r3, #255	; 0xff
 8014b9a:	617b      	str	r3, [r7, #20]
 8014b9c:	e007      	b.n	8014bae <_tx_trace_enable+0x34>
    }
    else if (registry_entries == ((ULONG) 0))
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d102      	bne.n	8014baa <_tx_trace_enable+0x30>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ba4:	23ff      	movs	r3, #255	; 0xff
 8014ba6:	617b      	str	r3, [r7, #20]
 8014ba8:	e001      	b.n	8014bae <_tx_trace_enable+0x34>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014baa:	23ff      	movs	r3, #255	; 0xff
 8014bac:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014bae:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	371c      	adds	r7, #28
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bba:	4770      	bx	lr

08014bbc <_tx_trace_event_filter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_event_filter(ULONG event_filter_bits)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b085      	sub	sp, #20
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (event_filter_bits != ((ULONG) 0))
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d002      	beq.n	8014bd0 <_tx_trace_event_filter+0x14>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bca:	23ff      	movs	r3, #255	; 0xff
 8014bcc:	60fb      	str	r3, [r7, #12]
 8014bce:	e001      	b.n	8014bd4 <_tx_trace_event_filter+0x18>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bd0:	23ff      	movs	r3, #255	; 0xff
 8014bd2:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr

08014be2 <_tx_trace_event_unfilter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 8014be2:	b480      	push	{r7}
 8014be4:	b085      	sub	sp, #20
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (event_unfilter_bits != ((ULONG) 0))
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d002      	beq.n	8014bf6 <_tx_trace_event_unfilter+0x14>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bf0:	23ff      	movs	r3, #255	; 0xff
 8014bf2:	60fb      	str	r3, [r7, #12]
 8014bf4:	e001      	b.n	8014bfa <_tx_trace_event_unfilter+0x18>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bf6:	23ff      	movs	r3, #255	; 0xff
 8014bf8:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014bfa:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3714      	adds	r7, #20
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <_tx_trace_interrupt_control>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_interrupt_control(UINT new_posture)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
#else

UINT    saved_posture;

    /* Perform the interrupt service.  */
    saved_posture =  _tx_thread_interrupt_control(new_posture);
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7eb fb35 	bl	8000280 <_tx_thread_interrupt_control>
 8014c16:	60f8      	str	r0, [r7, #12]

    /* Return saved posture.  */
    return(saved_posture);
 8014c18:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <_tx_trace_isr_enter_insert>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_isr_enter_insert(ULONG isr_id)
{
 8014c22:	b480      	push	{r7}
 8014c24:	b087      	sub	sp, #28
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (isr_id != ((ULONG) 0))
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d00b      	beq.n	8014c48 <_tx_trace_isr_enter_insert+0x26>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014c30:	f3ef 8310 	mrs	r3, PRIMASK
 8014c34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014c36:	b672      	cpsid	i
    return(primask_value);
 8014c38:	68fb      	ldr	r3, [r7, #12]
    {

        /* NOP code.  */
        TX_DISABLE
 8014c3a:	617b      	str	r3, [r7, #20]
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	f383 8810 	msr	PRIMASK, r3
}
 8014c46:	bf00      	nop
        TX_RESTORE
    }
#endif
}
 8014c48:	bf00      	nop
 8014c4a:	371c      	adds	r7, #28
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr

08014c54 <_tx_trace_isr_exit_insert>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_isr_exit_insert(ULONG isr_id)
{
 8014c54:	b480      	push	{r7}
 8014c56:	b087      	sub	sp, #28
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (isr_id != ((ULONG) 0))
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d00b      	beq.n	8014c7a <_tx_trace_isr_exit_insert+0x26>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014c62:	f3ef 8310 	mrs	r3, PRIMASK
 8014c66:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014c68:	b672      	cpsid	i
    return(primask_value);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
    {

        /* NOP code.  */
        TX_DISABLE
 8014c6c:	617b      	str	r3, [r7, #20]
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	f383 8810 	msr	PRIMASK, r3
}
 8014c78:	bf00      	nop
        TX_RESTORE
    }
#endif
}
 8014c7a:	bf00      	nop
 8014c7c:	371c      	adds	r7, #28
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr

08014c86 <_tx_trace_user_event_insert>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 8014c86:	b480      	push	{r7}
 8014c88:	b087      	sub	sp, #28
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	60f8      	str	r0, [r7, #12]
 8014c8e:	60b9      	str	r1, [r7, #8]
 8014c90:	607a      	str	r2, [r7, #4]
 8014c92:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (event_id != ((ULONG) 0))
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d002      	beq.n	8014ca0 <_tx_trace_user_event_insert+0x1a>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c9a:	23ff      	movs	r3, #255	; 0xff
 8014c9c:	617b      	str	r3, [r7, #20]
 8014c9e:	e019      	b.n	8014cd4 <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_1 != ((ULONG) 0))
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d002      	beq.n	8014cac <_tx_trace_user_event_insert+0x26>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ca6:	23ff      	movs	r3, #255	; 0xff
 8014ca8:	617b      	str	r3, [r7, #20]
 8014caa:	e013      	b.n	8014cd4 <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_2 != ((ULONG) 0))
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d002      	beq.n	8014cb8 <_tx_trace_user_event_insert+0x32>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cb2:	23ff      	movs	r3, #255	; 0xff
 8014cb4:	617b      	str	r3, [r7, #20]
 8014cb6:	e00d      	b.n	8014cd4 <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_3 != ((ULONG) 0))
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d002      	beq.n	8014cc4 <_tx_trace_user_event_insert+0x3e>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cbe:	23ff      	movs	r3, #255	; 0xff
 8014cc0:	617b      	str	r3, [r7, #20]
 8014cc2:	e007      	b.n	8014cd4 <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_4 != ((ULONG) 0))
 8014cc4:	6a3b      	ldr	r3, [r7, #32]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d002      	beq.n	8014cd0 <_tx_trace_user_event_insert+0x4a>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cca:	23ff      	movs	r3, #255	; 0xff
 8014ccc:	617b      	str	r3, [r7, #20]
 8014cce:	e001      	b.n	8014cd4 <_tx_trace_user_event_insert+0x4e>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cd0:	23ff      	movs	r3, #255	; 0xff
 8014cd2:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014cd4:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	371c      	adds	r7, #28
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr
	...

08014ce4 <std>:
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	b510      	push	{r4, lr}
 8014ce8:	4604      	mov	r4, r0
 8014cea:	e9c0 3300 	strd	r3, r3, [r0]
 8014cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cf2:	6083      	str	r3, [r0, #8]
 8014cf4:	8181      	strh	r1, [r0, #12]
 8014cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8014cf8:	81c2      	strh	r2, [r0, #14]
 8014cfa:	6183      	str	r3, [r0, #24]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	2208      	movs	r2, #8
 8014d00:	305c      	adds	r0, #92	; 0x5c
 8014d02:	f000 f9f7 	bl	80150f4 <memset>
 8014d06:	4b0d      	ldr	r3, [pc, #52]	; (8014d3c <std+0x58>)
 8014d08:	6263      	str	r3, [r4, #36]	; 0x24
 8014d0a:	4b0d      	ldr	r3, [pc, #52]	; (8014d40 <std+0x5c>)
 8014d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d0e:	4b0d      	ldr	r3, [pc, #52]	; (8014d44 <std+0x60>)
 8014d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d12:	4b0d      	ldr	r3, [pc, #52]	; (8014d48 <std+0x64>)
 8014d14:	6323      	str	r3, [r4, #48]	; 0x30
 8014d16:	4b0d      	ldr	r3, [pc, #52]	; (8014d4c <std+0x68>)
 8014d18:	6224      	str	r4, [r4, #32]
 8014d1a:	429c      	cmp	r4, r3
 8014d1c:	d006      	beq.n	8014d2c <std+0x48>
 8014d1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014d22:	4294      	cmp	r4, r2
 8014d24:	d002      	beq.n	8014d2c <std+0x48>
 8014d26:	33d0      	adds	r3, #208	; 0xd0
 8014d28:	429c      	cmp	r4, r3
 8014d2a:	d105      	bne.n	8014d38 <std+0x54>
 8014d2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d34:	f000 ba56 	b.w	80151e4 <__retarget_lock_init_recursive>
 8014d38:	bd10      	pop	{r4, pc}
 8014d3a:	bf00      	nop
 8014d3c:	08014f45 	.word	0x08014f45
 8014d40:	08014f67 	.word	0x08014f67
 8014d44:	08014f9f 	.word	0x08014f9f
 8014d48:	08014fc3 	.word	0x08014fc3
 8014d4c:	2000f6ac 	.word	0x2000f6ac

08014d50 <stdio_exit_handler>:
 8014d50:	4a02      	ldr	r2, [pc, #8]	; (8014d5c <stdio_exit_handler+0xc>)
 8014d52:	4903      	ldr	r1, [pc, #12]	; (8014d60 <stdio_exit_handler+0x10>)
 8014d54:	4803      	ldr	r0, [pc, #12]	; (8014d64 <stdio_exit_handler+0x14>)
 8014d56:	f000 b869 	b.w	8014e2c <_fwalk_sglue>
 8014d5a:	bf00      	nop
 8014d5c:	2000001c 	.word	0x2000001c
 8014d60:	08015aad 	.word	0x08015aad
 8014d64:	20000028 	.word	0x20000028

08014d68 <cleanup_stdio>:
 8014d68:	6841      	ldr	r1, [r0, #4]
 8014d6a:	4b0c      	ldr	r3, [pc, #48]	; (8014d9c <cleanup_stdio+0x34>)
 8014d6c:	4299      	cmp	r1, r3
 8014d6e:	b510      	push	{r4, lr}
 8014d70:	4604      	mov	r4, r0
 8014d72:	d001      	beq.n	8014d78 <cleanup_stdio+0x10>
 8014d74:	f000 fe9a 	bl	8015aac <_fflush_r>
 8014d78:	68a1      	ldr	r1, [r4, #8]
 8014d7a:	4b09      	ldr	r3, [pc, #36]	; (8014da0 <cleanup_stdio+0x38>)
 8014d7c:	4299      	cmp	r1, r3
 8014d7e:	d002      	beq.n	8014d86 <cleanup_stdio+0x1e>
 8014d80:	4620      	mov	r0, r4
 8014d82:	f000 fe93 	bl	8015aac <_fflush_r>
 8014d86:	68e1      	ldr	r1, [r4, #12]
 8014d88:	4b06      	ldr	r3, [pc, #24]	; (8014da4 <cleanup_stdio+0x3c>)
 8014d8a:	4299      	cmp	r1, r3
 8014d8c:	d004      	beq.n	8014d98 <cleanup_stdio+0x30>
 8014d8e:	4620      	mov	r0, r4
 8014d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d94:	f000 be8a 	b.w	8015aac <_fflush_r>
 8014d98:	bd10      	pop	{r4, pc}
 8014d9a:	bf00      	nop
 8014d9c:	2000f6ac 	.word	0x2000f6ac
 8014da0:	2000f714 	.word	0x2000f714
 8014da4:	2000f77c 	.word	0x2000f77c

08014da8 <global_stdio_init.part.0>:
 8014da8:	b510      	push	{r4, lr}
 8014daa:	4b0b      	ldr	r3, [pc, #44]	; (8014dd8 <global_stdio_init.part.0+0x30>)
 8014dac:	4c0b      	ldr	r4, [pc, #44]	; (8014ddc <global_stdio_init.part.0+0x34>)
 8014dae:	4a0c      	ldr	r2, [pc, #48]	; (8014de0 <global_stdio_init.part.0+0x38>)
 8014db0:	601a      	str	r2, [r3, #0]
 8014db2:	4620      	mov	r0, r4
 8014db4:	2200      	movs	r2, #0
 8014db6:	2104      	movs	r1, #4
 8014db8:	f7ff ff94 	bl	8014ce4 <std>
 8014dbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014dc0:	2201      	movs	r2, #1
 8014dc2:	2109      	movs	r1, #9
 8014dc4:	f7ff ff8e 	bl	8014ce4 <std>
 8014dc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014dcc:	2202      	movs	r2, #2
 8014dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dd2:	2112      	movs	r1, #18
 8014dd4:	f7ff bf86 	b.w	8014ce4 <std>
 8014dd8:	2000f7e4 	.word	0x2000f7e4
 8014ddc:	2000f6ac 	.word	0x2000f6ac
 8014de0:	08014d51 	.word	0x08014d51

08014de4 <__sfp_lock_acquire>:
 8014de4:	4801      	ldr	r0, [pc, #4]	; (8014dec <__sfp_lock_acquire+0x8>)
 8014de6:	f000 b9fe 	b.w	80151e6 <__retarget_lock_acquire_recursive>
 8014dea:	bf00      	nop
 8014dec:	2000f7ed 	.word	0x2000f7ed

08014df0 <__sfp_lock_release>:
 8014df0:	4801      	ldr	r0, [pc, #4]	; (8014df8 <__sfp_lock_release+0x8>)
 8014df2:	f000 b9f9 	b.w	80151e8 <__retarget_lock_release_recursive>
 8014df6:	bf00      	nop
 8014df8:	2000f7ed 	.word	0x2000f7ed

08014dfc <__sinit>:
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	4604      	mov	r4, r0
 8014e00:	f7ff fff0 	bl	8014de4 <__sfp_lock_acquire>
 8014e04:	6a23      	ldr	r3, [r4, #32]
 8014e06:	b11b      	cbz	r3, 8014e10 <__sinit+0x14>
 8014e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e0c:	f7ff bff0 	b.w	8014df0 <__sfp_lock_release>
 8014e10:	4b04      	ldr	r3, [pc, #16]	; (8014e24 <__sinit+0x28>)
 8014e12:	6223      	str	r3, [r4, #32]
 8014e14:	4b04      	ldr	r3, [pc, #16]	; (8014e28 <__sinit+0x2c>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d1f5      	bne.n	8014e08 <__sinit+0xc>
 8014e1c:	f7ff ffc4 	bl	8014da8 <global_stdio_init.part.0>
 8014e20:	e7f2      	b.n	8014e08 <__sinit+0xc>
 8014e22:	bf00      	nop
 8014e24:	08014d69 	.word	0x08014d69
 8014e28:	2000f7e4 	.word	0x2000f7e4

08014e2c <_fwalk_sglue>:
 8014e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e30:	4607      	mov	r7, r0
 8014e32:	4688      	mov	r8, r1
 8014e34:	4614      	mov	r4, r2
 8014e36:	2600      	movs	r6, #0
 8014e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8014e40:	d505      	bpl.n	8014e4e <_fwalk_sglue+0x22>
 8014e42:	6824      	ldr	r4, [r4, #0]
 8014e44:	2c00      	cmp	r4, #0
 8014e46:	d1f7      	bne.n	8014e38 <_fwalk_sglue+0xc>
 8014e48:	4630      	mov	r0, r6
 8014e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e4e:	89ab      	ldrh	r3, [r5, #12]
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d907      	bls.n	8014e64 <_fwalk_sglue+0x38>
 8014e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	d003      	beq.n	8014e64 <_fwalk_sglue+0x38>
 8014e5c:	4629      	mov	r1, r5
 8014e5e:	4638      	mov	r0, r7
 8014e60:	47c0      	blx	r8
 8014e62:	4306      	orrs	r6, r0
 8014e64:	3568      	adds	r5, #104	; 0x68
 8014e66:	e7e9      	b.n	8014e3c <_fwalk_sglue+0x10>

08014e68 <iprintf>:
 8014e68:	b40f      	push	{r0, r1, r2, r3}
 8014e6a:	b507      	push	{r0, r1, r2, lr}
 8014e6c:	4906      	ldr	r1, [pc, #24]	; (8014e88 <iprintf+0x20>)
 8014e6e:	ab04      	add	r3, sp, #16
 8014e70:	6808      	ldr	r0, [r1, #0]
 8014e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e76:	6881      	ldr	r1, [r0, #8]
 8014e78:	9301      	str	r3, [sp, #4]
 8014e7a:	f000 fae7 	bl	801544c <_vfiprintf_r>
 8014e7e:	b003      	add	sp, #12
 8014e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e84:	b004      	add	sp, #16
 8014e86:	4770      	bx	lr
 8014e88:	20000074 	.word	0x20000074

08014e8c <_puts_r>:
 8014e8c:	6a03      	ldr	r3, [r0, #32]
 8014e8e:	b570      	push	{r4, r5, r6, lr}
 8014e90:	6884      	ldr	r4, [r0, #8]
 8014e92:	4605      	mov	r5, r0
 8014e94:	460e      	mov	r6, r1
 8014e96:	b90b      	cbnz	r3, 8014e9c <_puts_r+0x10>
 8014e98:	f7ff ffb0 	bl	8014dfc <__sinit>
 8014e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e9e:	07db      	lsls	r3, r3, #31
 8014ea0:	d405      	bmi.n	8014eae <_puts_r+0x22>
 8014ea2:	89a3      	ldrh	r3, [r4, #12]
 8014ea4:	0598      	lsls	r0, r3, #22
 8014ea6:	d402      	bmi.n	8014eae <_puts_r+0x22>
 8014ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014eaa:	f000 f99c 	bl	80151e6 <__retarget_lock_acquire_recursive>
 8014eae:	89a3      	ldrh	r3, [r4, #12]
 8014eb0:	0719      	lsls	r1, r3, #28
 8014eb2:	d513      	bpl.n	8014edc <_puts_r+0x50>
 8014eb4:	6923      	ldr	r3, [r4, #16]
 8014eb6:	b18b      	cbz	r3, 8014edc <_puts_r+0x50>
 8014eb8:	3e01      	subs	r6, #1
 8014eba:	68a3      	ldr	r3, [r4, #8]
 8014ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014ec0:	3b01      	subs	r3, #1
 8014ec2:	60a3      	str	r3, [r4, #8]
 8014ec4:	b9e9      	cbnz	r1, 8014f02 <_puts_r+0x76>
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	da2e      	bge.n	8014f28 <_puts_r+0x9c>
 8014eca:	4622      	mov	r2, r4
 8014ecc:	210a      	movs	r1, #10
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f000 f87b 	bl	8014fca <__swbuf_r>
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	d007      	beq.n	8014ee8 <_puts_r+0x5c>
 8014ed8:	250a      	movs	r5, #10
 8014eda:	e007      	b.n	8014eec <_puts_r+0x60>
 8014edc:	4621      	mov	r1, r4
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f000 f8b0 	bl	8015044 <__swsetup_r>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d0e7      	beq.n	8014eb8 <_puts_r+0x2c>
 8014ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8014eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014eee:	07da      	lsls	r2, r3, #31
 8014ef0:	d405      	bmi.n	8014efe <_puts_r+0x72>
 8014ef2:	89a3      	ldrh	r3, [r4, #12]
 8014ef4:	059b      	lsls	r3, r3, #22
 8014ef6:	d402      	bmi.n	8014efe <_puts_r+0x72>
 8014ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014efa:	f000 f975 	bl	80151e8 <__retarget_lock_release_recursive>
 8014efe:	4628      	mov	r0, r5
 8014f00:	bd70      	pop	{r4, r5, r6, pc}
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	da04      	bge.n	8014f10 <_puts_r+0x84>
 8014f06:	69a2      	ldr	r2, [r4, #24]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	dc06      	bgt.n	8014f1a <_puts_r+0x8e>
 8014f0c:	290a      	cmp	r1, #10
 8014f0e:	d004      	beq.n	8014f1a <_puts_r+0x8e>
 8014f10:	6823      	ldr	r3, [r4, #0]
 8014f12:	1c5a      	adds	r2, r3, #1
 8014f14:	6022      	str	r2, [r4, #0]
 8014f16:	7019      	strb	r1, [r3, #0]
 8014f18:	e7cf      	b.n	8014eba <_puts_r+0x2e>
 8014f1a:	4622      	mov	r2, r4
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	f000 f854 	bl	8014fca <__swbuf_r>
 8014f22:	3001      	adds	r0, #1
 8014f24:	d1c9      	bne.n	8014eba <_puts_r+0x2e>
 8014f26:	e7df      	b.n	8014ee8 <_puts_r+0x5c>
 8014f28:	6823      	ldr	r3, [r4, #0]
 8014f2a:	250a      	movs	r5, #10
 8014f2c:	1c5a      	adds	r2, r3, #1
 8014f2e:	6022      	str	r2, [r4, #0]
 8014f30:	701d      	strb	r5, [r3, #0]
 8014f32:	e7db      	b.n	8014eec <_puts_r+0x60>

08014f34 <puts>:
 8014f34:	4b02      	ldr	r3, [pc, #8]	; (8014f40 <puts+0xc>)
 8014f36:	4601      	mov	r1, r0
 8014f38:	6818      	ldr	r0, [r3, #0]
 8014f3a:	f7ff bfa7 	b.w	8014e8c <_puts_r>
 8014f3e:	bf00      	nop
 8014f40:	20000074 	.word	0x20000074

08014f44 <__sread>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	460c      	mov	r4, r1
 8014f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f4c:	f000 f8fc 	bl	8015148 <_read_r>
 8014f50:	2800      	cmp	r0, #0
 8014f52:	bfab      	itete	ge
 8014f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014f56:	89a3      	ldrhlt	r3, [r4, #12]
 8014f58:	181b      	addge	r3, r3, r0
 8014f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f5e:	bfac      	ite	ge
 8014f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f62:	81a3      	strhlt	r3, [r4, #12]
 8014f64:	bd10      	pop	{r4, pc}

08014f66 <__swrite>:
 8014f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f6a:	461f      	mov	r7, r3
 8014f6c:	898b      	ldrh	r3, [r1, #12]
 8014f6e:	05db      	lsls	r3, r3, #23
 8014f70:	4605      	mov	r5, r0
 8014f72:	460c      	mov	r4, r1
 8014f74:	4616      	mov	r6, r2
 8014f76:	d505      	bpl.n	8014f84 <__swrite+0x1e>
 8014f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	2200      	movs	r2, #0
 8014f80:	f000 f8d0 	bl	8015124 <_lseek_r>
 8014f84:	89a3      	ldrh	r3, [r4, #12]
 8014f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f8e:	81a3      	strh	r3, [r4, #12]
 8014f90:	4632      	mov	r2, r6
 8014f92:	463b      	mov	r3, r7
 8014f94:	4628      	mov	r0, r5
 8014f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9a:	f000 b8e7 	b.w	801516c <_write_r>

08014f9e <__sseek>:
 8014f9e:	b510      	push	{r4, lr}
 8014fa0:	460c      	mov	r4, r1
 8014fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fa6:	f000 f8bd 	bl	8015124 <_lseek_r>
 8014faa:	1c43      	adds	r3, r0, #1
 8014fac:	89a3      	ldrh	r3, [r4, #12]
 8014fae:	bf15      	itete	ne
 8014fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8014fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014fba:	81a3      	strheq	r3, [r4, #12]
 8014fbc:	bf18      	it	ne
 8014fbe:	81a3      	strhne	r3, [r4, #12]
 8014fc0:	bd10      	pop	{r4, pc}

08014fc2 <__sclose>:
 8014fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fc6:	f000 b89d 	b.w	8015104 <_close_r>

08014fca <__swbuf_r>:
 8014fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fcc:	460e      	mov	r6, r1
 8014fce:	4614      	mov	r4, r2
 8014fd0:	4605      	mov	r5, r0
 8014fd2:	b118      	cbz	r0, 8014fdc <__swbuf_r+0x12>
 8014fd4:	6a03      	ldr	r3, [r0, #32]
 8014fd6:	b90b      	cbnz	r3, 8014fdc <__swbuf_r+0x12>
 8014fd8:	f7ff ff10 	bl	8014dfc <__sinit>
 8014fdc:	69a3      	ldr	r3, [r4, #24]
 8014fde:	60a3      	str	r3, [r4, #8]
 8014fe0:	89a3      	ldrh	r3, [r4, #12]
 8014fe2:	071a      	lsls	r2, r3, #28
 8014fe4:	d525      	bpl.n	8015032 <__swbuf_r+0x68>
 8014fe6:	6923      	ldr	r3, [r4, #16]
 8014fe8:	b31b      	cbz	r3, 8015032 <__swbuf_r+0x68>
 8014fea:	6823      	ldr	r3, [r4, #0]
 8014fec:	6922      	ldr	r2, [r4, #16]
 8014fee:	1a98      	subs	r0, r3, r2
 8014ff0:	6963      	ldr	r3, [r4, #20]
 8014ff2:	b2f6      	uxtb	r6, r6
 8014ff4:	4283      	cmp	r3, r0
 8014ff6:	4637      	mov	r7, r6
 8014ff8:	dc04      	bgt.n	8015004 <__swbuf_r+0x3a>
 8014ffa:	4621      	mov	r1, r4
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	f000 fd55 	bl	8015aac <_fflush_r>
 8015002:	b9e0      	cbnz	r0, 801503e <__swbuf_r+0x74>
 8015004:	68a3      	ldr	r3, [r4, #8]
 8015006:	3b01      	subs	r3, #1
 8015008:	60a3      	str	r3, [r4, #8]
 801500a:	6823      	ldr	r3, [r4, #0]
 801500c:	1c5a      	adds	r2, r3, #1
 801500e:	6022      	str	r2, [r4, #0]
 8015010:	701e      	strb	r6, [r3, #0]
 8015012:	6962      	ldr	r2, [r4, #20]
 8015014:	1c43      	adds	r3, r0, #1
 8015016:	429a      	cmp	r2, r3
 8015018:	d004      	beq.n	8015024 <__swbuf_r+0x5a>
 801501a:	89a3      	ldrh	r3, [r4, #12]
 801501c:	07db      	lsls	r3, r3, #31
 801501e:	d506      	bpl.n	801502e <__swbuf_r+0x64>
 8015020:	2e0a      	cmp	r6, #10
 8015022:	d104      	bne.n	801502e <__swbuf_r+0x64>
 8015024:	4621      	mov	r1, r4
 8015026:	4628      	mov	r0, r5
 8015028:	f000 fd40 	bl	8015aac <_fflush_r>
 801502c:	b938      	cbnz	r0, 801503e <__swbuf_r+0x74>
 801502e:	4638      	mov	r0, r7
 8015030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015032:	4621      	mov	r1, r4
 8015034:	4628      	mov	r0, r5
 8015036:	f000 f805 	bl	8015044 <__swsetup_r>
 801503a:	2800      	cmp	r0, #0
 801503c:	d0d5      	beq.n	8014fea <__swbuf_r+0x20>
 801503e:	f04f 37ff 	mov.w	r7, #4294967295
 8015042:	e7f4      	b.n	801502e <__swbuf_r+0x64>

08015044 <__swsetup_r>:
 8015044:	b538      	push	{r3, r4, r5, lr}
 8015046:	4b2a      	ldr	r3, [pc, #168]	; (80150f0 <__swsetup_r+0xac>)
 8015048:	4605      	mov	r5, r0
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	460c      	mov	r4, r1
 801504e:	b118      	cbz	r0, 8015058 <__swsetup_r+0x14>
 8015050:	6a03      	ldr	r3, [r0, #32]
 8015052:	b90b      	cbnz	r3, 8015058 <__swsetup_r+0x14>
 8015054:	f7ff fed2 	bl	8014dfc <__sinit>
 8015058:	89a3      	ldrh	r3, [r4, #12]
 801505a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801505e:	0718      	lsls	r0, r3, #28
 8015060:	d422      	bmi.n	80150a8 <__swsetup_r+0x64>
 8015062:	06d9      	lsls	r1, r3, #27
 8015064:	d407      	bmi.n	8015076 <__swsetup_r+0x32>
 8015066:	2309      	movs	r3, #9
 8015068:	602b      	str	r3, [r5, #0]
 801506a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801506e:	81a3      	strh	r3, [r4, #12]
 8015070:	f04f 30ff 	mov.w	r0, #4294967295
 8015074:	e034      	b.n	80150e0 <__swsetup_r+0x9c>
 8015076:	0758      	lsls	r0, r3, #29
 8015078:	d512      	bpl.n	80150a0 <__swsetup_r+0x5c>
 801507a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801507c:	b141      	cbz	r1, 8015090 <__swsetup_r+0x4c>
 801507e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015082:	4299      	cmp	r1, r3
 8015084:	d002      	beq.n	801508c <__swsetup_r+0x48>
 8015086:	4628      	mov	r0, r5
 8015088:	f000 f8be 	bl	8015208 <_free_r>
 801508c:	2300      	movs	r3, #0
 801508e:	6363      	str	r3, [r4, #52]	; 0x34
 8015090:	89a3      	ldrh	r3, [r4, #12]
 8015092:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015096:	81a3      	strh	r3, [r4, #12]
 8015098:	2300      	movs	r3, #0
 801509a:	6063      	str	r3, [r4, #4]
 801509c:	6923      	ldr	r3, [r4, #16]
 801509e:	6023      	str	r3, [r4, #0]
 80150a0:	89a3      	ldrh	r3, [r4, #12]
 80150a2:	f043 0308 	orr.w	r3, r3, #8
 80150a6:	81a3      	strh	r3, [r4, #12]
 80150a8:	6923      	ldr	r3, [r4, #16]
 80150aa:	b94b      	cbnz	r3, 80150c0 <__swsetup_r+0x7c>
 80150ac:	89a3      	ldrh	r3, [r4, #12]
 80150ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80150b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150b6:	d003      	beq.n	80150c0 <__swsetup_r+0x7c>
 80150b8:	4621      	mov	r1, r4
 80150ba:	4628      	mov	r0, r5
 80150bc:	f000 fd44 	bl	8015b48 <__smakebuf_r>
 80150c0:	89a0      	ldrh	r0, [r4, #12]
 80150c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80150c6:	f010 0301 	ands.w	r3, r0, #1
 80150ca:	d00a      	beq.n	80150e2 <__swsetup_r+0x9e>
 80150cc:	2300      	movs	r3, #0
 80150ce:	60a3      	str	r3, [r4, #8]
 80150d0:	6963      	ldr	r3, [r4, #20]
 80150d2:	425b      	negs	r3, r3
 80150d4:	61a3      	str	r3, [r4, #24]
 80150d6:	6923      	ldr	r3, [r4, #16]
 80150d8:	b943      	cbnz	r3, 80150ec <__swsetup_r+0xa8>
 80150da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80150de:	d1c4      	bne.n	801506a <__swsetup_r+0x26>
 80150e0:	bd38      	pop	{r3, r4, r5, pc}
 80150e2:	0781      	lsls	r1, r0, #30
 80150e4:	bf58      	it	pl
 80150e6:	6963      	ldrpl	r3, [r4, #20]
 80150e8:	60a3      	str	r3, [r4, #8]
 80150ea:	e7f4      	b.n	80150d6 <__swsetup_r+0x92>
 80150ec:	2000      	movs	r0, #0
 80150ee:	e7f7      	b.n	80150e0 <__swsetup_r+0x9c>
 80150f0:	20000074 	.word	0x20000074

080150f4 <memset>:
 80150f4:	4402      	add	r2, r0
 80150f6:	4603      	mov	r3, r0
 80150f8:	4293      	cmp	r3, r2
 80150fa:	d100      	bne.n	80150fe <memset+0xa>
 80150fc:	4770      	bx	lr
 80150fe:	f803 1b01 	strb.w	r1, [r3], #1
 8015102:	e7f9      	b.n	80150f8 <memset+0x4>

08015104 <_close_r>:
 8015104:	b538      	push	{r3, r4, r5, lr}
 8015106:	4d06      	ldr	r5, [pc, #24]	; (8015120 <_close_r+0x1c>)
 8015108:	2300      	movs	r3, #0
 801510a:	4604      	mov	r4, r0
 801510c:	4608      	mov	r0, r1
 801510e:	602b      	str	r3, [r5, #0]
 8015110:	f7eb fec7 	bl	8000ea2 <_close>
 8015114:	1c43      	adds	r3, r0, #1
 8015116:	d102      	bne.n	801511e <_close_r+0x1a>
 8015118:	682b      	ldr	r3, [r5, #0]
 801511a:	b103      	cbz	r3, 801511e <_close_r+0x1a>
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	bd38      	pop	{r3, r4, r5, pc}
 8015120:	2000f7e8 	.word	0x2000f7e8

08015124 <_lseek_r>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	4d07      	ldr	r5, [pc, #28]	; (8015144 <_lseek_r+0x20>)
 8015128:	4604      	mov	r4, r0
 801512a:	4608      	mov	r0, r1
 801512c:	4611      	mov	r1, r2
 801512e:	2200      	movs	r2, #0
 8015130:	602a      	str	r2, [r5, #0]
 8015132:	461a      	mov	r2, r3
 8015134:	f7eb fedc 	bl	8000ef0 <_lseek>
 8015138:	1c43      	adds	r3, r0, #1
 801513a:	d102      	bne.n	8015142 <_lseek_r+0x1e>
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	b103      	cbz	r3, 8015142 <_lseek_r+0x1e>
 8015140:	6023      	str	r3, [r4, #0]
 8015142:	bd38      	pop	{r3, r4, r5, pc}
 8015144:	2000f7e8 	.word	0x2000f7e8

08015148 <_read_r>:
 8015148:	b538      	push	{r3, r4, r5, lr}
 801514a:	4d07      	ldr	r5, [pc, #28]	; (8015168 <_read_r+0x20>)
 801514c:	4604      	mov	r4, r0
 801514e:	4608      	mov	r0, r1
 8015150:	4611      	mov	r1, r2
 8015152:	2200      	movs	r2, #0
 8015154:	602a      	str	r2, [r5, #0]
 8015156:	461a      	mov	r2, r3
 8015158:	f7eb fe6a 	bl	8000e30 <_read>
 801515c:	1c43      	adds	r3, r0, #1
 801515e:	d102      	bne.n	8015166 <_read_r+0x1e>
 8015160:	682b      	ldr	r3, [r5, #0]
 8015162:	b103      	cbz	r3, 8015166 <_read_r+0x1e>
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	bd38      	pop	{r3, r4, r5, pc}
 8015168:	2000f7e8 	.word	0x2000f7e8

0801516c <_write_r>:
 801516c:	b538      	push	{r3, r4, r5, lr}
 801516e:	4d07      	ldr	r5, [pc, #28]	; (801518c <_write_r+0x20>)
 8015170:	4604      	mov	r4, r0
 8015172:	4608      	mov	r0, r1
 8015174:	4611      	mov	r1, r2
 8015176:	2200      	movs	r2, #0
 8015178:	602a      	str	r2, [r5, #0]
 801517a:	461a      	mov	r2, r3
 801517c:	f7eb fe75 	bl	8000e6a <_write>
 8015180:	1c43      	adds	r3, r0, #1
 8015182:	d102      	bne.n	801518a <_write_r+0x1e>
 8015184:	682b      	ldr	r3, [r5, #0]
 8015186:	b103      	cbz	r3, 801518a <_write_r+0x1e>
 8015188:	6023      	str	r3, [r4, #0]
 801518a:	bd38      	pop	{r3, r4, r5, pc}
 801518c:	2000f7e8 	.word	0x2000f7e8

08015190 <__errno>:
 8015190:	4b01      	ldr	r3, [pc, #4]	; (8015198 <__errno+0x8>)
 8015192:	6818      	ldr	r0, [r3, #0]
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	20000074 	.word	0x20000074

0801519c <__libc_init_array>:
 801519c:	b570      	push	{r4, r5, r6, lr}
 801519e:	4d0d      	ldr	r5, [pc, #52]	; (80151d4 <__libc_init_array+0x38>)
 80151a0:	4c0d      	ldr	r4, [pc, #52]	; (80151d8 <__libc_init_array+0x3c>)
 80151a2:	1b64      	subs	r4, r4, r5
 80151a4:	10a4      	asrs	r4, r4, #2
 80151a6:	2600      	movs	r6, #0
 80151a8:	42a6      	cmp	r6, r4
 80151aa:	d109      	bne.n	80151c0 <__libc_init_array+0x24>
 80151ac:	4d0b      	ldr	r5, [pc, #44]	; (80151dc <__libc_init_array+0x40>)
 80151ae:	4c0c      	ldr	r4, [pc, #48]	; (80151e0 <__libc_init_array+0x44>)
 80151b0:	f000 fd38 	bl	8015c24 <_init>
 80151b4:	1b64      	subs	r4, r4, r5
 80151b6:	10a4      	asrs	r4, r4, #2
 80151b8:	2600      	movs	r6, #0
 80151ba:	42a6      	cmp	r6, r4
 80151bc:	d105      	bne.n	80151ca <__libc_init_array+0x2e>
 80151be:	bd70      	pop	{r4, r5, r6, pc}
 80151c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80151c4:	4798      	blx	r3
 80151c6:	3601      	adds	r6, #1
 80151c8:	e7ee      	b.n	80151a8 <__libc_init_array+0xc>
 80151ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80151ce:	4798      	blx	r3
 80151d0:	3601      	adds	r6, #1
 80151d2:	e7f2      	b.n	80151ba <__libc_init_array+0x1e>
 80151d4:	08016020 	.word	0x08016020
 80151d8:	08016020 	.word	0x08016020
 80151dc:	08016020 	.word	0x08016020
 80151e0:	08016024 	.word	0x08016024

080151e4 <__retarget_lock_init_recursive>:
 80151e4:	4770      	bx	lr

080151e6 <__retarget_lock_acquire_recursive>:
 80151e6:	4770      	bx	lr

080151e8 <__retarget_lock_release_recursive>:
 80151e8:	4770      	bx	lr

080151ea <memcpy>:
 80151ea:	440a      	add	r2, r1
 80151ec:	4291      	cmp	r1, r2
 80151ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80151f2:	d100      	bne.n	80151f6 <memcpy+0xc>
 80151f4:	4770      	bx	lr
 80151f6:	b510      	push	{r4, lr}
 80151f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015200:	4291      	cmp	r1, r2
 8015202:	d1f9      	bne.n	80151f8 <memcpy+0xe>
 8015204:	bd10      	pop	{r4, pc}
	...

08015208 <_free_r>:
 8015208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801520a:	2900      	cmp	r1, #0
 801520c:	d044      	beq.n	8015298 <_free_r+0x90>
 801520e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015212:	9001      	str	r0, [sp, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	f1a1 0404 	sub.w	r4, r1, #4
 801521a:	bfb8      	it	lt
 801521c:	18e4      	addlt	r4, r4, r3
 801521e:	f000 f8df 	bl	80153e0 <__malloc_lock>
 8015222:	4a1e      	ldr	r2, [pc, #120]	; (801529c <_free_r+0x94>)
 8015224:	9801      	ldr	r0, [sp, #4]
 8015226:	6813      	ldr	r3, [r2, #0]
 8015228:	b933      	cbnz	r3, 8015238 <_free_r+0x30>
 801522a:	6063      	str	r3, [r4, #4]
 801522c:	6014      	str	r4, [r2, #0]
 801522e:	b003      	add	sp, #12
 8015230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015234:	f000 b8da 	b.w	80153ec <__malloc_unlock>
 8015238:	42a3      	cmp	r3, r4
 801523a:	d908      	bls.n	801524e <_free_r+0x46>
 801523c:	6825      	ldr	r5, [r4, #0]
 801523e:	1961      	adds	r1, r4, r5
 8015240:	428b      	cmp	r3, r1
 8015242:	bf01      	itttt	eq
 8015244:	6819      	ldreq	r1, [r3, #0]
 8015246:	685b      	ldreq	r3, [r3, #4]
 8015248:	1949      	addeq	r1, r1, r5
 801524a:	6021      	streq	r1, [r4, #0]
 801524c:	e7ed      	b.n	801522a <_free_r+0x22>
 801524e:	461a      	mov	r2, r3
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	b10b      	cbz	r3, 8015258 <_free_r+0x50>
 8015254:	42a3      	cmp	r3, r4
 8015256:	d9fa      	bls.n	801524e <_free_r+0x46>
 8015258:	6811      	ldr	r1, [r2, #0]
 801525a:	1855      	adds	r5, r2, r1
 801525c:	42a5      	cmp	r5, r4
 801525e:	d10b      	bne.n	8015278 <_free_r+0x70>
 8015260:	6824      	ldr	r4, [r4, #0]
 8015262:	4421      	add	r1, r4
 8015264:	1854      	adds	r4, r2, r1
 8015266:	42a3      	cmp	r3, r4
 8015268:	6011      	str	r1, [r2, #0]
 801526a:	d1e0      	bne.n	801522e <_free_r+0x26>
 801526c:	681c      	ldr	r4, [r3, #0]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	6053      	str	r3, [r2, #4]
 8015272:	440c      	add	r4, r1
 8015274:	6014      	str	r4, [r2, #0]
 8015276:	e7da      	b.n	801522e <_free_r+0x26>
 8015278:	d902      	bls.n	8015280 <_free_r+0x78>
 801527a:	230c      	movs	r3, #12
 801527c:	6003      	str	r3, [r0, #0]
 801527e:	e7d6      	b.n	801522e <_free_r+0x26>
 8015280:	6825      	ldr	r5, [r4, #0]
 8015282:	1961      	adds	r1, r4, r5
 8015284:	428b      	cmp	r3, r1
 8015286:	bf04      	itt	eq
 8015288:	6819      	ldreq	r1, [r3, #0]
 801528a:	685b      	ldreq	r3, [r3, #4]
 801528c:	6063      	str	r3, [r4, #4]
 801528e:	bf04      	itt	eq
 8015290:	1949      	addeq	r1, r1, r5
 8015292:	6021      	streq	r1, [r4, #0]
 8015294:	6054      	str	r4, [r2, #4]
 8015296:	e7ca      	b.n	801522e <_free_r+0x26>
 8015298:	b003      	add	sp, #12
 801529a:	bd30      	pop	{r4, r5, pc}
 801529c:	2000f7f0 	.word	0x2000f7f0

080152a0 <sbrk_aligned>:
 80152a0:	b570      	push	{r4, r5, r6, lr}
 80152a2:	4e0e      	ldr	r6, [pc, #56]	; (80152dc <sbrk_aligned+0x3c>)
 80152a4:	460c      	mov	r4, r1
 80152a6:	6831      	ldr	r1, [r6, #0]
 80152a8:	4605      	mov	r5, r0
 80152aa:	b911      	cbnz	r1, 80152b2 <sbrk_aligned+0x12>
 80152ac:	f000 fcaa 	bl	8015c04 <_sbrk_r>
 80152b0:	6030      	str	r0, [r6, #0]
 80152b2:	4621      	mov	r1, r4
 80152b4:	4628      	mov	r0, r5
 80152b6:	f000 fca5 	bl	8015c04 <_sbrk_r>
 80152ba:	1c43      	adds	r3, r0, #1
 80152bc:	d00a      	beq.n	80152d4 <sbrk_aligned+0x34>
 80152be:	1cc4      	adds	r4, r0, #3
 80152c0:	f024 0403 	bic.w	r4, r4, #3
 80152c4:	42a0      	cmp	r0, r4
 80152c6:	d007      	beq.n	80152d8 <sbrk_aligned+0x38>
 80152c8:	1a21      	subs	r1, r4, r0
 80152ca:	4628      	mov	r0, r5
 80152cc:	f000 fc9a 	bl	8015c04 <_sbrk_r>
 80152d0:	3001      	adds	r0, #1
 80152d2:	d101      	bne.n	80152d8 <sbrk_aligned+0x38>
 80152d4:	f04f 34ff 	mov.w	r4, #4294967295
 80152d8:	4620      	mov	r0, r4
 80152da:	bd70      	pop	{r4, r5, r6, pc}
 80152dc:	2000f7f4 	.word	0x2000f7f4

080152e0 <_malloc_r>:
 80152e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152e4:	1ccd      	adds	r5, r1, #3
 80152e6:	f025 0503 	bic.w	r5, r5, #3
 80152ea:	3508      	adds	r5, #8
 80152ec:	2d0c      	cmp	r5, #12
 80152ee:	bf38      	it	cc
 80152f0:	250c      	movcc	r5, #12
 80152f2:	2d00      	cmp	r5, #0
 80152f4:	4607      	mov	r7, r0
 80152f6:	db01      	blt.n	80152fc <_malloc_r+0x1c>
 80152f8:	42a9      	cmp	r1, r5
 80152fa:	d905      	bls.n	8015308 <_malloc_r+0x28>
 80152fc:	230c      	movs	r3, #12
 80152fe:	603b      	str	r3, [r7, #0]
 8015300:	2600      	movs	r6, #0
 8015302:	4630      	mov	r0, r6
 8015304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80153dc <_malloc_r+0xfc>
 801530c:	f000 f868 	bl	80153e0 <__malloc_lock>
 8015310:	f8d8 3000 	ldr.w	r3, [r8]
 8015314:	461c      	mov	r4, r3
 8015316:	bb5c      	cbnz	r4, 8015370 <_malloc_r+0x90>
 8015318:	4629      	mov	r1, r5
 801531a:	4638      	mov	r0, r7
 801531c:	f7ff ffc0 	bl	80152a0 <sbrk_aligned>
 8015320:	1c43      	adds	r3, r0, #1
 8015322:	4604      	mov	r4, r0
 8015324:	d155      	bne.n	80153d2 <_malloc_r+0xf2>
 8015326:	f8d8 4000 	ldr.w	r4, [r8]
 801532a:	4626      	mov	r6, r4
 801532c:	2e00      	cmp	r6, #0
 801532e:	d145      	bne.n	80153bc <_malloc_r+0xdc>
 8015330:	2c00      	cmp	r4, #0
 8015332:	d048      	beq.n	80153c6 <_malloc_r+0xe6>
 8015334:	6823      	ldr	r3, [r4, #0]
 8015336:	4631      	mov	r1, r6
 8015338:	4638      	mov	r0, r7
 801533a:	eb04 0903 	add.w	r9, r4, r3
 801533e:	f000 fc61 	bl	8015c04 <_sbrk_r>
 8015342:	4581      	cmp	r9, r0
 8015344:	d13f      	bne.n	80153c6 <_malloc_r+0xe6>
 8015346:	6821      	ldr	r1, [r4, #0]
 8015348:	1a6d      	subs	r5, r5, r1
 801534a:	4629      	mov	r1, r5
 801534c:	4638      	mov	r0, r7
 801534e:	f7ff ffa7 	bl	80152a0 <sbrk_aligned>
 8015352:	3001      	adds	r0, #1
 8015354:	d037      	beq.n	80153c6 <_malloc_r+0xe6>
 8015356:	6823      	ldr	r3, [r4, #0]
 8015358:	442b      	add	r3, r5
 801535a:	6023      	str	r3, [r4, #0]
 801535c:	f8d8 3000 	ldr.w	r3, [r8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d038      	beq.n	80153d6 <_malloc_r+0xf6>
 8015364:	685a      	ldr	r2, [r3, #4]
 8015366:	42a2      	cmp	r2, r4
 8015368:	d12b      	bne.n	80153c2 <_malloc_r+0xe2>
 801536a:	2200      	movs	r2, #0
 801536c:	605a      	str	r2, [r3, #4]
 801536e:	e00f      	b.n	8015390 <_malloc_r+0xb0>
 8015370:	6822      	ldr	r2, [r4, #0]
 8015372:	1b52      	subs	r2, r2, r5
 8015374:	d41f      	bmi.n	80153b6 <_malloc_r+0xd6>
 8015376:	2a0b      	cmp	r2, #11
 8015378:	d917      	bls.n	80153aa <_malloc_r+0xca>
 801537a:	1961      	adds	r1, r4, r5
 801537c:	42a3      	cmp	r3, r4
 801537e:	6025      	str	r5, [r4, #0]
 8015380:	bf18      	it	ne
 8015382:	6059      	strne	r1, [r3, #4]
 8015384:	6863      	ldr	r3, [r4, #4]
 8015386:	bf08      	it	eq
 8015388:	f8c8 1000 	streq.w	r1, [r8]
 801538c:	5162      	str	r2, [r4, r5]
 801538e:	604b      	str	r3, [r1, #4]
 8015390:	4638      	mov	r0, r7
 8015392:	f104 060b 	add.w	r6, r4, #11
 8015396:	f000 f829 	bl	80153ec <__malloc_unlock>
 801539a:	f026 0607 	bic.w	r6, r6, #7
 801539e:	1d23      	adds	r3, r4, #4
 80153a0:	1af2      	subs	r2, r6, r3
 80153a2:	d0ae      	beq.n	8015302 <_malloc_r+0x22>
 80153a4:	1b9b      	subs	r3, r3, r6
 80153a6:	50a3      	str	r3, [r4, r2]
 80153a8:	e7ab      	b.n	8015302 <_malloc_r+0x22>
 80153aa:	42a3      	cmp	r3, r4
 80153ac:	6862      	ldr	r2, [r4, #4]
 80153ae:	d1dd      	bne.n	801536c <_malloc_r+0x8c>
 80153b0:	f8c8 2000 	str.w	r2, [r8]
 80153b4:	e7ec      	b.n	8015390 <_malloc_r+0xb0>
 80153b6:	4623      	mov	r3, r4
 80153b8:	6864      	ldr	r4, [r4, #4]
 80153ba:	e7ac      	b.n	8015316 <_malloc_r+0x36>
 80153bc:	4634      	mov	r4, r6
 80153be:	6876      	ldr	r6, [r6, #4]
 80153c0:	e7b4      	b.n	801532c <_malloc_r+0x4c>
 80153c2:	4613      	mov	r3, r2
 80153c4:	e7cc      	b.n	8015360 <_malloc_r+0x80>
 80153c6:	230c      	movs	r3, #12
 80153c8:	603b      	str	r3, [r7, #0]
 80153ca:	4638      	mov	r0, r7
 80153cc:	f000 f80e 	bl	80153ec <__malloc_unlock>
 80153d0:	e797      	b.n	8015302 <_malloc_r+0x22>
 80153d2:	6025      	str	r5, [r4, #0]
 80153d4:	e7dc      	b.n	8015390 <_malloc_r+0xb0>
 80153d6:	605b      	str	r3, [r3, #4]
 80153d8:	deff      	udf	#255	; 0xff
 80153da:	bf00      	nop
 80153dc:	2000f7f0 	.word	0x2000f7f0

080153e0 <__malloc_lock>:
 80153e0:	4801      	ldr	r0, [pc, #4]	; (80153e8 <__malloc_lock+0x8>)
 80153e2:	f7ff bf00 	b.w	80151e6 <__retarget_lock_acquire_recursive>
 80153e6:	bf00      	nop
 80153e8:	2000f7ec 	.word	0x2000f7ec

080153ec <__malloc_unlock>:
 80153ec:	4801      	ldr	r0, [pc, #4]	; (80153f4 <__malloc_unlock+0x8>)
 80153ee:	f7ff befb 	b.w	80151e8 <__retarget_lock_release_recursive>
 80153f2:	bf00      	nop
 80153f4:	2000f7ec 	.word	0x2000f7ec

080153f8 <__sfputc_r>:
 80153f8:	6893      	ldr	r3, [r2, #8]
 80153fa:	3b01      	subs	r3, #1
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	b410      	push	{r4}
 8015400:	6093      	str	r3, [r2, #8]
 8015402:	da08      	bge.n	8015416 <__sfputc_r+0x1e>
 8015404:	6994      	ldr	r4, [r2, #24]
 8015406:	42a3      	cmp	r3, r4
 8015408:	db01      	blt.n	801540e <__sfputc_r+0x16>
 801540a:	290a      	cmp	r1, #10
 801540c:	d103      	bne.n	8015416 <__sfputc_r+0x1e>
 801540e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015412:	f7ff bdda 	b.w	8014fca <__swbuf_r>
 8015416:	6813      	ldr	r3, [r2, #0]
 8015418:	1c58      	adds	r0, r3, #1
 801541a:	6010      	str	r0, [r2, #0]
 801541c:	7019      	strb	r1, [r3, #0]
 801541e:	4608      	mov	r0, r1
 8015420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015424:	4770      	bx	lr

08015426 <__sfputs_r>:
 8015426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015428:	4606      	mov	r6, r0
 801542a:	460f      	mov	r7, r1
 801542c:	4614      	mov	r4, r2
 801542e:	18d5      	adds	r5, r2, r3
 8015430:	42ac      	cmp	r4, r5
 8015432:	d101      	bne.n	8015438 <__sfputs_r+0x12>
 8015434:	2000      	movs	r0, #0
 8015436:	e007      	b.n	8015448 <__sfputs_r+0x22>
 8015438:	f814 1b01 	ldrb.w	r1, [r4], #1
 801543c:	463a      	mov	r2, r7
 801543e:	4630      	mov	r0, r6
 8015440:	f7ff ffda 	bl	80153f8 <__sfputc_r>
 8015444:	1c43      	adds	r3, r0, #1
 8015446:	d1f3      	bne.n	8015430 <__sfputs_r+0xa>
 8015448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801544c <_vfiprintf_r>:
 801544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015450:	460d      	mov	r5, r1
 8015452:	b09d      	sub	sp, #116	; 0x74
 8015454:	4614      	mov	r4, r2
 8015456:	4698      	mov	r8, r3
 8015458:	4606      	mov	r6, r0
 801545a:	b118      	cbz	r0, 8015464 <_vfiprintf_r+0x18>
 801545c:	6a03      	ldr	r3, [r0, #32]
 801545e:	b90b      	cbnz	r3, 8015464 <_vfiprintf_r+0x18>
 8015460:	f7ff fccc 	bl	8014dfc <__sinit>
 8015464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015466:	07d9      	lsls	r1, r3, #31
 8015468:	d405      	bmi.n	8015476 <_vfiprintf_r+0x2a>
 801546a:	89ab      	ldrh	r3, [r5, #12]
 801546c:	059a      	lsls	r2, r3, #22
 801546e:	d402      	bmi.n	8015476 <_vfiprintf_r+0x2a>
 8015470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015472:	f7ff feb8 	bl	80151e6 <__retarget_lock_acquire_recursive>
 8015476:	89ab      	ldrh	r3, [r5, #12]
 8015478:	071b      	lsls	r3, r3, #28
 801547a:	d501      	bpl.n	8015480 <_vfiprintf_r+0x34>
 801547c:	692b      	ldr	r3, [r5, #16]
 801547e:	b99b      	cbnz	r3, 80154a8 <_vfiprintf_r+0x5c>
 8015480:	4629      	mov	r1, r5
 8015482:	4630      	mov	r0, r6
 8015484:	f7ff fdde 	bl	8015044 <__swsetup_r>
 8015488:	b170      	cbz	r0, 80154a8 <_vfiprintf_r+0x5c>
 801548a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801548c:	07dc      	lsls	r4, r3, #31
 801548e:	d504      	bpl.n	801549a <_vfiprintf_r+0x4e>
 8015490:	f04f 30ff 	mov.w	r0, #4294967295
 8015494:	b01d      	add	sp, #116	; 0x74
 8015496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801549a:	89ab      	ldrh	r3, [r5, #12]
 801549c:	0598      	lsls	r0, r3, #22
 801549e:	d4f7      	bmi.n	8015490 <_vfiprintf_r+0x44>
 80154a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154a2:	f7ff fea1 	bl	80151e8 <__retarget_lock_release_recursive>
 80154a6:	e7f3      	b.n	8015490 <_vfiprintf_r+0x44>
 80154a8:	2300      	movs	r3, #0
 80154aa:	9309      	str	r3, [sp, #36]	; 0x24
 80154ac:	2320      	movs	r3, #32
 80154ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80154b6:	2330      	movs	r3, #48	; 0x30
 80154b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801566c <_vfiprintf_r+0x220>
 80154bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154c0:	f04f 0901 	mov.w	r9, #1
 80154c4:	4623      	mov	r3, r4
 80154c6:	469a      	mov	sl, r3
 80154c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154cc:	b10a      	cbz	r2, 80154d2 <_vfiprintf_r+0x86>
 80154ce:	2a25      	cmp	r2, #37	; 0x25
 80154d0:	d1f9      	bne.n	80154c6 <_vfiprintf_r+0x7a>
 80154d2:	ebba 0b04 	subs.w	fp, sl, r4
 80154d6:	d00b      	beq.n	80154f0 <_vfiprintf_r+0xa4>
 80154d8:	465b      	mov	r3, fp
 80154da:	4622      	mov	r2, r4
 80154dc:	4629      	mov	r1, r5
 80154de:	4630      	mov	r0, r6
 80154e0:	f7ff ffa1 	bl	8015426 <__sfputs_r>
 80154e4:	3001      	adds	r0, #1
 80154e6:	f000 80a9 	beq.w	801563c <_vfiprintf_r+0x1f0>
 80154ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154ec:	445a      	add	r2, fp
 80154ee:	9209      	str	r2, [sp, #36]	; 0x24
 80154f0:	f89a 3000 	ldrb.w	r3, [sl]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	f000 80a1 	beq.w	801563c <_vfiprintf_r+0x1f0>
 80154fa:	2300      	movs	r3, #0
 80154fc:	f04f 32ff 	mov.w	r2, #4294967295
 8015500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015504:	f10a 0a01 	add.w	sl, sl, #1
 8015508:	9304      	str	r3, [sp, #16]
 801550a:	9307      	str	r3, [sp, #28]
 801550c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015510:	931a      	str	r3, [sp, #104]	; 0x68
 8015512:	4654      	mov	r4, sl
 8015514:	2205      	movs	r2, #5
 8015516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801551a:	4854      	ldr	r0, [pc, #336]	; (801566c <_vfiprintf_r+0x220>)
 801551c:	f7eb f918 	bl	8000750 <memchr>
 8015520:	9a04      	ldr	r2, [sp, #16]
 8015522:	b9d8      	cbnz	r0, 801555c <_vfiprintf_r+0x110>
 8015524:	06d1      	lsls	r1, r2, #27
 8015526:	bf44      	itt	mi
 8015528:	2320      	movmi	r3, #32
 801552a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801552e:	0713      	lsls	r3, r2, #28
 8015530:	bf44      	itt	mi
 8015532:	232b      	movmi	r3, #43	; 0x2b
 8015534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015538:	f89a 3000 	ldrb.w	r3, [sl]
 801553c:	2b2a      	cmp	r3, #42	; 0x2a
 801553e:	d015      	beq.n	801556c <_vfiprintf_r+0x120>
 8015540:	9a07      	ldr	r2, [sp, #28]
 8015542:	4654      	mov	r4, sl
 8015544:	2000      	movs	r0, #0
 8015546:	f04f 0c0a 	mov.w	ip, #10
 801554a:	4621      	mov	r1, r4
 801554c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015550:	3b30      	subs	r3, #48	; 0x30
 8015552:	2b09      	cmp	r3, #9
 8015554:	d94d      	bls.n	80155f2 <_vfiprintf_r+0x1a6>
 8015556:	b1b0      	cbz	r0, 8015586 <_vfiprintf_r+0x13a>
 8015558:	9207      	str	r2, [sp, #28]
 801555a:	e014      	b.n	8015586 <_vfiprintf_r+0x13a>
 801555c:	eba0 0308 	sub.w	r3, r0, r8
 8015560:	fa09 f303 	lsl.w	r3, r9, r3
 8015564:	4313      	orrs	r3, r2
 8015566:	9304      	str	r3, [sp, #16]
 8015568:	46a2      	mov	sl, r4
 801556a:	e7d2      	b.n	8015512 <_vfiprintf_r+0xc6>
 801556c:	9b03      	ldr	r3, [sp, #12]
 801556e:	1d19      	adds	r1, r3, #4
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	9103      	str	r1, [sp, #12]
 8015574:	2b00      	cmp	r3, #0
 8015576:	bfbb      	ittet	lt
 8015578:	425b      	neglt	r3, r3
 801557a:	f042 0202 	orrlt.w	r2, r2, #2
 801557e:	9307      	strge	r3, [sp, #28]
 8015580:	9307      	strlt	r3, [sp, #28]
 8015582:	bfb8      	it	lt
 8015584:	9204      	strlt	r2, [sp, #16]
 8015586:	7823      	ldrb	r3, [r4, #0]
 8015588:	2b2e      	cmp	r3, #46	; 0x2e
 801558a:	d10c      	bne.n	80155a6 <_vfiprintf_r+0x15a>
 801558c:	7863      	ldrb	r3, [r4, #1]
 801558e:	2b2a      	cmp	r3, #42	; 0x2a
 8015590:	d134      	bne.n	80155fc <_vfiprintf_r+0x1b0>
 8015592:	9b03      	ldr	r3, [sp, #12]
 8015594:	1d1a      	adds	r2, r3, #4
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	9203      	str	r2, [sp, #12]
 801559a:	2b00      	cmp	r3, #0
 801559c:	bfb8      	it	lt
 801559e:	f04f 33ff 	movlt.w	r3, #4294967295
 80155a2:	3402      	adds	r4, #2
 80155a4:	9305      	str	r3, [sp, #20]
 80155a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801567c <_vfiprintf_r+0x230>
 80155aa:	7821      	ldrb	r1, [r4, #0]
 80155ac:	2203      	movs	r2, #3
 80155ae:	4650      	mov	r0, sl
 80155b0:	f7eb f8ce 	bl	8000750 <memchr>
 80155b4:	b138      	cbz	r0, 80155c6 <_vfiprintf_r+0x17a>
 80155b6:	9b04      	ldr	r3, [sp, #16]
 80155b8:	eba0 000a 	sub.w	r0, r0, sl
 80155bc:	2240      	movs	r2, #64	; 0x40
 80155be:	4082      	lsls	r2, r0
 80155c0:	4313      	orrs	r3, r2
 80155c2:	3401      	adds	r4, #1
 80155c4:	9304      	str	r3, [sp, #16]
 80155c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155ca:	4829      	ldr	r0, [pc, #164]	; (8015670 <_vfiprintf_r+0x224>)
 80155cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155d0:	2206      	movs	r2, #6
 80155d2:	f7eb f8bd 	bl	8000750 <memchr>
 80155d6:	2800      	cmp	r0, #0
 80155d8:	d03f      	beq.n	801565a <_vfiprintf_r+0x20e>
 80155da:	4b26      	ldr	r3, [pc, #152]	; (8015674 <_vfiprintf_r+0x228>)
 80155dc:	bb1b      	cbnz	r3, 8015626 <_vfiprintf_r+0x1da>
 80155de:	9b03      	ldr	r3, [sp, #12]
 80155e0:	3307      	adds	r3, #7
 80155e2:	f023 0307 	bic.w	r3, r3, #7
 80155e6:	3308      	adds	r3, #8
 80155e8:	9303      	str	r3, [sp, #12]
 80155ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155ec:	443b      	add	r3, r7
 80155ee:	9309      	str	r3, [sp, #36]	; 0x24
 80155f0:	e768      	b.n	80154c4 <_vfiprintf_r+0x78>
 80155f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80155f6:	460c      	mov	r4, r1
 80155f8:	2001      	movs	r0, #1
 80155fa:	e7a6      	b.n	801554a <_vfiprintf_r+0xfe>
 80155fc:	2300      	movs	r3, #0
 80155fe:	3401      	adds	r4, #1
 8015600:	9305      	str	r3, [sp, #20]
 8015602:	4619      	mov	r1, r3
 8015604:	f04f 0c0a 	mov.w	ip, #10
 8015608:	4620      	mov	r0, r4
 801560a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801560e:	3a30      	subs	r2, #48	; 0x30
 8015610:	2a09      	cmp	r2, #9
 8015612:	d903      	bls.n	801561c <_vfiprintf_r+0x1d0>
 8015614:	2b00      	cmp	r3, #0
 8015616:	d0c6      	beq.n	80155a6 <_vfiprintf_r+0x15a>
 8015618:	9105      	str	r1, [sp, #20]
 801561a:	e7c4      	b.n	80155a6 <_vfiprintf_r+0x15a>
 801561c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015620:	4604      	mov	r4, r0
 8015622:	2301      	movs	r3, #1
 8015624:	e7f0      	b.n	8015608 <_vfiprintf_r+0x1bc>
 8015626:	ab03      	add	r3, sp, #12
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	462a      	mov	r2, r5
 801562c:	4b12      	ldr	r3, [pc, #72]	; (8015678 <_vfiprintf_r+0x22c>)
 801562e:	a904      	add	r1, sp, #16
 8015630:	4630      	mov	r0, r6
 8015632:	f3af 8000 	nop.w
 8015636:	4607      	mov	r7, r0
 8015638:	1c78      	adds	r0, r7, #1
 801563a:	d1d6      	bne.n	80155ea <_vfiprintf_r+0x19e>
 801563c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801563e:	07d9      	lsls	r1, r3, #31
 8015640:	d405      	bmi.n	801564e <_vfiprintf_r+0x202>
 8015642:	89ab      	ldrh	r3, [r5, #12]
 8015644:	059a      	lsls	r2, r3, #22
 8015646:	d402      	bmi.n	801564e <_vfiprintf_r+0x202>
 8015648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801564a:	f7ff fdcd 	bl	80151e8 <__retarget_lock_release_recursive>
 801564e:	89ab      	ldrh	r3, [r5, #12]
 8015650:	065b      	lsls	r3, r3, #25
 8015652:	f53f af1d 	bmi.w	8015490 <_vfiprintf_r+0x44>
 8015656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015658:	e71c      	b.n	8015494 <_vfiprintf_r+0x48>
 801565a:	ab03      	add	r3, sp, #12
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	462a      	mov	r2, r5
 8015660:	4b05      	ldr	r3, [pc, #20]	; (8015678 <_vfiprintf_r+0x22c>)
 8015662:	a904      	add	r1, sp, #16
 8015664:	4630      	mov	r0, r6
 8015666:	f000 f879 	bl	801575c <_printf_i>
 801566a:	e7e4      	b.n	8015636 <_vfiprintf_r+0x1ea>
 801566c:	08015fec 	.word	0x08015fec
 8015670:	08015ff6 	.word	0x08015ff6
 8015674:	00000000 	.word	0x00000000
 8015678:	08015427 	.word	0x08015427
 801567c:	08015ff2 	.word	0x08015ff2

08015680 <_printf_common>:
 8015680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015684:	4616      	mov	r6, r2
 8015686:	4699      	mov	r9, r3
 8015688:	688a      	ldr	r2, [r1, #8]
 801568a:	690b      	ldr	r3, [r1, #16]
 801568c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015690:	4293      	cmp	r3, r2
 8015692:	bfb8      	it	lt
 8015694:	4613      	movlt	r3, r2
 8015696:	6033      	str	r3, [r6, #0]
 8015698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801569c:	4607      	mov	r7, r0
 801569e:	460c      	mov	r4, r1
 80156a0:	b10a      	cbz	r2, 80156a6 <_printf_common+0x26>
 80156a2:	3301      	adds	r3, #1
 80156a4:	6033      	str	r3, [r6, #0]
 80156a6:	6823      	ldr	r3, [r4, #0]
 80156a8:	0699      	lsls	r1, r3, #26
 80156aa:	bf42      	ittt	mi
 80156ac:	6833      	ldrmi	r3, [r6, #0]
 80156ae:	3302      	addmi	r3, #2
 80156b0:	6033      	strmi	r3, [r6, #0]
 80156b2:	6825      	ldr	r5, [r4, #0]
 80156b4:	f015 0506 	ands.w	r5, r5, #6
 80156b8:	d106      	bne.n	80156c8 <_printf_common+0x48>
 80156ba:	f104 0a19 	add.w	sl, r4, #25
 80156be:	68e3      	ldr	r3, [r4, #12]
 80156c0:	6832      	ldr	r2, [r6, #0]
 80156c2:	1a9b      	subs	r3, r3, r2
 80156c4:	42ab      	cmp	r3, r5
 80156c6:	dc26      	bgt.n	8015716 <_printf_common+0x96>
 80156c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80156cc:	1e13      	subs	r3, r2, #0
 80156ce:	6822      	ldr	r2, [r4, #0]
 80156d0:	bf18      	it	ne
 80156d2:	2301      	movne	r3, #1
 80156d4:	0692      	lsls	r2, r2, #26
 80156d6:	d42b      	bmi.n	8015730 <_printf_common+0xb0>
 80156d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80156dc:	4649      	mov	r1, r9
 80156de:	4638      	mov	r0, r7
 80156e0:	47c0      	blx	r8
 80156e2:	3001      	adds	r0, #1
 80156e4:	d01e      	beq.n	8015724 <_printf_common+0xa4>
 80156e6:	6823      	ldr	r3, [r4, #0]
 80156e8:	6922      	ldr	r2, [r4, #16]
 80156ea:	f003 0306 	and.w	r3, r3, #6
 80156ee:	2b04      	cmp	r3, #4
 80156f0:	bf02      	ittt	eq
 80156f2:	68e5      	ldreq	r5, [r4, #12]
 80156f4:	6833      	ldreq	r3, [r6, #0]
 80156f6:	1aed      	subeq	r5, r5, r3
 80156f8:	68a3      	ldr	r3, [r4, #8]
 80156fa:	bf0c      	ite	eq
 80156fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015700:	2500      	movne	r5, #0
 8015702:	4293      	cmp	r3, r2
 8015704:	bfc4      	itt	gt
 8015706:	1a9b      	subgt	r3, r3, r2
 8015708:	18ed      	addgt	r5, r5, r3
 801570a:	2600      	movs	r6, #0
 801570c:	341a      	adds	r4, #26
 801570e:	42b5      	cmp	r5, r6
 8015710:	d11a      	bne.n	8015748 <_printf_common+0xc8>
 8015712:	2000      	movs	r0, #0
 8015714:	e008      	b.n	8015728 <_printf_common+0xa8>
 8015716:	2301      	movs	r3, #1
 8015718:	4652      	mov	r2, sl
 801571a:	4649      	mov	r1, r9
 801571c:	4638      	mov	r0, r7
 801571e:	47c0      	blx	r8
 8015720:	3001      	adds	r0, #1
 8015722:	d103      	bne.n	801572c <_printf_common+0xac>
 8015724:	f04f 30ff 	mov.w	r0, #4294967295
 8015728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801572c:	3501      	adds	r5, #1
 801572e:	e7c6      	b.n	80156be <_printf_common+0x3e>
 8015730:	18e1      	adds	r1, r4, r3
 8015732:	1c5a      	adds	r2, r3, #1
 8015734:	2030      	movs	r0, #48	; 0x30
 8015736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801573a:	4422      	add	r2, r4
 801573c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015744:	3302      	adds	r3, #2
 8015746:	e7c7      	b.n	80156d8 <_printf_common+0x58>
 8015748:	2301      	movs	r3, #1
 801574a:	4622      	mov	r2, r4
 801574c:	4649      	mov	r1, r9
 801574e:	4638      	mov	r0, r7
 8015750:	47c0      	blx	r8
 8015752:	3001      	adds	r0, #1
 8015754:	d0e6      	beq.n	8015724 <_printf_common+0xa4>
 8015756:	3601      	adds	r6, #1
 8015758:	e7d9      	b.n	801570e <_printf_common+0x8e>
	...

0801575c <_printf_i>:
 801575c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015760:	7e0f      	ldrb	r7, [r1, #24]
 8015762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015764:	2f78      	cmp	r7, #120	; 0x78
 8015766:	4691      	mov	r9, r2
 8015768:	4680      	mov	r8, r0
 801576a:	460c      	mov	r4, r1
 801576c:	469a      	mov	sl, r3
 801576e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015772:	d807      	bhi.n	8015784 <_printf_i+0x28>
 8015774:	2f62      	cmp	r7, #98	; 0x62
 8015776:	d80a      	bhi.n	801578e <_printf_i+0x32>
 8015778:	2f00      	cmp	r7, #0
 801577a:	f000 80d4 	beq.w	8015926 <_printf_i+0x1ca>
 801577e:	2f58      	cmp	r7, #88	; 0x58
 8015780:	f000 80c0 	beq.w	8015904 <_printf_i+0x1a8>
 8015784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801578c:	e03a      	b.n	8015804 <_printf_i+0xa8>
 801578e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015792:	2b15      	cmp	r3, #21
 8015794:	d8f6      	bhi.n	8015784 <_printf_i+0x28>
 8015796:	a101      	add	r1, pc, #4	; (adr r1, 801579c <_printf_i+0x40>)
 8015798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801579c:	080157f5 	.word	0x080157f5
 80157a0:	08015809 	.word	0x08015809
 80157a4:	08015785 	.word	0x08015785
 80157a8:	08015785 	.word	0x08015785
 80157ac:	08015785 	.word	0x08015785
 80157b0:	08015785 	.word	0x08015785
 80157b4:	08015809 	.word	0x08015809
 80157b8:	08015785 	.word	0x08015785
 80157bc:	08015785 	.word	0x08015785
 80157c0:	08015785 	.word	0x08015785
 80157c4:	08015785 	.word	0x08015785
 80157c8:	0801590d 	.word	0x0801590d
 80157cc:	08015835 	.word	0x08015835
 80157d0:	080158c7 	.word	0x080158c7
 80157d4:	08015785 	.word	0x08015785
 80157d8:	08015785 	.word	0x08015785
 80157dc:	0801592f 	.word	0x0801592f
 80157e0:	08015785 	.word	0x08015785
 80157e4:	08015835 	.word	0x08015835
 80157e8:	08015785 	.word	0x08015785
 80157ec:	08015785 	.word	0x08015785
 80157f0:	080158cf 	.word	0x080158cf
 80157f4:	682b      	ldr	r3, [r5, #0]
 80157f6:	1d1a      	adds	r2, r3, #4
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	602a      	str	r2, [r5, #0]
 80157fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015804:	2301      	movs	r3, #1
 8015806:	e09f      	b.n	8015948 <_printf_i+0x1ec>
 8015808:	6820      	ldr	r0, [r4, #0]
 801580a:	682b      	ldr	r3, [r5, #0]
 801580c:	0607      	lsls	r7, r0, #24
 801580e:	f103 0104 	add.w	r1, r3, #4
 8015812:	6029      	str	r1, [r5, #0]
 8015814:	d501      	bpl.n	801581a <_printf_i+0xbe>
 8015816:	681e      	ldr	r6, [r3, #0]
 8015818:	e003      	b.n	8015822 <_printf_i+0xc6>
 801581a:	0646      	lsls	r6, r0, #25
 801581c:	d5fb      	bpl.n	8015816 <_printf_i+0xba>
 801581e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015822:	2e00      	cmp	r6, #0
 8015824:	da03      	bge.n	801582e <_printf_i+0xd2>
 8015826:	232d      	movs	r3, #45	; 0x2d
 8015828:	4276      	negs	r6, r6
 801582a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801582e:	485a      	ldr	r0, [pc, #360]	; (8015998 <_printf_i+0x23c>)
 8015830:	230a      	movs	r3, #10
 8015832:	e012      	b.n	801585a <_printf_i+0xfe>
 8015834:	682b      	ldr	r3, [r5, #0]
 8015836:	6820      	ldr	r0, [r4, #0]
 8015838:	1d19      	adds	r1, r3, #4
 801583a:	6029      	str	r1, [r5, #0]
 801583c:	0605      	lsls	r5, r0, #24
 801583e:	d501      	bpl.n	8015844 <_printf_i+0xe8>
 8015840:	681e      	ldr	r6, [r3, #0]
 8015842:	e002      	b.n	801584a <_printf_i+0xee>
 8015844:	0641      	lsls	r1, r0, #25
 8015846:	d5fb      	bpl.n	8015840 <_printf_i+0xe4>
 8015848:	881e      	ldrh	r6, [r3, #0]
 801584a:	4853      	ldr	r0, [pc, #332]	; (8015998 <_printf_i+0x23c>)
 801584c:	2f6f      	cmp	r7, #111	; 0x6f
 801584e:	bf0c      	ite	eq
 8015850:	2308      	moveq	r3, #8
 8015852:	230a      	movne	r3, #10
 8015854:	2100      	movs	r1, #0
 8015856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801585a:	6865      	ldr	r5, [r4, #4]
 801585c:	60a5      	str	r5, [r4, #8]
 801585e:	2d00      	cmp	r5, #0
 8015860:	bfa2      	ittt	ge
 8015862:	6821      	ldrge	r1, [r4, #0]
 8015864:	f021 0104 	bicge.w	r1, r1, #4
 8015868:	6021      	strge	r1, [r4, #0]
 801586a:	b90e      	cbnz	r6, 8015870 <_printf_i+0x114>
 801586c:	2d00      	cmp	r5, #0
 801586e:	d04b      	beq.n	8015908 <_printf_i+0x1ac>
 8015870:	4615      	mov	r5, r2
 8015872:	fbb6 f1f3 	udiv	r1, r6, r3
 8015876:	fb03 6711 	mls	r7, r3, r1, r6
 801587a:	5dc7      	ldrb	r7, [r0, r7]
 801587c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015880:	4637      	mov	r7, r6
 8015882:	42bb      	cmp	r3, r7
 8015884:	460e      	mov	r6, r1
 8015886:	d9f4      	bls.n	8015872 <_printf_i+0x116>
 8015888:	2b08      	cmp	r3, #8
 801588a:	d10b      	bne.n	80158a4 <_printf_i+0x148>
 801588c:	6823      	ldr	r3, [r4, #0]
 801588e:	07de      	lsls	r6, r3, #31
 8015890:	d508      	bpl.n	80158a4 <_printf_i+0x148>
 8015892:	6923      	ldr	r3, [r4, #16]
 8015894:	6861      	ldr	r1, [r4, #4]
 8015896:	4299      	cmp	r1, r3
 8015898:	bfde      	ittt	le
 801589a:	2330      	movle	r3, #48	; 0x30
 801589c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80158a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80158a4:	1b52      	subs	r2, r2, r5
 80158a6:	6122      	str	r2, [r4, #16]
 80158a8:	f8cd a000 	str.w	sl, [sp]
 80158ac:	464b      	mov	r3, r9
 80158ae:	aa03      	add	r2, sp, #12
 80158b0:	4621      	mov	r1, r4
 80158b2:	4640      	mov	r0, r8
 80158b4:	f7ff fee4 	bl	8015680 <_printf_common>
 80158b8:	3001      	adds	r0, #1
 80158ba:	d14a      	bne.n	8015952 <_printf_i+0x1f6>
 80158bc:	f04f 30ff 	mov.w	r0, #4294967295
 80158c0:	b004      	add	sp, #16
 80158c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c6:	6823      	ldr	r3, [r4, #0]
 80158c8:	f043 0320 	orr.w	r3, r3, #32
 80158cc:	6023      	str	r3, [r4, #0]
 80158ce:	4833      	ldr	r0, [pc, #204]	; (801599c <_printf_i+0x240>)
 80158d0:	2778      	movs	r7, #120	; 0x78
 80158d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80158d6:	6823      	ldr	r3, [r4, #0]
 80158d8:	6829      	ldr	r1, [r5, #0]
 80158da:	061f      	lsls	r7, r3, #24
 80158dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80158e0:	d402      	bmi.n	80158e8 <_printf_i+0x18c>
 80158e2:	065f      	lsls	r7, r3, #25
 80158e4:	bf48      	it	mi
 80158e6:	b2b6      	uxthmi	r6, r6
 80158e8:	07df      	lsls	r7, r3, #31
 80158ea:	bf48      	it	mi
 80158ec:	f043 0320 	orrmi.w	r3, r3, #32
 80158f0:	6029      	str	r1, [r5, #0]
 80158f2:	bf48      	it	mi
 80158f4:	6023      	strmi	r3, [r4, #0]
 80158f6:	b91e      	cbnz	r6, 8015900 <_printf_i+0x1a4>
 80158f8:	6823      	ldr	r3, [r4, #0]
 80158fa:	f023 0320 	bic.w	r3, r3, #32
 80158fe:	6023      	str	r3, [r4, #0]
 8015900:	2310      	movs	r3, #16
 8015902:	e7a7      	b.n	8015854 <_printf_i+0xf8>
 8015904:	4824      	ldr	r0, [pc, #144]	; (8015998 <_printf_i+0x23c>)
 8015906:	e7e4      	b.n	80158d2 <_printf_i+0x176>
 8015908:	4615      	mov	r5, r2
 801590a:	e7bd      	b.n	8015888 <_printf_i+0x12c>
 801590c:	682b      	ldr	r3, [r5, #0]
 801590e:	6826      	ldr	r6, [r4, #0]
 8015910:	6961      	ldr	r1, [r4, #20]
 8015912:	1d18      	adds	r0, r3, #4
 8015914:	6028      	str	r0, [r5, #0]
 8015916:	0635      	lsls	r5, r6, #24
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	d501      	bpl.n	8015920 <_printf_i+0x1c4>
 801591c:	6019      	str	r1, [r3, #0]
 801591e:	e002      	b.n	8015926 <_printf_i+0x1ca>
 8015920:	0670      	lsls	r0, r6, #25
 8015922:	d5fb      	bpl.n	801591c <_printf_i+0x1c0>
 8015924:	8019      	strh	r1, [r3, #0]
 8015926:	2300      	movs	r3, #0
 8015928:	6123      	str	r3, [r4, #16]
 801592a:	4615      	mov	r5, r2
 801592c:	e7bc      	b.n	80158a8 <_printf_i+0x14c>
 801592e:	682b      	ldr	r3, [r5, #0]
 8015930:	1d1a      	adds	r2, r3, #4
 8015932:	602a      	str	r2, [r5, #0]
 8015934:	681d      	ldr	r5, [r3, #0]
 8015936:	6862      	ldr	r2, [r4, #4]
 8015938:	2100      	movs	r1, #0
 801593a:	4628      	mov	r0, r5
 801593c:	f7ea ff08 	bl	8000750 <memchr>
 8015940:	b108      	cbz	r0, 8015946 <_printf_i+0x1ea>
 8015942:	1b40      	subs	r0, r0, r5
 8015944:	6060      	str	r0, [r4, #4]
 8015946:	6863      	ldr	r3, [r4, #4]
 8015948:	6123      	str	r3, [r4, #16]
 801594a:	2300      	movs	r3, #0
 801594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015950:	e7aa      	b.n	80158a8 <_printf_i+0x14c>
 8015952:	6923      	ldr	r3, [r4, #16]
 8015954:	462a      	mov	r2, r5
 8015956:	4649      	mov	r1, r9
 8015958:	4640      	mov	r0, r8
 801595a:	47d0      	blx	sl
 801595c:	3001      	adds	r0, #1
 801595e:	d0ad      	beq.n	80158bc <_printf_i+0x160>
 8015960:	6823      	ldr	r3, [r4, #0]
 8015962:	079b      	lsls	r3, r3, #30
 8015964:	d413      	bmi.n	801598e <_printf_i+0x232>
 8015966:	68e0      	ldr	r0, [r4, #12]
 8015968:	9b03      	ldr	r3, [sp, #12]
 801596a:	4298      	cmp	r0, r3
 801596c:	bfb8      	it	lt
 801596e:	4618      	movlt	r0, r3
 8015970:	e7a6      	b.n	80158c0 <_printf_i+0x164>
 8015972:	2301      	movs	r3, #1
 8015974:	4632      	mov	r2, r6
 8015976:	4649      	mov	r1, r9
 8015978:	4640      	mov	r0, r8
 801597a:	47d0      	blx	sl
 801597c:	3001      	adds	r0, #1
 801597e:	d09d      	beq.n	80158bc <_printf_i+0x160>
 8015980:	3501      	adds	r5, #1
 8015982:	68e3      	ldr	r3, [r4, #12]
 8015984:	9903      	ldr	r1, [sp, #12]
 8015986:	1a5b      	subs	r3, r3, r1
 8015988:	42ab      	cmp	r3, r5
 801598a:	dcf2      	bgt.n	8015972 <_printf_i+0x216>
 801598c:	e7eb      	b.n	8015966 <_printf_i+0x20a>
 801598e:	2500      	movs	r5, #0
 8015990:	f104 0619 	add.w	r6, r4, #25
 8015994:	e7f5      	b.n	8015982 <_printf_i+0x226>
 8015996:	bf00      	nop
 8015998:	08015ffd 	.word	0x08015ffd
 801599c:	0801600e 	.word	0x0801600e

080159a0 <__sflush_r>:
 80159a0:	898a      	ldrh	r2, [r1, #12]
 80159a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a6:	4605      	mov	r5, r0
 80159a8:	0710      	lsls	r0, r2, #28
 80159aa:	460c      	mov	r4, r1
 80159ac:	d458      	bmi.n	8015a60 <__sflush_r+0xc0>
 80159ae:	684b      	ldr	r3, [r1, #4]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	dc05      	bgt.n	80159c0 <__sflush_r+0x20>
 80159b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	dc02      	bgt.n	80159c0 <__sflush_r+0x20>
 80159ba:	2000      	movs	r0, #0
 80159bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159c2:	2e00      	cmp	r6, #0
 80159c4:	d0f9      	beq.n	80159ba <__sflush_r+0x1a>
 80159c6:	2300      	movs	r3, #0
 80159c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159cc:	682f      	ldr	r7, [r5, #0]
 80159ce:	6a21      	ldr	r1, [r4, #32]
 80159d0:	602b      	str	r3, [r5, #0]
 80159d2:	d032      	beq.n	8015a3a <__sflush_r+0x9a>
 80159d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159d6:	89a3      	ldrh	r3, [r4, #12]
 80159d8:	075a      	lsls	r2, r3, #29
 80159da:	d505      	bpl.n	80159e8 <__sflush_r+0x48>
 80159dc:	6863      	ldr	r3, [r4, #4]
 80159de:	1ac0      	subs	r0, r0, r3
 80159e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159e2:	b10b      	cbz	r3, 80159e8 <__sflush_r+0x48>
 80159e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159e6:	1ac0      	subs	r0, r0, r3
 80159e8:	2300      	movs	r3, #0
 80159ea:	4602      	mov	r2, r0
 80159ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159ee:	6a21      	ldr	r1, [r4, #32]
 80159f0:	4628      	mov	r0, r5
 80159f2:	47b0      	blx	r6
 80159f4:	1c43      	adds	r3, r0, #1
 80159f6:	89a3      	ldrh	r3, [r4, #12]
 80159f8:	d106      	bne.n	8015a08 <__sflush_r+0x68>
 80159fa:	6829      	ldr	r1, [r5, #0]
 80159fc:	291d      	cmp	r1, #29
 80159fe:	d82b      	bhi.n	8015a58 <__sflush_r+0xb8>
 8015a00:	4a29      	ldr	r2, [pc, #164]	; (8015aa8 <__sflush_r+0x108>)
 8015a02:	410a      	asrs	r2, r1
 8015a04:	07d6      	lsls	r6, r2, #31
 8015a06:	d427      	bmi.n	8015a58 <__sflush_r+0xb8>
 8015a08:	2200      	movs	r2, #0
 8015a0a:	6062      	str	r2, [r4, #4]
 8015a0c:	04d9      	lsls	r1, r3, #19
 8015a0e:	6922      	ldr	r2, [r4, #16]
 8015a10:	6022      	str	r2, [r4, #0]
 8015a12:	d504      	bpl.n	8015a1e <__sflush_r+0x7e>
 8015a14:	1c42      	adds	r2, r0, #1
 8015a16:	d101      	bne.n	8015a1c <__sflush_r+0x7c>
 8015a18:	682b      	ldr	r3, [r5, #0]
 8015a1a:	b903      	cbnz	r3, 8015a1e <__sflush_r+0x7e>
 8015a1c:	6560      	str	r0, [r4, #84]	; 0x54
 8015a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a20:	602f      	str	r7, [r5, #0]
 8015a22:	2900      	cmp	r1, #0
 8015a24:	d0c9      	beq.n	80159ba <__sflush_r+0x1a>
 8015a26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a2a:	4299      	cmp	r1, r3
 8015a2c:	d002      	beq.n	8015a34 <__sflush_r+0x94>
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f7ff fbea 	bl	8015208 <_free_r>
 8015a34:	2000      	movs	r0, #0
 8015a36:	6360      	str	r0, [r4, #52]	; 0x34
 8015a38:	e7c0      	b.n	80159bc <__sflush_r+0x1c>
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	47b0      	blx	r6
 8015a40:	1c41      	adds	r1, r0, #1
 8015a42:	d1c8      	bne.n	80159d6 <__sflush_r+0x36>
 8015a44:	682b      	ldr	r3, [r5, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d0c5      	beq.n	80159d6 <__sflush_r+0x36>
 8015a4a:	2b1d      	cmp	r3, #29
 8015a4c:	d001      	beq.n	8015a52 <__sflush_r+0xb2>
 8015a4e:	2b16      	cmp	r3, #22
 8015a50:	d101      	bne.n	8015a56 <__sflush_r+0xb6>
 8015a52:	602f      	str	r7, [r5, #0]
 8015a54:	e7b1      	b.n	80159ba <__sflush_r+0x1a>
 8015a56:	89a3      	ldrh	r3, [r4, #12]
 8015a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a5c:	81a3      	strh	r3, [r4, #12]
 8015a5e:	e7ad      	b.n	80159bc <__sflush_r+0x1c>
 8015a60:	690f      	ldr	r7, [r1, #16]
 8015a62:	2f00      	cmp	r7, #0
 8015a64:	d0a9      	beq.n	80159ba <__sflush_r+0x1a>
 8015a66:	0793      	lsls	r3, r2, #30
 8015a68:	680e      	ldr	r6, [r1, #0]
 8015a6a:	bf08      	it	eq
 8015a6c:	694b      	ldreq	r3, [r1, #20]
 8015a6e:	600f      	str	r7, [r1, #0]
 8015a70:	bf18      	it	ne
 8015a72:	2300      	movne	r3, #0
 8015a74:	eba6 0807 	sub.w	r8, r6, r7
 8015a78:	608b      	str	r3, [r1, #8]
 8015a7a:	f1b8 0f00 	cmp.w	r8, #0
 8015a7e:	dd9c      	ble.n	80159ba <__sflush_r+0x1a>
 8015a80:	6a21      	ldr	r1, [r4, #32]
 8015a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a84:	4643      	mov	r3, r8
 8015a86:	463a      	mov	r2, r7
 8015a88:	4628      	mov	r0, r5
 8015a8a:	47b0      	blx	r6
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	dc06      	bgt.n	8015a9e <__sflush_r+0xfe>
 8015a90:	89a3      	ldrh	r3, [r4, #12]
 8015a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a96:	81a3      	strh	r3, [r4, #12]
 8015a98:	f04f 30ff 	mov.w	r0, #4294967295
 8015a9c:	e78e      	b.n	80159bc <__sflush_r+0x1c>
 8015a9e:	4407      	add	r7, r0
 8015aa0:	eba8 0800 	sub.w	r8, r8, r0
 8015aa4:	e7e9      	b.n	8015a7a <__sflush_r+0xda>
 8015aa6:	bf00      	nop
 8015aa8:	dfbffffe 	.word	0xdfbffffe

08015aac <_fflush_r>:
 8015aac:	b538      	push	{r3, r4, r5, lr}
 8015aae:	690b      	ldr	r3, [r1, #16]
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	460c      	mov	r4, r1
 8015ab4:	b913      	cbnz	r3, 8015abc <_fflush_r+0x10>
 8015ab6:	2500      	movs	r5, #0
 8015ab8:	4628      	mov	r0, r5
 8015aba:	bd38      	pop	{r3, r4, r5, pc}
 8015abc:	b118      	cbz	r0, 8015ac6 <_fflush_r+0x1a>
 8015abe:	6a03      	ldr	r3, [r0, #32]
 8015ac0:	b90b      	cbnz	r3, 8015ac6 <_fflush_r+0x1a>
 8015ac2:	f7ff f99b 	bl	8014dfc <__sinit>
 8015ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d0f3      	beq.n	8015ab6 <_fflush_r+0xa>
 8015ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ad0:	07d0      	lsls	r0, r2, #31
 8015ad2:	d404      	bmi.n	8015ade <_fflush_r+0x32>
 8015ad4:	0599      	lsls	r1, r3, #22
 8015ad6:	d402      	bmi.n	8015ade <_fflush_r+0x32>
 8015ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ada:	f7ff fb84 	bl	80151e6 <__retarget_lock_acquire_recursive>
 8015ade:	4628      	mov	r0, r5
 8015ae0:	4621      	mov	r1, r4
 8015ae2:	f7ff ff5d 	bl	80159a0 <__sflush_r>
 8015ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ae8:	07da      	lsls	r2, r3, #31
 8015aea:	4605      	mov	r5, r0
 8015aec:	d4e4      	bmi.n	8015ab8 <_fflush_r+0xc>
 8015aee:	89a3      	ldrh	r3, [r4, #12]
 8015af0:	059b      	lsls	r3, r3, #22
 8015af2:	d4e1      	bmi.n	8015ab8 <_fflush_r+0xc>
 8015af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015af6:	f7ff fb77 	bl	80151e8 <__retarget_lock_release_recursive>
 8015afa:	e7dd      	b.n	8015ab8 <_fflush_r+0xc>

08015afc <__swhatbuf_r>:
 8015afc:	b570      	push	{r4, r5, r6, lr}
 8015afe:	460c      	mov	r4, r1
 8015b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b04:	2900      	cmp	r1, #0
 8015b06:	b096      	sub	sp, #88	; 0x58
 8015b08:	4615      	mov	r5, r2
 8015b0a:	461e      	mov	r6, r3
 8015b0c:	da0d      	bge.n	8015b2a <__swhatbuf_r+0x2e>
 8015b0e:	89a3      	ldrh	r3, [r4, #12]
 8015b10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015b14:	f04f 0100 	mov.w	r1, #0
 8015b18:	bf0c      	ite	eq
 8015b1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015b1e:	2340      	movne	r3, #64	; 0x40
 8015b20:	2000      	movs	r0, #0
 8015b22:	6031      	str	r1, [r6, #0]
 8015b24:	602b      	str	r3, [r5, #0]
 8015b26:	b016      	add	sp, #88	; 0x58
 8015b28:	bd70      	pop	{r4, r5, r6, pc}
 8015b2a:	466a      	mov	r2, sp
 8015b2c:	f000 f848 	bl	8015bc0 <_fstat_r>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	dbec      	blt.n	8015b0e <__swhatbuf_r+0x12>
 8015b34:	9901      	ldr	r1, [sp, #4]
 8015b36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015b3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015b3e:	4259      	negs	r1, r3
 8015b40:	4159      	adcs	r1, r3
 8015b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b46:	e7eb      	b.n	8015b20 <__swhatbuf_r+0x24>

08015b48 <__smakebuf_r>:
 8015b48:	898b      	ldrh	r3, [r1, #12]
 8015b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b4c:	079d      	lsls	r5, r3, #30
 8015b4e:	4606      	mov	r6, r0
 8015b50:	460c      	mov	r4, r1
 8015b52:	d507      	bpl.n	8015b64 <__smakebuf_r+0x1c>
 8015b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b58:	6023      	str	r3, [r4, #0]
 8015b5a:	6123      	str	r3, [r4, #16]
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	6163      	str	r3, [r4, #20]
 8015b60:	b002      	add	sp, #8
 8015b62:	bd70      	pop	{r4, r5, r6, pc}
 8015b64:	ab01      	add	r3, sp, #4
 8015b66:	466a      	mov	r2, sp
 8015b68:	f7ff ffc8 	bl	8015afc <__swhatbuf_r>
 8015b6c:	9900      	ldr	r1, [sp, #0]
 8015b6e:	4605      	mov	r5, r0
 8015b70:	4630      	mov	r0, r6
 8015b72:	f7ff fbb5 	bl	80152e0 <_malloc_r>
 8015b76:	b948      	cbnz	r0, 8015b8c <__smakebuf_r+0x44>
 8015b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b7c:	059a      	lsls	r2, r3, #22
 8015b7e:	d4ef      	bmi.n	8015b60 <__smakebuf_r+0x18>
 8015b80:	f023 0303 	bic.w	r3, r3, #3
 8015b84:	f043 0302 	orr.w	r3, r3, #2
 8015b88:	81a3      	strh	r3, [r4, #12]
 8015b8a:	e7e3      	b.n	8015b54 <__smakebuf_r+0xc>
 8015b8c:	89a3      	ldrh	r3, [r4, #12]
 8015b8e:	6020      	str	r0, [r4, #0]
 8015b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b94:	81a3      	strh	r3, [r4, #12]
 8015b96:	9b00      	ldr	r3, [sp, #0]
 8015b98:	6163      	str	r3, [r4, #20]
 8015b9a:	9b01      	ldr	r3, [sp, #4]
 8015b9c:	6120      	str	r0, [r4, #16]
 8015b9e:	b15b      	cbz	r3, 8015bb8 <__smakebuf_r+0x70>
 8015ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ba4:	4630      	mov	r0, r6
 8015ba6:	f000 f81d 	bl	8015be4 <_isatty_r>
 8015baa:	b128      	cbz	r0, 8015bb8 <__smakebuf_r+0x70>
 8015bac:	89a3      	ldrh	r3, [r4, #12]
 8015bae:	f023 0303 	bic.w	r3, r3, #3
 8015bb2:	f043 0301 	orr.w	r3, r3, #1
 8015bb6:	81a3      	strh	r3, [r4, #12]
 8015bb8:	89a3      	ldrh	r3, [r4, #12]
 8015bba:	431d      	orrs	r5, r3
 8015bbc:	81a5      	strh	r5, [r4, #12]
 8015bbe:	e7cf      	b.n	8015b60 <__smakebuf_r+0x18>

08015bc0 <_fstat_r>:
 8015bc0:	b538      	push	{r3, r4, r5, lr}
 8015bc2:	4d07      	ldr	r5, [pc, #28]	; (8015be0 <_fstat_r+0x20>)
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	4608      	mov	r0, r1
 8015bca:	4611      	mov	r1, r2
 8015bcc:	602b      	str	r3, [r5, #0]
 8015bce:	f7eb f974 	bl	8000eba <_fstat>
 8015bd2:	1c43      	adds	r3, r0, #1
 8015bd4:	d102      	bne.n	8015bdc <_fstat_r+0x1c>
 8015bd6:	682b      	ldr	r3, [r5, #0]
 8015bd8:	b103      	cbz	r3, 8015bdc <_fstat_r+0x1c>
 8015bda:	6023      	str	r3, [r4, #0]
 8015bdc:	bd38      	pop	{r3, r4, r5, pc}
 8015bde:	bf00      	nop
 8015be0:	2000f7e8 	.word	0x2000f7e8

08015be4 <_isatty_r>:
 8015be4:	b538      	push	{r3, r4, r5, lr}
 8015be6:	4d06      	ldr	r5, [pc, #24]	; (8015c00 <_isatty_r+0x1c>)
 8015be8:	2300      	movs	r3, #0
 8015bea:	4604      	mov	r4, r0
 8015bec:	4608      	mov	r0, r1
 8015bee:	602b      	str	r3, [r5, #0]
 8015bf0:	f7eb f973 	bl	8000eda <_isatty>
 8015bf4:	1c43      	adds	r3, r0, #1
 8015bf6:	d102      	bne.n	8015bfe <_isatty_r+0x1a>
 8015bf8:	682b      	ldr	r3, [r5, #0]
 8015bfa:	b103      	cbz	r3, 8015bfe <_isatty_r+0x1a>
 8015bfc:	6023      	str	r3, [r4, #0]
 8015bfe:	bd38      	pop	{r3, r4, r5, pc}
 8015c00:	2000f7e8 	.word	0x2000f7e8

08015c04 <_sbrk_r>:
 8015c04:	b538      	push	{r3, r4, r5, lr}
 8015c06:	4d06      	ldr	r5, [pc, #24]	; (8015c20 <_sbrk_r+0x1c>)
 8015c08:	2300      	movs	r3, #0
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	4608      	mov	r0, r1
 8015c0e:	602b      	str	r3, [r5, #0]
 8015c10:	f7eb f97c 	bl	8000f0c <_sbrk>
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	d102      	bne.n	8015c1e <_sbrk_r+0x1a>
 8015c18:	682b      	ldr	r3, [r5, #0]
 8015c1a:	b103      	cbz	r3, 8015c1e <_sbrk_r+0x1a>
 8015c1c:	6023      	str	r3, [r4, #0]
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}
 8015c20:	2000f7e8 	.word	0x2000f7e8

08015c24 <_init>:
 8015c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c26:	bf00      	nop
 8015c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c2a:	bc08      	pop	{r3}
 8015c2c:	469e      	mov	lr, r3
 8015c2e:	4770      	bx	lr

08015c30 <_fini>:
 8015c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c32:	bf00      	nop
 8015c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c36:	bc08      	pop	{r3}
 8015c38:	469e      	mov	lr, r3
 8015c3a:	4770      	bx	lr
