
Tx_MPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     000000a6  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  080200a8  08021ad3  00011ad3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  080200a8  08021ad3  00011ad3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  080200a8  080200a8  000100a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000030  08021a38  08021a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  080200a8  08021ad3  00011ad3  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  080200a8  080200a8  00011ad3  2**0
                  CONTENTS
  7 .hash         00000000  080200a8  08021ad3  00011ad3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         00001990  080200a8  080200a8  000100a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       0000006b  08021a68  08021a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  20020030  20020030  00011ad3  2**0
                  CONTENTS
 11 .data_run     00000000  20020030  20020030  00011ad3  2**0
                  CONTENTS
 12 .bss          000023c8  20020030  20020030  00020030  2**4
                  ALLOC
 13 .heap         00000040  200223f8  200223f8  00020030  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  00011ad3  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00011b09  2**0
                  CONTENTS, READONLY
 16 .debug_line   00028702  00000000  00000000  00011b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000076  00000000  00000000  0003a24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0001c56d  00000000  00000000  0003a2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005a7c  00000000  00000000  00056831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00000ca0  00000000  00000000  0005c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00013dc0  00000000  00000000  0005cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0000c6a1  00000000  00000000  00070d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00001634  00000000  00000000  0007d3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000ba9 	.word	0x00000ba9
 802001c:	0000017d 	.word	0x0000017d
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	00000a0d 	.word	0x00000a0d
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001ad3 	.word	0x00001ad3
 802003c:	00002438 	.word	0x00002438
	...
 8020080:	00002541 	.word	0x00002541
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	0000001b 	.word	0x0000001b
 8020090:	4d2d3805 	.word	0x4d2d3805
 8020094:	49414d2e 	.word	0x49414d2e
 8020098:	1106004e 	.word	0x1106004e
 802009c:	03094d07 	.word	0x03094d07
 80200a0:	011b080a 	.word	0x011b080a
 80200a4:	012e      	.short	0x012e

Disassembly of section .text:

080200a8 <__text_start__>:
	...

080200b0 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 80200b0:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 80200b4:	4b2e      	ldr	r3, [pc, #184]	; (8020170 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 80200b6:	4c2f      	ldr	r4, [pc, #188]	; (8020174 <memory_set_done+0x6>)
    mov     r5,r0
 80200b8:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 80200ba:	482f      	ldr	r0, [pc, #188]	; (8020178 <memory_set_done+0xa>)
    sub     r0,r0,r3
 80200bc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 80200c0:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 80200c2:	492e      	ldr	r1, [pc, #184]	; (802017c <memory_set_done+0xe>)
    sub     r1,r1, r4
 80200c4:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 80200c8:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 80200ca:	4a2d      	ldr	r2, [pc, #180]	; (8020180 <memory_set_done+0x12>)
    sub     r2,r2,r4
 80200cc:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 80200d0:	444a      	add	r2, r9

080200d2 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 80200d2:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 80200d4:	d011      	beq.n	80200fa <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 80200d6:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 80200d8:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 80200da:	d008      	beq.n	80200ee <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 80200dc:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 80200de:	db03      	blt.n	80200e8 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 80200e0:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 80200e4:	444e      	add	r6, r9
    b       address_built   // Finished building address
 80200e6:	e002      	b.n	80200ee <address_built>

080200e8 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 80200e8:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 80200ec:	442e      	add	r6, r5

080200ee <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 80200ee:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 80200f0:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 80200f4:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 80200f8:	e7eb      	b.n	80200d2 <new_got_setup>

080200fa <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 80200fa:	4822      	ldr	r0, [pc, #136]	; (8020184 <memory_set_done+0x16>)
    sub     r0,r0,r3
 80200fc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8020100:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8020102:	4921      	ldr	r1, [pc, #132]	; (8020188 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8020104:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020108:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802010a:	4a20      	ldr	r2, [pc, #128]	; (802018c <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802010c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8020110:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8020112:	f000 f815 	bl	8020140 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8020116:	481e      	ldr	r0, [pc, #120]	; (8020190 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8020118:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802011c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802011e:	491d      	ldr	r1, [pc, #116]	; (8020194 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8020120:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020124:	4449      	add	r1, r9
    mov     r2, #0
 8020126:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802012a:	f000 f81a 	bl	8020162 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802012e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 8020132:	4770      	bx	lr
 8020134:	f3af 8000 	nop.w
 8020138:	f3af 8000 	nop.w
 802013c:	f3af 8000 	nop.w

08020140 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 8020140:	4288      	cmp	r0, r1
    beq     memory_copy_done
 8020142:	d00d      	beq.n	8020160 <memory_copy_done>
    cmp     r2, r1
 8020144:	428a      	cmp	r2, r1
    beq     memory_copy_done
 8020146:	d00b      	beq.n	8020160 <memory_copy_done>
    sub     r2, r2, r1
 8020148:	eba2 0201 	sub.w	r2, r2, r1

0802014c <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 802014c:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 802014e:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 8020152:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 8020154:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 8020158:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 802015c:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 802015e:	d1f5      	bne.n	802014c <memory_copy_loop>

08020160 <memory_copy_done>:
memory_copy_done:
    bx      lr
 8020160:	4770      	bx	lr

08020162 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 8020162:	4288      	cmp	r0, r1
    beq     memory_set_done
 8020164:	d003      	beq.n	802016e <memory_set_done>
    strb    r2, [r0]
 8020166:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 8020168:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 802016c:	e7f9      	b.n	8020162 <crt0_memory_set>

0802016e <memory_set_done>:
memory_set_done:
    bx      lr
 802016e:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 8020170:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 8020174:	20020000 	.word	0x20020000
    ldr     r0, =__got_load_start__
 8020178:	08021a38 	.word	0x08021a38
    ldr     r1, =__new_got_start__
 802017c:	20020000 	.word	0x20020000
    ldr     r2, =__new_got_end__
 8020180:	20020030 	.word	0x20020030
    ldr     r0, =__data_load_start__
 8020184:	08021ad4 	.word	0x08021ad4
    ldr     r1, =__data_start__
 8020188:	20020030 	.word	0x20020030
    ldr     r2, =__data_end__
 802018c:	20020030 	.word	0x20020030
    ldr     r0, =__bss_start__
 8020190:	20020030 	.word	0x20020030
    ldr     r1, =__bss_end__
 8020194:	200223f8 	.word	0x200223f8

08020198 <default_module_start>:
  * @brief  Module entry function.
  * @param  id : Module ID
  * @retval None
  */
void    default_module_start(ULONG id)
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b08c      	sub	sp, #48	; 0x30
 802019c:	af08      	add	r7, sp, #32
 802019e:	6078      	str	r0, [r7, #4]
  CHAR    *pointer;
  
  /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
  their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
  the control block(s).  */
  txm_module_object_allocate((void*)&MainThread, sizeof(TX_THREAD));
 80201a0:	21e8      	movs	r1, #232	; 0xe8
 80201a2:	4b3a      	ldr	r3, [pc, #232]	; (802028c <default_module_start+0xf4>)
 80201a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80201a8:	4618      	mov	r0, r3
 80201aa:	f000 fca7 	bl	8020afc <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBytePool, sizeof(TX_BYTE_POOL));
 80201ae:	2134      	movs	r1, #52	; 0x34
 80201b0:	4b37      	ldr	r3, [pc, #220]	; (8020290 <default_module_start+0xf8>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	4618      	mov	r0, r3
 80201b8:	f000 fca0 	bl	8020afc <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBlockPool, sizeof(TX_BLOCK_POOL));
 80201bc:	2130      	movs	r1, #48	; 0x30
 80201be:	4b35      	ldr	r3, [pc, #212]	; (8020294 <default_module_start+0xfc>)
 80201c0:	f859 3003 	ldr.w	r3, [r9, r3]
 80201c4:	4618      	mov	r0, r3
 80201c6:	f000 fc99 	bl	8020afc <_txm_module_object_allocate>
  
  /* Create a byte memory pool from which to allocate the thread stacks.  */
  tx_byte_pool_create(ModuleBytePool, "Module Byte Pool", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80201ca:	4b31      	ldr	r3, [pc, #196]	; (8020290 <default_module_start+0xf8>)
 80201cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80201d0:	6818      	ldr	r0, [r3, #0]
 80201d2:	2334      	movs	r3, #52	; 0x34
 80201d4:	9300      	str	r3, [sp, #0]
 80201d6:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80201da:	4a2f      	ldr	r2, [pc, #188]	; (8020298 <default_module_start+0x100>)
 80201dc:	f859 2002 	ldr.w	r2, [r9, r2]
 80201e0:	492e      	ldr	r1, [pc, #184]	; (802029c <default_module_start+0x104>)
 80201e2:	4479      	add	r1, pc
 80201e4:	f000 fa62 	bl	80206ac <_txe_byte_pool_create>
  
  /* Allocate the stack for thread 0.  */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80201e8:	4b29      	ldr	r3, [pc, #164]	; (8020290 <default_module_start+0xf8>)
 80201ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80201ee:	6818      	ldr	r0, [r3, #0]
 80201f0:	f107 010c 	add.w	r1, r7, #12
 80201f4:	2300      	movs	r3, #0
 80201f6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80201fa:	f000 fa39 	bl	8020670 <_txe_byte_allocate>
  
  /* Create the main thread.  */
  tx_thread_create(MainThread, "Module Main Thread", MainThread_Entry, 0,
 80201fe:	4b23      	ldr	r3, [pc, #140]	; (802028c <default_module_start+0xf4>)
 8020200:	f859 3003 	ldr.w	r3, [r9, r3]
 8020204:	6818      	ldr	r0, [r3, #0]
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	22e8      	movs	r2, #232	; 0xe8
 802020a:	9206      	str	r2, [sp, #24]
 802020c:	2201      	movs	r2, #1
 802020e:	9205      	str	r2, [sp, #20]
 8020210:	2200      	movs	r2, #0
 8020212:	9204      	str	r2, [sp, #16]
 8020214:	2202      	movs	r2, #2
 8020216:	9203      	str	r2, [sp, #12]
 8020218:	2202      	movs	r2, #2
 802021a:	9202      	str	r2, [sp, #8]
 802021c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020220:	9201      	str	r2, [sp, #4]
 8020222:	9300      	str	r3, [sp, #0]
 8020224:	2300      	movs	r3, #0
 8020226:	4a1e      	ldr	r2, [pc, #120]	; (80202a0 <default_module_start+0x108>)
 8020228:	f859 2002 	ldr.w	r2, [r9, r2]
 802022c:	491d      	ldr	r1, [pc, #116]	; (80202a4 <default_module_start+0x10c>)
 802022e:	4479      	add	r1, pc
 8020230:	f001 f834 	bl	802129c <_txe_thread_create>
                   pointer, DEFAULT_STACK_SIZE,
                   MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);
  
  /* Allocate the memory for a small block pool. */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer,
 8020234:	4b16      	ldr	r3, [pc, #88]	; (8020290 <default_module_start+0xf8>)
 8020236:	f859 3003 	ldr.w	r3, [r9, r3]
 802023a:	6818      	ldr	r0, [r3, #0]
 802023c:	f107 010c 	add.w	r1, r7, #12
 8020240:	2300      	movs	r3, #0
 8020242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020246:	f000 fa13 	bl	8020670 <_txe_byte_allocate>
                   DEFAULT_BLOCK_POOL_SIZE, TX_NO_WAIT);
  
  /* Create a block memory pool. */
  tx_block_pool_create(ModuleBlockPool, "Module Block Pool",
 802024a:	4b12      	ldr	r3, [pc, #72]	; (8020294 <default_module_start+0xfc>)
 802024c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020250:	6818      	ldr	r0, [r3, #0]
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	2230      	movs	r2, #48	; 0x30
 8020256:	9201      	str	r2, [sp, #4]
 8020258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802025c:	9200      	str	r2, [sp, #0]
 802025e:	2204      	movs	r2, #4
 8020260:	4911      	ldr	r1, [pc, #68]	; (80202a8 <default_module_start+0x110>)
 8020262:	4479      	add	r1, pc
 8020264:	f000 f93e 	bl	80204e4 <_txe_block_pool_create>
                       sizeof(ULONG), pointer, DEFAULT_BLOCK_POOL_SIZE);
  
  /* Allocate a block. */
  tx_block_allocate(ModuleBlockPool, (VOID **) &pointer,
 8020268:	4b0a      	ldr	r3, [pc, #40]	; (8020294 <default_module_start+0xfc>)
 802026a:	f859 3003 	ldr.w	r3, [r9, r3]
 802026e:	681b      	ldr	r3, [r3, #0]
 8020270:	f107 010c 	add.w	r1, r7, #12
 8020274:	2200      	movs	r2, #0
 8020276:	4618      	mov	r0, r3
 8020278:	f000 f91c 	bl	80204b4 <_txe_block_allocate>
                    TX_NO_WAIT);
  
  /* Release the block back to the pool. */
  tx_block_release(pointer);
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	4618      	mov	r0, r3
 8020280:	f000 f9e0 	bl	8020644 <_txe_block_release>
  
}
 8020284:	bf00      	nop
 8020286:	3710      	adds	r7, #16
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}
 802028c:	00000020 	.word	0x00000020
 8020290:	0000000c 	.word	0x0000000c
 8020294:	0000001c 	.word	0x0000001c
 8020298:	00000014 	.word	0x00000014
 802029c:	00001882 	.word	0x00001882
 80202a0:	00000018 	.word	0x00000018
 80202a4:	0000184a 	.word	0x0000184a
 80202a8:	0000182a 	.word	0x0000182a

080202ac <MainThread_Entry>:
  * @brief  Module main thread.
  * @param  thread_input: thread id
  * @retval none
  */
void MainThread_Entry(ULONG thread_input)
{
 80202ac:	b580      	push	{r7, lr}
 80202ae:	b090      	sub	sp, #64	; 0x40
 80202b0:	af04      	add	r7, sp, #16
 80202b2:	6078      	str	r0, [r7, #4]
//  ULONG *mpu_pointer = 0xe000ed94;
//  ULONG mpu_value = *mpu_pointer;

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 80202b4:	f107 0314 	add.w	r3, r7, #20
 80202b8:	2134      	movs	r1, #52	; 0x34
 80202ba:	4618      	mov	r0, r3
 80202bc:	f000 fc1e 	bl	8020afc <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 80202c0:	6978      	ldr	r0, [r7, #20]
 80202c2:	2334      	movs	r3, #52	; 0x34
 80202c4:	9303      	str	r3, [sp, #12]
 80202c6:	2300      	movs	r3, #0
 80202c8:	9302      	str	r3, [sp, #8]
 80202ca:	4b67      	ldr	r3, [pc, #412]	; (8020468 <MainThread_Entry+0x1bc>)
 80202cc:	9301      	str	r3, [sp, #4]
 80202ce:	4b66      	ldr	r3, [pc, #408]	; (8020468 <MainThread_Entry+0x1bc>)
 80202d0:	9300      	str	r3, [sp, #0]
 80202d2:	4b65      	ldr	r3, [pc, #404]	; (8020468 <MainThread_Entry+0x1bc>)
 80202d4:	4a68      	ldr	r2, [pc, #416]	; (8020478 <MainThread_Entry+0x1cc>)
 80202d6:	f859 2002 	ldr.w	r2, [r9, r2]
 80202da:	4968      	ldr	r1, [pc, #416]	; (802047c <MainThread_Entry+0x1d0>)
 80202dc:	4479      	add	r1, pc
 80202de:	f001 fa29 	bl	8021734 <_txe_timer_create>
//  ForgedQueue = (ULONG) MaliciousTimer + 100;
//  tx_thread_time_slice_change(ForgedQueue, 0xe000ed64, &time_slice);
//  tx_queue_delete(MaliciousQueue);

  TX_QUEUE *MaliciousQueue;
  txm_module_object_allocate((void*)&MaliciousQueue, sizeof(TX_QUEUE));
 80202e2:	f107 0310 	add.w	r3, r7, #16
 80202e6:	2144      	movs	r1, #68	; 0x44
 80202e8:	4618      	mov	r0, r3
 80202ea:	f000 fc07 	bl	8020afc <_txm_module_object_allocate>
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, 16 * sizeof(ULONG), TX_NO_WAIT);
 80202ee:	4b64      	ldr	r3, [pc, #400]	; (8020480 <MainThread_Entry+0x1d4>)
 80202f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80202f4:	6818      	ldr	r0, [r3, #0]
 80202f6:	f107 0118 	add.w	r1, r7, #24
 80202fa:	2300      	movs	r3, #0
 80202fc:	2240      	movs	r2, #64	; 0x40
 80202fe:	f000 f9b7 	bl	8020670 <_txe_byte_allocate>
  tx_queue_create(MaliciousQueue, "Malicious Queue",TX_1_ULONG, pointer, 16 * sizeof(ULONG));
 8020302:	6938      	ldr	r0, [r7, #16]
 8020304:	69bb      	ldr	r3, [r7, #24]
 8020306:	2244      	movs	r2, #68	; 0x44
 8020308:	9201      	str	r2, [sp, #4]
 802030a:	2240      	movs	r2, #64	; 0x40
 802030c:	9200      	str	r2, [sp, #0]
 802030e:	2201      	movs	r2, #1
 8020310:	495c      	ldr	r1, [pc, #368]	; (8020484 <MainThread_Entry+0x1d8>)
 8020312:	4479      	add	r1, pc
 8020314:	f000 fd94 	bl	8020e40 <_txe_queue_create>

  ULONG time_slice;
  TX_THREAD *ForgedQueue;
  // write queue_write
  ForgedQueue = (ULONG) MaliciousTimer + 8;
 8020318:	697b      	ldr	r3, [r7, #20]
 802031a:	3308      	adds	r3, #8
 802031c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedQueue, 0x54485244, &time_slice);
 802031e:	f107 030c 	add.w	r3, r7, #12
 8020322:	461a      	mov	r2, r3
 8020324:	4950      	ldr	r1, [pc, #320]	; (8020468 <MainThread_Entry+0x1bc>)
 8020326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020328:	f001 f980 	bl	802162c <_txe_thread_time_slice_change>
  ForgedQueue = (ULONG) MaliciousTimer + 32;
 802032c:	697b      	ldr	r3, [r7, #20]
 802032e:	3320      	adds	r3, #32
 8020330:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedQueue, 0x54485244, &time_slice);
 8020332:	f107 030c 	add.w	r3, r7, #12
 8020336:	461a      	mov	r2, r3
 8020338:	494b      	ldr	r1, [pc, #300]	; (8020468 <MainThread_Entry+0x1bc>)
 802033a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802033c:	f001 f976 	bl	802162c <_txe_thread_time_slice_change>
  ForgedQueue = (ULONG) MaliciousTimer + 56;
 8020340:	697b      	ldr	r3, [r7, #20]
 8020342:	3338      	adds	r3, #56	; 0x38
 8020344:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedQueue, 0x54485244, &time_slice);
 8020346:	f107 030c 	add.w	r3, r7, #12
 802034a:	461a      	mov	r2, r3
 802034c:	4946      	ldr	r1, [pc, #280]	; (8020468 <MainThread_Entry+0x1bc>)
 802034e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020350:	f001 f96c 	bl	802162c <_txe_thread_time_slice_change>
  ForgedQueue = (ULONG) MaliciousTimer + 84;
 8020354:	697b      	ldr	r3, [r7, #20]
 8020356:	3354      	adds	r3, #84	; 0x54
 8020358:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedQueue, 0xe000ed94, &time_slice);
 802035a:	f107 030c 	add.w	r3, r7, #12
 802035e:	461a      	mov	r2, r3
 8020360:	4942      	ldr	r1, [pc, #264]	; (802046c <MainThread_Entry+0x1c0>)
 8020362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020364:	f001 f962 	bl	802162c <_txe_thread_time_slice_change>
  // write queue_message_size
  ForgedQueue = (ULONG) MaliciousTimer + 56;
 8020368:	697b      	ldr	r3, [r7, #20]
 802036a:	3338      	adds	r3, #56	; 0x38
 802036c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedQueue, 0x4, &time_slice);
 802036e:	f107 030c 	add.w	r3, r7, #12
 8020372:	461a      	mov	r2, r3
 8020374:	2104      	movs	r1, #4
 8020376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020378:	f001 f958 	bl	802162c <_txe_thread_time_slice_change>


  ULONG value = 0;
 802037c:	2300      	movs	r3, #0
 802037e:	60bb      	str	r3, [r7, #8]
  // dereference queue_write in queue object
  tx_queue_send(MaliciousQueue, &value, 0);
 8020380:	693b      	ldr	r3, [r7, #16]
 8020382:	f107 0108 	add.w	r1, r7, #8
 8020386:	2200      	movs	r2, #0
 8020388:	4618      	mov	r0, r3
 802038a:	f000 fe57 	bl	802103c <_txe_queue_send>

  // read from privileged kernel memory
  ULONG privileged_read_test = MaliciousTimer->tx_timer_id;
 802038e:	697b      	ldr	r3, [r7, #20]
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Request access to the queue from the module manager */
  status = txm_module_object_pointer_get(TXM_QUEUE_OBJECT, "Resident Queue", (VOID **)&ResidentQueue);
 8020394:	4b3c      	ldr	r3, [pc, #240]	; (8020488 <MainThread_Entry+0x1dc>)
 8020396:	f859 3003 	ldr.w	r3, [r9, r3]
 802039a:	461a      	mov	r2, r3
 802039c:	4b3b      	ldr	r3, [pc, #236]	; (802048c <MainThread_Entry+0x1e0>)
 802039e:	447b      	add	r3, pc
 80203a0:	4619      	mov	r1, r3
 80203a2:	2005      	movs	r0, #5
 80203a4:	f000 fbd6 	bl	8020b54 <_txm_module_object_pointer_get>
 80203a8:	6278      	str	r0, [r7, #36]	; 0x24

  if(status)
 80203aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	d001      	beq.n	80203b4 <MainThread_Entry+0x108>
  {
    Error_Handler();
 80203b0:	f000 f86e 	bl	8020490 <Error_Handler>
  }

  /* Writing to write and read region */
  s_msg = WRITING_TO_READWRITE;
 80203b4:	2358      	movs	r3, #88	; 0x58
 80203b6:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203b8:	4b33      	ldr	r3, [pc, #204]	; (8020488 <MainThread_Entry+0x1dc>)
 80203ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	f107 011c 	add.w	r1, r7, #28
 80203c4:	2200      	movs	r2, #0
 80203c6:	4618      	mov	r0, r3
 80203c8:	f000 fe38 	bl	802103c <_txe_queue_send>
  *(ULONG *)READWRITE_REGION = 0xABABABAB;
 80203cc:	4b28      	ldr	r3, [pc, #160]	; (8020470 <MainThread_Entry+0x1c4>)
 80203ce:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 80203d2:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 80203d4:	200a      	movs	r0, #10
 80203d6:	f001 f8d1 	bl	802157c <_tx_thread_sleep>

  /* WReading from write and read region */
  s_msg = READING_FROM_READWRITE;
 80203da:	2342      	movs	r3, #66	; 0x42
 80203dc:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203de:	4b2a      	ldr	r3, [pc, #168]	; (8020488 <MainThread_Entry+0x1dc>)
 80203e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	f107 011c 	add.w	r1, r7, #28
 80203ea:	2200      	movs	r2, #0
 80203ec:	4618      	mov	r0, r3
 80203ee:	f000 fe25 	bl	802103c <_txe_queue_send>
  readbuffer = *(ULONG*)READWRITE_REGION;
 80203f2:	4b1f      	ldr	r3, [pc, #124]	; (8020470 <MainThread_Entry+0x1c4>)
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	623b      	str	r3, [r7, #32]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 80203f8:	200a      	movs	r0, #10
 80203fa:	f001 f8bf 	bl	802157c <_tx_thread_sleep>

  /* Reading from read only region */
  s_msg = READING_FROM_READONLY;
 80203fe:	2337      	movs	r3, #55	; 0x37
 8020400:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020402:	4b21      	ldr	r3, [pc, #132]	; (8020488 <MainThread_Entry+0x1dc>)
 8020404:	f859 3003 	ldr.w	r3, [r9, r3]
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	f107 011c 	add.w	r1, r7, #28
 802040e:	2200      	movs	r2, #0
 8020410:	4618      	mov	r0, r3
 8020412:	f000 fe13 	bl	802103c <_txe_queue_send>
  readbuffer = *(ULONG*)READONLY_REGION;
 8020416:	4b17      	ldr	r3, [pc, #92]	; (8020474 <MainThread_Entry+0x1c8>)
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	623b      	str	r3, [r7, #32]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 802041c:	200a      	movs	r0, #10
 802041e:	f001 f8ad 	bl	802157c <_tx_thread_sleep>

  /* Writing to read only region */
  s_msg = WRITING_TO_READONLY;
 8020422:	234d      	movs	r3, #77	; 0x4d
 8020424:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020426:	4b18      	ldr	r3, [pc, #96]	; (8020488 <MainThread_Entry+0x1dc>)
 8020428:	f859 3003 	ldr.w	r3, [r9, r3]
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	f107 011c 	add.w	r1, r7, #28
 8020432:	2200      	movs	r2, #0
 8020434:	4618      	mov	r0, r3
 8020436:	f000 fe01 	bl	802103c <_txe_queue_send>
  *(ULONG *)READONLY_REGION = 0xABABABAB;
 802043a:	4b0e      	ldr	r3, [pc, #56]	; (8020474 <MainThread_Entry+0x1c8>)
 802043c:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 8020440:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020442:	200a      	movs	r0, #10
 8020444:	f001 f89a 	bl	802157c <_tx_thread_sleep>

  /* Notify module manager about job finish */
  s_msg = PROCESSING_FINISHED;
 8020448:	232c      	movs	r3, #44	; 0x2c
 802044a:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 802044c:	4b0e      	ldr	r3, [pc, #56]	; (8020488 <MainThread_Entry+0x1dc>)
 802044e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	f107 011c 	add.w	r1, r7, #28
 8020458:	2200      	movs	r2, #0
 802045a:	4618      	mov	r0, r3
 802045c:	f000 fdee 	bl	802103c <_txe_queue_send>
  UNUSED(readbuffer);

  /* Stay here, waiting for the module manager to stop and loading the module*/
  while(1)
  {
    tx_thread_sleep(10);
 8020460:	200a      	movs	r0, #10
 8020462:	f001 f88b 	bl	802157c <_tx_thread_sleep>
 8020466:	e7fb      	b.n	8020460 <MainThread_Entry+0x1b4>
 8020468:	54485244 	.word	0x54485244
 802046c:	e000ed94 	.word	0xe000ed94
 8020470:	20010100 	.word	0x20010100
 8020474:	20010000 	.word	0x20010000
 8020478:	00000000 	.word	0x00000000
 802047c:	000017c4 	.word	0x000017c4
 8020480:	0000000c 	.word	0x0000000c
 8020484:	0000179e 	.word	0x0000179e
 8020488:	00000008 	.word	0x00000008
 802048c:	00001722 	.word	0x00001722

08020490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020490:	b580      	push	{r7, lr}
 8020492:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 8020494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020498:	f001 f870 	bl	802157c <_tx_thread_sleep>
}
 802049c:	bf00      	nop
 802049e:	bd80      	pop	{r7, pc}

080204a0 <MaliciousTimerFunction>:

void MaliciousTimerFunction(ULONG input)
{
 80204a0:	b480      	push	{r7}
 80204a2:	b083      	sub	sp, #12
 80204a4:	af00      	add	r7, sp, #0
 80204a6:	6078      	str	r0, [r7, #4]

}
 80204a8:	bf00      	nop
 80204aa:	370c      	adds	r7, #12
 80204ac:	46bd      	mov	sp, r7
 80204ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b2:	4770      	bx	lr

080204b4 <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 80204b4:	b590      	push	{r4, r7, lr}
 80204b6:	b087      	sub	sp, #28
 80204b8:	af00      	add	r7, sp, #0
 80204ba:	60f8      	str	r0, [r7, #12]
 80204bc:	60b9      	str	r1, [r7, #8]
 80204be:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 80204c0:	4b07      	ldr	r3, [pc, #28]	; (80204e0 <_txe_block_allocate+0x2c>)
 80204c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80204c6:	681c      	ldr	r4, [r3, #0]
 80204c8:	68f9      	ldr	r1, [r7, #12]
 80204ca:	68ba      	ldr	r2, [r7, #8]
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	2001      	movs	r0, #1
 80204d0:	47a0      	blx	r4
 80204d2:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80204d4:	697b      	ldr	r3, [r7, #20]
}
 80204d6:	4618      	mov	r0, r3
 80204d8:	371c      	adds	r7, #28
 80204da:	46bd      	mov	sp, r7
 80204dc:	bd90      	pop	{r4, r7, pc}
 80204de:	bf00      	nop
 80204e0:	00000004 	.word	0x00000004

080204e4 <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80204e4:	b590      	push	{r4, r7, lr}
 80204e6:	b08b      	sub	sp, #44	; 0x2c
 80204e8:	af00      	add	r7, sp, #0
 80204ea:	60f8      	str	r0, [r7, #12]
 80204ec:	60b9      	str	r1, [r7, #8]
 80204ee:	607a      	str	r2, [r7, #4]
 80204f0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 80204f6:	683b      	ldr	r3, [r7, #0]
 80204f8:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 80204fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80204fc:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 80204fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020500:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020502:	4b08      	ldr	r3, [pc, #32]	; (8020524 <_txe_block_pool_create+0x40>)
 8020504:	f859 3003 	ldr.w	r3, [r9, r3]
 8020508:	681c      	ldr	r4, [r3, #0]
 802050a:	68f9      	ldr	r1, [r7, #12]
 802050c:	68ba      	ldr	r2, [r7, #8]
 802050e:	f107 0314 	add.w	r3, r7, #20
 8020512:	2002      	movs	r0, #2
 8020514:	47a0      	blx	r4
 8020516:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802051a:	4618      	mov	r0, r3
 802051c:	372c      	adds	r7, #44	; 0x2c
 802051e:	46bd      	mov	sp, r7
 8020520:	bd90      	pop	{r4, r7, pc}
 8020522:	bf00      	nop
 8020524:	00000004 	.word	0x00000004

08020528 <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8020528:	b590      	push	{r4, r7, lr}
 802052a:	b085      	sub	sp, #20
 802052c:	af00      	add	r7, sp, #0
 802052e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020530:	4b07      	ldr	r3, [pc, #28]	; (8020550 <_txe_block_pool_delete+0x28>)
 8020532:	f859 3003 	ldr.w	r3, [r9, r3]
 8020536:	681c      	ldr	r4, [r3, #0]
 8020538:	6879      	ldr	r1, [r7, #4]
 802053a:	2300      	movs	r3, #0
 802053c:	2200      	movs	r2, #0
 802053e:	2003      	movs	r0, #3
 8020540:	47a0      	blx	r4
 8020542:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020544:	68fb      	ldr	r3, [r7, #12]
}
 8020546:	4618      	mov	r0, r3
 8020548:	3714      	adds	r7, #20
 802054a:	46bd      	mov	sp, r7
 802054c:	bd90      	pop	{r4, r7, pc}
 802054e:	bf00      	nop
 8020550:	00000004 	.word	0x00000004

08020554 <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8020554:	b590      	push	{r4, r7, lr}
 8020556:	b08b      	sub	sp, #44	; 0x2c
 8020558:	af00      	add	r7, sp, #0
 802055a:	60f8      	str	r0, [r7, #12]
 802055c:	60b9      	str	r1, [r7, #8]
 802055e:	607a      	str	r2, [r7, #4]
 8020560:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 8020566:	683b      	ldr	r3, [r7, #0]
 8020568:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 802056a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802056c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802056e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020570:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 8020572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020574:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020576:	4b08      	ldr	r3, [pc, #32]	; (8020598 <_txe_block_pool_info_get+0x44>)
 8020578:	f859 3003 	ldr.w	r3, [r9, r3]
 802057c:	681c      	ldr	r4, [r3, #0]
 802057e:	68f9      	ldr	r1, [r7, #12]
 8020580:	68ba      	ldr	r2, [r7, #8]
 8020582:	f107 0310 	add.w	r3, r7, #16
 8020586:	2004      	movs	r0, #4
 8020588:	47a0      	blx	r4
 802058a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802058e:	4618      	mov	r0, r3
 8020590:	372c      	adds	r7, #44	; 0x2c
 8020592:	46bd      	mov	sp, r7
 8020594:	bd90      	pop	{r4, r7, pc}
 8020596:	bf00      	nop
 8020598:	00000004 	.word	0x00000004

0802059c <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 802059c:	b590      	push	{r4, r7, lr}
 802059e:	b089      	sub	sp, #36	; 0x24
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	60f8      	str	r0, [r7, #12]
 80205a4:	60b9      	str	r1, [r7, #8]
 80205a6:	607a      	str	r2, [r7, #4]
 80205a8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80205ae:	683b      	ldr	r3, [r7, #0]
 80205b0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80205b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205b4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 80205b6:	4b08      	ldr	r3, [pc, #32]	; (80205d8 <_tx_block_pool_performance_info_get+0x3c>)
 80205b8:	f859 3003 	ldr.w	r3, [r9, r3]
 80205bc:	681c      	ldr	r4, [r3, #0]
 80205be:	68f9      	ldr	r1, [r7, #12]
 80205c0:	68ba      	ldr	r2, [r7, #8]
 80205c2:	f107 0310 	add.w	r3, r7, #16
 80205c6:	2005      	movs	r0, #5
 80205c8:	47a0      	blx	r4
 80205ca:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80205cc:	69fb      	ldr	r3, [r7, #28]
}
 80205ce:	4618      	mov	r0, r3
 80205d0:	3724      	adds	r7, #36	; 0x24
 80205d2:	46bd      	mov	sp, r7
 80205d4:	bd90      	pop	{r4, r7, pc}
 80205d6:	bf00      	nop
 80205d8:	00000004 	.word	0x00000004

080205dc <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205dc:	b590      	push	{r4, r7, lr}
 80205de:	b089      	sub	sp, #36	; 0x24
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	60f8      	str	r0, [r7, #12]
 80205e4:	60b9      	str	r1, [r7, #8]
 80205e6:	607a      	str	r2, [r7, #4]
 80205e8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80205ee:	683b      	ldr	r3, [r7, #0]
 80205f0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80205f2:	4b08      	ldr	r3, [pc, #32]	; (8020614 <_tx_block_pool_performance_system_info_get+0x38>)
 80205f4:	f859 3003 	ldr.w	r3, [r9, r3]
 80205f8:	681c      	ldr	r4, [r3, #0]
 80205fa:	68f9      	ldr	r1, [r7, #12]
 80205fc:	68ba      	ldr	r2, [r7, #8]
 80205fe:	f107 0314 	add.w	r3, r7, #20
 8020602:	2006      	movs	r0, #6
 8020604:	47a0      	blx	r4
 8020606:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020608:	69fb      	ldr	r3, [r7, #28]
}
 802060a:	4618      	mov	r0, r3
 802060c:	3724      	adds	r7, #36	; 0x24
 802060e:	46bd      	mov	sp, r7
 8020610:	bd90      	pop	{r4, r7, pc}
 8020612:	bf00      	nop
 8020614:	00000004 	.word	0x00000004

08020618 <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 8020618:	b590      	push	{r4, r7, lr}
 802061a:	b085      	sub	sp, #20
 802061c:	af00      	add	r7, sp, #0
 802061e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020620:	4b07      	ldr	r3, [pc, #28]	; (8020640 <_txe_block_pool_prioritize+0x28>)
 8020622:	f859 3003 	ldr.w	r3, [r9, r3]
 8020626:	681c      	ldr	r4, [r3, #0]
 8020628:	6879      	ldr	r1, [r7, #4]
 802062a:	2300      	movs	r3, #0
 802062c:	2200      	movs	r2, #0
 802062e:	2007      	movs	r0, #7
 8020630:	47a0      	blx	r4
 8020632:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020634:	68fb      	ldr	r3, [r7, #12]
}
 8020636:	4618      	mov	r0, r3
 8020638:	3714      	adds	r7, #20
 802063a:	46bd      	mov	sp, r7
 802063c:	bd90      	pop	{r4, r7, pc}
 802063e:	bf00      	nop
 8020640:	00000004 	.word	0x00000004

08020644 <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 8020644:	b590      	push	{r4, r7, lr}
 8020646:	b085      	sub	sp, #20
 8020648:	af00      	add	r7, sp, #0
 802064a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 802064c:	4b07      	ldr	r3, [pc, #28]	; (802066c <_txe_block_release+0x28>)
 802064e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020652:	681c      	ldr	r4, [r3, #0]
 8020654:	6879      	ldr	r1, [r7, #4]
 8020656:	2300      	movs	r3, #0
 8020658:	2200      	movs	r2, #0
 802065a:	2008      	movs	r0, #8
 802065c:	47a0      	blx	r4
 802065e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020660:	68fb      	ldr	r3, [r7, #12]
}
 8020662:	4618      	mov	r0, r3
 8020664:	3714      	adds	r7, #20
 8020666:	46bd      	mov	sp, r7
 8020668:	bd90      	pop	{r4, r7, pc}
 802066a:	bf00      	nop
 802066c:	00000004 	.word	0x00000004

08020670 <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 8020670:	b590      	push	{r4, r7, lr}
 8020672:	b089      	sub	sp, #36	; 0x24
 8020674:	af00      	add	r7, sp, #0
 8020676:	60f8      	str	r0, [r7, #12]
 8020678:	60b9      	str	r1, [r7, #8]
 802067a:	607a      	str	r2, [r7, #4]
 802067c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 8020682:	683b      	ldr	r3, [r7, #0]
 8020684:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 8020686:	4b08      	ldr	r3, [pc, #32]	; (80206a8 <_txe_byte_allocate+0x38>)
 8020688:	f859 3003 	ldr.w	r3, [r9, r3]
 802068c:	681c      	ldr	r4, [r3, #0]
 802068e:	68f9      	ldr	r1, [r7, #12]
 8020690:	68ba      	ldr	r2, [r7, #8]
 8020692:	f107 0314 	add.w	r3, r7, #20
 8020696:	2009      	movs	r0, #9
 8020698:	47a0      	blx	r4
 802069a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802069c:	69fb      	ldr	r3, [r7, #28]
}
 802069e:	4618      	mov	r0, r3
 80206a0:	3724      	adds	r7, #36	; 0x24
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd90      	pop	{r4, r7, pc}
 80206a6:	bf00      	nop
 80206a8:	00000004 	.word	0x00000004

080206ac <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80206ac:	b590      	push	{r4, r7, lr}
 80206ae:	b089      	sub	sp, #36	; 0x24
 80206b0:	af00      	add	r7, sp, #0
 80206b2:	60f8      	str	r0, [r7, #12]
 80206b4:	60b9      	str	r1, [r7, #8]
 80206b6:	607a      	str	r2, [r7, #4]
 80206b8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 80206be:	683b      	ldr	r3, [r7, #0]
 80206c0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 80206c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206c4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80206c6:	4b08      	ldr	r3, [pc, #32]	; (80206e8 <_txe_byte_pool_create+0x3c>)
 80206c8:	f859 3003 	ldr.w	r3, [r9, r3]
 80206cc:	681c      	ldr	r4, [r3, #0]
 80206ce:	68f9      	ldr	r1, [r7, #12]
 80206d0:	68ba      	ldr	r2, [r7, #8]
 80206d2:	f107 0310 	add.w	r3, r7, #16
 80206d6:	200a      	movs	r0, #10
 80206d8:	47a0      	blx	r4
 80206da:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206dc:	69fb      	ldr	r3, [r7, #28]
}
 80206de:	4618      	mov	r0, r3
 80206e0:	3724      	adds	r7, #36	; 0x24
 80206e2:	46bd      	mov	sp, r7
 80206e4:	bd90      	pop	{r4, r7, pc}
 80206e6:	bf00      	nop
 80206e8:	00000004 	.word	0x00000004

080206ec <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80206ec:	b590      	push	{r4, r7, lr}
 80206ee:	b085      	sub	sp, #20
 80206f0:	af00      	add	r7, sp, #0
 80206f2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80206f4:	4b07      	ldr	r3, [pc, #28]	; (8020714 <_txe_byte_pool_delete+0x28>)
 80206f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80206fa:	681c      	ldr	r4, [r3, #0]
 80206fc:	6879      	ldr	r1, [r7, #4]
 80206fe:	2300      	movs	r3, #0
 8020700:	2200      	movs	r2, #0
 8020702:	200b      	movs	r0, #11
 8020704:	47a0      	blx	r4
 8020706:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020708:	68fb      	ldr	r3, [r7, #12]
}
 802070a:	4618      	mov	r0, r3
 802070c:	3714      	adds	r7, #20
 802070e:	46bd      	mov	sp, r7
 8020710:	bd90      	pop	{r4, r7, pc}
 8020712:	bf00      	nop
 8020714:	00000004 	.word	0x00000004

08020718 <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8020718:	b590      	push	{r4, r7, lr}
 802071a:	b08b      	sub	sp, #44	; 0x2c
 802071c:	af00      	add	r7, sp, #0
 802071e:	60f8      	str	r0, [r7, #12]
 8020720:	60b9      	str	r1, [r7, #8]
 8020722:	607a      	str	r2, [r7, #4]
 8020724:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 802072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020730:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020734:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 8020736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020738:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802073a:	4b08      	ldr	r3, [pc, #32]	; (802075c <_txe_byte_pool_info_get+0x44>)
 802073c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020740:	681c      	ldr	r4, [r3, #0]
 8020742:	68f9      	ldr	r1, [r7, #12]
 8020744:	68ba      	ldr	r2, [r7, #8]
 8020746:	f107 0310 	add.w	r3, r7, #16
 802074a:	200c      	movs	r0, #12
 802074c:	47a0      	blx	r4
 802074e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020752:	4618      	mov	r0, r3
 8020754:	372c      	adds	r7, #44	; 0x2c
 8020756:	46bd      	mov	sp, r7
 8020758:	bd90      	pop	{r4, r7, pc}
 802075a:	bf00      	nop
 802075c:	00000004 	.word	0x00000004

08020760 <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020760:	b590      	push	{r4, r7, lr}
 8020762:	b08d      	sub	sp, #52	; 0x34
 8020764:	af00      	add	r7, sp, #0
 8020766:	60f8      	str	r0, [r7, #12]
 8020768:	60b9      	str	r1, [r7, #8]
 802076a:	607a      	str	r2, [r7, #4]
 802076c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 8020772:	683b      	ldr	r3, [r7, #0]
 8020774:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 8020776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020778:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 802077a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802077c:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 802077e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020780:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8020782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020784:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 8020786:	4b08      	ldr	r3, [pc, #32]	; (80207a8 <_tx_byte_pool_performance_info_get+0x48>)
 8020788:	f859 3003 	ldr.w	r3, [r9, r3]
 802078c:	681c      	ldr	r4, [r3, #0]
 802078e:	68f9      	ldr	r1, [r7, #12]
 8020790:	68ba      	ldr	r2, [r7, #8]
 8020792:	f107 0314 	add.w	r3, r7, #20
 8020796:	200d      	movs	r0, #13
 8020798:	47a0      	blx	r4
 802079a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 802079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802079e:	4618      	mov	r0, r3
 80207a0:	3734      	adds	r7, #52	; 0x34
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd90      	pop	{r4, r7, pc}
 80207a6:	bf00      	nop
 80207a8:	00000004 	.word	0x00000004

080207ac <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 80207ac:	b590      	push	{r4, r7, lr}
 80207ae:	b08b      	sub	sp, #44	; 0x2c
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	60f8      	str	r0, [r7, #12]
 80207b4:	60b9      	str	r1, [r7, #8]
 80207b6:	607a      	str	r2, [r7, #4]
 80207b8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 80207be:	683b      	ldr	r3, [r7, #0]
 80207c0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 80207c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80207c4:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 80207c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80207c8:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 80207ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80207cc:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80207ce:	4b08      	ldr	r3, [pc, #32]	; (80207f0 <_tx_byte_pool_performance_system_info_get+0x44>)
 80207d0:	f859 3003 	ldr.w	r3, [r9, r3]
 80207d4:	681c      	ldr	r4, [r3, #0]
 80207d6:	68f9      	ldr	r1, [r7, #12]
 80207d8:	68ba      	ldr	r2, [r7, #8]
 80207da:	f107 0310 	add.w	r3, r7, #16
 80207de:	200e      	movs	r0, #14
 80207e0:	47a0      	blx	r4
 80207e2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80207e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80207e6:	4618      	mov	r0, r3
 80207e8:	372c      	adds	r7, #44	; 0x2c
 80207ea:	46bd      	mov	sp, r7
 80207ec:	bd90      	pop	{r4, r7, pc}
 80207ee:	bf00      	nop
 80207f0:	00000004 	.word	0x00000004

080207f4 <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 80207f4:	b590      	push	{r4, r7, lr}
 80207f6:	b085      	sub	sp, #20
 80207f8:	af00      	add	r7, sp, #0
 80207fa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80207fc:	4b07      	ldr	r3, [pc, #28]	; (802081c <_txe_byte_pool_prioritize+0x28>)
 80207fe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020802:	681c      	ldr	r4, [r3, #0]
 8020804:	6879      	ldr	r1, [r7, #4]
 8020806:	2300      	movs	r3, #0
 8020808:	2200      	movs	r2, #0
 802080a:	200f      	movs	r0, #15
 802080c:	47a0      	blx	r4
 802080e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020810:	68fb      	ldr	r3, [r7, #12]
}
 8020812:	4618      	mov	r0, r3
 8020814:	3714      	adds	r7, #20
 8020816:	46bd      	mov	sp, r7
 8020818:	bd90      	pop	{r4, r7, pc}
 802081a:	bf00      	nop
 802081c:	00000004 	.word	0x00000004

08020820 <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 8020820:	b590      	push	{r4, r7, lr}
 8020822:	b085      	sub	sp, #20
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 8020828:	4b07      	ldr	r3, [pc, #28]	; (8020848 <_txe_byte_release+0x28>)
 802082a:	f859 3003 	ldr.w	r3, [r9, r3]
 802082e:	681c      	ldr	r4, [r3, #0]
 8020830:	6879      	ldr	r1, [r7, #4]
 8020832:	2300      	movs	r3, #0
 8020834:	2200      	movs	r2, #0
 8020836:	2010      	movs	r0, #16
 8020838:	47a0      	blx	r4
 802083a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802083c:	68fb      	ldr	r3, [r7, #12]
}
 802083e:	4618      	mov	r0, r3
 8020840:	3714      	adds	r7, #20
 8020842:	46bd      	mov	sp, r7
 8020844:	bd90      	pop	{r4, r7, pc}
 8020846:	bf00      	nop
 8020848:	00000004 	.word	0x00000004

0802084c <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 802084c:	b590      	push	{r4, r7, lr}
 802084e:	b087      	sub	sp, #28
 8020850:	af00      	add	r7, sp, #0
 8020852:	60f8      	str	r0, [r7, #12]
 8020854:	60b9      	str	r1, [r7, #8]
 8020856:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 8020858:	4b07      	ldr	r3, [pc, #28]	; (8020878 <_txe_event_flags_create+0x2c>)
 802085a:	f859 3003 	ldr.w	r3, [r9, r3]
 802085e:	681c      	ldr	r4, [r3, #0]
 8020860:	68f9      	ldr	r1, [r7, #12]
 8020862:	68ba      	ldr	r2, [r7, #8]
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	2011      	movs	r0, #17
 8020868:	47a0      	blx	r4
 802086a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802086c:	697b      	ldr	r3, [r7, #20]
}
 802086e:	4618      	mov	r0, r3
 8020870:	371c      	adds	r7, #28
 8020872:	46bd      	mov	sp, r7
 8020874:	bd90      	pop	{r4, r7, pc}
 8020876:	bf00      	nop
 8020878:	00000004 	.word	0x00000004

0802087c <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 802087c:	b590      	push	{r4, r7, lr}
 802087e:	b085      	sub	sp, #20
 8020880:	af00      	add	r7, sp, #0
 8020882:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 8020884:	4b07      	ldr	r3, [pc, #28]	; (80208a4 <_txe_event_flags_delete+0x28>)
 8020886:	f859 3003 	ldr.w	r3, [r9, r3]
 802088a:	681c      	ldr	r4, [r3, #0]
 802088c:	6879      	ldr	r1, [r7, #4]
 802088e:	2300      	movs	r3, #0
 8020890:	2200      	movs	r2, #0
 8020892:	2012      	movs	r0, #18
 8020894:	47a0      	blx	r4
 8020896:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020898:	68fb      	ldr	r3, [r7, #12]
}
 802089a:	4618      	mov	r0, r3
 802089c:	3714      	adds	r7, #20
 802089e:	46bd      	mov	sp, r7
 80208a0:	bd90      	pop	{r4, r7, pc}
 80208a2:	bf00      	nop
 80208a4:	00000004 	.word	0x00000004

080208a8 <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80208a8:	b590      	push	{r4, r7, lr}
 80208aa:	b089      	sub	sp, #36	; 0x24
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	60f8      	str	r0, [r7, #12]
 80208b0:	60b9      	str	r1, [r7, #8]
 80208b2:	607a      	str	r2, [r7, #4]
 80208b4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 80208ba:	683b      	ldr	r3, [r7, #0]
 80208bc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 80208be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208c0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 80208c2:	4b08      	ldr	r3, [pc, #32]	; (80208e4 <_txe_event_flags_get+0x3c>)
 80208c4:	f859 3003 	ldr.w	r3, [r9, r3]
 80208c8:	681c      	ldr	r4, [r3, #0]
 80208ca:	68f9      	ldr	r1, [r7, #12]
 80208cc:	f107 0310 	add.w	r3, r7, #16
 80208d0:	68ba      	ldr	r2, [r7, #8]
 80208d2:	2013      	movs	r0, #19
 80208d4:	47a0      	blx	r4
 80208d6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80208d8:	69fb      	ldr	r3, [r7, #28]
}
 80208da:	4618      	mov	r0, r3
 80208dc:	3724      	adds	r7, #36	; 0x24
 80208de:	46bd      	mov	sp, r7
 80208e0:	bd90      	pop	{r4, r7, pc}
 80208e2:	bf00      	nop
 80208e4:	00000004 	.word	0x00000004

080208e8 <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 80208e8:	b590      	push	{r4, r7, lr}
 80208ea:	b08b      	sub	sp, #44	; 0x2c
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	60f8      	str	r0, [r7, #12]
 80208f0:	60b9      	str	r1, [r7, #8]
 80208f2:	607a      	str	r2, [r7, #4]
 80208f4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 80208f6:	687b      	ldr	r3, [r7, #4]
 80208f8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 80208fa:	683b      	ldr	r3, [r7, #0]
 80208fc:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 80208fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020900:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 8020902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020904:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020906:	4b08      	ldr	r3, [pc, #32]	; (8020928 <_txe_event_flags_info_get+0x40>)
 8020908:	f859 3003 	ldr.w	r3, [r9, r3]
 802090c:	681c      	ldr	r4, [r3, #0]
 802090e:	68f9      	ldr	r1, [r7, #12]
 8020910:	68ba      	ldr	r2, [r7, #8]
 8020912:	f107 0314 	add.w	r3, r7, #20
 8020916:	2014      	movs	r0, #20
 8020918:	47a0      	blx	r4
 802091a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802091e:	4618      	mov	r0, r3
 8020920:	372c      	adds	r7, #44	; 0x2c
 8020922:	46bd      	mov	sp, r7
 8020924:	bd90      	pop	{r4, r7, pc}
 8020926:	bf00      	nop
 8020928:	00000004 	.word	0x00000004

0802092c <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 802092c:	b590      	push	{r4, r7, lr}
 802092e:	b089      	sub	sp, #36	; 0x24
 8020930:	af00      	add	r7, sp, #0
 8020932:	60f8      	str	r0, [r7, #12]
 8020934:	60b9      	str	r1, [r7, #8]
 8020936:	607a      	str	r2, [r7, #4]
 8020938:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 802093e:	683b      	ldr	r3, [r7, #0]
 8020940:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020944:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 8020946:	4b08      	ldr	r3, [pc, #32]	; (8020968 <_tx_event_flags_performance_info_get+0x3c>)
 8020948:	f859 3003 	ldr.w	r3, [r9, r3]
 802094c:	681c      	ldr	r4, [r3, #0]
 802094e:	68f9      	ldr	r1, [r7, #12]
 8020950:	68ba      	ldr	r2, [r7, #8]
 8020952:	f107 0310 	add.w	r3, r7, #16
 8020956:	2015      	movs	r0, #21
 8020958:	47a0      	blx	r4
 802095a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802095c:	69fb      	ldr	r3, [r7, #28]
}
 802095e:	4618      	mov	r0, r3
 8020960:	3724      	adds	r7, #36	; 0x24
 8020962:	46bd      	mov	sp, r7
 8020964:	bd90      	pop	{r4, r7, pc}
 8020966:	bf00      	nop
 8020968:	00000004 	.word	0x00000004

0802096c <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 802096c:	b590      	push	{r4, r7, lr}
 802096e:	b089      	sub	sp, #36	; 0x24
 8020970:	af00      	add	r7, sp, #0
 8020972:	60f8      	str	r0, [r7, #12]
 8020974:	60b9      	str	r1, [r7, #8]
 8020976:	607a      	str	r2, [r7, #4]
 8020978:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 802097e:	683b      	ldr	r3, [r7, #0]
 8020980:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020982:	4b08      	ldr	r3, [pc, #32]	; (80209a4 <_tx_event_flags_performance_system_info_get+0x38>)
 8020984:	f859 3003 	ldr.w	r3, [r9, r3]
 8020988:	681c      	ldr	r4, [r3, #0]
 802098a:	68f9      	ldr	r1, [r7, #12]
 802098c:	68ba      	ldr	r2, [r7, #8]
 802098e:	f107 0314 	add.w	r3, r7, #20
 8020992:	2016      	movs	r0, #22
 8020994:	47a0      	blx	r4
 8020996:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020998:	69fb      	ldr	r3, [r7, #28]
}
 802099a:	4618      	mov	r0, r3
 802099c:	3724      	adds	r7, #36	; 0x24
 802099e:	46bd      	mov	sp, r7
 80209a0:	bd90      	pop	{r4, r7, pc}
 80209a2:	bf00      	nop
 80209a4:	00000004 	.word	0x00000004

080209a8 <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80209a8:	b590      	push	{r4, r7, lr}
 80209aa:	b087      	sub	sp, #28
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	60f8      	str	r0, [r7, #12]
 80209b0:	60b9      	str	r1, [r7, #8]
 80209b2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 80209b4:	4b07      	ldr	r3, [pc, #28]	; (80209d4 <_txe_event_flags_set+0x2c>)
 80209b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80209ba:	681c      	ldr	r4, [r3, #0]
 80209bc:	68f9      	ldr	r1, [r7, #12]
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	68ba      	ldr	r2, [r7, #8]
 80209c2:	2017      	movs	r0, #23
 80209c4:	47a0      	blx	r4
 80209c6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80209c8:	697b      	ldr	r3, [r7, #20]
}
 80209ca:	4618      	mov	r0, r3
 80209cc:	371c      	adds	r7, #28
 80209ce:	46bd      	mov	sp, r7
 80209d0:	bd90      	pop	{r4, r7, pc}
 80209d2:	bf00      	nop
 80209d4:	00000004 	.word	0x00000004

080209d8 <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80209d8:	b590      	push	{r4, r7, lr}
 80209da:	b085      	sub	sp, #20
 80209dc:	af00      	add	r7, sp, #0
 80209de:	6078      	str	r0, [r7, #4]
 80209e0:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80209e2:	4b07      	ldr	r3, [pc, #28]	; (8020a00 <_txe_event_flags_set_notify+0x28>)
 80209e4:	f859 3003 	ldr.w	r3, [r9, r3]
 80209e8:	681c      	ldr	r4, [r3, #0]
 80209ea:	6879      	ldr	r1, [r7, #4]
 80209ec:	683a      	ldr	r2, [r7, #0]
 80209ee:	2300      	movs	r3, #0
 80209f0:	2018      	movs	r0, #24
 80209f2:	47a0      	blx	r4
 80209f4:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80209f6:	68fb      	ldr	r3, [r7, #12]
}
 80209f8:	4618      	mov	r0, r3
 80209fa:	3714      	adds	r7, #20
 80209fc:	46bd      	mov	sp, r7
 80209fe:	bd90      	pop	{r4, r7, pc}
 8020a00:	00000004 	.word	0x00000004

08020a04 <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 8020a04:	b590      	push	{r4, r7, lr}
 8020a06:	b087      	sub	sp, #28
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	60f8      	str	r0, [r7, #12]
 8020a0c:	60b9      	str	r1, [r7, #8]
 8020a0e:	607a      	str	r2, [r7, #4]
 8020a10:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 8020a12:	4b08      	ldr	r3, [pc, #32]	; (8020a34 <_txm_module_application_request+0x30>)
 8020a14:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a18:	681c      	ldr	r4, [r3, #0]
 8020a1a:	68fb      	ldr	r3, [r7, #12]
 8020a1c:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 8020a20:	683b      	ldr	r3, [r7, #0]
 8020a22:	687a      	ldr	r2, [r7, #4]
 8020a24:	68b9      	ldr	r1, [r7, #8]
 8020a26:	47a0      	blx	r4
 8020a28:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020a2a:	697b      	ldr	r3, [r7, #20]
}
 8020a2c:	4618      	mov	r0, r3
 8020a2e:	371c      	adds	r7, #28
 8020a30:	46bd      	mov	sp, r7
 8020a32:	bd90      	pop	{r4, r7, pc}
 8020a34:	00000004 	.word	0x00000004

08020a38 <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b098      	sub	sp, #96	; 0x60
 8020a3c:	af00      	add	r7, sp, #0
 8020a3e:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 8020a40:	4b2d      	ldr	r3, [pc, #180]	; (8020af8 <_txm_module_callback_request_thread_entry+0xc0>)
 8020a42:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a4a:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020a4c:	f107 030c 	add.w	r3, r7, #12
 8020a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020a54:	4619      	mov	r1, r3
 8020a56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020a58:	f000 fad8 	bl	802100c <_txe_queue_receive>
 8020a5c:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 8020a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d144      	bne.n	8020aee <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020a64:	693b      	ldr	r3, [r7, #16]
 8020a66:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020a68:	e03d      	b.n	8020ae6 <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 8020a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020a6c:	3b01      	subs	r3, #1
 8020a6e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 8020a70:	68fb      	ldr	r3, [r7, #12]
 8020a72:	2b04      	cmp	r3, #4
 8020a74:	d836      	bhi.n	8020ae4 <_txm_module_callback_request_thread_entry+0xac>
 8020a76:	a202      	add	r2, pc, #8	; (adr r2, 8020a80 <_txm_module_callback_request_thread_entry+0x48>)
 8020a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020a7c:	441a      	add	r2, r3
 8020a7e:	4710      	bx	r2
 8020a80:	00000015 	.word	0x00000015
 8020a84:	00000023 	.word	0x00000023
 8020a88:	00000033 	.word	0x00000033
 8020a8c:	00000043 	.word	0x00000043
 8020a90:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 8020a94:	697b      	ldr	r3, [r7, #20]
 8020a96:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020a98:	69ba      	ldr	r2, [r7, #24]
 8020a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020a9c:	4610      	mov	r0, r2
 8020a9e:	4798      	blx	r3

                break;
 8020aa0:	e021      	b.n	8020ae6 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 8020aa2:	697b      	ldr	r3, [r7, #20]
 8020aa4:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 8020aa6:	69bb      	ldr	r3, [r7, #24]
 8020aa8:	461a      	mov	r2, r3
 8020aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020aac:	4610      	mov	r0, r2
 8020aae:	4798      	blx	r3

                break;
 8020ab0:	e019      	b.n	8020ae6 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 8020ab2:	697b      	ldr	r3, [r7, #20]
 8020ab4:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 8020ab6:	69bb      	ldr	r3, [r7, #24]
 8020ab8:	461a      	mov	r2, r3
 8020aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020abc:	4610      	mov	r0, r2
 8020abe:	4798      	blx	r3

                break;
 8020ac0:	e011      	b.n	8020ae6 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 8020ac2:	697b      	ldr	r3, [r7, #20]
 8020ac4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 8020ac6:	69bb      	ldr	r3, [r7, #24]
 8020ac8:	461a      	mov	r2, r3
 8020aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020acc:	4610      	mov	r0, r2
 8020ace:	4798      	blx	r3

                break;
 8020ad0:	e009      	b.n	8020ae6 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 8020ad2:	697b      	ldr	r3, [r7, #20]
 8020ad4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 8020ad6:	69bb      	ldr	r3, [r7, #24]
 8020ad8:	4618      	mov	r0, r3
 8020ada:	69fa      	ldr	r2, [r7, #28]
 8020adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020ade:	4611      	mov	r1, r2
 8020ae0:	4798      	blx	r3

                break;
 8020ae2:	e000      	b.n	8020ae6 <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 8020ae4:	bf00      	nop
        while (activation_count)
 8020ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d1be      	bne.n	8020a6a <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020aec:	e7ae      	b.n	8020a4c <_txm_module_callback_request_thread_entry+0x14>
            break;
 8020aee:	bf00      	nop
            }
        }
    }
}
 8020af0:	bf00      	nop
 8020af2:	3760      	adds	r7, #96	; 0x60
 8020af4:	46bd      	mov	sp, r7
 8020af6:	bd80      	pop	{r7, pc}
 8020af8:	00000010 	.word	0x00000010

08020afc <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 8020afc:	b590      	push	{r4, r7, lr}
 8020afe:	b085      	sub	sp, #20
 8020b00:	af00      	add	r7, sp, #0
 8020b02:	6078      	str	r0, [r7, #4]
 8020b04:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 8020b06:	4b07      	ldr	r3, [pc, #28]	; (8020b24 <_txm_module_object_allocate+0x28>)
 8020b08:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b0c:	681c      	ldr	r4, [r3, #0]
 8020b0e:	6879      	ldr	r1, [r7, #4]
 8020b10:	2300      	movs	r3, #0
 8020b12:	683a      	ldr	r2, [r7, #0]
 8020b14:	205f      	movs	r0, #95	; 0x5f
 8020b16:	47a0      	blx	r4
 8020b18:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b1a:	68fb      	ldr	r3, [r7, #12]
}
 8020b1c:	4618      	mov	r0, r3
 8020b1e:	3714      	adds	r7, #20
 8020b20:	46bd      	mov	sp, r7
 8020b22:	bd90      	pop	{r4, r7, pc}
 8020b24:	00000004 	.word	0x00000004

08020b28 <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 8020b28:	b590      	push	{r4, r7, lr}
 8020b2a:	b085      	sub	sp, #20
 8020b2c:	af00      	add	r7, sp, #0
 8020b2e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 8020b30:	4b07      	ldr	r3, [pc, #28]	; (8020b50 <_txm_module_object_deallocate+0x28>)
 8020b32:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b36:	681c      	ldr	r4, [r3, #0]
 8020b38:	6879      	ldr	r1, [r7, #4]
 8020b3a:	2300      	movs	r3, #0
 8020b3c:	2200      	movs	r2, #0
 8020b3e:	2060      	movs	r0, #96	; 0x60
 8020b40:	47a0      	blx	r4
 8020b42:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b44:	68fb      	ldr	r3, [r7, #12]
}
 8020b46:	4618      	mov	r0, r3
 8020b48:	3714      	adds	r7, #20
 8020b4a:	46bd      	mov	sp, r7
 8020b4c:	bd90      	pop	{r4, r7, pc}
 8020b4e:	bf00      	nop
 8020b50:	00000004 	.word	0x00000004

08020b54 <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020b54:	b590      	push	{r4, r7, lr}
 8020b56:	b087      	sub	sp, #28
 8020b58:	af00      	add	r7, sp, #0
 8020b5a:	60f8      	str	r0, [r7, #12]
 8020b5c:	60b9      	str	r1, [r7, #8]
 8020b5e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020b60:	4b07      	ldr	r3, [pc, #28]	; (8020b80 <_txm_module_object_pointer_get+0x2c>)
 8020b62:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b66:	681c      	ldr	r4, [r3, #0]
 8020b68:	68ba      	ldr	r2, [r7, #8]
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	68f9      	ldr	r1, [r7, #12]
 8020b6e:	205d      	movs	r0, #93	; 0x5d
 8020b70:	47a0      	blx	r4
 8020b72:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020b74:	697b      	ldr	r3, [r7, #20]
}
 8020b76:	4618      	mov	r0, r3
 8020b78:	371c      	adds	r7, #28
 8020b7a:	46bd      	mov	sp, r7
 8020b7c:	bd90      	pop	{r4, r7, pc}
 8020b7e:	bf00      	nop
 8020b80:	00000004 	.word	0x00000004

08020b84 <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 8020b84:	b590      	push	{r4, r7, lr}
 8020b86:	b089      	sub	sp, #36	; 0x24
 8020b88:	af00      	add	r7, sp, #0
 8020b8a:	60f8      	str	r0, [r7, #12]
 8020b8c:	60b9      	str	r1, [r7, #8]
 8020b8e:	607a      	str	r2, [r7, #4]
 8020b90:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 8020b96:	683b      	ldr	r3, [r7, #0]
 8020b98:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020b9a:	4b08      	ldr	r3, [pc, #32]	; (8020bbc <_txm_module_object_pointer_get_extended+0x38>)
 8020b9c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ba0:	681c      	ldr	r4, [r3, #0]
 8020ba2:	68ba      	ldr	r2, [r7, #8]
 8020ba4:	f107 0314 	add.w	r3, r7, #20
 8020ba8:	68f9      	ldr	r1, [r7, #12]
 8020baa:	205e      	movs	r0, #94	; 0x5e
 8020bac:	47a0      	blx	r4
 8020bae:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020bb0:	69fb      	ldr	r3, [r7, #28]
}
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	3724      	adds	r7, #36	; 0x24
 8020bb6:	46bd      	mov	sp, r7
 8020bb8:	bd90      	pop	{r4, r7, pc}
 8020bba:	bf00      	nop
 8020bbc:	00000004 	.word	0x00000004

08020bc0 <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b084      	sub	sp, #16
 8020bc4:	af00      	add	r7, sp, #0
 8020bc6:	6078      	str	r0, [r7, #4]
 8020bc8:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 8020bca:	683b      	ldr	r3, [r7, #0]
 8020bcc:	69db      	ldr	r3, [r3, #28]
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	d01b      	beq.n	8020c0a <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 8020bd2:	683b      	ldr	r3, [r7, #0]
 8020bd4:	68db      	ldr	r3, [r3, #12]
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	f7ff fa6a 	bl	80200b0 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 8020bdc:	4b1b      	ldr	r3, [pc, #108]	; (8020c4c <_txm_module_thread_shell_entry+0x8c>)
 8020bde:	f859 3003 	ldr.w	r3, [r9, r3]
 8020be2:	683a      	ldr	r2, [r7, #0]
 8020be4:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 8020be6:	683b      	ldr	r3, [r7, #0]
 8020be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020bea:	4b19      	ldr	r3, [pc, #100]	; (8020c50 <_txm_module_thread_shell_entry+0x90>)
 8020bec:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bf0:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 8020bf2:	bf00      	nop
 8020bf4:	4b16      	ldr	r3, [pc, #88]	; (8020c50 <_txm_module_thread_shell_entry+0x90>)
 8020bf6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bfa:	681b      	ldr	r3, [r3, #0]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d0f9      	beq.n	8020bf4 <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 8020c00:	683b      	ldr	r3, [r7, #0]
 8020c02:	6a1b      	ldr	r3, [r3, #32]
 8020c04:	4618      	mov	r0, r3
 8020c06:	f000 fca3 	bl	8021550 <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c0a:	683b      	ldr	r3, [r7, #0]
 8020c0c:	699b      	ldr	r3, [r3, #24]
 8020c0e:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c10:	68fb      	ldr	r3, [r7, #12]
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d003      	beq.n	8020c1e <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8020c16:	68fb      	ldr	r3, [r7, #12]
 8020c18:	2100      	movs	r1, #0
 8020c1a:	6878      	ldr	r0, [r7, #4]
 8020c1c:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 8020c1e:	683b      	ldr	r3, [r7, #0]
 8020c20:	691b      	ldr	r3, [r3, #16]
 8020c22:	683a      	ldr	r2, [r7, #0]
 8020c24:	6952      	ldr	r2, [r2, #20]
 8020c26:	4610      	mov	r0, r2
 8020c28:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c2a:	683b      	ldr	r3, [r7, #0]
 8020c2c:	699b      	ldr	r3, [r3, #24]
 8020c2e:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c30:	68fb      	ldr	r3, [r7, #12]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d003      	beq.n	8020c3e <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020c36:	68fb      	ldr	r3, [r7, #12]
 8020c38:	2101      	movs	r1, #1
 8020c3a:	6878      	ldr	r0, [r7, #4]
 8020c3c:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020c3e:	6878      	ldr	r0, [r7, #4]
 8020c40:	f000 f808 	bl	8020c54 <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020c44:	bf00      	nop
 8020c46:	3710      	adds	r7, #16
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}
 8020c4c:	00000010 	.word	0x00000010
 8020c50:	00000004 	.word	0x00000004

08020c54 <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020c54:	b590      	push	{r4, r7, lr}
 8020c56:	b085      	sub	sp, #20
 8020c58:	af00      	add	r7, sp, #0
 8020c5a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020c5c:	4b07      	ldr	r3, [pc, #28]	; (8020c7c <_txm_module_thread_system_suspend+0x28>)
 8020c5e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c62:	681c      	ldr	r4, [r3, #0]
 8020c64:	6879      	ldr	r1, [r7, #4]
 8020c66:	2300      	movs	r3, #0
 8020c68:	2200      	movs	r2, #0
 8020c6a:	205c      	movs	r0, #92	; 0x5c
 8020c6c:	47a0      	blx	r4
 8020c6e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c70:	68fb      	ldr	r3, [r7, #12]
}
 8020c72:	4618      	mov	r0, r3
 8020c74:	3714      	adds	r7, #20
 8020c76:	46bd      	mov	sp, r7
 8020c78:	bd90      	pop	{r4, r7, pc}
 8020c7a:	bf00      	nop
 8020c7c:	00000004 	.word	0x00000004

08020c80 <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020c80:	b590      	push	{r4, r7, lr}
 8020c82:	b089      	sub	sp, #36	; 0x24
 8020c84:	af00      	add	r7, sp, #0
 8020c86:	60f8      	str	r0, [r7, #12]
 8020c88:	60b9      	str	r1, [r7, #8]
 8020c8a:	607a      	str	r2, [r7, #4]
 8020c8c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020c92:	683b      	ldr	r3, [r7, #0]
 8020c94:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020c96:	4b08      	ldr	r3, [pc, #32]	; (8020cb8 <_txe_mutex_create+0x38>)
 8020c98:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c9c:	681c      	ldr	r4, [r3, #0]
 8020c9e:	68f9      	ldr	r1, [r7, #12]
 8020ca0:	68ba      	ldr	r2, [r7, #8]
 8020ca2:	f107 0314 	add.w	r3, r7, #20
 8020ca6:	201a      	movs	r0, #26
 8020ca8:	47a0      	blx	r4
 8020caa:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020cac:	69fb      	ldr	r3, [r7, #28]
}
 8020cae:	4618      	mov	r0, r3
 8020cb0:	3724      	adds	r7, #36	; 0x24
 8020cb2:	46bd      	mov	sp, r7
 8020cb4:	bd90      	pop	{r4, r7, pc}
 8020cb6:	bf00      	nop
 8020cb8:	00000004 	.word	0x00000004

08020cbc <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020cbc:	b590      	push	{r4, r7, lr}
 8020cbe:	b085      	sub	sp, #20
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020cc4:	4b07      	ldr	r3, [pc, #28]	; (8020ce4 <_txe_mutex_delete+0x28>)
 8020cc6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cca:	681c      	ldr	r4, [r3, #0]
 8020ccc:	6879      	ldr	r1, [r7, #4]
 8020cce:	2300      	movs	r3, #0
 8020cd0:	2200      	movs	r2, #0
 8020cd2:	201b      	movs	r0, #27
 8020cd4:	47a0      	blx	r4
 8020cd6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020cd8:	68fb      	ldr	r3, [r7, #12]
}
 8020cda:	4618      	mov	r0, r3
 8020cdc:	3714      	adds	r7, #20
 8020cde:	46bd      	mov	sp, r7
 8020ce0:	bd90      	pop	{r4, r7, pc}
 8020ce2:	bf00      	nop
 8020ce4:	00000004 	.word	0x00000004

08020ce8 <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020ce8:	b590      	push	{r4, r7, lr}
 8020cea:	b085      	sub	sp, #20
 8020cec:	af00      	add	r7, sp, #0
 8020cee:	6078      	str	r0, [r7, #4]
 8020cf0:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020cf2:	4b07      	ldr	r3, [pc, #28]	; (8020d10 <_txe_mutex_get+0x28>)
 8020cf4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cf8:	681c      	ldr	r4, [r3, #0]
 8020cfa:	6879      	ldr	r1, [r7, #4]
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	683a      	ldr	r2, [r7, #0]
 8020d00:	201c      	movs	r0, #28
 8020d02:	47a0      	blx	r4
 8020d04:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020d06:	68fb      	ldr	r3, [r7, #12]
}
 8020d08:	4618      	mov	r0, r3
 8020d0a:	3714      	adds	r7, #20
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd90      	pop	{r4, r7, pc}
 8020d10:	00000004 	.word	0x00000004

08020d14 <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020d14:	b590      	push	{r4, r7, lr}
 8020d16:	b08b      	sub	sp, #44	; 0x2c
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	60f8      	str	r0, [r7, #12]
 8020d1c:	60b9      	str	r1, [r7, #8]
 8020d1e:	607a      	str	r2, [r7, #4]
 8020d20:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020d26:	683b      	ldr	r3, [r7, #0]
 8020d28:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d2c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d30:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d34:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d36:	4b08      	ldr	r3, [pc, #32]	; (8020d58 <_txe_mutex_info_get+0x44>)
 8020d38:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d3c:	681c      	ldr	r4, [r3, #0]
 8020d3e:	68f9      	ldr	r1, [r7, #12]
 8020d40:	68ba      	ldr	r2, [r7, #8]
 8020d42:	f107 0310 	add.w	r3, r7, #16
 8020d46:	201d      	movs	r0, #29
 8020d48:	47a0      	blx	r4
 8020d4a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d4e:	4618      	mov	r0, r3
 8020d50:	372c      	adds	r7, #44	; 0x2c
 8020d52:	46bd      	mov	sp, r7
 8020d54:	bd90      	pop	{r4, r7, pc}
 8020d56:	bf00      	nop
 8020d58:	00000004 	.word	0x00000004

08020d5c <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020d5c:	b590      	push	{r4, r7, lr}
 8020d5e:	b08b      	sub	sp, #44	; 0x2c
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	60f8      	str	r0, [r7, #12]
 8020d64:	60b9      	str	r1, [r7, #8]
 8020d66:	607a      	str	r2, [r7, #4]
 8020d68:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020d6e:	683b      	ldr	r3, [r7, #0]
 8020d70:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d74:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d78:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d7c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020d7e:	4b08      	ldr	r3, [pc, #32]	; (8020da0 <_tx_mutex_performance_info_get+0x44>)
 8020d80:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d84:	681c      	ldr	r4, [r3, #0]
 8020d86:	68f9      	ldr	r1, [r7, #12]
 8020d88:	68ba      	ldr	r2, [r7, #8]
 8020d8a:	f107 0310 	add.w	r3, r7, #16
 8020d8e:	201e      	movs	r0, #30
 8020d90:	47a0      	blx	r4
 8020d92:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d96:	4618      	mov	r0, r3
 8020d98:	372c      	adds	r7, #44	; 0x2c
 8020d9a:	46bd      	mov	sp, r7
 8020d9c:	bd90      	pop	{r4, r7, pc}
 8020d9e:	bf00      	nop
 8020da0:	00000004 	.word	0x00000004

08020da4 <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020da4:	b590      	push	{r4, r7, lr}
 8020da6:	b08b      	sub	sp, #44	; 0x2c
 8020da8:	af00      	add	r7, sp, #0
 8020daa:	60f8      	str	r0, [r7, #12]
 8020dac:	60b9      	str	r1, [r7, #8]
 8020dae:	607a      	str	r2, [r7, #4]
 8020db0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020db6:	683b      	ldr	r3, [r7, #0]
 8020db8:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dbc:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020dc0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020dc2:	4b08      	ldr	r3, [pc, #32]	; (8020de4 <_tx_mutex_performance_system_info_get+0x40>)
 8020dc4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dc8:	681c      	ldr	r4, [r3, #0]
 8020dca:	68f9      	ldr	r1, [r7, #12]
 8020dcc:	68ba      	ldr	r2, [r7, #8]
 8020dce:	f107 0314 	add.w	r3, r7, #20
 8020dd2:	201f      	movs	r0, #31
 8020dd4:	47a0      	blx	r4
 8020dd6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020dda:	4618      	mov	r0, r3
 8020ddc:	372c      	adds	r7, #44	; 0x2c
 8020dde:	46bd      	mov	sp, r7
 8020de0:	bd90      	pop	{r4, r7, pc}
 8020de2:	bf00      	nop
 8020de4:	00000004 	.word	0x00000004

08020de8 <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020de8:	b590      	push	{r4, r7, lr}
 8020dea:	b085      	sub	sp, #20
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020df0:	4b07      	ldr	r3, [pc, #28]	; (8020e10 <_txe_mutex_prioritize+0x28>)
 8020df2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020df6:	681c      	ldr	r4, [r3, #0]
 8020df8:	6879      	ldr	r1, [r7, #4]
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	2200      	movs	r2, #0
 8020dfe:	2020      	movs	r0, #32
 8020e00:	47a0      	blx	r4
 8020e02:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e04:	68fb      	ldr	r3, [r7, #12]
}
 8020e06:	4618      	mov	r0, r3
 8020e08:	3714      	adds	r7, #20
 8020e0a:	46bd      	mov	sp, r7
 8020e0c:	bd90      	pop	{r4, r7, pc}
 8020e0e:	bf00      	nop
 8020e10:	00000004 	.word	0x00000004

08020e14 <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020e14:	b590      	push	{r4, r7, lr}
 8020e16:	b085      	sub	sp, #20
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020e1c:	4b07      	ldr	r3, [pc, #28]	; (8020e3c <_txe_mutex_put+0x28>)
 8020e1e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e22:	681c      	ldr	r4, [r3, #0]
 8020e24:	6879      	ldr	r1, [r7, #4]
 8020e26:	2300      	movs	r3, #0
 8020e28:	2200      	movs	r2, #0
 8020e2a:	2021      	movs	r0, #33	; 0x21
 8020e2c:	47a0      	blx	r4
 8020e2e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e30:	68fb      	ldr	r3, [r7, #12]
}
 8020e32:	4618      	mov	r0, r3
 8020e34:	3714      	adds	r7, #20
 8020e36:	46bd      	mov	sp, r7
 8020e38:	bd90      	pop	{r4, r7, pc}
 8020e3a:	bf00      	nop
 8020e3c:	00000004 	.word	0x00000004

08020e40 <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020e40:	b590      	push	{r4, r7, lr}
 8020e42:	b08b      	sub	sp, #44	; 0x2c
 8020e44:	af00      	add	r7, sp, #0
 8020e46:	60f8      	str	r0, [r7, #12]
 8020e48:	60b9      	str	r1, [r7, #8]
 8020e4a:	607a      	str	r2, [r7, #4]
 8020e4c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020e52:	683b      	ldr	r3, [r7, #0]
 8020e54:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e58:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020e5c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020e5e:	4b08      	ldr	r3, [pc, #32]	; (8020e80 <_txe_queue_create+0x40>)
 8020e60:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e64:	681c      	ldr	r4, [r3, #0]
 8020e66:	68f9      	ldr	r1, [r7, #12]
 8020e68:	68ba      	ldr	r2, [r7, #8]
 8020e6a:	f107 0314 	add.w	r3, r7, #20
 8020e6e:	2022      	movs	r0, #34	; 0x22
 8020e70:	47a0      	blx	r4
 8020e72:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020e76:	4618      	mov	r0, r3
 8020e78:	372c      	adds	r7, #44	; 0x2c
 8020e7a:	46bd      	mov	sp, r7
 8020e7c:	bd90      	pop	{r4, r7, pc}
 8020e7e:	bf00      	nop
 8020e80:	00000004 	.word	0x00000004

08020e84 <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020e84:	b590      	push	{r4, r7, lr}
 8020e86:	b085      	sub	sp, #20
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020e8c:	4b07      	ldr	r3, [pc, #28]	; (8020eac <_txe_queue_delete+0x28>)
 8020e8e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e92:	681c      	ldr	r4, [r3, #0]
 8020e94:	6879      	ldr	r1, [r7, #4]
 8020e96:	2300      	movs	r3, #0
 8020e98:	2200      	movs	r2, #0
 8020e9a:	2023      	movs	r0, #35	; 0x23
 8020e9c:	47a0      	blx	r4
 8020e9e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ea0:	68fb      	ldr	r3, [r7, #12]
}
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	3714      	adds	r7, #20
 8020ea6:	46bd      	mov	sp, r7
 8020ea8:	bd90      	pop	{r4, r7, pc}
 8020eaa:	bf00      	nop
 8020eac:	00000004 	.word	0x00000004

08020eb0 <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020eb0:	b590      	push	{r4, r7, lr}
 8020eb2:	b085      	sub	sp, #20
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020eb8:	4b07      	ldr	r3, [pc, #28]	; (8020ed8 <_txe_queue_flush+0x28>)
 8020eba:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ebe:	681c      	ldr	r4, [r3, #0]
 8020ec0:	6879      	ldr	r1, [r7, #4]
 8020ec2:	2300      	movs	r3, #0
 8020ec4:	2200      	movs	r2, #0
 8020ec6:	2024      	movs	r0, #36	; 0x24
 8020ec8:	47a0      	blx	r4
 8020eca:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ecc:	68fb      	ldr	r3, [r7, #12]
}
 8020ece:	4618      	mov	r0, r3
 8020ed0:	3714      	adds	r7, #20
 8020ed2:	46bd      	mov	sp, r7
 8020ed4:	bd90      	pop	{r4, r7, pc}
 8020ed6:	bf00      	nop
 8020ed8:	00000004 	.word	0x00000004

08020edc <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020edc:	b590      	push	{r4, r7, lr}
 8020ede:	b087      	sub	sp, #28
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	60f8      	str	r0, [r7, #12]
 8020ee4:	60b9      	str	r1, [r7, #8]
 8020ee6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020ee8:	4b07      	ldr	r3, [pc, #28]	; (8020f08 <_txe_queue_front_send+0x2c>)
 8020eea:	f859 3003 	ldr.w	r3, [r9, r3]
 8020eee:	681c      	ldr	r4, [r3, #0]
 8020ef0:	68f9      	ldr	r1, [r7, #12]
 8020ef2:	68ba      	ldr	r2, [r7, #8]
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	2025      	movs	r0, #37	; 0x25
 8020ef8:	47a0      	blx	r4
 8020efa:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020efc:	697b      	ldr	r3, [r7, #20]
}
 8020efe:	4618      	mov	r0, r3
 8020f00:	371c      	adds	r7, #28
 8020f02:	46bd      	mov	sp, r7
 8020f04:	bd90      	pop	{r4, r7, pc}
 8020f06:	bf00      	nop
 8020f08:	00000004 	.word	0x00000004

08020f0c <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020f0c:	b590      	push	{r4, r7, lr}
 8020f0e:	b08b      	sub	sp, #44	; 0x2c
 8020f10:	af00      	add	r7, sp, #0
 8020f12:	60f8      	str	r0, [r7, #12]
 8020f14:	60b9      	str	r1, [r7, #8]
 8020f16:	607a      	str	r2, [r7, #4]
 8020f18:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020f1e:	683b      	ldr	r3, [r7, #0]
 8020f20:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f24:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f28:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f2c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f2e:	4b08      	ldr	r3, [pc, #32]	; (8020f50 <_txe_queue_info_get+0x44>)
 8020f30:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f34:	681c      	ldr	r4, [r3, #0]
 8020f36:	68f9      	ldr	r1, [r7, #12]
 8020f38:	68ba      	ldr	r2, [r7, #8]
 8020f3a:	f107 0310 	add.w	r3, r7, #16
 8020f3e:	2026      	movs	r0, #38	; 0x26
 8020f40:	47a0      	blx	r4
 8020f42:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f46:	4618      	mov	r0, r3
 8020f48:	372c      	adds	r7, #44	; 0x2c
 8020f4a:	46bd      	mov	sp, r7
 8020f4c:	bd90      	pop	{r4, r7, pc}
 8020f4e:	bf00      	nop
 8020f50:	00000004 	.word	0x00000004

08020f54 <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020f54:	b590      	push	{r4, r7, lr}
 8020f56:	b08b      	sub	sp, #44	; 0x2c
 8020f58:	af00      	add	r7, sp, #0
 8020f5a:	60f8      	str	r0, [r7, #12]
 8020f5c:	60b9      	str	r1, [r7, #8]
 8020f5e:	607a      	str	r2, [r7, #4]
 8020f60:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020f66:	683b      	ldr	r3, [r7, #0]
 8020f68:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f6c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f70:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f74:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020f76:	4b08      	ldr	r3, [pc, #32]	; (8020f98 <_tx_queue_performance_info_get+0x44>)
 8020f78:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f7c:	681c      	ldr	r4, [r3, #0]
 8020f7e:	68f9      	ldr	r1, [r7, #12]
 8020f80:	68ba      	ldr	r2, [r7, #8]
 8020f82:	f107 0310 	add.w	r3, r7, #16
 8020f86:	2027      	movs	r0, #39	; 0x27
 8020f88:	47a0      	blx	r4
 8020f8a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f8e:	4618      	mov	r0, r3
 8020f90:	372c      	adds	r7, #44	; 0x2c
 8020f92:	46bd      	mov	sp, r7
 8020f94:	bd90      	pop	{r4, r7, pc}
 8020f96:	bf00      	nop
 8020f98:	00000004 	.word	0x00000004

08020f9c <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020f9c:	b590      	push	{r4, r7, lr}
 8020f9e:	b08b      	sub	sp, #44	; 0x2c
 8020fa0:	af00      	add	r7, sp, #0
 8020fa2:	60f8      	str	r0, [r7, #12]
 8020fa4:	60b9      	str	r1, [r7, #8]
 8020fa6:	607a      	str	r2, [r7, #4]
 8020fa8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020fae:	683b      	ldr	r3, [r7, #0]
 8020fb0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020fb4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020fb8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020fba:	4b08      	ldr	r3, [pc, #32]	; (8020fdc <_tx_queue_performance_system_info_get+0x40>)
 8020fbc:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fc0:	681c      	ldr	r4, [r3, #0]
 8020fc2:	68f9      	ldr	r1, [r7, #12]
 8020fc4:	68ba      	ldr	r2, [r7, #8]
 8020fc6:	f107 0314 	add.w	r3, r7, #20
 8020fca:	2028      	movs	r0, #40	; 0x28
 8020fcc:	47a0      	blx	r4
 8020fce:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	372c      	adds	r7, #44	; 0x2c
 8020fd6:	46bd      	mov	sp, r7
 8020fd8:	bd90      	pop	{r4, r7, pc}
 8020fda:	bf00      	nop
 8020fdc:	00000004 	.word	0x00000004

08020fe0 <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020fe0:	b590      	push	{r4, r7, lr}
 8020fe2:	b085      	sub	sp, #20
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020fe8:	4b07      	ldr	r3, [pc, #28]	; (8021008 <_txe_queue_prioritize+0x28>)
 8020fea:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fee:	681c      	ldr	r4, [r3, #0]
 8020ff0:	6879      	ldr	r1, [r7, #4]
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	2200      	movs	r2, #0
 8020ff6:	2029      	movs	r0, #41	; 0x29
 8020ff8:	47a0      	blx	r4
 8020ffa:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ffc:	68fb      	ldr	r3, [r7, #12]
}
 8020ffe:	4618      	mov	r0, r3
 8021000:	3714      	adds	r7, #20
 8021002:	46bd      	mov	sp, r7
 8021004:	bd90      	pop	{r4, r7, pc}
 8021006:	bf00      	nop
 8021008:	00000004 	.word	0x00000004

0802100c <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 802100c:	b590      	push	{r4, r7, lr}
 802100e:	b087      	sub	sp, #28
 8021010:	af00      	add	r7, sp, #0
 8021012:	60f8      	str	r0, [r7, #12]
 8021014:	60b9      	str	r1, [r7, #8]
 8021016:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8021018:	4b07      	ldr	r3, [pc, #28]	; (8021038 <_txe_queue_receive+0x2c>)
 802101a:	f859 3003 	ldr.w	r3, [r9, r3]
 802101e:	681c      	ldr	r4, [r3, #0]
 8021020:	68f9      	ldr	r1, [r7, #12]
 8021022:	68ba      	ldr	r2, [r7, #8]
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	202a      	movs	r0, #42	; 0x2a
 8021028:	47a0      	blx	r4
 802102a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802102c:	697b      	ldr	r3, [r7, #20]
}
 802102e:	4618      	mov	r0, r3
 8021030:	371c      	adds	r7, #28
 8021032:	46bd      	mov	sp, r7
 8021034:	bd90      	pop	{r4, r7, pc}
 8021036:	bf00      	nop
 8021038:	00000004 	.word	0x00000004

0802103c <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 802103c:	b590      	push	{r4, r7, lr}
 802103e:	b087      	sub	sp, #28
 8021040:	af00      	add	r7, sp, #0
 8021042:	60f8      	str	r0, [r7, #12]
 8021044:	60b9      	str	r1, [r7, #8]
 8021046:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8021048:	4b07      	ldr	r3, [pc, #28]	; (8021068 <_txe_queue_send+0x2c>)
 802104a:	f859 3003 	ldr.w	r3, [r9, r3]
 802104e:	681c      	ldr	r4, [r3, #0]
 8021050:	68f9      	ldr	r1, [r7, #12]
 8021052:	68ba      	ldr	r2, [r7, #8]
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	202b      	movs	r0, #43	; 0x2b
 8021058:	47a0      	blx	r4
 802105a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802105c:	697b      	ldr	r3, [r7, #20]
}
 802105e:	4618      	mov	r0, r3
 8021060:	371c      	adds	r7, #28
 8021062:	46bd      	mov	sp, r7
 8021064:	bd90      	pop	{r4, r7, pc}
 8021066:	bf00      	nop
 8021068:	00000004 	.word	0x00000004

0802106c <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 802106c:	b590      	push	{r4, r7, lr}
 802106e:	b085      	sub	sp, #20
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
 8021074:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 8021076:	4b07      	ldr	r3, [pc, #28]	; (8021094 <_txe_queue_send_notify+0x28>)
 8021078:	f859 3003 	ldr.w	r3, [r9, r3]
 802107c:	681c      	ldr	r4, [r3, #0]
 802107e:	6879      	ldr	r1, [r7, #4]
 8021080:	683a      	ldr	r2, [r7, #0]
 8021082:	2300      	movs	r3, #0
 8021084:	202c      	movs	r0, #44	; 0x2c
 8021086:	47a0      	blx	r4
 8021088:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802108a:	68fb      	ldr	r3, [r7, #12]
}
 802108c:	4618      	mov	r0, r3
 802108e:	3714      	adds	r7, #20
 8021090:	46bd      	mov	sp, r7
 8021092:	bd90      	pop	{r4, r7, pc}
 8021094:	00000004 	.word	0x00000004

08021098 <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8021098:	b590      	push	{r4, r7, lr}
 802109a:	b085      	sub	sp, #20
 802109c:	af00      	add	r7, sp, #0
 802109e:	6078      	str	r0, [r7, #4]
 80210a0:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 80210a2:	4b07      	ldr	r3, [pc, #28]	; (80210c0 <_txe_semaphore_ceiling_put+0x28>)
 80210a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80210a8:	681c      	ldr	r4, [r3, #0]
 80210aa:	6879      	ldr	r1, [r7, #4]
 80210ac:	2300      	movs	r3, #0
 80210ae:	683a      	ldr	r2, [r7, #0]
 80210b0:	202d      	movs	r0, #45	; 0x2d
 80210b2:	47a0      	blx	r4
 80210b4:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210b6:	68fb      	ldr	r3, [r7, #12]
}
 80210b8:	4618      	mov	r0, r3
 80210ba:	3714      	adds	r7, #20
 80210bc:	46bd      	mov	sp, r7
 80210be:	bd90      	pop	{r4, r7, pc}
 80210c0:	00000004 	.word	0x00000004

080210c4 <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80210c4:	b590      	push	{r4, r7, lr}
 80210c6:	b089      	sub	sp, #36	; 0x24
 80210c8:	af00      	add	r7, sp, #0
 80210ca:	60f8      	str	r0, [r7, #12]
 80210cc:	60b9      	str	r1, [r7, #8]
 80210ce:	607a      	str	r2, [r7, #4]
 80210d0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 80210d6:	683b      	ldr	r3, [r7, #0]
 80210d8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210da:	4b08      	ldr	r3, [pc, #32]	; (80210fc <_txe_semaphore_create+0x38>)
 80210dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80210e0:	681c      	ldr	r4, [r3, #0]
 80210e2:	68f9      	ldr	r1, [r7, #12]
 80210e4:	68ba      	ldr	r2, [r7, #8]
 80210e6:	f107 0314 	add.w	r3, r7, #20
 80210ea:	202e      	movs	r0, #46	; 0x2e
 80210ec:	47a0      	blx	r4
 80210ee:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80210f0:	69fb      	ldr	r3, [r7, #28]
}
 80210f2:	4618      	mov	r0, r3
 80210f4:	3724      	adds	r7, #36	; 0x24
 80210f6:	46bd      	mov	sp, r7
 80210f8:	bd90      	pop	{r4, r7, pc}
 80210fa:	bf00      	nop
 80210fc:	00000004 	.word	0x00000004

08021100 <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8021100:	b590      	push	{r4, r7, lr}
 8021102:	b085      	sub	sp, #20
 8021104:	af00      	add	r7, sp, #0
 8021106:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021108:	4b07      	ldr	r3, [pc, #28]	; (8021128 <_txe_semaphore_delete+0x28>)
 802110a:	f859 3003 	ldr.w	r3, [r9, r3]
 802110e:	681c      	ldr	r4, [r3, #0]
 8021110:	6879      	ldr	r1, [r7, #4]
 8021112:	2300      	movs	r3, #0
 8021114:	2200      	movs	r2, #0
 8021116:	202f      	movs	r0, #47	; 0x2f
 8021118:	47a0      	blx	r4
 802111a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802111c:	68fb      	ldr	r3, [r7, #12]
}
 802111e:	4618      	mov	r0, r3
 8021120:	3714      	adds	r7, #20
 8021122:	46bd      	mov	sp, r7
 8021124:	bd90      	pop	{r4, r7, pc}
 8021126:	bf00      	nop
 8021128:	00000004 	.word	0x00000004

0802112c <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 802112c:	b590      	push	{r4, r7, lr}
 802112e:	b085      	sub	sp, #20
 8021130:	af00      	add	r7, sp, #0
 8021132:	6078      	str	r0, [r7, #4]
 8021134:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 8021136:	4b07      	ldr	r3, [pc, #28]	; (8021154 <_txe_semaphore_get+0x28>)
 8021138:	f859 3003 	ldr.w	r3, [r9, r3]
 802113c:	681c      	ldr	r4, [r3, #0]
 802113e:	6879      	ldr	r1, [r7, #4]
 8021140:	2300      	movs	r3, #0
 8021142:	683a      	ldr	r2, [r7, #0]
 8021144:	2030      	movs	r0, #48	; 0x30
 8021146:	47a0      	blx	r4
 8021148:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802114a:	68fb      	ldr	r3, [r7, #12]
}
 802114c:	4618      	mov	r0, r3
 802114e:	3714      	adds	r7, #20
 8021150:	46bd      	mov	sp, r7
 8021152:	bd90      	pop	{r4, r7, pc}
 8021154:	00000004 	.word	0x00000004

08021158 <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 8021158:	b590      	push	{r4, r7, lr}
 802115a:	b08b      	sub	sp, #44	; 0x2c
 802115c:	af00      	add	r7, sp, #0
 802115e:	60f8      	str	r0, [r7, #12]
 8021160:	60b9      	str	r1, [r7, #8]
 8021162:	607a      	str	r2, [r7, #4]
 8021164:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 8021166:	687b      	ldr	r3, [r7, #4]
 8021168:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 802116a:	683b      	ldr	r3, [r7, #0]
 802116c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 802116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021170:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 8021172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021174:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8021176:	4b08      	ldr	r3, [pc, #32]	; (8021198 <_txe_semaphore_info_get+0x40>)
 8021178:	f859 3003 	ldr.w	r3, [r9, r3]
 802117c:	681c      	ldr	r4, [r3, #0]
 802117e:	68f9      	ldr	r1, [r7, #12]
 8021180:	68ba      	ldr	r2, [r7, #8]
 8021182:	f107 0314 	add.w	r3, r7, #20
 8021186:	2031      	movs	r0, #49	; 0x31
 8021188:	47a0      	blx	r4
 802118a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802118e:	4618      	mov	r0, r3
 8021190:	372c      	adds	r7, #44	; 0x2c
 8021192:	46bd      	mov	sp, r7
 8021194:	bd90      	pop	{r4, r7, pc}
 8021196:	bf00      	nop
 8021198:	00000004 	.word	0x00000004

0802119c <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 802119c:	b590      	push	{r4, r7, lr}
 802119e:	b089      	sub	sp, #36	; 0x24
 80211a0:	af00      	add	r7, sp, #0
 80211a2:	60f8      	str	r0, [r7, #12]
 80211a4:	60b9      	str	r1, [r7, #8]
 80211a6:	607a      	str	r2, [r7, #4]
 80211a8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80211ae:	683b      	ldr	r3, [r7, #0]
 80211b0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80211b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211b4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 80211b6:	4b08      	ldr	r3, [pc, #32]	; (80211d8 <_tx_semaphore_performance_info_get+0x3c>)
 80211b8:	f859 3003 	ldr.w	r3, [r9, r3]
 80211bc:	681c      	ldr	r4, [r3, #0]
 80211be:	68f9      	ldr	r1, [r7, #12]
 80211c0:	68ba      	ldr	r2, [r7, #8]
 80211c2:	f107 0310 	add.w	r3, r7, #16
 80211c6:	2032      	movs	r0, #50	; 0x32
 80211c8:	47a0      	blx	r4
 80211ca:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80211cc:	69fb      	ldr	r3, [r7, #28]
}
 80211ce:	4618      	mov	r0, r3
 80211d0:	3724      	adds	r7, #36	; 0x24
 80211d2:	46bd      	mov	sp, r7
 80211d4:	bd90      	pop	{r4, r7, pc}
 80211d6:	bf00      	nop
 80211d8:	00000004 	.word	0x00000004

080211dc <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211dc:	b590      	push	{r4, r7, lr}
 80211de:	b089      	sub	sp, #36	; 0x24
 80211e0:	af00      	add	r7, sp, #0
 80211e2:	60f8      	str	r0, [r7, #12]
 80211e4:	60b9      	str	r1, [r7, #8]
 80211e6:	607a      	str	r2, [r7, #4]
 80211e8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 80211f2:	4b08      	ldr	r3, [pc, #32]	; (8021214 <_tx_semaphore_performance_system_info_get+0x38>)
 80211f4:	f859 3003 	ldr.w	r3, [r9, r3]
 80211f8:	681c      	ldr	r4, [r3, #0]
 80211fa:	68f9      	ldr	r1, [r7, #12]
 80211fc:	68ba      	ldr	r2, [r7, #8]
 80211fe:	f107 0314 	add.w	r3, r7, #20
 8021202:	2033      	movs	r0, #51	; 0x33
 8021204:	47a0      	blx	r4
 8021206:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021208:	69fb      	ldr	r3, [r7, #28]
}
 802120a:	4618      	mov	r0, r3
 802120c:	3724      	adds	r7, #36	; 0x24
 802120e:	46bd      	mov	sp, r7
 8021210:	bd90      	pop	{r4, r7, pc}
 8021212:	bf00      	nop
 8021214:	00000004 	.word	0x00000004

08021218 <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8021218:	b590      	push	{r4, r7, lr}
 802121a:	b085      	sub	sp, #20
 802121c:	af00      	add	r7, sp, #0
 802121e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021220:	4b07      	ldr	r3, [pc, #28]	; (8021240 <_txe_semaphore_prioritize+0x28>)
 8021222:	f859 3003 	ldr.w	r3, [r9, r3]
 8021226:	681c      	ldr	r4, [r3, #0]
 8021228:	6879      	ldr	r1, [r7, #4]
 802122a:	2300      	movs	r3, #0
 802122c:	2200      	movs	r2, #0
 802122e:	2034      	movs	r0, #52	; 0x34
 8021230:	47a0      	blx	r4
 8021232:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021234:	68fb      	ldr	r3, [r7, #12]
}
 8021236:	4618      	mov	r0, r3
 8021238:	3714      	adds	r7, #20
 802123a:	46bd      	mov	sp, r7
 802123c:	bd90      	pop	{r4, r7, pc}
 802123e:	bf00      	nop
 8021240:	00000004 	.word	0x00000004

08021244 <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8021244:	b590      	push	{r4, r7, lr}
 8021246:	b085      	sub	sp, #20
 8021248:	af00      	add	r7, sp, #0
 802124a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 802124c:	4b07      	ldr	r3, [pc, #28]	; (802126c <_txe_semaphore_put+0x28>)
 802124e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021252:	681c      	ldr	r4, [r3, #0]
 8021254:	6879      	ldr	r1, [r7, #4]
 8021256:	2300      	movs	r3, #0
 8021258:	2200      	movs	r2, #0
 802125a:	2035      	movs	r0, #53	; 0x35
 802125c:	47a0      	blx	r4
 802125e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021260:	68fb      	ldr	r3, [r7, #12]
}
 8021262:	4618      	mov	r0, r3
 8021264:	3714      	adds	r7, #20
 8021266:	46bd      	mov	sp, r7
 8021268:	bd90      	pop	{r4, r7, pc}
 802126a:	bf00      	nop
 802126c:	00000004 	.word	0x00000004

08021270 <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8021270:	b590      	push	{r4, r7, lr}
 8021272:	b085      	sub	sp, #20
 8021274:	af00      	add	r7, sp, #0
 8021276:	6078      	str	r0, [r7, #4]
 8021278:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 802127a:	4b07      	ldr	r3, [pc, #28]	; (8021298 <_txe_semaphore_put_notify+0x28>)
 802127c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021280:	681c      	ldr	r4, [r3, #0]
 8021282:	6879      	ldr	r1, [r7, #4]
 8021284:	683a      	ldr	r2, [r7, #0]
 8021286:	2300      	movs	r3, #0
 8021288:	2036      	movs	r0, #54	; 0x36
 802128a:	47a0      	blx	r4
 802128c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802128e:	68fb      	ldr	r3, [r7, #12]
}
 8021290:	4618      	mov	r0, r3
 8021292:	3714      	adds	r7, #20
 8021294:	46bd      	mov	sp, r7
 8021296:	bd90      	pop	{r4, r7, pc}
 8021298:	00000004 	.word	0x00000004

0802129c <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 802129c:	b590      	push	{r4, r7, lr}
 802129e:	b08f      	sub	sp, #60	; 0x3c
 80212a0:	af00      	add	r7, sp, #0
 80212a2:	60f8      	str	r0, [r7, #12]
 80212a4:	60b9      	str	r1, [r7, #8]
 80212a6:	607a      	str	r2, [r7, #4]
 80212a8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 80212ae:	683b      	ldr	r3, [r7, #0]
 80212b0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 80212b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212b4:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 80212b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80212b8:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 80212ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80212bc:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 80212be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212c0:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 80212c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80212c4:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80212c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80212c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80212ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80212cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80212ce:	4b08      	ldr	r3, [pc, #32]	; (80212f0 <_txe_thread_create+0x54>)
 80212d0:	f859 3003 	ldr.w	r3, [r9, r3]
 80212d4:	681c      	ldr	r4, [r3, #0]
 80212d6:	68f9      	ldr	r1, [r7, #12]
 80212d8:	68ba      	ldr	r2, [r7, #8]
 80212da:	f107 0310 	add.w	r3, r7, #16
 80212de:	2037      	movs	r0, #55	; 0x37
 80212e0:	47a0      	blx	r4
 80212e2:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80212e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80212e6:	4618      	mov	r0, r3
 80212e8:	373c      	adds	r7, #60	; 0x3c
 80212ea:	46bd      	mov	sp, r7
 80212ec:	bd90      	pop	{r4, r7, pc}
 80212ee:	bf00      	nop
 80212f0:	00000004 	.word	0x00000004

080212f4 <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80212f4:	b590      	push	{r4, r7, lr}
 80212f6:	b085      	sub	sp, #20
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80212fc:	4b07      	ldr	r3, [pc, #28]	; (802131c <_txe_thread_delete+0x28>)
 80212fe:	f859 3003 	ldr.w	r3, [r9, r3]
 8021302:	681c      	ldr	r4, [r3, #0]
 8021304:	6879      	ldr	r1, [r7, #4]
 8021306:	2300      	movs	r3, #0
 8021308:	2200      	movs	r2, #0
 802130a:	2038      	movs	r0, #56	; 0x38
 802130c:	47a0      	blx	r4
 802130e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021310:	68fb      	ldr	r3, [r7, #12]
}
 8021312:	4618      	mov	r0, r3
 8021314:	3714      	adds	r7, #20
 8021316:	46bd      	mov	sp, r7
 8021318:	bd90      	pop	{r4, r7, pc}
 802131a:	bf00      	nop
 802131c:	00000004 	.word	0x00000004

08021320 <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 8021320:	b590      	push	{r4, r7, lr}
 8021322:	b085      	sub	sp, #20
 8021324:	af00      	add	r7, sp, #0
 8021326:	6078      	str	r0, [r7, #4]
 8021328:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 802132a:	4b07      	ldr	r3, [pc, #28]	; (8021348 <_txe_thread_entry_exit_notify+0x28>)
 802132c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021330:	681c      	ldr	r4, [r3, #0]
 8021332:	6879      	ldr	r1, [r7, #4]
 8021334:	683a      	ldr	r2, [r7, #0]
 8021336:	2300      	movs	r3, #0
 8021338:	2039      	movs	r0, #57	; 0x39
 802133a:	47a0      	blx	r4
 802133c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802133e:	68fb      	ldr	r3, [r7, #12]
}
 8021340:	4618      	mov	r0, r3
 8021342:	3714      	adds	r7, #20
 8021344:	46bd      	mov	sp, r7
 8021346:	bd90      	pop	{r4, r7, pc}
 8021348:	00000004 	.word	0x00000004

0802134c <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 802134c:	b590      	push	{r4, r7, lr}
 802134e:	b083      	sub	sp, #12
 8021350:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 8021352:	4b08      	ldr	r3, [pc, #32]	; (8021374 <_tx_thread_identify+0x28>)
 8021354:	f859 3003 	ldr.w	r3, [r9, r3]
 8021358:	681c      	ldr	r4, [r3, #0]
 802135a:	2300      	movs	r3, #0
 802135c:	2200      	movs	r2, #0
 802135e:	2100      	movs	r1, #0
 8021360:	203a      	movs	r0, #58	; 0x3a
 8021362:	47a0      	blx	r4
 8021364:	4603      	mov	r3, r0
 8021366:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 8021368:	687b      	ldr	r3, [r7, #4]
}
 802136a:	4618      	mov	r0, r3
 802136c:	370c      	adds	r7, #12
 802136e:	46bd      	mov	sp, r7
 8021370:	bd90      	pop	{r4, r7, pc}
 8021372:	bf00      	nop
 8021374:	00000004 	.word	0x00000004

08021378 <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8021378:	b590      	push	{r4, r7, lr}
 802137a:	b08d      	sub	sp, #52	; 0x34
 802137c:	af00      	add	r7, sp, #0
 802137e:	60f8      	str	r0, [r7, #12]
 8021380:	60b9      	str	r1, [r7, #8]
 8021382:	607a      	str	r2, [r7, #4]
 8021384:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 8021386:	687b      	ldr	r3, [r7, #4]
 8021388:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 802138a:	683b      	ldr	r3, [r7, #0]
 802138c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 802138e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021390:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 8021392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021394:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 8021396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021398:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 802139a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802139c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 802139e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80213a0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80213a2:	4b08      	ldr	r3, [pc, #32]	; (80213c4 <_txe_thread_info_get+0x4c>)
 80213a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80213a8:	681c      	ldr	r4, [r3, #0]
 80213aa:	68f9      	ldr	r1, [r7, #12]
 80213ac:	68ba      	ldr	r2, [r7, #8]
 80213ae:	f107 0310 	add.w	r3, r7, #16
 80213b2:	203b      	movs	r0, #59	; 0x3b
 80213b4:	47a0      	blx	r4
 80213b6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80213b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80213ba:	4618      	mov	r0, r3
 80213bc:	3734      	adds	r7, #52	; 0x34
 80213be:	46bd      	mov	sp, r7
 80213c0:	bd90      	pop	{r4, r7, pc}
 80213c2:	bf00      	nop
 80213c4:	00000004 	.word	0x00000004

080213c8 <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 80213c8:	b590      	push	{r4, r7, lr}
 80213ca:	b085      	sub	sp, #20
 80213cc:	af00      	add	r7, sp, #0
 80213ce:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80213d0:	4b07      	ldr	r3, [pc, #28]	; (80213f0 <_tx_thread_interrupt_control+0x28>)
 80213d2:	f859 3003 	ldr.w	r3, [r9, r3]
 80213d6:	681c      	ldr	r4, [r3, #0]
 80213d8:	2300      	movs	r3, #0
 80213da:	2200      	movs	r2, #0
 80213dc:	6879      	ldr	r1, [r7, #4]
 80213de:	2019      	movs	r0, #25
 80213e0:	47a0      	blx	r4
 80213e2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213e4:	68fb      	ldr	r3, [r7, #12]
}
 80213e6:	4618      	mov	r0, r3
 80213e8:	3714      	adds	r7, #20
 80213ea:	46bd      	mov	sp, r7
 80213ec:	bd90      	pop	{r4, r7, pc}
 80213ee:	bf00      	nop
 80213f0:	00000004 	.word	0x00000004

080213f4 <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 80213f4:	b590      	push	{r4, r7, lr}
 80213f6:	b08f      	sub	sp, #60	; 0x3c
 80213f8:	af00      	add	r7, sp, #0
 80213fa:	60f8      	str	r0, [r7, #12]
 80213fc:	60b9      	str	r1, [r7, #8]
 80213fe:	607a      	str	r2, [r7, #4]
 8021400:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 8021406:	683b      	ldr	r3, [r7, #0]
 8021408:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 802140a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802140c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 802140e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021410:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 8021412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021414:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 8021416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021418:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 802141a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802141c:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 802141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021420:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 8021422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021424:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 8021426:	4b08      	ldr	r3, [pc, #32]	; (8021448 <_tx_thread_performance_info_get+0x54>)
 8021428:	f859 3003 	ldr.w	r3, [r9, r3]
 802142c:	681c      	ldr	r4, [r3, #0]
 802142e:	68f9      	ldr	r1, [r7, #12]
 8021430:	68ba      	ldr	r2, [r7, #8]
 8021432:	f107 0310 	add.w	r3, r7, #16
 8021436:	203c      	movs	r0, #60	; 0x3c
 8021438:	47a0      	blx	r4
 802143a:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 802143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802143e:	4618      	mov	r0, r3
 8021440:	373c      	adds	r7, #60	; 0x3c
 8021442:	46bd      	mov	sp, r7
 8021444:	bd90      	pop	{r4, r7, pc}
 8021446:	bf00      	nop
 8021448:	00000004 	.word	0x00000004

0802144c <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 802144c:	b590      	push	{r4, r7, lr}
 802144e:	b08f      	sub	sp, #60	; 0x3c
 8021450:	af00      	add	r7, sp, #0
 8021452:	60f8      	str	r0, [r7, #12]
 8021454:	60b9      	str	r1, [r7, #8]
 8021456:	607a      	str	r2, [r7, #4]
 8021458:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 802145e:	683b      	ldr	r3, [r7, #0]
 8021460:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 8021462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021464:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 8021466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021468:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 802146a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802146c:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802146e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021470:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 8021472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021474:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 8021476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021478:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 802147a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802147c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 802147e:	4b08      	ldr	r3, [pc, #32]	; (80214a0 <_tx_thread_performance_system_info_get+0x54>)
 8021480:	f859 3003 	ldr.w	r3, [r9, r3]
 8021484:	681c      	ldr	r4, [r3, #0]
 8021486:	68f9      	ldr	r1, [r7, #12]
 8021488:	68ba      	ldr	r2, [r7, #8]
 802148a:	f107 0310 	add.w	r3, r7, #16
 802148e:	203d      	movs	r0, #61	; 0x3d
 8021490:	47a0      	blx	r4
 8021492:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021496:	4618      	mov	r0, r3
 8021498:	373c      	adds	r7, #60	; 0x3c
 802149a:	46bd      	mov	sp, r7
 802149c:	bd90      	pop	{r4, r7, pc}
 802149e:	bf00      	nop
 80214a0:	00000004 	.word	0x00000004

080214a4 <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80214a4:	b590      	push	{r4, r7, lr}
 80214a6:	b087      	sub	sp, #28
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	60f8      	str	r0, [r7, #12]
 80214ac:	60b9      	str	r1, [r7, #8]
 80214ae:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 80214b0:	4b07      	ldr	r3, [pc, #28]	; (80214d0 <_txe_thread_preemption_change+0x2c>)
 80214b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80214b6:	681c      	ldr	r4, [r3, #0]
 80214b8:	68f9      	ldr	r1, [r7, #12]
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	68ba      	ldr	r2, [r7, #8]
 80214be:	203e      	movs	r0, #62	; 0x3e
 80214c0:	47a0      	blx	r4
 80214c2:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214c4:	697b      	ldr	r3, [r7, #20]
}
 80214c6:	4618      	mov	r0, r3
 80214c8:	371c      	adds	r7, #28
 80214ca:	46bd      	mov	sp, r7
 80214cc:	bd90      	pop	{r4, r7, pc}
 80214ce:	bf00      	nop
 80214d0:	00000004 	.word	0x00000004

080214d4 <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80214d4:	b590      	push	{r4, r7, lr}
 80214d6:	b087      	sub	sp, #28
 80214d8:	af00      	add	r7, sp, #0
 80214da:	60f8      	str	r0, [r7, #12]
 80214dc:	60b9      	str	r1, [r7, #8]
 80214de:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80214e0:	4b07      	ldr	r3, [pc, #28]	; (8021500 <_txe_thread_priority_change+0x2c>)
 80214e2:	f859 3003 	ldr.w	r3, [r9, r3]
 80214e6:	681c      	ldr	r4, [r3, #0]
 80214e8:	68f9      	ldr	r1, [r7, #12]
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	68ba      	ldr	r2, [r7, #8]
 80214ee:	203f      	movs	r0, #63	; 0x3f
 80214f0:	47a0      	blx	r4
 80214f2:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214f4:	697b      	ldr	r3, [r7, #20]
}
 80214f6:	4618      	mov	r0, r3
 80214f8:	371c      	adds	r7, #28
 80214fa:	46bd      	mov	sp, r7
 80214fc:	bd90      	pop	{r4, r7, pc}
 80214fe:	bf00      	nop
 8021500:	00000004 	.word	0x00000004

08021504 <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 8021504:	b598      	push	{r3, r4, r7, lr}
 8021506:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 8021508:	4b05      	ldr	r3, [pc, #20]	; (8021520 <_txe_thread_relinquish+0x1c>)
 802150a:	f859 3003 	ldr.w	r3, [r9, r3]
 802150e:	681c      	ldr	r4, [r3, #0]
 8021510:	2300      	movs	r3, #0
 8021512:	2200      	movs	r2, #0
 8021514:	2100      	movs	r1, #0
 8021516:	2040      	movs	r0, #64	; 0x40
 8021518:	47a0      	blx	r4
}
 802151a:	bf00      	nop
 802151c:	bd98      	pop	{r3, r4, r7, pc}
 802151e:	bf00      	nop
 8021520:	00000004 	.word	0x00000004

08021524 <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 8021524:	b590      	push	{r4, r7, lr}
 8021526:	b085      	sub	sp, #20
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 802152c:	4b07      	ldr	r3, [pc, #28]	; (802154c <_txe_thread_reset+0x28>)
 802152e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021532:	681c      	ldr	r4, [r3, #0]
 8021534:	6879      	ldr	r1, [r7, #4]
 8021536:	2300      	movs	r3, #0
 8021538:	2200      	movs	r2, #0
 802153a:	2041      	movs	r0, #65	; 0x41
 802153c:	47a0      	blx	r4
 802153e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021540:	68fb      	ldr	r3, [r7, #12]
}
 8021542:	4618      	mov	r0, r3
 8021544:	3714      	adds	r7, #20
 8021546:	46bd      	mov	sp, r7
 8021548:	bd90      	pop	{r4, r7, pc}
 802154a:	bf00      	nop
 802154c:	00000004 	.word	0x00000004

08021550 <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8021550:	b590      	push	{r4, r7, lr}
 8021552:	b085      	sub	sp, #20
 8021554:	af00      	add	r7, sp, #0
 8021556:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021558:	4b07      	ldr	r3, [pc, #28]	; (8021578 <_txe_thread_resume+0x28>)
 802155a:	f859 3003 	ldr.w	r3, [r9, r3]
 802155e:	681c      	ldr	r4, [r3, #0]
 8021560:	6879      	ldr	r1, [r7, #4]
 8021562:	2300      	movs	r3, #0
 8021564:	2200      	movs	r2, #0
 8021566:	2042      	movs	r0, #66	; 0x42
 8021568:	47a0      	blx	r4
 802156a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802156c:	68fb      	ldr	r3, [r7, #12]
}
 802156e:	4618      	mov	r0, r3
 8021570:	3714      	adds	r7, #20
 8021572:	46bd      	mov	sp, r7
 8021574:	bd90      	pop	{r4, r7, pc}
 8021576:	bf00      	nop
 8021578:	00000004 	.word	0x00000004

0802157c <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 802157c:	b590      	push	{r4, r7, lr}
 802157e:	b085      	sub	sp, #20
 8021580:	af00      	add	r7, sp, #0
 8021582:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 8021584:	4b07      	ldr	r3, [pc, #28]	; (80215a4 <_tx_thread_sleep+0x28>)
 8021586:	f859 3003 	ldr.w	r3, [r9, r3]
 802158a:	681c      	ldr	r4, [r3, #0]
 802158c:	2300      	movs	r3, #0
 802158e:	2200      	movs	r2, #0
 8021590:	6879      	ldr	r1, [r7, #4]
 8021592:	2043      	movs	r0, #67	; 0x43
 8021594:	47a0      	blx	r4
 8021596:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021598:	68fb      	ldr	r3, [r7, #12]
}
 802159a:	4618      	mov	r0, r3
 802159c:	3714      	adds	r7, #20
 802159e:	46bd      	mov	sp, r7
 80215a0:	bd90      	pop	{r4, r7, pc}
 80215a2:	bf00      	nop
 80215a4:	00000004 	.word	0x00000004

080215a8 <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 80215a8:	b590      	push	{r4, r7, lr}
 80215aa:	b085      	sub	sp, #20
 80215ac:	af00      	add	r7, sp, #0
 80215ae:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 80215b0:	4b07      	ldr	r3, [pc, #28]	; (80215d0 <_tx_thread_stack_error_notify+0x28>)
 80215b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80215b6:	681c      	ldr	r4, [r3, #0]
 80215b8:	6879      	ldr	r1, [r7, #4]
 80215ba:	2300      	movs	r3, #0
 80215bc:	2200      	movs	r2, #0
 80215be:	2044      	movs	r0, #68	; 0x44
 80215c0:	47a0      	blx	r4
 80215c2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215c4:	68fb      	ldr	r3, [r7, #12]
}
 80215c6:	4618      	mov	r0, r3
 80215c8:	3714      	adds	r7, #20
 80215ca:	46bd      	mov	sp, r7
 80215cc:	bd90      	pop	{r4, r7, pc}
 80215ce:	bf00      	nop
 80215d0:	00000004 	.word	0x00000004

080215d4 <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80215d4:	b590      	push	{r4, r7, lr}
 80215d6:	b085      	sub	sp, #20
 80215d8:	af00      	add	r7, sp, #0
 80215da:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80215dc:	4b07      	ldr	r3, [pc, #28]	; (80215fc <_txe_thread_suspend+0x28>)
 80215de:	f859 3003 	ldr.w	r3, [r9, r3]
 80215e2:	681c      	ldr	r4, [r3, #0]
 80215e4:	6879      	ldr	r1, [r7, #4]
 80215e6:	2300      	movs	r3, #0
 80215e8:	2200      	movs	r2, #0
 80215ea:	2045      	movs	r0, #69	; 0x45
 80215ec:	47a0      	blx	r4
 80215ee:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215f0:	68fb      	ldr	r3, [r7, #12]
}
 80215f2:	4618      	mov	r0, r3
 80215f4:	3714      	adds	r7, #20
 80215f6:	46bd      	mov	sp, r7
 80215f8:	bd90      	pop	{r4, r7, pc}
 80215fa:	bf00      	nop
 80215fc:	00000004 	.word	0x00000004

08021600 <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8021600:	b590      	push	{r4, r7, lr}
 8021602:	b085      	sub	sp, #20
 8021604:	af00      	add	r7, sp, #0
 8021606:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021608:	4b07      	ldr	r3, [pc, #28]	; (8021628 <_txe_thread_terminate+0x28>)
 802160a:	f859 3003 	ldr.w	r3, [r9, r3]
 802160e:	681c      	ldr	r4, [r3, #0]
 8021610:	6879      	ldr	r1, [r7, #4]
 8021612:	2300      	movs	r3, #0
 8021614:	2200      	movs	r2, #0
 8021616:	2046      	movs	r0, #70	; 0x46
 8021618:	47a0      	blx	r4
 802161a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802161c:	68fb      	ldr	r3, [r7, #12]
}
 802161e:	4618      	mov	r0, r3
 8021620:	3714      	adds	r7, #20
 8021622:	46bd      	mov	sp, r7
 8021624:	bd90      	pop	{r4, r7, pc}
 8021626:	bf00      	nop
 8021628:	00000004 	.word	0x00000004

0802162c <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 802162c:	b590      	push	{r4, r7, lr}
 802162e:	b087      	sub	sp, #28
 8021630:	af00      	add	r7, sp, #0
 8021632:	60f8      	str	r0, [r7, #12]
 8021634:	60b9      	str	r1, [r7, #8]
 8021636:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 8021638:	4b07      	ldr	r3, [pc, #28]	; (8021658 <_txe_thread_time_slice_change+0x2c>)
 802163a:	f859 3003 	ldr.w	r3, [r9, r3]
 802163e:	681c      	ldr	r4, [r3, #0]
 8021640:	68f9      	ldr	r1, [r7, #12]
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	68ba      	ldr	r2, [r7, #8]
 8021646:	2047      	movs	r0, #71	; 0x47
 8021648:	47a0      	blx	r4
 802164a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802164c:	697b      	ldr	r3, [r7, #20]
}
 802164e:	4618      	mov	r0, r3
 8021650:	371c      	adds	r7, #28
 8021652:	46bd      	mov	sp, r7
 8021654:	bd90      	pop	{r4, r7, pc}
 8021656:	bf00      	nop
 8021658:	00000004 	.word	0x00000004

0802165c <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 802165c:	b590      	push	{r4, r7, lr}
 802165e:	b085      	sub	sp, #20
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021664:	4b07      	ldr	r3, [pc, #28]	; (8021684 <_txe_thread_wait_abort+0x28>)
 8021666:	f859 3003 	ldr.w	r3, [r9, r3]
 802166a:	681c      	ldr	r4, [r3, #0]
 802166c:	6879      	ldr	r1, [r7, #4]
 802166e:	2300      	movs	r3, #0
 8021670:	2200      	movs	r2, #0
 8021672:	2048      	movs	r0, #72	; 0x48
 8021674:	47a0      	blx	r4
 8021676:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021678:	68fb      	ldr	r3, [r7, #12]
}
 802167a:	4618      	mov	r0, r3
 802167c:	3714      	adds	r7, #20
 802167e:	46bd      	mov	sp, r7
 8021680:	bd90      	pop	{r4, r7, pc}
 8021682:	bf00      	nop
 8021684:	00000004 	.word	0x00000004

08021688 <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 8021688:	b590      	push	{r4, r7, lr}
 802168a:	b083      	sub	sp, #12
 802168c:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 802168e:	4b07      	ldr	r3, [pc, #28]	; (80216ac <_tx_time_get+0x24>)
 8021690:	f859 3003 	ldr.w	r3, [r9, r3]
 8021694:	681c      	ldr	r4, [r3, #0]
 8021696:	2300      	movs	r3, #0
 8021698:	2200      	movs	r2, #0
 802169a:	2100      	movs	r1, #0
 802169c:	2049      	movs	r0, #73	; 0x49
 802169e:	47a0      	blx	r4
 80216a0:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216a2:	687b      	ldr	r3, [r7, #4]
}
 80216a4:	4618      	mov	r0, r3
 80216a6:	370c      	adds	r7, #12
 80216a8:	46bd      	mov	sp, r7
 80216aa:	bd90      	pop	{r4, r7, pc}
 80216ac:	00000004 	.word	0x00000004

080216b0 <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 80216b0:	b590      	push	{r4, r7, lr}
 80216b2:	b083      	sub	sp, #12
 80216b4:	af00      	add	r7, sp, #0
 80216b6:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 80216b8:	4b06      	ldr	r3, [pc, #24]	; (80216d4 <_tx_time_set+0x24>)
 80216ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80216be:	681c      	ldr	r4, [r3, #0]
 80216c0:	2300      	movs	r3, #0
 80216c2:	2200      	movs	r2, #0
 80216c4:	6879      	ldr	r1, [r7, #4]
 80216c6:	204a      	movs	r0, #74	; 0x4a
 80216c8:	47a0      	blx	r4
}
 80216ca:	bf00      	nop
 80216cc:	370c      	adds	r7, #12
 80216ce:	46bd      	mov	sp, r7
 80216d0:	bd90      	pop	{r4, r7, pc}
 80216d2:	bf00      	nop
 80216d4:	00000004 	.word	0x00000004

080216d8 <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80216d8:	b590      	push	{r4, r7, lr}
 80216da:	b085      	sub	sp, #20
 80216dc:	af00      	add	r7, sp, #0
 80216de:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80216e0:	4b07      	ldr	r3, [pc, #28]	; (8021700 <_txe_timer_activate+0x28>)
 80216e2:	f859 3003 	ldr.w	r3, [r9, r3]
 80216e6:	681c      	ldr	r4, [r3, #0]
 80216e8:	6879      	ldr	r1, [r7, #4]
 80216ea:	2300      	movs	r3, #0
 80216ec:	2200      	movs	r2, #0
 80216ee:	204b      	movs	r0, #75	; 0x4b
 80216f0:	47a0      	blx	r4
 80216f2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80216f4:	68fb      	ldr	r3, [r7, #12]
}
 80216f6:	4618      	mov	r0, r3
 80216f8:	3714      	adds	r7, #20
 80216fa:	46bd      	mov	sp, r7
 80216fc:	bd90      	pop	{r4, r7, pc}
 80216fe:	bf00      	nop
 8021700:	00000004 	.word	0x00000004

08021704 <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 8021704:	b590      	push	{r4, r7, lr}
 8021706:	b087      	sub	sp, #28
 8021708:	af00      	add	r7, sp, #0
 802170a:	60f8      	str	r0, [r7, #12]
 802170c:	60b9      	str	r1, [r7, #8]
 802170e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 8021710:	4b07      	ldr	r3, [pc, #28]	; (8021730 <_txe_timer_change+0x2c>)
 8021712:	f859 3003 	ldr.w	r3, [r9, r3]
 8021716:	681c      	ldr	r4, [r3, #0]
 8021718:	68f9      	ldr	r1, [r7, #12]
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	68ba      	ldr	r2, [r7, #8]
 802171e:	204c      	movs	r0, #76	; 0x4c
 8021720:	47a0      	blx	r4
 8021722:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021724:	697b      	ldr	r3, [r7, #20]
}
 8021726:	4618      	mov	r0, r3
 8021728:	371c      	adds	r7, #28
 802172a:	46bd      	mov	sp, r7
 802172c:	bd90      	pop	{r4, r7, pc}
 802172e:	bf00      	nop
 8021730:	00000004 	.word	0x00000004

08021734 <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8021734:	b590      	push	{r4, r7, lr}
 8021736:	b08d      	sub	sp, #52	; 0x34
 8021738:	af00      	add	r7, sp, #0
 802173a:	60f8      	str	r0, [r7, #12]
 802173c:	60b9      	str	r1, [r7, #8]
 802173e:	607a      	str	r2, [r7, #4]
 8021740:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 8021746:	683b      	ldr	r3, [r7, #0]
 8021748:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 802174a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802174c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 802174e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021750:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 8021752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021754:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 8021756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021758:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 802175a:	4b08      	ldr	r3, [pc, #32]	; (802177c <_txe_timer_create+0x48>)
 802175c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021760:	681c      	ldr	r4, [r3, #0]
 8021762:	68f9      	ldr	r1, [r7, #12]
 8021764:	68ba      	ldr	r2, [r7, #8]
 8021766:	f107 0314 	add.w	r3, r7, #20
 802176a:	204d      	movs	r0, #77	; 0x4d
 802176c:	47a0      	blx	r4
 802176e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8021770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8021772:	4618      	mov	r0, r3
 8021774:	3734      	adds	r7, #52	; 0x34
 8021776:	46bd      	mov	sp, r7
 8021778:	bd90      	pop	{r4, r7, pc}
 802177a:	bf00      	nop
 802177c:	00000004 	.word	0x00000004

08021780 <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8021780:	b590      	push	{r4, r7, lr}
 8021782:	b085      	sub	sp, #20
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 8021788:	4b07      	ldr	r3, [pc, #28]	; (80217a8 <_txe_timer_deactivate+0x28>)
 802178a:	f859 3003 	ldr.w	r3, [r9, r3]
 802178e:	681c      	ldr	r4, [r3, #0]
 8021790:	6879      	ldr	r1, [r7, #4]
 8021792:	2300      	movs	r3, #0
 8021794:	2200      	movs	r2, #0
 8021796:	204e      	movs	r0, #78	; 0x4e
 8021798:	47a0      	blx	r4
 802179a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802179c:	68fb      	ldr	r3, [r7, #12]
}
 802179e:	4618      	mov	r0, r3
 80217a0:	3714      	adds	r7, #20
 80217a2:	46bd      	mov	sp, r7
 80217a4:	bd90      	pop	{r4, r7, pc}
 80217a6:	bf00      	nop
 80217a8:	00000004 	.word	0x00000004

080217ac <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 80217ac:	b590      	push	{r4, r7, lr}
 80217ae:	b085      	sub	sp, #20
 80217b0:	af00      	add	r7, sp, #0
 80217b2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80217b4:	4b07      	ldr	r3, [pc, #28]	; (80217d4 <_txe_timer_delete+0x28>)
 80217b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80217ba:	681c      	ldr	r4, [r3, #0]
 80217bc:	6879      	ldr	r1, [r7, #4]
 80217be:	2300      	movs	r3, #0
 80217c0:	2200      	movs	r2, #0
 80217c2:	204f      	movs	r0, #79	; 0x4f
 80217c4:	47a0      	blx	r4
 80217c6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217c8:	68fb      	ldr	r3, [r7, #12]
}
 80217ca:	4618      	mov	r0, r3
 80217cc:	3714      	adds	r7, #20
 80217ce:	46bd      	mov	sp, r7
 80217d0:	bd90      	pop	{r4, r7, pc}
 80217d2:	bf00      	nop
 80217d4:	00000004 	.word	0x00000004

080217d8 <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80217d8:	b590      	push	{r4, r7, lr}
 80217da:	b08b      	sub	sp, #44	; 0x2c
 80217dc:	af00      	add	r7, sp, #0
 80217de:	60f8      	str	r0, [r7, #12]
 80217e0:	60b9      	str	r1, [r7, #8]
 80217e2:	607a      	str	r2, [r7, #4]
 80217e4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80217e6:	687b      	ldr	r3, [r7, #4]
 80217e8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 80217ea:	683b      	ldr	r3, [r7, #0]
 80217ec:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 80217ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217f0:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 80217f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80217f4:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80217f6:	4b08      	ldr	r3, [pc, #32]	; (8021818 <_txe_timer_info_get+0x40>)
 80217f8:	f859 3003 	ldr.w	r3, [r9, r3]
 80217fc:	681c      	ldr	r4, [r3, #0]
 80217fe:	68f9      	ldr	r1, [r7, #12]
 8021800:	68ba      	ldr	r2, [r7, #8]
 8021802:	f107 0314 	add.w	r3, r7, #20
 8021806:	2050      	movs	r0, #80	; 0x50
 8021808:	47a0      	blx	r4
 802180a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802180e:	4618      	mov	r0, r3
 8021810:	372c      	adds	r7, #44	; 0x2c
 8021812:	46bd      	mov	sp, r7
 8021814:	bd90      	pop	{r4, r7, pc}
 8021816:	bf00      	nop
 8021818:	00000004 	.word	0x00000004

0802181c <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 802181c:	b590      	push	{r4, r7, lr}
 802181e:	b08b      	sub	sp, #44	; 0x2c
 8021820:	af00      	add	r7, sp, #0
 8021822:	60f8      	str	r0, [r7, #12]
 8021824:	60b9      	str	r1, [r7, #8]
 8021826:	607a      	str	r2, [r7, #4]
 8021828:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 802182e:	683b      	ldr	r3, [r7, #0]
 8021830:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 8021832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021834:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 8021836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021838:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 802183a:	4b08      	ldr	r3, [pc, #32]	; (802185c <_tx_timer_performance_info_get+0x40>)
 802183c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021840:	681c      	ldr	r4, [r3, #0]
 8021842:	68f9      	ldr	r1, [r7, #12]
 8021844:	68ba      	ldr	r2, [r7, #8]
 8021846:	f107 0314 	add.w	r3, r7, #20
 802184a:	2051      	movs	r0, #81	; 0x51
 802184c:	47a0      	blx	r4
 802184e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021852:	4618      	mov	r0, r3
 8021854:	372c      	adds	r7, #44	; 0x2c
 8021856:	46bd      	mov	sp, r7
 8021858:	bd90      	pop	{r4, r7, pc}
 802185a:	bf00      	nop
 802185c:	00000004 	.word	0x00000004

08021860 <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021860:	b590      	push	{r4, r7, lr}
 8021862:	b089      	sub	sp, #36	; 0x24
 8021864:	af00      	add	r7, sp, #0
 8021866:	60f8      	str	r0, [r7, #12]
 8021868:	60b9      	str	r1, [r7, #8]
 802186a:	607a      	str	r2, [r7, #4]
 802186c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 802186e:	687b      	ldr	r3, [r7, #4]
 8021870:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 8021872:	683b      	ldr	r3, [r7, #0]
 8021874:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 8021876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021878:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 802187a:	4b08      	ldr	r3, [pc, #32]	; (802189c <_tx_timer_performance_system_info_get+0x3c>)
 802187c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021880:	681c      	ldr	r4, [r3, #0]
 8021882:	68f9      	ldr	r1, [r7, #12]
 8021884:	68ba      	ldr	r2, [r7, #8]
 8021886:	f107 0310 	add.w	r3, r7, #16
 802188a:	2052      	movs	r0, #82	; 0x52
 802188c:	47a0      	blx	r4
 802188e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021890:	69fb      	ldr	r3, [r7, #28]
}
 8021892:	4618      	mov	r0, r3
 8021894:	3724      	adds	r7, #36	; 0x24
 8021896:	46bd      	mov	sp, r7
 8021898:	bd90      	pop	{r4, r7, pc}
 802189a:	bf00      	nop
 802189c:	00000004 	.word	0x00000004

080218a0 <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 80218a0:	b590      	push	{r4, r7, lr}
 80218a2:	b085      	sub	sp, #20
 80218a4:	af00      	add	r7, sp, #0
 80218a6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 80218a8:	4b07      	ldr	r3, [pc, #28]	; (80218c8 <_tx_trace_buffer_full_notify+0x28>)
 80218aa:	f859 3003 	ldr.w	r3, [r9, r3]
 80218ae:	681c      	ldr	r4, [r3, #0]
 80218b0:	6879      	ldr	r1, [r7, #4]
 80218b2:	2300      	movs	r3, #0
 80218b4:	2200      	movs	r2, #0
 80218b6:	205a      	movs	r0, #90	; 0x5a
 80218b8:	47a0      	blx	r4
 80218ba:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80218bc:	68fb      	ldr	r3, [r7, #12]
}
 80218be:	4618      	mov	r0, r3
 80218c0:	3714      	adds	r7, #20
 80218c2:	46bd      	mov	sp, r7
 80218c4:	bd90      	pop	{r4, r7, pc}
 80218c6:	bf00      	nop
 80218c8:	00000004 	.word	0x00000004

080218cc <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80218cc:	b590      	push	{r4, r7, lr}
 80218ce:	b083      	sub	sp, #12
 80218d0:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80218d2:	4b07      	ldr	r3, [pc, #28]	; (80218f0 <_tx_trace_disable+0x24>)
 80218d4:	f859 3003 	ldr.w	r3, [r9, r3]
 80218d8:	681c      	ldr	r4, [r3, #0]
 80218da:	2300      	movs	r3, #0
 80218dc:	2200      	movs	r2, #0
 80218de:	2100      	movs	r1, #0
 80218e0:	2056      	movs	r0, #86	; 0x56
 80218e2:	47a0      	blx	r4
 80218e4:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80218e6:	687b      	ldr	r3, [r7, #4]
}
 80218e8:	4618      	mov	r0, r3
 80218ea:	370c      	adds	r7, #12
 80218ec:	46bd      	mov	sp, r7
 80218ee:	bd90      	pop	{r4, r7, pc}
 80218f0:	00000004 	.word	0x00000004

080218f4 <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 80218f4:	b590      	push	{r4, r7, lr}
 80218f6:	b087      	sub	sp, #28
 80218f8:	af00      	add	r7, sp, #0
 80218fa:	60f8      	str	r0, [r7, #12]
 80218fc:	60b9      	str	r1, [r7, #8]
 80218fe:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 8021900:	4b07      	ldr	r3, [pc, #28]	; (8021920 <_tx_trace_enable+0x2c>)
 8021902:	f859 3003 	ldr.w	r3, [r9, r3]
 8021906:	681c      	ldr	r4, [r3, #0]
 8021908:	68f9      	ldr	r1, [r7, #12]
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	68ba      	ldr	r2, [r7, #8]
 802190e:	2053      	movs	r0, #83	; 0x53
 8021910:	47a0      	blx	r4
 8021912:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021914:	697b      	ldr	r3, [r7, #20]
}
 8021916:	4618      	mov	r0, r3
 8021918:	371c      	adds	r7, #28
 802191a:	46bd      	mov	sp, r7
 802191c:	bd90      	pop	{r4, r7, pc}
 802191e:	bf00      	nop
 8021920:	00000004 	.word	0x00000004

08021924 <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 8021924:	b590      	push	{r4, r7, lr}
 8021926:	b085      	sub	sp, #20
 8021928:	af00      	add	r7, sp, #0
 802192a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 802192c:	4b07      	ldr	r3, [pc, #28]	; (802194c <_tx_trace_event_filter+0x28>)
 802192e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021932:	681c      	ldr	r4, [r3, #0]
 8021934:	2300      	movs	r3, #0
 8021936:	2200      	movs	r2, #0
 8021938:	6879      	ldr	r1, [r7, #4]
 802193a:	2054      	movs	r0, #84	; 0x54
 802193c:	47a0      	blx	r4
 802193e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021940:	68fb      	ldr	r3, [r7, #12]
}
 8021942:	4618      	mov	r0, r3
 8021944:	3714      	adds	r7, #20
 8021946:	46bd      	mov	sp, r7
 8021948:	bd90      	pop	{r4, r7, pc}
 802194a:	bf00      	nop
 802194c:	00000004 	.word	0x00000004

08021950 <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 8021950:	b590      	push	{r4, r7, lr}
 8021952:	b085      	sub	sp, #20
 8021954:	af00      	add	r7, sp, #0
 8021956:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 8021958:	4b07      	ldr	r3, [pc, #28]	; (8021978 <_tx_trace_event_unfilter+0x28>)
 802195a:	f859 3003 	ldr.w	r3, [r9, r3]
 802195e:	681c      	ldr	r4, [r3, #0]
 8021960:	2300      	movs	r3, #0
 8021962:	2200      	movs	r2, #0
 8021964:	6879      	ldr	r1, [r7, #4]
 8021966:	2055      	movs	r0, #85	; 0x55
 8021968:	47a0      	blx	r4
 802196a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802196c:	68fb      	ldr	r3, [r7, #12]
}
 802196e:	4618      	mov	r0, r3
 8021970:	3714      	adds	r7, #20
 8021972:	46bd      	mov	sp, r7
 8021974:	bd90      	pop	{r4, r7, pc}
 8021976:	bf00      	nop
 8021978:	00000004 	.word	0x00000004

0802197c <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 802197c:	b590      	push	{r4, r7, lr}
 802197e:	b085      	sub	sp, #20
 8021980:	af00      	add	r7, sp, #0
 8021982:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 8021984:	4b07      	ldr	r3, [pc, #28]	; (80219a4 <_tx_trace_interrupt_control+0x28>)
 8021986:	f859 3003 	ldr.w	r3, [r9, r3]
 802198a:	681c      	ldr	r4, [r3, #0]
 802198c:	2300      	movs	r3, #0
 802198e:	2200      	movs	r2, #0
 8021990:	6879      	ldr	r1, [r7, #4]
 8021992:	2057      	movs	r0, #87	; 0x57
 8021994:	47a0      	blx	r4
 8021996:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021998:	68fb      	ldr	r3, [r7, #12]
}
 802199a:	4618      	mov	r0, r3
 802199c:	3714      	adds	r7, #20
 802199e:	46bd      	mov	sp, r7
 80219a0:	bd90      	pop	{r4, r7, pc}
 80219a2:	bf00      	nop
 80219a4:	00000004 	.word	0x00000004

080219a8 <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 80219a8:	b590      	push	{r4, r7, lr}
 80219aa:	b083      	sub	sp, #12
 80219ac:	af00      	add	r7, sp, #0
 80219ae:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219b0:	4b06      	ldr	r3, [pc, #24]	; (80219cc <_tx_trace_isr_enter_insert+0x24>)
 80219b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80219b6:	681c      	ldr	r4, [r3, #0]
 80219b8:	2300      	movs	r3, #0
 80219ba:	2200      	movs	r2, #0
 80219bc:	6879      	ldr	r1, [r7, #4]
 80219be:	2058      	movs	r0, #88	; 0x58
 80219c0:	47a0      	blx	r4
}
 80219c2:	bf00      	nop
 80219c4:	370c      	adds	r7, #12
 80219c6:	46bd      	mov	sp, r7
 80219c8:	bd90      	pop	{r4, r7, pc}
 80219ca:	bf00      	nop
 80219cc:	00000004 	.word	0x00000004

080219d0 <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80219d0:	b590      	push	{r4, r7, lr}
 80219d2:	b083      	sub	sp, #12
 80219d4:	af00      	add	r7, sp, #0
 80219d6:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219d8:	4b06      	ldr	r3, [pc, #24]	; (80219f4 <_tx_trace_isr_exit_insert+0x24>)
 80219da:	f859 3003 	ldr.w	r3, [r9, r3]
 80219de:	681c      	ldr	r4, [r3, #0]
 80219e0:	2300      	movs	r3, #0
 80219e2:	2200      	movs	r2, #0
 80219e4:	6879      	ldr	r1, [r7, #4]
 80219e6:	2059      	movs	r0, #89	; 0x59
 80219e8:	47a0      	blx	r4
}
 80219ea:	bf00      	nop
 80219ec:	370c      	adds	r7, #12
 80219ee:	46bd      	mov	sp, r7
 80219f0:	bd90      	pop	{r4, r7, pc}
 80219f2:	bf00      	nop
 80219f4:	00000004 	.word	0x00000004

080219f8 <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 80219f8:	b590      	push	{r4, r7, lr}
 80219fa:	b089      	sub	sp, #36	; 0x24
 80219fc:	af00      	add	r7, sp, #0
 80219fe:	60f8      	str	r0, [r7, #12]
 8021a00:	60b9      	str	r1, [r7, #8]
 8021a02:	607a      	str	r2, [r7, #4]
 8021a04:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 8021a0a:	683b      	ldr	r3, [r7, #0]
 8021a0c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 8021a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a10:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 8021a12:	4b08      	ldr	r3, [pc, #32]	; (8021a34 <_tx_trace_user_event_insert+0x3c>)
 8021a14:	f859 3003 	ldr.w	r3, [r9, r3]
 8021a18:	681c      	ldr	r4, [r3, #0]
 8021a1a:	f107 0310 	add.w	r3, r7, #16
 8021a1e:	68ba      	ldr	r2, [r7, #8]
 8021a20:	68f9      	ldr	r1, [r7, #12]
 8021a22:	205b      	movs	r0, #91	; 0x5b
 8021a24:	47a0      	blx	r4
 8021a26:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021a28:	69fb      	ldr	r3, [r7, #28]
}
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	3724      	adds	r7, #36	; 0x24
 8021a2e:	46bd      	mov	sp, r7
 8021a30:	bd90      	pop	{r4, r7, pc}
 8021a32:	bf00      	nop
 8021a34:	00000004 	.word	0x00000004
