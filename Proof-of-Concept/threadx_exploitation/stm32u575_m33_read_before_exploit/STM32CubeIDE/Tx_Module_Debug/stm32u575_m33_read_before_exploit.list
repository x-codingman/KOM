
stm32u575_m33_read_before_exploit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     000000a6  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  080200a8  08021af3  00011af3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  080200a8  08021af3  00011af3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  080200a8  080200a8  000100a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000034  08021a50  08021a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  080200a8  08021af3  00011af3  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  080200a8  080200a8  00011af3  2**0
                  CONTENTS
  7 .hash         00000000  080200a8  08021af3  00011af3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         000019a8  080200a8  080200a8  000100a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       0000006f  08021a84  08021a84  00011a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  20020034  20020034  00011af3  2**0
                  CONTENTS
 11 .data_run     00000000  20020034  20020034  00011af3  2**0
                  CONTENTS
 12 .bss          000023c8  20020034  20020034  00020034  2**2
                  ALLOC
 13 .heap         00000040  200223fc  200223fc  00020034  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  00011af3  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00011b29  2**0
                  CONTENTS, READONLY
 16 .debug_line   0002bc16  00000000  00000000  00011b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000008d  00000000  00000000  0003d782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0001c54d  00000000  00000000  0003d80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005a7b  00000000  00000000  00059d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00000ca0  00000000  00000000  0005f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000146d5  00000000  00000000  00060478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0000c6a1  00000000  00000000  00074b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00001634  00000000  00000000  000811f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000bc1 	.word	0x00000bc1
 802001c:	0000017d 	.word	0x0000017d
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	00000a25 	.word	0x00000a25
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001af3 	.word	0x00001af3
 802003c:	0000243c 	.word	0x0000243c
	...
 8020080:	00002541 	.word	0x00002541
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	0000001b 	.word	0x0000001b
 8020090:	4d2d3805 	.word	0x4d2d3805
 8020094:	49414d2e 	.word	0x49414d2e
 8020098:	1106004e 	.word	0x1106004e
 802009c:	03094d07 	.word	0x03094d07
 80200a0:	011b080a 	.word	0x011b080a
 80200a4:	012e      	.short	0x012e

Disassembly of section .text:

080200a8 <__text_start__>:
	...

080200b0 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 80200b0:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 80200b4:	4b2e      	ldr	r3, [pc, #184]	; (8020170 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 80200b6:	4c2f      	ldr	r4, [pc, #188]	; (8020174 <memory_set_done+0x6>)
    mov     r5,r0
 80200b8:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 80200ba:	482f      	ldr	r0, [pc, #188]	; (8020178 <memory_set_done+0xa>)
    sub     r0,r0,r3
 80200bc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 80200c0:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 80200c2:	492e      	ldr	r1, [pc, #184]	; (802017c <memory_set_done+0xe>)
    sub     r1,r1, r4
 80200c4:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 80200c8:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 80200ca:	4a2d      	ldr	r2, [pc, #180]	; (8020180 <memory_set_done+0x12>)
    sub     r2,r2,r4
 80200cc:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 80200d0:	444a      	add	r2, r9

080200d2 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 80200d2:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 80200d4:	d011      	beq.n	80200fa <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 80200d6:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 80200d8:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 80200da:	d008      	beq.n	80200ee <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 80200dc:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 80200de:	db03      	blt.n	80200e8 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 80200e0:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 80200e4:	444e      	add	r6, r9
    b       address_built   // Finished building address
 80200e6:	e002      	b.n	80200ee <address_built>

080200e8 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 80200e8:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 80200ec:	442e      	add	r6, r5

080200ee <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 80200ee:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 80200f0:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 80200f4:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 80200f8:	e7eb      	b.n	80200d2 <new_got_setup>

080200fa <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 80200fa:	4822      	ldr	r0, [pc, #136]	; (8020184 <memory_set_done+0x16>)
    sub     r0,r0,r3
 80200fc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8020100:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8020102:	4921      	ldr	r1, [pc, #132]	; (8020188 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8020104:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020108:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802010a:	4a20      	ldr	r2, [pc, #128]	; (802018c <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802010c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8020110:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8020112:	f000 f815 	bl	8020140 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8020116:	481e      	ldr	r0, [pc, #120]	; (8020190 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8020118:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802011c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802011e:	491d      	ldr	r1, [pc, #116]	; (8020194 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8020120:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020124:	4449      	add	r1, r9
    mov     r2, #0
 8020126:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802012a:	f000 f81a 	bl	8020162 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802012e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 8020132:	4770      	bx	lr
 8020134:	f3af 8000 	nop.w
 8020138:	f3af 8000 	nop.w
 802013c:	f3af 8000 	nop.w

08020140 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 8020140:	4288      	cmp	r0, r1
    beq     memory_copy_done
 8020142:	d00d      	beq.n	8020160 <memory_copy_done>
    cmp     r2, r1
 8020144:	428a      	cmp	r2, r1
    beq     memory_copy_done
 8020146:	d00b      	beq.n	8020160 <memory_copy_done>
    sub     r2, r2, r1
 8020148:	eba2 0201 	sub.w	r2, r2, r1

0802014c <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 802014c:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 802014e:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 8020152:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 8020154:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 8020158:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 802015c:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 802015e:	d1f5      	bne.n	802014c <memory_copy_loop>

08020160 <memory_copy_done>:
memory_copy_done:
    bx      lr
 8020160:	4770      	bx	lr

08020162 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 8020162:	4288      	cmp	r0, r1
    beq     memory_set_done
 8020164:	d003      	beq.n	802016e <memory_set_done>
    strb    r2, [r0]
 8020166:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 8020168:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 802016c:	e7f9      	b.n	8020162 <crt0_memory_set>

0802016e <memory_set_done>:
memory_set_done:
    bx      lr
 802016e:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 8020170:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 8020174:	20020000 	.word	0x20020000
    ldr     r0, =__got_load_start__
 8020178:	08021a50 	.word	0x08021a50
    ldr     r1, =__new_got_start__
 802017c:	20020000 	.word	0x20020000
    ldr     r2, =__new_got_end__
 8020180:	20020034 	.word	0x20020034
    ldr     r0, =__data_load_start__
 8020184:	08021af4 	.word	0x08021af4
    ldr     r1, =__data_start__
 8020188:	20020034 	.word	0x20020034
    ldr     r2, =__data_end__
 802018c:	20020034 	.word	0x20020034
    ldr     r0, =__bss_start__
 8020190:	20020034 	.word	0x20020034
    ldr     r1, =__bss_end__
 8020194:	200223fc 	.word	0x200223fc

08020198 <default_module_start>:
  * @brief  Module entry function.
  * @param  id : Module ID
  * @retval None
  */
void    default_module_start(ULONG id)
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b08c      	sub	sp, #48	; 0x30
 802019c:	af08      	add	r7, sp, #32
 802019e:	6078      	str	r0, [r7, #4]
  CHAR    *pointer;
  
  /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
  their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
  the control block(s).  */
  txm_module_object_allocate((void*)&MainThread, sizeof(TX_THREAD));
 80201a0:	21e8      	movs	r1, #232	; 0xe8
 80201a2:	4b3a      	ldr	r3, [pc, #232]	; (802028c <default_module_start+0xf4>)
 80201a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80201a8:	4618      	mov	r0, r3
 80201aa:	f000 fcb3 	bl	8020b14 <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBytePool, sizeof(TX_BYTE_POOL));
 80201ae:	2134      	movs	r1, #52	; 0x34
 80201b0:	4b37      	ldr	r3, [pc, #220]	; (8020290 <default_module_start+0xf8>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	4618      	mov	r0, r3
 80201b8:	f000 fcac 	bl	8020b14 <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBlockPool, sizeof(TX_BLOCK_POOL));
 80201bc:	2130      	movs	r1, #48	; 0x30
 80201be:	4b35      	ldr	r3, [pc, #212]	; (8020294 <default_module_start+0xfc>)
 80201c0:	f859 3003 	ldr.w	r3, [r9, r3]
 80201c4:	4618      	mov	r0, r3
 80201c6:	f000 fca5 	bl	8020b14 <_txm_module_object_allocate>
  
  /* Create a byte memory pool from which to allocate the thread stacks.  */
  tx_byte_pool_create(ModuleBytePool, "Module Byte Pool", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80201ca:	4b31      	ldr	r3, [pc, #196]	; (8020290 <default_module_start+0xf8>)
 80201cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80201d0:	6818      	ldr	r0, [r3, #0]
 80201d2:	2334      	movs	r3, #52	; 0x34
 80201d4:	9300      	str	r3, [sp, #0]
 80201d6:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80201da:	4a2f      	ldr	r2, [pc, #188]	; (8020298 <default_module_start+0x100>)
 80201dc:	f859 2002 	ldr.w	r2, [r9, r2]
 80201e0:	492e      	ldr	r1, [pc, #184]	; (802029c <default_module_start+0x104>)
 80201e2:	4479      	add	r1, pc
 80201e4:	f000 fa6e 	bl	80206c4 <_txe_byte_pool_create>
  
  /* Allocate the stack for thread 0.  */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80201e8:	4b29      	ldr	r3, [pc, #164]	; (8020290 <default_module_start+0xf8>)
 80201ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80201ee:	6818      	ldr	r0, [r3, #0]
 80201f0:	f107 010c 	add.w	r1, r7, #12
 80201f4:	2300      	movs	r3, #0
 80201f6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80201fa:	f000 fa45 	bl	8020688 <_txe_byte_allocate>
  
  /* Create the main thread.  */
  tx_thread_create(MainThread, "Module Main Thread", MainThread_Entry, 0,
 80201fe:	4b23      	ldr	r3, [pc, #140]	; (802028c <default_module_start+0xf4>)
 8020200:	f859 3003 	ldr.w	r3, [r9, r3]
 8020204:	6818      	ldr	r0, [r3, #0]
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	22e8      	movs	r2, #232	; 0xe8
 802020a:	9206      	str	r2, [sp, #24]
 802020c:	2201      	movs	r2, #1
 802020e:	9205      	str	r2, [sp, #20]
 8020210:	2200      	movs	r2, #0
 8020212:	9204      	str	r2, [sp, #16]
 8020214:	2202      	movs	r2, #2
 8020216:	9203      	str	r2, [sp, #12]
 8020218:	2202      	movs	r2, #2
 802021a:	9202      	str	r2, [sp, #8]
 802021c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020220:	9201      	str	r2, [sp, #4]
 8020222:	9300      	str	r3, [sp, #0]
 8020224:	2300      	movs	r3, #0
 8020226:	4a1e      	ldr	r2, [pc, #120]	; (80202a0 <default_module_start+0x108>)
 8020228:	f859 2002 	ldr.w	r2, [r9, r2]
 802022c:	491d      	ldr	r1, [pc, #116]	; (80202a4 <default_module_start+0x10c>)
 802022e:	4479      	add	r1, pc
 8020230:	f001 f840 	bl	80212b4 <_txe_thread_create>
                   pointer, DEFAULT_STACK_SIZE,
                   MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);
  
  /* Allocate the memory for a small block pool. */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer,
 8020234:	4b16      	ldr	r3, [pc, #88]	; (8020290 <default_module_start+0xf8>)
 8020236:	f859 3003 	ldr.w	r3, [r9, r3]
 802023a:	6818      	ldr	r0, [r3, #0]
 802023c:	f107 010c 	add.w	r1, r7, #12
 8020240:	2300      	movs	r3, #0
 8020242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020246:	f000 fa1f 	bl	8020688 <_txe_byte_allocate>
                   DEFAULT_BLOCK_POOL_SIZE, TX_NO_WAIT);
  
  /* Create a block memory pool. */
  tx_block_pool_create(ModuleBlockPool, "Module Block Pool",
 802024a:	4b12      	ldr	r3, [pc, #72]	; (8020294 <default_module_start+0xfc>)
 802024c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020250:	6818      	ldr	r0, [r3, #0]
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	2230      	movs	r2, #48	; 0x30
 8020256:	9201      	str	r2, [sp, #4]
 8020258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802025c:	9200      	str	r2, [sp, #0]
 802025e:	2204      	movs	r2, #4
 8020260:	4911      	ldr	r1, [pc, #68]	; (80202a8 <default_module_start+0x110>)
 8020262:	4479      	add	r1, pc
 8020264:	f000 f94a 	bl	80204fc <_txe_block_pool_create>
                       sizeof(ULONG), pointer, DEFAULT_BLOCK_POOL_SIZE);
  
  /* Allocate a block. */
  tx_block_allocate(ModuleBlockPool, (VOID **) &pointer,
 8020268:	4b0a      	ldr	r3, [pc, #40]	; (8020294 <default_module_start+0xfc>)
 802026a:	f859 3003 	ldr.w	r3, [r9, r3]
 802026e:	681b      	ldr	r3, [r3, #0]
 8020270:	f107 010c 	add.w	r1, r7, #12
 8020274:	2200      	movs	r2, #0
 8020276:	4618      	mov	r0, r3
 8020278:	f000 f928 	bl	80204cc <_txe_block_allocate>
                    TX_NO_WAIT);
  
  /* Release the block back to the pool. */
  tx_block_release(pointer);
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	4618      	mov	r0, r3
 8020280:	f000 f9ec 	bl	802065c <_txe_block_release>
  
}
 8020284:	bf00      	nop
 8020286:	3710      	adds	r7, #16
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}
 802028c:	00000024 	.word	0x00000024
 8020290:	0000000c 	.word	0x0000000c
 8020294:	00000020 	.word	0x00000020
 8020298:	00000014 	.word	0x00000014
 802029c:	0000189e 	.word	0x0000189e
 80202a0:	00000018 	.word	0x00000018
 80202a4:	00001866 	.word	0x00001866
 80202a8:	00001846 	.word	0x00001846

080202ac <MainThread_Entry>:
  * @brief  Module main thread.
  * @param  thread_input: thread id
  * @retval none
  */
void MainThread_Entry(ULONG thread_input)
{
 80202ac:	b580      	push	{r7, lr}
 80202ae:	b092      	sub	sp, #72	; 0x48
 80202b0:	af08      	add	r7, sp, #32
 80202b2:	6078      	str	r0, [r7, #4]
//  ULONG *mpu_pointer = 0xe000ed94;
//  ULONG mpu_value = *mpu_pointer;

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 80202b4:	f107 0310 	add.w	r3, r7, #16
 80202b8:	2134      	movs	r1, #52	; 0x34
 80202ba:	4618      	mov	r0, r3
 80202bc:	f000 fc2a 	bl	8020b14 <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 80202c0:	6938      	ldr	r0, [r7, #16]
 80202c2:	2334      	movs	r3, #52	; 0x34
 80202c4:	9303      	str	r3, [sp, #12]
 80202c6:	2300      	movs	r3, #0
 80202c8:	9302      	str	r3, [sp, #8]
 80202ca:	4b6b      	ldr	r3, [pc, #428]	; (8020478 <MainThread_Entry+0x1cc>)
 80202cc:	9301      	str	r3, [sp, #4]
 80202ce:	4b6a      	ldr	r3, [pc, #424]	; (8020478 <MainThread_Entry+0x1cc>)
 80202d0:	9300      	str	r3, [sp, #0]
 80202d2:	4b69      	ldr	r3, [pc, #420]	; (8020478 <MainThread_Entry+0x1cc>)
 80202d4:	4a6c      	ldr	r2, [pc, #432]	; (8020488 <MainThread_Entry+0x1dc>)
 80202d6:	f859 2002 	ldr.w	r2, [r9, r2]
 80202da:	496c      	ldr	r1, [pc, #432]	; (802048c <MainThread_Entry+0x1e0>)
 80202dc:	4479      	add	r1, pc
 80202de:	f001 fa35 	bl	802174c <_txe_timer_create>

  TX_THREAD *MaliciousThread;
  txm_module_object_allocate((void*)&MaliciousThread, sizeof(TX_THREAD));
 80202e2:	f107 030c 	add.w	r3, r7, #12
 80202e6:	21e8      	movs	r1, #232	; 0xe8
 80202e8:	4618      	mov	r0, r3
 80202ea:	f000 fc13 	bl	8020b14 <_txm_module_object_allocate>
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80202ee:	4b68      	ldr	r3, [pc, #416]	; (8020490 <MainThread_Entry+0x1e4>)
 80202f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80202f4:	6818      	ldr	r0, [r3, #0]
 80202f6:	f107 0114 	add.w	r1, r7, #20
 80202fa:	2300      	movs	r3, #0
 80202fc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020300:	f000 f9c2 	bl	8020688 <_txe_byte_allocate>
  tx_thread_create(MaliciousThread, "Malicious Thread", MainThread_Entry, 0,
 8020304:	68f8      	ldr	r0, [r7, #12]
 8020306:	697b      	ldr	r3, [r7, #20]
 8020308:	22e8      	movs	r2, #232	; 0xe8
 802030a:	9206      	str	r2, [sp, #24]
 802030c:	2201      	movs	r2, #1
 802030e:	9205      	str	r2, [sp, #20]
 8020310:	4a59      	ldr	r2, [pc, #356]	; (8020478 <MainThread_Entry+0x1cc>)
 8020312:	9204      	str	r2, [sp, #16]
 8020314:	2202      	movs	r2, #2
 8020316:	9203      	str	r2, [sp, #12]
 8020318:	2202      	movs	r2, #2
 802031a:	9202      	str	r2, [sp, #8]
 802031c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020320:	9201      	str	r2, [sp, #4]
 8020322:	9300      	str	r3, [sp, #0]
 8020324:	2300      	movs	r3, #0
 8020326:	4a5b      	ldr	r2, [pc, #364]	; (8020494 <MainThread_Entry+0x1e8>)
 8020328:	f859 2002 	ldr.w	r2, [r9, r2]
 802032c:	495a      	ldr	r1, [pc, #360]	; (8020498 <MainThread_Entry+0x1ec>)
 802032e:	4479      	add	r1, pc
 8020330:	f000 ffc0 	bl	80212b4 <_txe_thread_create>
                       pointer, DEFAULT_STACK_SIZE,
                       MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, 0x54485244, TX_AUTO_START);

  // read from privileged kernel memory
  privileged_read_test = MaliciousTimer->tx_timer_id;
 8020334:	693b      	ldr	r3, [r7, #16]
 8020336:	681a      	ldr	r2, [r3, #0]
 8020338:	4b58      	ldr	r3, [pc, #352]	; (802049c <MainThread_Entry+0x1f0>)
 802033a:	f859 3003 	ldr.w	r3, [r9, r3]
 802033e:	601a      	str	r2, [r3, #0]

  ULONG time_slice;
  TX_THREAD *ForgedThread;
  // write thread_state
  ForgedThread = (ULONG) MaliciousThread + 24;
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	3318      	adds	r3, #24
 8020344:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0x1, &time_slice);
 8020346:	f107 0308 	add.w	r3, r7, #8
 802034a:	461a      	mov	r2, r3
 802034c:	2101      	movs	r1, #1
 802034e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020350:	f001 f978 	bl	8021644 <_txe_thread_time_slice_change>
  // write thread_stack_start
  ForgedThread = (ULONG) MaliciousTimer + 12;
 8020354:	693b      	ldr	r3, [r7, #16]
 8020356:	330c      	adds	r3, #12
 8020358:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 802035a:	f107 0308 	add.w	r3, r7, #8
 802035e:	461a      	mov	r2, r3
 8020360:	4945      	ldr	r1, [pc, #276]	; (8020478 <MainThread_Entry+0x1cc>)
 8020362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020364:	f001 f96e 	bl	8021644 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 40;
 8020368:	693b      	ldr	r3, [r7, #16]
 802036a:	3328      	adds	r3, #40	; 0x28
 802036c:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 802036e:	f107 0308 	add.w	r3, r7, #8
 8020372:	461a      	mov	r2, r3
 8020374:	4940      	ldr	r1, [pc, #256]	; (8020478 <MainThread_Entry+0x1cc>)
 8020376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020378:	f001 f964 	bl	8021644 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 64;
 802037c:	693b      	ldr	r3, [r7, #16]
 802037e:	3340      	adds	r3, #64	; 0x40
 8020380:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 8020382:	f107 0308 	add.w	r3, r7, #8
 8020386:	461a      	mov	r2, r3
 8020388:	493c      	ldr	r1, [pc, #240]	; (802047c <MainThread_Entry+0x1d0>)
 802038a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802038c:	f001 f95a 	bl	8021644 <_txe_thread_time_slice_change>
  // dereference thread_stack_start in thread object
  tx_thread_reset(MaliciousThread);
 8020390:	68fb      	ldr	r3, [r7, #12]
 8020392:	4618      	mov	r0, r3
 8020394:	f001 f8d2 	bl	802153c <_txe_thread_reset>


  // read from privileged kernel memory
  privileged_read_test = MaliciousTimer->tx_timer_id;
 8020398:	693b      	ldr	r3, [r7, #16]
 802039a:	681a      	ldr	r2, [r3, #0]
 802039c:	4b3f      	ldr	r3, [pc, #252]	; (802049c <MainThread_Entry+0x1f0>)
 802039e:	f859 3003 	ldr.w	r3, [r9, r3]
 80203a2:	601a      	str	r2, [r3, #0]

  /* Request access to the queue from the module manager */
  status = txm_module_object_pointer_get(TXM_QUEUE_OBJECT, "Resident Queue", (VOID **)&ResidentQueue);
 80203a4:	4b3e      	ldr	r3, [pc, #248]	; (80204a0 <MainThread_Entry+0x1f4>)
 80203a6:	f859 3003 	ldr.w	r3, [r9, r3]
 80203aa:	461a      	mov	r2, r3
 80203ac:	4b3d      	ldr	r3, [pc, #244]	; (80204a4 <MainThread_Entry+0x1f8>)
 80203ae:	447b      	add	r3, pc
 80203b0:	4619      	mov	r1, r3
 80203b2:	2005      	movs	r0, #5
 80203b4:	f000 fbda 	bl	8020b6c <_txm_module_object_pointer_get>
 80203b8:	6238      	str	r0, [r7, #32]

  if(status)
 80203ba:	6a3b      	ldr	r3, [r7, #32]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d001      	beq.n	80203c4 <MainThread_Entry+0x118>
  {
    Error_Handler();
 80203c0:	f000 f872 	bl	80204a8 <Error_Handler>
  }

  /* Writing to write and read region */
  s_msg = WRITING_TO_READWRITE;
 80203c4:	2358      	movs	r3, #88	; 0x58
 80203c6:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203c8:	4b35      	ldr	r3, [pc, #212]	; (80204a0 <MainThread_Entry+0x1f4>)
 80203ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	f107 0118 	add.w	r1, r7, #24
 80203d4:	2200      	movs	r2, #0
 80203d6:	4618      	mov	r0, r3
 80203d8:	f000 fe3c 	bl	8021054 <_txe_queue_send>
  *(ULONG *)READWRITE_REGION = 0xABABABAB;
 80203dc:	4b28      	ldr	r3, [pc, #160]	; (8020480 <MainThread_Entry+0x1d4>)
 80203de:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 80203e2:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 80203e4:	200a      	movs	r0, #10
 80203e6:	f001 f8d5 	bl	8021594 <_tx_thread_sleep>

  /* WReading from write and read region */
  s_msg = READING_FROM_READWRITE;
 80203ea:	2342      	movs	r3, #66	; 0x42
 80203ec:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203ee:	4b2c      	ldr	r3, [pc, #176]	; (80204a0 <MainThread_Entry+0x1f4>)
 80203f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	f107 0118 	add.w	r1, r7, #24
 80203fa:	2200      	movs	r2, #0
 80203fc:	4618      	mov	r0, r3
 80203fe:	f000 fe29 	bl	8021054 <_txe_queue_send>
  readbuffer = *(ULONG*)READWRITE_REGION;
 8020402:	4b1f      	ldr	r3, [pc, #124]	; (8020480 <MainThread_Entry+0x1d4>)
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	61fb      	str	r3, [r7, #28]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020408:	200a      	movs	r0, #10
 802040a:	f001 f8c3 	bl	8021594 <_tx_thread_sleep>

  /* Reading from read only region */
  s_msg = READING_FROM_READONLY;
 802040e:	2337      	movs	r3, #55	; 0x37
 8020410:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020412:	4b23      	ldr	r3, [pc, #140]	; (80204a0 <MainThread_Entry+0x1f4>)
 8020414:	f859 3003 	ldr.w	r3, [r9, r3]
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	f107 0118 	add.w	r1, r7, #24
 802041e:	2200      	movs	r2, #0
 8020420:	4618      	mov	r0, r3
 8020422:	f000 fe17 	bl	8021054 <_txe_queue_send>
  readbuffer = *(ULONG*)READONLY_REGION;
 8020426:	4b17      	ldr	r3, [pc, #92]	; (8020484 <MainThread_Entry+0x1d8>)
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	61fb      	str	r3, [r7, #28]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 802042c:	200a      	movs	r0, #10
 802042e:	f001 f8b1 	bl	8021594 <_tx_thread_sleep>

  /* Writing to read only region */
  s_msg = WRITING_TO_READONLY;
 8020432:	234d      	movs	r3, #77	; 0x4d
 8020434:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020436:	4b1a      	ldr	r3, [pc, #104]	; (80204a0 <MainThread_Entry+0x1f4>)
 8020438:	f859 3003 	ldr.w	r3, [r9, r3]
 802043c:	681b      	ldr	r3, [r3, #0]
 802043e:	f107 0118 	add.w	r1, r7, #24
 8020442:	2200      	movs	r2, #0
 8020444:	4618      	mov	r0, r3
 8020446:	f000 fe05 	bl	8021054 <_txe_queue_send>
  *(ULONG *)READONLY_REGION = 0xABABABAB;
 802044a:	4b0e      	ldr	r3, [pc, #56]	; (8020484 <MainThread_Entry+0x1d8>)
 802044c:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 8020450:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020452:	200a      	movs	r0, #10
 8020454:	f001 f89e 	bl	8021594 <_tx_thread_sleep>

  /* Notify module manager about job finish */
  s_msg = PROCESSING_FINISHED;
 8020458:	232c      	movs	r3, #44	; 0x2c
 802045a:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 802045c:	4b10      	ldr	r3, [pc, #64]	; (80204a0 <MainThread_Entry+0x1f4>)
 802045e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	f107 0118 	add.w	r1, r7, #24
 8020468:	2200      	movs	r2, #0
 802046a:	4618      	mov	r0, r3
 802046c:	f000 fdf2 	bl	8021054 <_txe_queue_send>
  UNUSED(readbuffer);

  /* Stay here, waiting for the module manager to stop and loading the module*/
  while(1)
  {
    tx_thread_sleep(10);
 8020470:	200a      	movs	r0, #10
 8020472:	f001 f88f 	bl	8021594 <_tx_thread_sleep>
 8020476:	e7fb      	b.n	8020470 <MainThread_Entry+0x1c4>
 8020478:	54485244 	.word	0x54485244
 802047c:	e000ed94 	.word	0xe000ed94
 8020480:	20010100 	.word	0x20010100
 8020484:	20010000 	.word	0x20010000
 8020488:	00000000 	.word	0x00000000
 802048c:	000017e0 	.word	0x000017e0
 8020490:	0000000c 	.word	0x0000000c
 8020494:	00000018 	.word	0x00000018
 8020498:	0000179e 	.word	0x0000179e
 802049c:	0000001c 	.word	0x0000001c
 80204a0:	00000008 	.word	0x00000008
 80204a4:	00001732 	.word	0x00001732

080204a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80204a8:	b580      	push	{r7, lr}
 80204aa:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 80204ac:	f04f 30ff 	mov.w	r0, #4294967295
 80204b0:	f001 f870 	bl	8021594 <_tx_thread_sleep>
}
 80204b4:	bf00      	nop
 80204b6:	bd80      	pop	{r7, pc}

080204b8 <MaliciousTimerFunction>:

void MaliciousTimerFunction(ULONG input)
{
 80204b8:	b480      	push	{r7}
 80204ba:	b083      	sub	sp, #12
 80204bc:	af00      	add	r7, sp, #0
 80204be:	6078      	str	r0, [r7, #4]

}
 80204c0:	bf00      	nop
 80204c2:	370c      	adds	r7, #12
 80204c4:	46bd      	mov	sp, r7
 80204c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ca:	4770      	bx	lr

080204cc <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 80204cc:	b590      	push	{r4, r7, lr}
 80204ce:	b087      	sub	sp, #28
 80204d0:	af00      	add	r7, sp, #0
 80204d2:	60f8      	str	r0, [r7, #12]
 80204d4:	60b9      	str	r1, [r7, #8]
 80204d6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 80204d8:	4b07      	ldr	r3, [pc, #28]	; (80204f8 <_txe_block_allocate+0x2c>)
 80204da:	f859 3003 	ldr.w	r3, [r9, r3]
 80204de:	681c      	ldr	r4, [r3, #0]
 80204e0:	68f9      	ldr	r1, [r7, #12]
 80204e2:	68ba      	ldr	r2, [r7, #8]
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	2001      	movs	r0, #1
 80204e8:	47a0      	blx	r4
 80204ea:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80204ec:	697b      	ldr	r3, [r7, #20]
}
 80204ee:	4618      	mov	r0, r3
 80204f0:	371c      	adds	r7, #28
 80204f2:	46bd      	mov	sp, r7
 80204f4:	bd90      	pop	{r4, r7, pc}
 80204f6:	bf00      	nop
 80204f8:	00000004 	.word	0x00000004

080204fc <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80204fc:	b590      	push	{r4, r7, lr}
 80204fe:	b08b      	sub	sp, #44	; 0x2c
 8020500:	af00      	add	r7, sp, #0
 8020502:	60f8      	str	r0, [r7, #12]
 8020504:	60b9      	str	r1, [r7, #8]
 8020506:	607a      	str	r2, [r7, #4]
 8020508:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 802050e:	683b      	ldr	r3, [r7, #0]
 8020510:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 8020512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020514:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 8020516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020518:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 802051a:	4b08      	ldr	r3, [pc, #32]	; (802053c <_txe_block_pool_create+0x40>)
 802051c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020520:	681c      	ldr	r4, [r3, #0]
 8020522:	68f9      	ldr	r1, [r7, #12]
 8020524:	68ba      	ldr	r2, [r7, #8]
 8020526:	f107 0314 	add.w	r3, r7, #20
 802052a:	2002      	movs	r0, #2
 802052c:	47a0      	blx	r4
 802052e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020532:	4618      	mov	r0, r3
 8020534:	372c      	adds	r7, #44	; 0x2c
 8020536:	46bd      	mov	sp, r7
 8020538:	bd90      	pop	{r4, r7, pc}
 802053a:	bf00      	nop
 802053c:	00000004 	.word	0x00000004

08020540 <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8020540:	b590      	push	{r4, r7, lr}
 8020542:	b085      	sub	sp, #20
 8020544:	af00      	add	r7, sp, #0
 8020546:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020548:	4b07      	ldr	r3, [pc, #28]	; (8020568 <_txe_block_pool_delete+0x28>)
 802054a:	f859 3003 	ldr.w	r3, [r9, r3]
 802054e:	681c      	ldr	r4, [r3, #0]
 8020550:	6879      	ldr	r1, [r7, #4]
 8020552:	2300      	movs	r3, #0
 8020554:	2200      	movs	r2, #0
 8020556:	2003      	movs	r0, #3
 8020558:	47a0      	blx	r4
 802055a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802055c:	68fb      	ldr	r3, [r7, #12]
}
 802055e:	4618      	mov	r0, r3
 8020560:	3714      	adds	r7, #20
 8020562:	46bd      	mov	sp, r7
 8020564:	bd90      	pop	{r4, r7, pc}
 8020566:	bf00      	nop
 8020568:	00000004 	.word	0x00000004

0802056c <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 802056c:	b590      	push	{r4, r7, lr}
 802056e:	b08b      	sub	sp, #44	; 0x2c
 8020570:	af00      	add	r7, sp, #0
 8020572:	60f8      	str	r0, [r7, #12]
 8020574:	60b9      	str	r1, [r7, #8]
 8020576:	607a      	str	r2, [r7, #4]
 8020578:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 802057e:	683b      	ldr	r3, [r7, #0]
 8020580:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020584:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020588:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802058a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802058c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802058e:	4b08      	ldr	r3, [pc, #32]	; (80205b0 <_txe_block_pool_info_get+0x44>)
 8020590:	f859 3003 	ldr.w	r3, [r9, r3]
 8020594:	681c      	ldr	r4, [r3, #0]
 8020596:	68f9      	ldr	r1, [r7, #12]
 8020598:	68ba      	ldr	r2, [r7, #8]
 802059a:	f107 0310 	add.w	r3, r7, #16
 802059e:	2004      	movs	r0, #4
 80205a0:	47a0      	blx	r4
 80205a2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80205a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80205a6:	4618      	mov	r0, r3
 80205a8:	372c      	adds	r7, #44	; 0x2c
 80205aa:	46bd      	mov	sp, r7
 80205ac:	bd90      	pop	{r4, r7, pc}
 80205ae:	bf00      	nop
 80205b0:	00000004 	.word	0x00000004

080205b4 <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205b4:	b590      	push	{r4, r7, lr}
 80205b6:	b089      	sub	sp, #36	; 0x24
 80205b8:	af00      	add	r7, sp, #0
 80205ba:	60f8      	str	r0, [r7, #12]
 80205bc:	60b9      	str	r1, [r7, #8]
 80205be:	607a      	str	r2, [r7, #4]
 80205c0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80205c6:	683b      	ldr	r3, [r7, #0]
 80205c8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80205ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205cc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 80205ce:	4b08      	ldr	r3, [pc, #32]	; (80205f0 <_tx_block_pool_performance_info_get+0x3c>)
 80205d0:	f859 3003 	ldr.w	r3, [r9, r3]
 80205d4:	681c      	ldr	r4, [r3, #0]
 80205d6:	68f9      	ldr	r1, [r7, #12]
 80205d8:	68ba      	ldr	r2, [r7, #8]
 80205da:	f107 0310 	add.w	r3, r7, #16
 80205de:	2005      	movs	r0, #5
 80205e0:	47a0      	blx	r4
 80205e2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80205e4:	69fb      	ldr	r3, [r7, #28]
}
 80205e6:	4618      	mov	r0, r3
 80205e8:	3724      	adds	r7, #36	; 0x24
 80205ea:	46bd      	mov	sp, r7
 80205ec:	bd90      	pop	{r4, r7, pc}
 80205ee:	bf00      	nop
 80205f0:	00000004 	.word	0x00000004

080205f4 <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205f4:	b590      	push	{r4, r7, lr}
 80205f6:	b089      	sub	sp, #36	; 0x24
 80205f8:	af00      	add	r7, sp, #0
 80205fa:	60f8      	str	r0, [r7, #12]
 80205fc:	60b9      	str	r1, [r7, #8]
 80205fe:	607a      	str	r2, [r7, #4]
 8020600:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020606:	683b      	ldr	r3, [r7, #0]
 8020608:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 802060a:	4b08      	ldr	r3, [pc, #32]	; (802062c <_tx_block_pool_performance_system_info_get+0x38>)
 802060c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020610:	681c      	ldr	r4, [r3, #0]
 8020612:	68f9      	ldr	r1, [r7, #12]
 8020614:	68ba      	ldr	r2, [r7, #8]
 8020616:	f107 0314 	add.w	r3, r7, #20
 802061a:	2006      	movs	r0, #6
 802061c:	47a0      	blx	r4
 802061e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020620:	69fb      	ldr	r3, [r7, #28]
}
 8020622:	4618      	mov	r0, r3
 8020624:	3724      	adds	r7, #36	; 0x24
 8020626:	46bd      	mov	sp, r7
 8020628:	bd90      	pop	{r4, r7, pc}
 802062a:	bf00      	nop
 802062c:	00000004 	.word	0x00000004

08020630 <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 8020630:	b590      	push	{r4, r7, lr}
 8020632:	b085      	sub	sp, #20
 8020634:	af00      	add	r7, sp, #0
 8020636:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020638:	4b07      	ldr	r3, [pc, #28]	; (8020658 <_txe_block_pool_prioritize+0x28>)
 802063a:	f859 3003 	ldr.w	r3, [r9, r3]
 802063e:	681c      	ldr	r4, [r3, #0]
 8020640:	6879      	ldr	r1, [r7, #4]
 8020642:	2300      	movs	r3, #0
 8020644:	2200      	movs	r2, #0
 8020646:	2007      	movs	r0, #7
 8020648:	47a0      	blx	r4
 802064a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802064c:	68fb      	ldr	r3, [r7, #12]
}
 802064e:	4618      	mov	r0, r3
 8020650:	3714      	adds	r7, #20
 8020652:	46bd      	mov	sp, r7
 8020654:	bd90      	pop	{r4, r7, pc}
 8020656:	bf00      	nop
 8020658:	00000004 	.word	0x00000004

0802065c <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 802065c:	b590      	push	{r4, r7, lr}
 802065e:	b085      	sub	sp, #20
 8020660:	af00      	add	r7, sp, #0
 8020662:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 8020664:	4b07      	ldr	r3, [pc, #28]	; (8020684 <_txe_block_release+0x28>)
 8020666:	f859 3003 	ldr.w	r3, [r9, r3]
 802066a:	681c      	ldr	r4, [r3, #0]
 802066c:	6879      	ldr	r1, [r7, #4]
 802066e:	2300      	movs	r3, #0
 8020670:	2200      	movs	r2, #0
 8020672:	2008      	movs	r0, #8
 8020674:	47a0      	blx	r4
 8020676:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020678:	68fb      	ldr	r3, [r7, #12]
}
 802067a:	4618      	mov	r0, r3
 802067c:	3714      	adds	r7, #20
 802067e:	46bd      	mov	sp, r7
 8020680:	bd90      	pop	{r4, r7, pc}
 8020682:	bf00      	nop
 8020684:	00000004 	.word	0x00000004

08020688 <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 8020688:	b590      	push	{r4, r7, lr}
 802068a:	b089      	sub	sp, #36	; 0x24
 802068c:	af00      	add	r7, sp, #0
 802068e:	60f8      	str	r0, [r7, #12]
 8020690:	60b9      	str	r1, [r7, #8]
 8020692:	607a      	str	r2, [r7, #4]
 8020694:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 802069a:	683b      	ldr	r3, [r7, #0]
 802069c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 802069e:	4b08      	ldr	r3, [pc, #32]	; (80206c0 <_txe_byte_allocate+0x38>)
 80206a0:	f859 3003 	ldr.w	r3, [r9, r3]
 80206a4:	681c      	ldr	r4, [r3, #0]
 80206a6:	68f9      	ldr	r1, [r7, #12]
 80206a8:	68ba      	ldr	r2, [r7, #8]
 80206aa:	f107 0314 	add.w	r3, r7, #20
 80206ae:	2009      	movs	r0, #9
 80206b0:	47a0      	blx	r4
 80206b2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206b4:	69fb      	ldr	r3, [r7, #28]
}
 80206b6:	4618      	mov	r0, r3
 80206b8:	3724      	adds	r7, #36	; 0x24
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd90      	pop	{r4, r7, pc}
 80206be:	bf00      	nop
 80206c0:	00000004 	.word	0x00000004

080206c4 <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80206c4:	b590      	push	{r4, r7, lr}
 80206c6:	b089      	sub	sp, #36	; 0x24
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	60f8      	str	r0, [r7, #12]
 80206cc:	60b9      	str	r1, [r7, #8]
 80206ce:	607a      	str	r2, [r7, #4]
 80206d0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 80206d6:	683b      	ldr	r3, [r7, #0]
 80206d8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 80206da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206dc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80206de:	4b08      	ldr	r3, [pc, #32]	; (8020700 <_txe_byte_pool_create+0x3c>)
 80206e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80206e4:	681c      	ldr	r4, [r3, #0]
 80206e6:	68f9      	ldr	r1, [r7, #12]
 80206e8:	68ba      	ldr	r2, [r7, #8]
 80206ea:	f107 0310 	add.w	r3, r7, #16
 80206ee:	200a      	movs	r0, #10
 80206f0:	47a0      	blx	r4
 80206f2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206f4:	69fb      	ldr	r3, [r7, #28]
}
 80206f6:	4618      	mov	r0, r3
 80206f8:	3724      	adds	r7, #36	; 0x24
 80206fa:	46bd      	mov	sp, r7
 80206fc:	bd90      	pop	{r4, r7, pc}
 80206fe:	bf00      	nop
 8020700:	00000004 	.word	0x00000004

08020704 <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 8020704:	b590      	push	{r4, r7, lr}
 8020706:	b085      	sub	sp, #20
 8020708:	af00      	add	r7, sp, #0
 802070a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 802070c:	4b07      	ldr	r3, [pc, #28]	; (802072c <_txe_byte_pool_delete+0x28>)
 802070e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020712:	681c      	ldr	r4, [r3, #0]
 8020714:	6879      	ldr	r1, [r7, #4]
 8020716:	2300      	movs	r3, #0
 8020718:	2200      	movs	r2, #0
 802071a:	200b      	movs	r0, #11
 802071c:	47a0      	blx	r4
 802071e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020720:	68fb      	ldr	r3, [r7, #12]
}
 8020722:	4618      	mov	r0, r3
 8020724:	3714      	adds	r7, #20
 8020726:	46bd      	mov	sp, r7
 8020728:	bd90      	pop	{r4, r7, pc}
 802072a:	bf00      	nop
 802072c:	00000004 	.word	0x00000004

08020730 <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8020730:	b590      	push	{r4, r7, lr}
 8020732:	b08b      	sub	sp, #44	; 0x2c
 8020734:	af00      	add	r7, sp, #0
 8020736:	60f8      	str	r0, [r7, #12]
 8020738:	60b9      	str	r1, [r7, #8]
 802073a:	607a      	str	r2, [r7, #4]
 802073c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 8020742:	683b      	ldr	r3, [r7, #0]
 8020744:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020748:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802074a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802074c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802074e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020750:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020752:	4b08      	ldr	r3, [pc, #32]	; (8020774 <_txe_byte_pool_info_get+0x44>)
 8020754:	f859 3003 	ldr.w	r3, [r9, r3]
 8020758:	681c      	ldr	r4, [r3, #0]
 802075a:	68f9      	ldr	r1, [r7, #12]
 802075c:	68ba      	ldr	r2, [r7, #8]
 802075e:	f107 0310 	add.w	r3, r7, #16
 8020762:	200c      	movs	r0, #12
 8020764:	47a0      	blx	r4
 8020766:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802076a:	4618      	mov	r0, r3
 802076c:	372c      	adds	r7, #44	; 0x2c
 802076e:	46bd      	mov	sp, r7
 8020770:	bd90      	pop	{r4, r7, pc}
 8020772:	bf00      	nop
 8020774:	00000004 	.word	0x00000004

08020778 <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020778:	b590      	push	{r4, r7, lr}
 802077a:	b08d      	sub	sp, #52	; 0x34
 802077c:	af00      	add	r7, sp, #0
 802077e:	60f8      	str	r0, [r7, #12]
 8020780:	60b9      	str	r1, [r7, #8]
 8020782:	607a      	str	r2, [r7, #4]
 8020784:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 802078a:	683b      	ldr	r3, [r7, #0]
 802078c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 802078e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020790:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 8020792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020794:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 8020796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020798:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802079a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802079c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 802079e:	4b08      	ldr	r3, [pc, #32]	; (80207c0 <_tx_byte_pool_performance_info_get+0x48>)
 80207a0:	f859 3003 	ldr.w	r3, [r9, r3]
 80207a4:	681c      	ldr	r4, [r3, #0]
 80207a6:	68f9      	ldr	r1, [r7, #12]
 80207a8:	68ba      	ldr	r2, [r7, #8]
 80207aa:	f107 0314 	add.w	r3, r7, #20
 80207ae:	200d      	movs	r0, #13
 80207b0:	47a0      	blx	r4
 80207b2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80207b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80207b6:	4618      	mov	r0, r3
 80207b8:	3734      	adds	r7, #52	; 0x34
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd90      	pop	{r4, r7, pc}
 80207be:	bf00      	nop
 80207c0:	00000004 	.word	0x00000004

080207c4 <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 80207c4:	b590      	push	{r4, r7, lr}
 80207c6:	b08b      	sub	sp, #44	; 0x2c
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	60f8      	str	r0, [r7, #12]
 80207cc:	60b9      	str	r1, [r7, #8]
 80207ce:	607a      	str	r2, [r7, #4]
 80207d0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 80207d6:	683b      	ldr	r3, [r7, #0]
 80207d8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 80207da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80207dc:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 80207de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80207e0:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 80207e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80207e4:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80207e6:	4b08      	ldr	r3, [pc, #32]	; (8020808 <_tx_byte_pool_performance_system_info_get+0x44>)
 80207e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80207ec:	681c      	ldr	r4, [r3, #0]
 80207ee:	68f9      	ldr	r1, [r7, #12]
 80207f0:	68ba      	ldr	r2, [r7, #8]
 80207f2:	f107 0310 	add.w	r3, r7, #16
 80207f6:	200e      	movs	r0, #14
 80207f8:	47a0      	blx	r4
 80207fa:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80207fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80207fe:	4618      	mov	r0, r3
 8020800:	372c      	adds	r7, #44	; 0x2c
 8020802:	46bd      	mov	sp, r7
 8020804:	bd90      	pop	{r4, r7, pc}
 8020806:	bf00      	nop
 8020808:	00000004 	.word	0x00000004

0802080c <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 802080c:	b590      	push	{r4, r7, lr}
 802080e:	b085      	sub	sp, #20
 8020810:	af00      	add	r7, sp, #0
 8020812:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020814:	4b07      	ldr	r3, [pc, #28]	; (8020834 <_txe_byte_pool_prioritize+0x28>)
 8020816:	f859 3003 	ldr.w	r3, [r9, r3]
 802081a:	681c      	ldr	r4, [r3, #0]
 802081c:	6879      	ldr	r1, [r7, #4]
 802081e:	2300      	movs	r3, #0
 8020820:	2200      	movs	r2, #0
 8020822:	200f      	movs	r0, #15
 8020824:	47a0      	blx	r4
 8020826:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020828:	68fb      	ldr	r3, [r7, #12]
}
 802082a:	4618      	mov	r0, r3
 802082c:	3714      	adds	r7, #20
 802082e:	46bd      	mov	sp, r7
 8020830:	bd90      	pop	{r4, r7, pc}
 8020832:	bf00      	nop
 8020834:	00000004 	.word	0x00000004

08020838 <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 8020838:	b590      	push	{r4, r7, lr}
 802083a:	b085      	sub	sp, #20
 802083c:	af00      	add	r7, sp, #0
 802083e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 8020840:	4b07      	ldr	r3, [pc, #28]	; (8020860 <_txe_byte_release+0x28>)
 8020842:	f859 3003 	ldr.w	r3, [r9, r3]
 8020846:	681c      	ldr	r4, [r3, #0]
 8020848:	6879      	ldr	r1, [r7, #4]
 802084a:	2300      	movs	r3, #0
 802084c:	2200      	movs	r2, #0
 802084e:	2010      	movs	r0, #16
 8020850:	47a0      	blx	r4
 8020852:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020854:	68fb      	ldr	r3, [r7, #12]
}
 8020856:	4618      	mov	r0, r3
 8020858:	3714      	adds	r7, #20
 802085a:	46bd      	mov	sp, r7
 802085c:	bd90      	pop	{r4, r7, pc}
 802085e:	bf00      	nop
 8020860:	00000004 	.word	0x00000004

08020864 <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8020864:	b590      	push	{r4, r7, lr}
 8020866:	b087      	sub	sp, #28
 8020868:	af00      	add	r7, sp, #0
 802086a:	60f8      	str	r0, [r7, #12]
 802086c:	60b9      	str	r1, [r7, #8]
 802086e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 8020870:	4b07      	ldr	r3, [pc, #28]	; (8020890 <_txe_event_flags_create+0x2c>)
 8020872:	f859 3003 	ldr.w	r3, [r9, r3]
 8020876:	681c      	ldr	r4, [r3, #0]
 8020878:	68f9      	ldr	r1, [r7, #12]
 802087a:	68ba      	ldr	r2, [r7, #8]
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	2011      	movs	r0, #17
 8020880:	47a0      	blx	r4
 8020882:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020884:	697b      	ldr	r3, [r7, #20]
}
 8020886:	4618      	mov	r0, r3
 8020888:	371c      	adds	r7, #28
 802088a:	46bd      	mov	sp, r7
 802088c:	bd90      	pop	{r4, r7, pc}
 802088e:	bf00      	nop
 8020890:	00000004 	.word	0x00000004

08020894 <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8020894:	b590      	push	{r4, r7, lr}
 8020896:	b085      	sub	sp, #20
 8020898:	af00      	add	r7, sp, #0
 802089a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 802089c:	4b07      	ldr	r3, [pc, #28]	; (80208bc <_txe_event_flags_delete+0x28>)
 802089e:	f859 3003 	ldr.w	r3, [r9, r3]
 80208a2:	681c      	ldr	r4, [r3, #0]
 80208a4:	6879      	ldr	r1, [r7, #4]
 80208a6:	2300      	movs	r3, #0
 80208a8:	2200      	movs	r2, #0
 80208aa:	2012      	movs	r0, #18
 80208ac:	47a0      	blx	r4
 80208ae:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80208b0:	68fb      	ldr	r3, [r7, #12]
}
 80208b2:	4618      	mov	r0, r3
 80208b4:	3714      	adds	r7, #20
 80208b6:	46bd      	mov	sp, r7
 80208b8:	bd90      	pop	{r4, r7, pc}
 80208ba:	bf00      	nop
 80208bc:	00000004 	.word	0x00000004

080208c0 <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80208c0:	b590      	push	{r4, r7, lr}
 80208c2:	b089      	sub	sp, #36	; 0x24
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	60f8      	str	r0, [r7, #12]
 80208c8:	60b9      	str	r1, [r7, #8]
 80208ca:	607a      	str	r2, [r7, #4]
 80208cc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 80208ce:	687b      	ldr	r3, [r7, #4]
 80208d0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 80208d2:	683b      	ldr	r3, [r7, #0]
 80208d4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 80208d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208d8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 80208da:	4b08      	ldr	r3, [pc, #32]	; (80208fc <_txe_event_flags_get+0x3c>)
 80208dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80208e0:	681c      	ldr	r4, [r3, #0]
 80208e2:	68f9      	ldr	r1, [r7, #12]
 80208e4:	f107 0310 	add.w	r3, r7, #16
 80208e8:	68ba      	ldr	r2, [r7, #8]
 80208ea:	2013      	movs	r0, #19
 80208ec:	47a0      	blx	r4
 80208ee:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80208f0:	69fb      	ldr	r3, [r7, #28]
}
 80208f2:	4618      	mov	r0, r3
 80208f4:	3724      	adds	r7, #36	; 0x24
 80208f6:	46bd      	mov	sp, r7
 80208f8:	bd90      	pop	{r4, r7, pc}
 80208fa:	bf00      	nop
 80208fc:	00000004 	.word	0x00000004

08020900 <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 8020900:	b590      	push	{r4, r7, lr}
 8020902:	b08b      	sub	sp, #44	; 0x2c
 8020904:	af00      	add	r7, sp, #0
 8020906:	60f8      	str	r0, [r7, #12]
 8020908:	60b9      	str	r1, [r7, #8]
 802090a:	607a      	str	r2, [r7, #4]
 802090c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8020912:	683b      	ldr	r3, [r7, #0]
 8020914:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8020916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020918:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 802091a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802091c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802091e:	4b08      	ldr	r3, [pc, #32]	; (8020940 <_txe_event_flags_info_get+0x40>)
 8020920:	f859 3003 	ldr.w	r3, [r9, r3]
 8020924:	681c      	ldr	r4, [r3, #0]
 8020926:	68f9      	ldr	r1, [r7, #12]
 8020928:	68ba      	ldr	r2, [r7, #8]
 802092a:	f107 0314 	add.w	r3, r7, #20
 802092e:	2014      	movs	r0, #20
 8020930:	47a0      	blx	r4
 8020932:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020936:	4618      	mov	r0, r3
 8020938:	372c      	adds	r7, #44	; 0x2c
 802093a:	46bd      	mov	sp, r7
 802093c:	bd90      	pop	{r4, r7, pc}
 802093e:	bf00      	nop
 8020940:	00000004 	.word	0x00000004

08020944 <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020944:	b590      	push	{r4, r7, lr}
 8020946:	b089      	sub	sp, #36	; 0x24
 8020948:	af00      	add	r7, sp, #0
 802094a:	60f8      	str	r0, [r7, #12]
 802094c:	60b9      	str	r1, [r7, #8]
 802094e:	607a      	str	r2, [r7, #4]
 8020950:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 802095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802095c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 802095e:	4b08      	ldr	r3, [pc, #32]	; (8020980 <_tx_event_flags_performance_info_get+0x3c>)
 8020960:	f859 3003 	ldr.w	r3, [r9, r3]
 8020964:	681c      	ldr	r4, [r3, #0]
 8020966:	68f9      	ldr	r1, [r7, #12]
 8020968:	68ba      	ldr	r2, [r7, #8]
 802096a:	f107 0310 	add.w	r3, r7, #16
 802096e:	2015      	movs	r0, #21
 8020970:	47a0      	blx	r4
 8020972:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020974:	69fb      	ldr	r3, [r7, #28]
}
 8020976:	4618      	mov	r0, r3
 8020978:	3724      	adds	r7, #36	; 0x24
 802097a:	46bd      	mov	sp, r7
 802097c:	bd90      	pop	{r4, r7, pc}
 802097e:	bf00      	nop
 8020980:	00000004 	.word	0x00000004

08020984 <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020984:	b590      	push	{r4, r7, lr}
 8020986:	b089      	sub	sp, #36	; 0x24
 8020988:	af00      	add	r7, sp, #0
 802098a:	60f8      	str	r0, [r7, #12]
 802098c:	60b9      	str	r1, [r7, #8]
 802098e:	607a      	str	r2, [r7, #4]
 8020990:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020996:	683b      	ldr	r3, [r7, #0]
 8020998:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 802099a:	4b08      	ldr	r3, [pc, #32]	; (80209bc <_tx_event_flags_performance_system_info_get+0x38>)
 802099c:	f859 3003 	ldr.w	r3, [r9, r3]
 80209a0:	681c      	ldr	r4, [r3, #0]
 80209a2:	68f9      	ldr	r1, [r7, #12]
 80209a4:	68ba      	ldr	r2, [r7, #8]
 80209a6:	f107 0314 	add.w	r3, r7, #20
 80209aa:	2016      	movs	r0, #22
 80209ac:	47a0      	blx	r4
 80209ae:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80209b0:	69fb      	ldr	r3, [r7, #28]
}
 80209b2:	4618      	mov	r0, r3
 80209b4:	3724      	adds	r7, #36	; 0x24
 80209b6:	46bd      	mov	sp, r7
 80209b8:	bd90      	pop	{r4, r7, pc}
 80209ba:	bf00      	nop
 80209bc:	00000004 	.word	0x00000004

080209c0 <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80209c0:	b590      	push	{r4, r7, lr}
 80209c2:	b087      	sub	sp, #28
 80209c4:	af00      	add	r7, sp, #0
 80209c6:	60f8      	str	r0, [r7, #12]
 80209c8:	60b9      	str	r1, [r7, #8]
 80209ca:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 80209cc:	4b07      	ldr	r3, [pc, #28]	; (80209ec <_txe_event_flags_set+0x2c>)
 80209ce:	f859 3003 	ldr.w	r3, [r9, r3]
 80209d2:	681c      	ldr	r4, [r3, #0]
 80209d4:	68f9      	ldr	r1, [r7, #12]
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	68ba      	ldr	r2, [r7, #8]
 80209da:	2017      	movs	r0, #23
 80209dc:	47a0      	blx	r4
 80209de:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80209e0:	697b      	ldr	r3, [r7, #20]
}
 80209e2:	4618      	mov	r0, r3
 80209e4:	371c      	adds	r7, #28
 80209e6:	46bd      	mov	sp, r7
 80209e8:	bd90      	pop	{r4, r7, pc}
 80209ea:	bf00      	nop
 80209ec:	00000004 	.word	0x00000004

080209f0 <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80209f0:	b590      	push	{r4, r7, lr}
 80209f2:	b085      	sub	sp, #20
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	6078      	str	r0, [r7, #4]
 80209f8:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80209fa:	4b07      	ldr	r3, [pc, #28]	; (8020a18 <_txe_event_flags_set_notify+0x28>)
 80209fc:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a00:	681c      	ldr	r4, [r3, #0]
 8020a02:	6879      	ldr	r1, [r7, #4]
 8020a04:	683a      	ldr	r2, [r7, #0]
 8020a06:	2300      	movs	r3, #0
 8020a08:	2018      	movs	r0, #24
 8020a0a:	47a0      	blx	r4
 8020a0c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020a0e:	68fb      	ldr	r3, [r7, #12]
}
 8020a10:	4618      	mov	r0, r3
 8020a12:	3714      	adds	r7, #20
 8020a14:	46bd      	mov	sp, r7
 8020a16:	bd90      	pop	{r4, r7, pc}
 8020a18:	00000004 	.word	0x00000004

08020a1c <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 8020a1c:	b590      	push	{r4, r7, lr}
 8020a1e:	b087      	sub	sp, #28
 8020a20:	af00      	add	r7, sp, #0
 8020a22:	60f8      	str	r0, [r7, #12]
 8020a24:	60b9      	str	r1, [r7, #8]
 8020a26:	607a      	str	r2, [r7, #4]
 8020a28:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 8020a2a:	4b08      	ldr	r3, [pc, #32]	; (8020a4c <_txm_module_application_request+0x30>)
 8020a2c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a30:	681c      	ldr	r4, [r3, #0]
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 8020a38:	683b      	ldr	r3, [r7, #0]
 8020a3a:	687a      	ldr	r2, [r7, #4]
 8020a3c:	68b9      	ldr	r1, [r7, #8]
 8020a3e:	47a0      	blx	r4
 8020a40:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020a42:	697b      	ldr	r3, [r7, #20]
}
 8020a44:	4618      	mov	r0, r3
 8020a46:	371c      	adds	r7, #28
 8020a48:	46bd      	mov	sp, r7
 8020a4a:	bd90      	pop	{r4, r7, pc}
 8020a4c:	00000004 	.word	0x00000004

08020a50 <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b098      	sub	sp, #96	; 0x60
 8020a54:	af00      	add	r7, sp, #0
 8020a56:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 8020a58:	4b2d      	ldr	r3, [pc, #180]	; (8020b10 <_txm_module_callback_request_thread_entry+0xc0>)
 8020a5a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a62:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020a64:	f107 030c 	add.w	r3, r7, #12
 8020a68:	f04f 32ff 	mov.w	r2, #4294967295
 8020a6c:	4619      	mov	r1, r3
 8020a6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020a70:	f000 fad8 	bl	8021024 <_txe_queue_receive>
 8020a74:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 8020a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d144      	bne.n	8020b06 <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020a7c:	693b      	ldr	r3, [r7, #16]
 8020a7e:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020a80:	e03d      	b.n	8020afe <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 8020a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020a84:	3b01      	subs	r3, #1
 8020a86:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	2b04      	cmp	r3, #4
 8020a8c:	d836      	bhi.n	8020afc <_txm_module_callback_request_thread_entry+0xac>
 8020a8e:	a202      	add	r2, pc, #8	; (adr r2, 8020a98 <_txm_module_callback_request_thread_entry+0x48>)
 8020a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020a94:	441a      	add	r2, r3
 8020a96:	4710      	bx	r2
 8020a98:	00000015 	.word	0x00000015
 8020a9c:	00000023 	.word	0x00000023
 8020aa0:	00000033 	.word	0x00000033
 8020aa4:	00000043 	.word	0x00000043
 8020aa8:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 8020aac:	697b      	ldr	r3, [r7, #20]
 8020aae:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020ab0:	69ba      	ldr	r2, [r7, #24]
 8020ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020ab4:	4610      	mov	r0, r2
 8020ab6:	4798      	blx	r3

                break;
 8020ab8:	e021      	b.n	8020afe <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 8020aba:	697b      	ldr	r3, [r7, #20]
 8020abc:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 8020abe:	69bb      	ldr	r3, [r7, #24]
 8020ac0:	461a      	mov	r2, r3
 8020ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020ac4:	4610      	mov	r0, r2
 8020ac6:	4798      	blx	r3

                break;
 8020ac8:	e019      	b.n	8020afe <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 8020aca:	697b      	ldr	r3, [r7, #20]
 8020acc:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 8020ace:	69bb      	ldr	r3, [r7, #24]
 8020ad0:	461a      	mov	r2, r3
 8020ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020ad4:	4610      	mov	r0, r2
 8020ad6:	4798      	blx	r3

                break;
 8020ad8:	e011      	b.n	8020afe <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 8020ada:	697b      	ldr	r3, [r7, #20]
 8020adc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 8020ade:	69bb      	ldr	r3, [r7, #24]
 8020ae0:	461a      	mov	r2, r3
 8020ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020ae4:	4610      	mov	r0, r2
 8020ae6:	4798      	blx	r3

                break;
 8020ae8:	e009      	b.n	8020afe <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 8020aea:	697b      	ldr	r3, [r7, #20]
 8020aec:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 8020aee:	69bb      	ldr	r3, [r7, #24]
 8020af0:	4618      	mov	r0, r3
 8020af2:	69fa      	ldr	r2, [r7, #28]
 8020af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020af6:	4611      	mov	r1, r2
 8020af8:	4798      	blx	r3

                break;
 8020afa:	e000      	b.n	8020afe <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 8020afc:	bf00      	nop
        while (activation_count)
 8020afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d1be      	bne.n	8020a82 <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020b04:	e7ae      	b.n	8020a64 <_txm_module_callback_request_thread_entry+0x14>
            break;
 8020b06:	bf00      	nop
            }
        }
    }
}
 8020b08:	bf00      	nop
 8020b0a:	3760      	adds	r7, #96	; 0x60
 8020b0c:	46bd      	mov	sp, r7
 8020b0e:	bd80      	pop	{r7, pc}
 8020b10:	00000010 	.word	0x00000010

08020b14 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 8020b14:	b590      	push	{r4, r7, lr}
 8020b16:	b085      	sub	sp, #20
 8020b18:	af00      	add	r7, sp, #0
 8020b1a:	6078      	str	r0, [r7, #4]
 8020b1c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 8020b1e:	4b07      	ldr	r3, [pc, #28]	; (8020b3c <_txm_module_object_allocate+0x28>)
 8020b20:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b24:	681c      	ldr	r4, [r3, #0]
 8020b26:	6879      	ldr	r1, [r7, #4]
 8020b28:	2300      	movs	r3, #0
 8020b2a:	683a      	ldr	r2, [r7, #0]
 8020b2c:	205f      	movs	r0, #95	; 0x5f
 8020b2e:	47a0      	blx	r4
 8020b30:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b32:	68fb      	ldr	r3, [r7, #12]
}
 8020b34:	4618      	mov	r0, r3
 8020b36:	3714      	adds	r7, #20
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	bd90      	pop	{r4, r7, pc}
 8020b3c:	00000004 	.word	0x00000004

08020b40 <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 8020b40:	b590      	push	{r4, r7, lr}
 8020b42:	b085      	sub	sp, #20
 8020b44:	af00      	add	r7, sp, #0
 8020b46:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 8020b48:	4b07      	ldr	r3, [pc, #28]	; (8020b68 <_txm_module_object_deallocate+0x28>)
 8020b4a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b4e:	681c      	ldr	r4, [r3, #0]
 8020b50:	6879      	ldr	r1, [r7, #4]
 8020b52:	2300      	movs	r3, #0
 8020b54:	2200      	movs	r2, #0
 8020b56:	2060      	movs	r0, #96	; 0x60
 8020b58:	47a0      	blx	r4
 8020b5a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b5c:	68fb      	ldr	r3, [r7, #12]
}
 8020b5e:	4618      	mov	r0, r3
 8020b60:	3714      	adds	r7, #20
 8020b62:	46bd      	mov	sp, r7
 8020b64:	bd90      	pop	{r4, r7, pc}
 8020b66:	bf00      	nop
 8020b68:	00000004 	.word	0x00000004

08020b6c <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020b6c:	b590      	push	{r4, r7, lr}
 8020b6e:	b087      	sub	sp, #28
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	60f8      	str	r0, [r7, #12]
 8020b74:	60b9      	str	r1, [r7, #8]
 8020b76:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020b78:	4b07      	ldr	r3, [pc, #28]	; (8020b98 <_txm_module_object_pointer_get+0x2c>)
 8020b7a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b7e:	681c      	ldr	r4, [r3, #0]
 8020b80:	68ba      	ldr	r2, [r7, #8]
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	68f9      	ldr	r1, [r7, #12]
 8020b86:	205d      	movs	r0, #93	; 0x5d
 8020b88:	47a0      	blx	r4
 8020b8a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020b8c:	697b      	ldr	r3, [r7, #20]
}
 8020b8e:	4618      	mov	r0, r3
 8020b90:	371c      	adds	r7, #28
 8020b92:	46bd      	mov	sp, r7
 8020b94:	bd90      	pop	{r4, r7, pc}
 8020b96:	bf00      	nop
 8020b98:	00000004 	.word	0x00000004

08020b9c <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 8020b9c:	b590      	push	{r4, r7, lr}
 8020b9e:	b089      	sub	sp, #36	; 0x24
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	60f8      	str	r0, [r7, #12]
 8020ba4:	60b9      	str	r1, [r7, #8]
 8020ba6:	607a      	str	r2, [r7, #4]
 8020ba8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 8020bae:	683b      	ldr	r3, [r7, #0]
 8020bb0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020bb2:	4b08      	ldr	r3, [pc, #32]	; (8020bd4 <_txm_module_object_pointer_get_extended+0x38>)
 8020bb4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bb8:	681c      	ldr	r4, [r3, #0]
 8020bba:	68ba      	ldr	r2, [r7, #8]
 8020bbc:	f107 0314 	add.w	r3, r7, #20
 8020bc0:	68f9      	ldr	r1, [r7, #12]
 8020bc2:	205e      	movs	r0, #94	; 0x5e
 8020bc4:	47a0      	blx	r4
 8020bc6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020bc8:	69fb      	ldr	r3, [r7, #28]
}
 8020bca:	4618      	mov	r0, r3
 8020bcc:	3724      	adds	r7, #36	; 0x24
 8020bce:	46bd      	mov	sp, r7
 8020bd0:	bd90      	pop	{r4, r7, pc}
 8020bd2:	bf00      	nop
 8020bd4:	00000004 	.word	0x00000004

08020bd8 <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 8020bd8:	b580      	push	{r7, lr}
 8020bda:	b084      	sub	sp, #16
 8020bdc:	af00      	add	r7, sp, #0
 8020bde:	6078      	str	r0, [r7, #4]
 8020be0:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 8020be2:	683b      	ldr	r3, [r7, #0]
 8020be4:	69db      	ldr	r3, [r3, #28]
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d01b      	beq.n	8020c22 <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 8020bea:	683b      	ldr	r3, [r7, #0]
 8020bec:	68db      	ldr	r3, [r3, #12]
 8020bee:	4618      	mov	r0, r3
 8020bf0:	f7ff fa5e 	bl	80200b0 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 8020bf4:	4b1b      	ldr	r3, [pc, #108]	; (8020c64 <_txm_module_thread_shell_entry+0x8c>)
 8020bf6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bfa:	683a      	ldr	r2, [r7, #0]
 8020bfc:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020c02:	4b19      	ldr	r3, [pc, #100]	; (8020c68 <_txm_module_thread_shell_entry+0x90>)
 8020c04:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c08:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 8020c0a:	bf00      	nop
 8020c0c:	4b16      	ldr	r3, [pc, #88]	; (8020c68 <_txm_module_thread_shell_entry+0x90>)
 8020c0e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	d0f9      	beq.n	8020c0c <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 8020c18:	683b      	ldr	r3, [r7, #0]
 8020c1a:	6a1b      	ldr	r3, [r3, #32]
 8020c1c:	4618      	mov	r0, r3
 8020c1e:	f000 fca3 	bl	8021568 <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c22:	683b      	ldr	r3, [r7, #0]
 8020c24:	699b      	ldr	r3, [r3, #24]
 8020c26:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c28:	68fb      	ldr	r3, [r7, #12]
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	d003      	beq.n	8020c36 <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8020c2e:	68fb      	ldr	r3, [r7, #12]
 8020c30:	2100      	movs	r1, #0
 8020c32:	6878      	ldr	r0, [r7, #4]
 8020c34:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	691b      	ldr	r3, [r3, #16]
 8020c3a:	683a      	ldr	r2, [r7, #0]
 8020c3c:	6952      	ldr	r2, [r2, #20]
 8020c3e:	4610      	mov	r0, r2
 8020c40:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c42:	683b      	ldr	r3, [r7, #0]
 8020c44:	699b      	ldr	r3, [r3, #24]
 8020c46:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d003      	beq.n	8020c56 <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	2101      	movs	r1, #1
 8020c52:	6878      	ldr	r0, [r7, #4]
 8020c54:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020c56:	6878      	ldr	r0, [r7, #4]
 8020c58:	f000 f808 	bl	8020c6c <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020c5c:	bf00      	nop
 8020c5e:	3710      	adds	r7, #16
 8020c60:	46bd      	mov	sp, r7
 8020c62:	bd80      	pop	{r7, pc}
 8020c64:	00000010 	.word	0x00000010
 8020c68:	00000004 	.word	0x00000004

08020c6c <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020c6c:	b590      	push	{r4, r7, lr}
 8020c6e:	b085      	sub	sp, #20
 8020c70:	af00      	add	r7, sp, #0
 8020c72:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020c74:	4b07      	ldr	r3, [pc, #28]	; (8020c94 <_txm_module_thread_system_suspend+0x28>)
 8020c76:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c7a:	681c      	ldr	r4, [r3, #0]
 8020c7c:	6879      	ldr	r1, [r7, #4]
 8020c7e:	2300      	movs	r3, #0
 8020c80:	2200      	movs	r2, #0
 8020c82:	205c      	movs	r0, #92	; 0x5c
 8020c84:	47a0      	blx	r4
 8020c86:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c88:	68fb      	ldr	r3, [r7, #12]
}
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	3714      	adds	r7, #20
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	bd90      	pop	{r4, r7, pc}
 8020c92:	bf00      	nop
 8020c94:	00000004 	.word	0x00000004

08020c98 <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020c98:	b590      	push	{r4, r7, lr}
 8020c9a:	b089      	sub	sp, #36	; 0x24
 8020c9c:	af00      	add	r7, sp, #0
 8020c9e:	60f8      	str	r0, [r7, #12]
 8020ca0:	60b9      	str	r1, [r7, #8]
 8020ca2:	607a      	str	r2, [r7, #4]
 8020ca4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020caa:	683b      	ldr	r3, [r7, #0]
 8020cac:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020cae:	4b08      	ldr	r3, [pc, #32]	; (8020cd0 <_txe_mutex_create+0x38>)
 8020cb0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cb4:	681c      	ldr	r4, [r3, #0]
 8020cb6:	68f9      	ldr	r1, [r7, #12]
 8020cb8:	68ba      	ldr	r2, [r7, #8]
 8020cba:	f107 0314 	add.w	r3, r7, #20
 8020cbe:	201a      	movs	r0, #26
 8020cc0:	47a0      	blx	r4
 8020cc2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020cc4:	69fb      	ldr	r3, [r7, #28]
}
 8020cc6:	4618      	mov	r0, r3
 8020cc8:	3724      	adds	r7, #36	; 0x24
 8020cca:	46bd      	mov	sp, r7
 8020ccc:	bd90      	pop	{r4, r7, pc}
 8020cce:	bf00      	nop
 8020cd0:	00000004 	.word	0x00000004

08020cd4 <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020cd4:	b590      	push	{r4, r7, lr}
 8020cd6:	b085      	sub	sp, #20
 8020cd8:	af00      	add	r7, sp, #0
 8020cda:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020cdc:	4b07      	ldr	r3, [pc, #28]	; (8020cfc <_txe_mutex_delete+0x28>)
 8020cde:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ce2:	681c      	ldr	r4, [r3, #0]
 8020ce4:	6879      	ldr	r1, [r7, #4]
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	2200      	movs	r2, #0
 8020cea:	201b      	movs	r0, #27
 8020cec:	47a0      	blx	r4
 8020cee:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020cf0:	68fb      	ldr	r3, [r7, #12]
}
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	3714      	adds	r7, #20
 8020cf6:	46bd      	mov	sp, r7
 8020cf8:	bd90      	pop	{r4, r7, pc}
 8020cfa:	bf00      	nop
 8020cfc:	00000004 	.word	0x00000004

08020d00 <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020d00:	b590      	push	{r4, r7, lr}
 8020d02:	b085      	sub	sp, #20
 8020d04:	af00      	add	r7, sp, #0
 8020d06:	6078      	str	r0, [r7, #4]
 8020d08:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020d0a:	4b07      	ldr	r3, [pc, #28]	; (8020d28 <_txe_mutex_get+0x28>)
 8020d0c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d10:	681c      	ldr	r4, [r3, #0]
 8020d12:	6879      	ldr	r1, [r7, #4]
 8020d14:	2300      	movs	r3, #0
 8020d16:	683a      	ldr	r2, [r7, #0]
 8020d18:	201c      	movs	r0, #28
 8020d1a:	47a0      	blx	r4
 8020d1c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020d1e:	68fb      	ldr	r3, [r7, #12]
}
 8020d20:	4618      	mov	r0, r3
 8020d22:	3714      	adds	r7, #20
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bd90      	pop	{r4, r7, pc}
 8020d28:	00000004 	.word	0x00000004

08020d2c <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020d2c:	b590      	push	{r4, r7, lr}
 8020d2e:	b08b      	sub	sp, #44	; 0x2c
 8020d30:	af00      	add	r7, sp, #0
 8020d32:	60f8      	str	r0, [r7, #12]
 8020d34:	60b9      	str	r1, [r7, #8]
 8020d36:	607a      	str	r2, [r7, #4]
 8020d38:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d44:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d48:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d4c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d4e:	4b08      	ldr	r3, [pc, #32]	; (8020d70 <_txe_mutex_info_get+0x44>)
 8020d50:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d54:	681c      	ldr	r4, [r3, #0]
 8020d56:	68f9      	ldr	r1, [r7, #12]
 8020d58:	68ba      	ldr	r2, [r7, #8]
 8020d5a:	f107 0310 	add.w	r3, r7, #16
 8020d5e:	201d      	movs	r0, #29
 8020d60:	47a0      	blx	r4
 8020d62:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d66:	4618      	mov	r0, r3
 8020d68:	372c      	adds	r7, #44	; 0x2c
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	bd90      	pop	{r4, r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	00000004 	.word	0x00000004

08020d74 <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020d74:	b590      	push	{r4, r7, lr}
 8020d76:	b08b      	sub	sp, #44	; 0x2c
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	60f8      	str	r0, [r7, #12]
 8020d7c:	60b9      	str	r1, [r7, #8]
 8020d7e:	607a      	str	r2, [r7, #4]
 8020d80:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020d86:	683b      	ldr	r3, [r7, #0]
 8020d88:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d8c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d90:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d94:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020d96:	4b08      	ldr	r3, [pc, #32]	; (8020db8 <_tx_mutex_performance_info_get+0x44>)
 8020d98:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d9c:	681c      	ldr	r4, [r3, #0]
 8020d9e:	68f9      	ldr	r1, [r7, #12]
 8020da0:	68ba      	ldr	r2, [r7, #8]
 8020da2:	f107 0310 	add.w	r3, r7, #16
 8020da6:	201e      	movs	r0, #30
 8020da8:	47a0      	blx	r4
 8020daa:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020dae:	4618      	mov	r0, r3
 8020db0:	372c      	adds	r7, #44	; 0x2c
 8020db2:	46bd      	mov	sp, r7
 8020db4:	bd90      	pop	{r4, r7, pc}
 8020db6:	bf00      	nop
 8020db8:	00000004 	.word	0x00000004

08020dbc <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020dbc:	b590      	push	{r4, r7, lr}
 8020dbe:	b08b      	sub	sp, #44	; 0x2c
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	60f8      	str	r0, [r7, #12]
 8020dc4:	60b9      	str	r1, [r7, #8]
 8020dc6:	607a      	str	r2, [r7, #4]
 8020dc8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020dce:	683b      	ldr	r3, [r7, #0]
 8020dd0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dd4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020dd8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020dda:	4b08      	ldr	r3, [pc, #32]	; (8020dfc <_tx_mutex_performance_system_info_get+0x40>)
 8020ddc:	f859 3003 	ldr.w	r3, [r9, r3]
 8020de0:	681c      	ldr	r4, [r3, #0]
 8020de2:	68f9      	ldr	r1, [r7, #12]
 8020de4:	68ba      	ldr	r2, [r7, #8]
 8020de6:	f107 0314 	add.w	r3, r7, #20
 8020dea:	201f      	movs	r0, #31
 8020dec:	47a0      	blx	r4
 8020dee:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020df2:	4618      	mov	r0, r3
 8020df4:	372c      	adds	r7, #44	; 0x2c
 8020df6:	46bd      	mov	sp, r7
 8020df8:	bd90      	pop	{r4, r7, pc}
 8020dfa:	bf00      	nop
 8020dfc:	00000004 	.word	0x00000004

08020e00 <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020e00:	b590      	push	{r4, r7, lr}
 8020e02:	b085      	sub	sp, #20
 8020e04:	af00      	add	r7, sp, #0
 8020e06:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020e08:	4b07      	ldr	r3, [pc, #28]	; (8020e28 <_txe_mutex_prioritize+0x28>)
 8020e0a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e0e:	681c      	ldr	r4, [r3, #0]
 8020e10:	6879      	ldr	r1, [r7, #4]
 8020e12:	2300      	movs	r3, #0
 8020e14:	2200      	movs	r2, #0
 8020e16:	2020      	movs	r0, #32
 8020e18:	47a0      	blx	r4
 8020e1a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e1c:	68fb      	ldr	r3, [r7, #12]
}
 8020e1e:	4618      	mov	r0, r3
 8020e20:	3714      	adds	r7, #20
 8020e22:	46bd      	mov	sp, r7
 8020e24:	bd90      	pop	{r4, r7, pc}
 8020e26:	bf00      	nop
 8020e28:	00000004 	.word	0x00000004

08020e2c <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020e2c:	b590      	push	{r4, r7, lr}
 8020e2e:	b085      	sub	sp, #20
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020e34:	4b07      	ldr	r3, [pc, #28]	; (8020e54 <_txe_mutex_put+0x28>)
 8020e36:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e3a:	681c      	ldr	r4, [r3, #0]
 8020e3c:	6879      	ldr	r1, [r7, #4]
 8020e3e:	2300      	movs	r3, #0
 8020e40:	2200      	movs	r2, #0
 8020e42:	2021      	movs	r0, #33	; 0x21
 8020e44:	47a0      	blx	r4
 8020e46:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e48:	68fb      	ldr	r3, [r7, #12]
}
 8020e4a:	4618      	mov	r0, r3
 8020e4c:	3714      	adds	r7, #20
 8020e4e:	46bd      	mov	sp, r7
 8020e50:	bd90      	pop	{r4, r7, pc}
 8020e52:	bf00      	nop
 8020e54:	00000004 	.word	0x00000004

08020e58 <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020e58:	b590      	push	{r4, r7, lr}
 8020e5a:	b08b      	sub	sp, #44	; 0x2c
 8020e5c:	af00      	add	r7, sp, #0
 8020e5e:	60f8      	str	r0, [r7, #12]
 8020e60:	60b9      	str	r1, [r7, #8]
 8020e62:	607a      	str	r2, [r7, #4]
 8020e64:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020e6a:	683b      	ldr	r3, [r7, #0]
 8020e6c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e70:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020e74:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020e76:	4b08      	ldr	r3, [pc, #32]	; (8020e98 <_txe_queue_create+0x40>)
 8020e78:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e7c:	681c      	ldr	r4, [r3, #0]
 8020e7e:	68f9      	ldr	r1, [r7, #12]
 8020e80:	68ba      	ldr	r2, [r7, #8]
 8020e82:	f107 0314 	add.w	r3, r7, #20
 8020e86:	2022      	movs	r0, #34	; 0x22
 8020e88:	47a0      	blx	r4
 8020e8a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020e8e:	4618      	mov	r0, r3
 8020e90:	372c      	adds	r7, #44	; 0x2c
 8020e92:	46bd      	mov	sp, r7
 8020e94:	bd90      	pop	{r4, r7, pc}
 8020e96:	bf00      	nop
 8020e98:	00000004 	.word	0x00000004

08020e9c <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020e9c:	b590      	push	{r4, r7, lr}
 8020e9e:	b085      	sub	sp, #20
 8020ea0:	af00      	add	r7, sp, #0
 8020ea2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020ea4:	4b07      	ldr	r3, [pc, #28]	; (8020ec4 <_txe_queue_delete+0x28>)
 8020ea6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020eaa:	681c      	ldr	r4, [r3, #0]
 8020eac:	6879      	ldr	r1, [r7, #4]
 8020eae:	2300      	movs	r3, #0
 8020eb0:	2200      	movs	r2, #0
 8020eb2:	2023      	movs	r0, #35	; 0x23
 8020eb4:	47a0      	blx	r4
 8020eb6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020eb8:	68fb      	ldr	r3, [r7, #12]
}
 8020eba:	4618      	mov	r0, r3
 8020ebc:	3714      	adds	r7, #20
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	bd90      	pop	{r4, r7, pc}
 8020ec2:	bf00      	nop
 8020ec4:	00000004 	.word	0x00000004

08020ec8 <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020ec8:	b590      	push	{r4, r7, lr}
 8020eca:	b085      	sub	sp, #20
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020ed0:	4b07      	ldr	r3, [pc, #28]	; (8020ef0 <_txe_queue_flush+0x28>)
 8020ed2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ed6:	681c      	ldr	r4, [r3, #0]
 8020ed8:	6879      	ldr	r1, [r7, #4]
 8020eda:	2300      	movs	r3, #0
 8020edc:	2200      	movs	r2, #0
 8020ede:	2024      	movs	r0, #36	; 0x24
 8020ee0:	47a0      	blx	r4
 8020ee2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ee4:	68fb      	ldr	r3, [r7, #12]
}
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	3714      	adds	r7, #20
 8020eea:	46bd      	mov	sp, r7
 8020eec:	bd90      	pop	{r4, r7, pc}
 8020eee:	bf00      	nop
 8020ef0:	00000004 	.word	0x00000004

08020ef4 <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020ef4:	b590      	push	{r4, r7, lr}
 8020ef6:	b087      	sub	sp, #28
 8020ef8:	af00      	add	r7, sp, #0
 8020efa:	60f8      	str	r0, [r7, #12]
 8020efc:	60b9      	str	r1, [r7, #8]
 8020efe:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020f00:	4b07      	ldr	r3, [pc, #28]	; (8020f20 <_txe_queue_front_send+0x2c>)
 8020f02:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f06:	681c      	ldr	r4, [r3, #0]
 8020f08:	68f9      	ldr	r1, [r7, #12]
 8020f0a:	68ba      	ldr	r2, [r7, #8]
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	2025      	movs	r0, #37	; 0x25
 8020f10:	47a0      	blx	r4
 8020f12:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020f14:	697b      	ldr	r3, [r7, #20]
}
 8020f16:	4618      	mov	r0, r3
 8020f18:	371c      	adds	r7, #28
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	bd90      	pop	{r4, r7, pc}
 8020f1e:	bf00      	nop
 8020f20:	00000004 	.word	0x00000004

08020f24 <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020f24:	b590      	push	{r4, r7, lr}
 8020f26:	b08b      	sub	sp, #44	; 0x2c
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	60f8      	str	r0, [r7, #12]
 8020f2c:	60b9      	str	r1, [r7, #8]
 8020f2e:	607a      	str	r2, [r7, #4]
 8020f30:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f3c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f40:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f44:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f46:	4b08      	ldr	r3, [pc, #32]	; (8020f68 <_txe_queue_info_get+0x44>)
 8020f48:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f4c:	681c      	ldr	r4, [r3, #0]
 8020f4e:	68f9      	ldr	r1, [r7, #12]
 8020f50:	68ba      	ldr	r2, [r7, #8]
 8020f52:	f107 0310 	add.w	r3, r7, #16
 8020f56:	2026      	movs	r0, #38	; 0x26
 8020f58:	47a0      	blx	r4
 8020f5a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f5e:	4618      	mov	r0, r3
 8020f60:	372c      	adds	r7, #44	; 0x2c
 8020f62:	46bd      	mov	sp, r7
 8020f64:	bd90      	pop	{r4, r7, pc}
 8020f66:	bf00      	nop
 8020f68:	00000004 	.word	0x00000004

08020f6c <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020f6c:	b590      	push	{r4, r7, lr}
 8020f6e:	b08b      	sub	sp, #44	; 0x2c
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	60f8      	str	r0, [r7, #12]
 8020f74:	60b9      	str	r1, [r7, #8]
 8020f76:	607a      	str	r2, [r7, #4]
 8020f78:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020f7e:	683b      	ldr	r3, [r7, #0]
 8020f80:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f84:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f88:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f8c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020f8e:	4b08      	ldr	r3, [pc, #32]	; (8020fb0 <_tx_queue_performance_info_get+0x44>)
 8020f90:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f94:	681c      	ldr	r4, [r3, #0]
 8020f96:	68f9      	ldr	r1, [r7, #12]
 8020f98:	68ba      	ldr	r2, [r7, #8]
 8020f9a:	f107 0310 	add.w	r3, r7, #16
 8020f9e:	2027      	movs	r0, #39	; 0x27
 8020fa0:	47a0      	blx	r4
 8020fa2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	372c      	adds	r7, #44	; 0x2c
 8020faa:	46bd      	mov	sp, r7
 8020fac:	bd90      	pop	{r4, r7, pc}
 8020fae:	bf00      	nop
 8020fb0:	00000004 	.word	0x00000004

08020fb4 <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020fb4:	b590      	push	{r4, r7, lr}
 8020fb6:	b08b      	sub	sp, #44	; 0x2c
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	60f8      	str	r0, [r7, #12]
 8020fbc:	60b9      	str	r1, [r7, #8]
 8020fbe:	607a      	str	r2, [r7, #4]
 8020fc0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020fc6:	683b      	ldr	r3, [r7, #0]
 8020fc8:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020fcc:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020fd0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020fd2:	4b08      	ldr	r3, [pc, #32]	; (8020ff4 <_tx_queue_performance_system_info_get+0x40>)
 8020fd4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fd8:	681c      	ldr	r4, [r3, #0]
 8020fda:	68f9      	ldr	r1, [r7, #12]
 8020fdc:	68ba      	ldr	r2, [r7, #8]
 8020fde:	f107 0314 	add.w	r3, r7, #20
 8020fe2:	2028      	movs	r0, #40	; 0x28
 8020fe4:	47a0      	blx	r4
 8020fe6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020fea:	4618      	mov	r0, r3
 8020fec:	372c      	adds	r7, #44	; 0x2c
 8020fee:	46bd      	mov	sp, r7
 8020ff0:	bd90      	pop	{r4, r7, pc}
 8020ff2:	bf00      	nop
 8020ff4:	00000004 	.word	0x00000004

08020ff8 <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020ff8:	b590      	push	{r4, r7, lr}
 8020ffa:	b085      	sub	sp, #20
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8021000:	4b07      	ldr	r3, [pc, #28]	; (8021020 <_txe_queue_prioritize+0x28>)
 8021002:	f859 3003 	ldr.w	r3, [r9, r3]
 8021006:	681c      	ldr	r4, [r3, #0]
 8021008:	6879      	ldr	r1, [r7, #4]
 802100a:	2300      	movs	r3, #0
 802100c:	2200      	movs	r2, #0
 802100e:	2029      	movs	r0, #41	; 0x29
 8021010:	47a0      	blx	r4
 8021012:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021014:	68fb      	ldr	r3, [r7, #12]
}
 8021016:	4618      	mov	r0, r3
 8021018:	3714      	adds	r7, #20
 802101a:	46bd      	mov	sp, r7
 802101c:	bd90      	pop	{r4, r7, pc}
 802101e:	bf00      	nop
 8021020:	00000004 	.word	0x00000004

08021024 <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8021024:	b590      	push	{r4, r7, lr}
 8021026:	b087      	sub	sp, #28
 8021028:	af00      	add	r7, sp, #0
 802102a:	60f8      	str	r0, [r7, #12]
 802102c:	60b9      	str	r1, [r7, #8]
 802102e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8021030:	4b07      	ldr	r3, [pc, #28]	; (8021050 <_txe_queue_receive+0x2c>)
 8021032:	f859 3003 	ldr.w	r3, [r9, r3]
 8021036:	681c      	ldr	r4, [r3, #0]
 8021038:	68f9      	ldr	r1, [r7, #12]
 802103a:	68ba      	ldr	r2, [r7, #8]
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	202a      	movs	r0, #42	; 0x2a
 8021040:	47a0      	blx	r4
 8021042:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021044:	697b      	ldr	r3, [r7, #20]
}
 8021046:	4618      	mov	r0, r3
 8021048:	371c      	adds	r7, #28
 802104a:	46bd      	mov	sp, r7
 802104c:	bd90      	pop	{r4, r7, pc}
 802104e:	bf00      	nop
 8021050:	00000004 	.word	0x00000004

08021054 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8021054:	b590      	push	{r4, r7, lr}
 8021056:	b087      	sub	sp, #28
 8021058:	af00      	add	r7, sp, #0
 802105a:	60f8      	str	r0, [r7, #12]
 802105c:	60b9      	str	r1, [r7, #8]
 802105e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8021060:	4b07      	ldr	r3, [pc, #28]	; (8021080 <_txe_queue_send+0x2c>)
 8021062:	f859 3003 	ldr.w	r3, [r9, r3]
 8021066:	681c      	ldr	r4, [r3, #0]
 8021068:	68f9      	ldr	r1, [r7, #12]
 802106a:	68ba      	ldr	r2, [r7, #8]
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	202b      	movs	r0, #43	; 0x2b
 8021070:	47a0      	blx	r4
 8021072:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021074:	697b      	ldr	r3, [r7, #20]
}
 8021076:	4618      	mov	r0, r3
 8021078:	371c      	adds	r7, #28
 802107a:	46bd      	mov	sp, r7
 802107c:	bd90      	pop	{r4, r7, pc}
 802107e:	bf00      	nop
 8021080:	00000004 	.word	0x00000004

08021084 <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8021084:	b590      	push	{r4, r7, lr}
 8021086:	b085      	sub	sp, #20
 8021088:	af00      	add	r7, sp, #0
 802108a:	6078      	str	r0, [r7, #4]
 802108c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 802108e:	4b07      	ldr	r3, [pc, #28]	; (80210ac <_txe_queue_send_notify+0x28>)
 8021090:	f859 3003 	ldr.w	r3, [r9, r3]
 8021094:	681c      	ldr	r4, [r3, #0]
 8021096:	6879      	ldr	r1, [r7, #4]
 8021098:	683a      	ldr	r2, [r7, #0]
 802109a:	2300      	movs	r3, #0
 802109c:	202c      	movs	r0, #44	; 0x2c
 802109e:	47a0      	blx	r4
 80210a0:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210a2:	68fb      	ldr	r3, [r7, #12]
}
 80210a4:	4618      	mov	r0, r3
 80210a6:	3714      	adds	r7, #20
 80210a8:	46bd      	mov	sp, r7
 80210aa:	bd90      	pop	{r4, r7, pc}
 80210ac:	00000004 	.word	0x00000004

080210b0 <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 80210b0:	b590      	push	{r4, r7, lr}
 80210b2:	b085      	sub	sp, #20
 80210b4:	af00      	add	r7, sp, #0
 80210b6:	6078      	str	r0, [r7, #4]
 80210b8:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 80210ba:	4b07      	ldr	r3, [pc, #28]	; (80210d8 <_txe_semaphore_ceiling_put+0x28>)
 80210bc:	f859 3003 	ldr.w	r3, [r9, r3]
 80210c0:	681c      	ldr	r4, [r3, #0]
 80210c2:	6879      	ldr	r1, [r7, #4]
 80210c4:	2300      	movs	r3, #0
 80210c6:	683a      	ldr	r2, [r7, #0]
 80210c8:	202d      	movs	r0, #45	; 0x2d
 80210ca:	47a0      	blx	r4
 80210cc:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210ce:	68fb      	ldr	r3, [r7, #12]
}
 80210d0:	4618      	mov	r0, r3
 80210d2:	3714      	adds	r7, #20
 80210d4:	46bd      	mov	sp, r7
 80210d6:	bd90      	pop	{r4, r7, pc}
 80210d8:	00000004 	.word	0x00000004

080210dc <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80210dc:	b590      	push	{r4, r7, lr}
 80210de:	b089      	sub	sp, #36	; 0x24
 80210e0:	af00      	add	r7, sp, #0
 80210e2:	60f8      	str	r0, [r7, #12]
 80210e4:	60b9      	str	r1, [r7, #8]
 80210e6:	607a      	str	r2, [r7, #4]
 80210e8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 80210ee:	683b      	ldr	r3, [r7, #0]
 80210f0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210f2:	4b08      	ldr	r3, [pc, #32]	; (8021114 <_txe_semaphore_create+0x38>)
 80210f4:	f859 3003 	ldr.w	r3, [r9, r3]
 80210f8:	681c      	ldr	r4, [r3, #0]
 80210fa:	68f9      	ldr	r1, [r7, #12]
 80210fc:	68ba      	ldr	r2, [r7, #8]
 80210fe:	f107 0314 	add.w	r3, r7, #20
 8021102:	202e      	movs	r0, #46	; 0x2e
 8021104:	47a0      	blx	r4
 8021106:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021108:	69fb      	ldr	r3, [r7, #28]
}
 802110a:	4618      	mov	r0, r3
 802110c:	3724      	adds	r7, #36	; 0x24
 802110e:	46bd      	mov	sp, r7
 8021110:	bd90      	pop	{r4, r7, pc}
 8021112:	bf00      	nop
 8021114:	00000004 	.word	0x00000004

08021118 <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8021118:	b590      	push	{r4, r7, lr}
 802111a:	b085      	sub	sp, #20
 802111c:	af00      	add	r7, sp, #0
 802111e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021120:	4b07      	ldr	r3, [pc, #28]	; (8021140 <_txe_semaphore_delete+0x28>)
 8021122:	f859 3003 	ldr.w	r3, [r9, r3]
 8021126:	681c      	ldr	r4, [r3, #0]
 8021128:	6879      	ldr	r1, [r7, #4]
 802112a:	2300      	movs	r3, #0
 802112c:	2200      	movs	r2, #0
 802112e:	202f      	movs	r0, #47	; 0x2f
 8021130:	47a0      	blx	r4
 8021132:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021134:	68fb      	ldr	r3, [r7, #12]
}
 8021136:	4618      	mov	r0, r3
 8021138:	3714      	adds	r7, #20
 802113a:	46bd      	mov	sp, r7
 802113c:	bd90      	pop	{r4, r7, pc}
 802113e:	bf00      	nop
 8021140:	00000004 	.word	0x00000004

08021144 <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8021144:	b590      	push	{r4, r7, lr}
 8021146:	b085      	sub	sp, #20
 8021148:	af00      	add	r7, sp, #0
 802114a:	6078      	str	r0, [r7, #4]
 802114c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 802114e:	4b07      	ldr	r3, [pc, #28]	; (802116c <_txe_semaphore_get+0x28>)
 8021150:	f859 3003 	ldr.w	r3, [r9, r3]
 8021154:	681c      	ldr	r4, [r3, #0]
 8021156:	6879      	ldr	r1, [r7, #4]
 8021158:	2300      	movs	r3, #0
 802115a:	683a      	ldr	r2, [r7, #0]
 802115c:	2030      	movs	r0, #48	; 0x30
 802115e:	47a0      	blx	r4
 8021160:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021162:	68fb      	ldr	r3, [r7, #12]
}
 8021164:	4618      	mov	r0, r3
 8021166:	3714      	adds	r7, #20
 8021168:	46bd      	mov	sp, r7
 802116a:	bd90      	pop	{r4, r7, pc}
 802116c:	00000004 	.word	0x00000004

08021170 <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 8021170:	b590      	push	{r4, r7, lr}
 8021172:	b08b      	sub	sp, #44	; 0x2c
 8021174:	af00      	add	r7, sp, #0
 8021176:	60f8      	str	r0, [r7, #12]
 8021178:	60b9      	str	r1, [r7, #8]
 802117a:	607a      	str	r2, [r7, #4]
 802117c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8021182:	683b      	ldr	r3, [r7, #0]
 8021184:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8021186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021188:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 802118a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802118c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802118e:	4b08      	ldr	r3, [pc, #32]	; (80211b0 <_txe_semaphore_info_get+0x40>)
 8021190:	f859 3003 	ldr.w	r3, [r9, r3]
 8021194:	681c      	ldr	r4, [r3, #0]
 8021196:	68f9      	ldr	r1, [r7, #12]
 8021198:	68ba      	ldr	r2, [r7, #8]
 802119a:	f107 0314 	add.w	r3, r7, #20
 802119e:	2031      	movs	r0, #49	; 0x31
 80211a0:	47a0      	blx	r4
 80211a2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80211a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80211a6:	4618      	mov	r0, r3
 80211a8:	372c      	adds	r7, #44	; 0x2c
 80211aa:	46bd      	mov	sp, r7
 80211ac:	bd90      	pop	{r4, r7, pc}
 80211ae:	bf00      	nop
 80211b0:	00000004 	.word	0x00000004

080211b4 <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211b4:	b590      	push	{r4, r7, lr}
 80211b6:	b089      	sub	sp, #36	; 0x24
 80211b8:	af00      	add	r7, sp, #0
 80211ba:	60f8      	str	r0, [r7, #12]
 80211bc:	60b9      	str	r1, [r7, #8]
 80211be:	607a      	str	r2, [r7, #4]
 80211c0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80211c6:	683b      	ldr	r3, [r7, #0]
 80211c8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80211ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211cc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 80211ce:	4b08      	ldr	r3, [pc, #32]	; (80211f0 <_tx_semaphore_performance_info_get+0x3c>)
 80211d0:	f859 3003 	ldr.w	r3, [r9, r3]
 80211d4:	681c      	ldr	r4, [r3, #0]
 80211d6:	68f9      	ldr	r1, [r7, #12]
 80211d8:	68ba      	ldr	r2, [r7, #8]
 80211da:	f107 0310 	add.w	r3, r7, #16
 80211de:	2032      	movs	r0, #50	; 0x32
 80211e0:	47a0      	blx	r4
 80211e2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80211e4:	69fb      	ldr	r3, [r7, #28]
}
 80211e6:	4618      	mov	r0, r3
 80211e8:	3724      	adds	r7, #36	; 0x24
 80211ea:	46bd      	mov	sp, r7
 80211ec:	bd90      	pop	{r4, r7, pc}
 80211ee:	bf00      	nop
 80211f0:	00000004 	.word	0x00000004

080211f4 <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211f4:	b590      	push	{r4, r7, lr}
 80211f6:	b089      	sub	sp, #36	; 0x24
 80211f8:	af00      	add	r7, sp, #0
 80211fa:	60f8      	str	r0, [r7, #12]
 80211fc:	60b9      	str	r1, [r7, #8]
 80211fe:	607a      	str	r2, [r7, #4]
 8021200:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8021206:	683b      	ldr	r3, [r7, #0]
 8021208:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 802120a:	4b08      	ldr	r3, [pc, #32]	; (802122c <_tx_semaphore_performance_system_info_get+0x38>)
 802120c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021210:	681c      	ldr	r4, [r3, #0]
 8021212:	68f9      	ldr	r1, [r7, #12]
 8021214:	68ba      	ldr	r2, [r7, #8]
 8021216:	f107 0314 	add.w	r3, r7, #20
 802121a:	2033      	movs	r0, #51	; 0x33
 802121c:	47a0      	blx	r4
 802121e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021220:	69fb      	ldr	r3, [r7, #28]
}
 8021222:	4618      	mov	r0, r3
 8021224:	3724      	adds	r7, #36	; 0x24
 8021226:	46bd      	mov	sp, r7
 8021228:	bd90      	pop	{r4, r7, pc}
 802122a:	bf00      	nop
 802122c:	00000004 	.word	0x00000004

08021230 <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8021230:	b590      	push	{r4, r7, lr}
 8021232:	b085      	sub	sp, #20
 8021234:	af00      	add	r7, sp, #0
 8021236:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021238:	4b07      	ldr	r3, [pc, #28]	; (8021258 <_txe_semaphore_prioritize+0x28>)
 802123a:	f859 3003 	ldr.w	r3, [r9, r3]
 802123e:	681c      	ldr	r4, [r3, #0]
 8021240:	6879      	ldr	r1, [r7, #4]
 8021242:	2300      	movs	r3, #0
 8021244:	2200      	movs	r2, #0
 8021246:	2034      	movs	r0, #52	; 0x34
 8021248:	47a0      	blx	r4
 802124a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802124c:	68fb      	ldr	r3, [r7, #12]
}
 802124e:	4618      	mov	r0, r3
 8021250:	3714      	adds	r7, #20
 8021252:	46bd      	mov	sp, r7
 8021254:	bd90      	pop	{r4, r7, pc}
 8021256:	bf00      	nop
 8021258:	00000004 	.word	0x00000004

0802125c <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 802125c:	b590      	push	{r4, r7, lr}
 802125e:	b085      	sub	sp, #20
 8021260:	af00      	add	r7, sp, #0
 8021262:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021264:	4b07      	ldr	r3, [pc, #28]	; (8021284 <_txe_semaphore_put+0x28>)
 8021266:	f859 3003 	ldr.w	r3, [r9, r3]
 802126a:	681c      	ldr	r4, [r3, #0]
 802126c:	6879      	ldr	r1, [r7, #4]
 802126e:	2300      	movs	r3, #0
 8021270:	2200      	movs	r2, #0
 8021272:	2035      	movs	r0, #53	; 0x35
 8021274:	47a0      	blx	r4
 8021276:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021278:	68fb      	ldr	r3, [r7, #12]
}
 802127a:	4618      	mov	r0, r3
 802127c:	3714      	adds	r7, #20
 802127e:	46bd      	mov	sp, r7
 8021280:	bd90      	pop	{r4, r7, pc}
 8021282:	bf00      	nop
 8021284:	00000004 	.word	0x00000004

08021288 <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8021288:	b590      	push	{r4, r7, lr}
 802128a:	b085      	sub	sp, #20
 802128c:	af00      	add	r7, sp, #0
 802128e:	6078      	str	r0, [r7, #4]
 8021290:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 8021292:	4b07      	ldr	r3, [pc, #28]	; (80212b0 <_txe_semaphore_put_notify+0x28>)
 8021294:	f859 3003 	ldr.w	r3, [r9, r3]
 8021298:	681c      	ldr	r4, [r3, #0]
 802129a:	6879      	ldr	r1, [r7, #4]
 802129c:	683a      	ldr	r2, [r7, #0]
 802129e:	2300      	movs	r3, #0
 80212a0:	2036      	movs	r0, #54	; 0x36
 80212a2:	47a0      	blx	r4
 80212a4:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80212a6:	68fb      	ldr	r3, [r7, #12]
}
 80212a8:	4618      	mov	r0, r3
 80212aa:	3714      	adds	r7, #20
 80212ac:	46bd      	mov	sp, r7
 80212ae:	bd90      	pop	{r4, r7, pc}
 80212b0:	00000004 	.word	0x00000004

080212b4 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80212b4:	b590      	push	{r4, r7, lr}
 80212b6:	b08f      	sub	sp, #60	; 0x3c
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	60f8      	str	r0, [r7, #12]
 80212bc:	60b9      	str	r1, [r7, #8]
 80212be:	607a      	str	r2, [r7, #4]
 80212c0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 80212c6:	683b      	ldr	r3, [r7, #0]
 80212c8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 80212ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212cc:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 80212ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80212d0:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 80212d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80212d4:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 80212d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212d8:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 80212da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80212dc:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80212de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80212e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80212e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80212e4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80212e6:	4b08      	ldr	r3, [pc, #32]	; (8021308 <_txe_thread_create+0x54>)
 80212e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80212ec:	681c      	ldr	r4, [r3, #0]
 80212ee:	68f9      	ldr	r1, [r7, #12]
 80212f0:	68ba      	ldr	r2, [r7, #8]
 80212f2:	f107 0310 	add.w	r3, r7, #16
 80212f6:	2037      	movs	r0, #55	; 0x37
 80212f8:	47a0      	blx	r4
 80212fa:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80212fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80212fe:	4618      	mov	r0, r3
 8021300:	373c      	adds	r7, #60	; 0x3c
 8021302:	46bd      	mov	sp, r7
 8021304:	bd90      	pop	{r4, r7, pc}
 8021306:	bf00      	nop
 8021308:	00000004 	.word	0x00000004

0802130c <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 802130c:	b590      	push	{r4, r7, lr}
 802130e:	b085      	sub	sp, #20
 8021310:	af00      	add	r7, sp, #0
 8021312:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021314:	4b07      	ldr	r3, [pc, #28]	; (8021334 <_txe_thread_delete+0x28>)
 8021316:	f859 3003 	ldr.w	r3, [r9, r3]
 802131a:	681c      	ldr	r4, [r3, #0]
 802131c:	6879      	ldr	r1, [r7, #4]
 802131e:	2300      	movs	r3, #0
 8021320:	2200      	movs	r2, #0
 8021322:	2038      	movs	r0, #56	; 0x38
 8021324:	47a0      	blx	r4
 8021326:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021328:	68fb      	ldr	r3, [r7, #12]
}
 802132a:	4618      	mov	r0, r3
 802132c:	3714      	adds	r7, #20
 802132e:	46bd      	mov	sp, r7
 8021330:	bd90      	pop	{r4, r7, pc}
 8021332:	bf00      	nop
 8021334:	00000004 	.word	0x00000004

08021338 <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 8021338:	b590      	push	{r4, r7, lr}
 802133a:	b085      	sub	sp, #20
 802133c:	af00      	add	r7, sp, #0
 802133e:	6078      	str	r0, [r7, #4]
 8021340:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 8021342:	4b07      	ldr	r3, [pc, #28]	; (8021360 <_txe_thread_entry_exit_notify+0x28>)
 8021344:	f859 3003 	ldr.w	r3, [r9, r3]
 8021348:	681c      	ldr	r4, [r3, #0]
 802134a:	6879      	ldr	r1, [r7, #4]
 802134c:	683a      	ldr	r2, [r7, #0]
 802134e:	2300      	movs	r3, #0
 8021350:	2039      	movs	r0, #57	; 0x39
 8021352:	47a0      	blx	r4
 8021354:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021356:	68fb      	ldr	r3, [r7, #12]
}
 8021358:	4618      	mov	r0, r3
 802135a:	3714      	adds	r7, #20
 802135c:	46bd      	mov	sp, r7
 802135e:	bd90      	pop	{r4, r7, pc}
 8021360:	00000004 	.word	0x00000004

08021364 <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 8021364:	b590      	push	{r4, r7, lr}
 8021366:	b083      	sub	sp, #12
 8021368:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 802136a:	4b08      	ldr	r3, [pc, #32]	; (802138c <_tx_thread_identify+0x28>)
 802136c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021370:	681c      	ldr	r4, [r3, #0]
 8021372:	2300      	movs	r3, #0
 8021374:	2200      	movs	r2, #0
 8021376:	2100      	movs	r1, #0
 8021378:	203a      	movs	r0, #58	; 0x3a
 802137a:	47a0      	blx	r4
 802137c:	4603      	mov	r3, r0
 802137e:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 8021380:	687b      	ldr	r3, [r7, #4]
}
 8021382:	4618      	mov	r0, r3
 8021384:	370c      	adds	r7, #12
 8021386:	46bd      	mov	sp, r7
 8021388:	bd90      	pop	{r4, r7, pc}
 802138a:	bf00      	nop
 802138c:	00000004 	.word	0x00000004

08021390 <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8021390:	b590      	push	{r4, r7, lr}
 8021392:	b08d      	sub	sp, #52	; 0x34
 8021394:	af00      	add	r7, sp, #0
 8021396:	60f8      	str	r0, [r7, #12]
 8021398:	60b9      	str	r1, [r7, #8]
 802139a:	607a      	str	r2, [r7, #4]
 802139c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 80213a2:	683b      	ldr	r3, [r7, #0]
 80213a4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 80213a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80213a8:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 80213aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80213ac:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 80213ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213b0:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 80213b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80213b4:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 80213b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80213b8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80213ba:	4b08      	ldr	r3, [pc, #32]	; (80213dc <_txe_thread_info_get+0x4c>)
 80213bc:	f859 3003 	ldr.w	r3, [r9, r3]
 80213c0:	681c      	ldr	r4, [r3, #0]
 80213c2:	68f9      	ldr	r1, [r7, #12]
 80213c4:	68ba      	ldr	r2, [r7, #8]
 80213c6:	f107 0310 	add.w	r3, r7, #16
 80213ca:	203b      	movs	r0, #59	; 0x3b
 80213cc:	47a0      	blx	r4
 80213ce:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80213d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80213d2:	4618      	mov	r0, r3
 80213d4:	3734      	adds	r7, #52	; 0x34
 80213d6:	46bd      	mov	sp, r7
 80213d8:	bd90      	pop	{r4, r7, pc}
 80213da:	bf00      	nop
 80213dc:	00000004 	.word	0x00000004

080213e0 <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 80213e0:	b590      	push	{r4, r7, lr}
 80213e2:	b085      	sub	sp, #20
 80213e4:	af00      	add	r7, sp, #0
 80213e6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80213e8:	4b07      	ldr	r3, [pc, #28]	; (8021408 <_tx_thread_interrupt_control+0x28>)
 80213ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80213ee:	681c      	ldr	r4, [r3, #0]
 80213f0:	2300      	movs	r3, #0
 80213f2:	2200      	movs	r2, #0
 80213f4:	6879      	ldr	r1, [r7, #4]
 80213f6:	2019      	movs	r0, #25
 80213f8:	47a0      	blx	r4
 80213fa:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213fc:	68fb      	ldr	r3, [r7, #12]
}
 80213fe:	4618      	mov	r0, r3
 8021400:	3714      	adds	r7, #20
 8021402:	46bd      	mov	sp, r7
 8021404:	bd90      	pop	{r4, r7, pc}
 8021406:	bf00      	nop
 8021408:	00000004 	.word	0x00000004

0802140c <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 802140c:	b590      	push	{r4, r7, lr}
 802140e:	b08f      	sub	sp, #60	; 0x3c
 8021410:	af00      	add	r7, sp, #0
 8021412:	60f8      	str	r0, [r7, #12]
 8021414:	60b9      	str	r1, [r7, #8]
 8021416:	607a      	str	r2, [r7, #4]
 8021418:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 802141e:	683b      	ldr	r3, [r7, #0]
 8021420:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 8021422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021424:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 8021426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021428:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 802142a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802142c:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 802142e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021430:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 8021432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021434:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 8021436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021438:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 802143a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802143c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 802143e:	4b08      	ldr	r3, [pc, #32]	; (8021460 <_tx_thread_performance_info_get+0x54>)
 8021440:	f859 3003 	ldr.w	r3, [r9, r3]
 8021444:	681c      	ldr	r4, [r3, #0]
 8021446:	68f9      	ldr	r1, [r7, #12]
 8021448:	68ba      	ldr	r2, [r7, #8]
 802144a:	f107 0310 	add.w	r3, r7, #16
 802144e:	203c      	movs	r0, #60	; 0x3c
 8021450:	47a0      	blx	r4
 8021452:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021456:	4618      	mov	r0, r3
 8021458:	373c      	adds	r7, #60	; 0x3c
 802145a:	46bd      	mov	sp, r7
 802145c:	bd90      	pop	{r4, r7, pc}
 802145e:	bf00      	nop
 8021460:	00000004 	.word	0x00000004

08021464 <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 8021464:	b590      	push	{r4, r7, lr}
 8021466:	b08f      	sub	sp, #60	; 0x3c
 8021468:	af00      	add	r7, sp, #0
 802146a:	60f8      	str	r0, [r7, #12]
 802146c:	60b9      	str	r1, [r7, #8]
 802146e:	607a      	str	r2, [r7, #4]
 8021470:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 8021476:	683b      	ldr	r3, [r7, #0]
 8021478:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 802147a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802147c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 802147e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021480:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 8021482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021484:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8021486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021488:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 802148a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802148c:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 802148e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021490:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 8021492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021494:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 8021496:	4b08      	ldr	r3, [pc, #32]	; (80214b8 <_tx_thread_performance_system_info_get+0x54>)
 8021498:	f859 3003 	ldr.w	r3, [r9, r3]
 802149c:	681c      	ldr	r4, [r3, #0]
 802149e:	68f9      	ldr	r1, [r7, #12]
 80214a0:	68ba      	ldr	r2, [r7, #8]
 80214a2:	f107 0310 	add.w	r3, r7, #16
 80214a6:	203d      	movs	r0, #61	; 0x3d
 80214a8:	47a0      	blx	r4
 80214aa:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80214ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80214ae:	4618      	mov	r0, r3
 80214b0:	373c      	adds	r7, #60	; 0x3c
 80214b2:	46bd      	mov	sp, r7
 80214b4:	bd90      	pop	{r4, r7, pc}
 80214b6:	bf00      	nop
 80214b8:	00000004 	.word	0x00000004

080214bc <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80214bc:	b590      	push	{r4, r7, lr}
 80214be:	b087      	sub	sp, #28
 80214c0:	af00      	add	r7, sp, #0
 80214c2:	60f8      	str	r0, [r7, #12]
 80214c4:	60b9      	str	r1, [r7, #8]
 80214c6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 80214c8:	4b07      	ldr	r3, [pc, #28]	; (80214e8 <_txe_thread_preemption_change+0x2c>)
 80214ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80214ce:	681c      	ldr	r4, [r3, #0]
 80214d0:	68f9      	ldr	r1, [r7, #12]
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	68ba      	ldr	r2, [r7, #8]
 80214d6:	203e      	movs	r0, #62	; 0x3e
 80214d8:	47a0      	blx	r4
 80214da:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214dc:	697b      	ldr	r3, [r7, #20]
}
 80214de:	4618      	mov	r0, r3
 80214e0:	371c      	adds	r7, #28
 80214e2:	46bd      	mov	sp, r7
 80214e4:	bd90      	pop	{r4, r7, pc}
 80214e6:	bf00      	nop
 80214e8:	00000004 	.word	0x00000004

080214ec <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80214ec:	b590      	push	{r4, r7, lr}
 80214ee:	b087      	sub	sp, #28
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	60f8      	str	r0, [r7, #12]
 80214f4:	60b9      	str	r1, [r7, #8]
 80214f6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80214f8:	4b07      	ldr	r3, [pc, #28]	; (8021518 <_txe_thread_priority_change+0x2c>)
 80214fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80214fe:	681c      	ldr	r4, [r3, #0]
 8021500:	68f9      	ldr	r1, [r7, #12]
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	68ba      	ldr	r2, [r7, #8]
 8021506:	203f      	movs	r0, #63	; 0x3f
 8021508:	47a0      	blx	r4
 802150a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802150c:	697b      	ldr	r3, [r7, #20]
}
 802150e:	4618      	mov	r0, r3
 8021510:	371c      	adds	r7, #28
 8021512:	46bd      	mov	sp, r7
 8021514:	bd90      	pop	{r4, r7, pc}
 8021516:	bf00      	nop
 8021518:	00000004 	.word	0x00000004

0802151c <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 802151c:	b598      	push	{r3, r4, r7, lr}
 802151e:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 8021520:	4b05      	ldr	r3, [pc, #20]	; (8021538 <_txe_thread_relinquish+0x1c>)
 8021522:	f859 3003 	ldr.w	r3, [r9, r3]
 8021526:	681c      	ldr	r4, [r3, #0]
 8021528:	2300      	movs	r3, #0
 802152a:	2200      	movs	r2, #0
 802152c:	2100      	movs	r1, #0
 802152e:	2040      	movs	r0, #64	; 0x40
 8021530:	47a0      	blx	r4
}
 8021532:	bf00      	nop
 8021534:	bd98      	pop	{r3, r4, r7, pc}
 8021536:	bf00      	nop
 8021538:	00000004 	.word	0x00000004

0802153c <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 802153c:	b590      	push	{r4, r7, lr}
 802153e:	b085      	sub	sp, #20
 8021540:	af00      	add	r7, sp, #0
 8021542:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021544:	4b07      	ldr	r3, [pc, #28]	; (8021564 <_txe_thread_reset+0x28>)
 8021546:	f859 3003 	ldr.w	r3, [r9, r3]
 802154a:	681c      	ldr	r4, [r3, #0]
 802154c:	6879      	ldr	r1, [r7, #4]
 802154e:	2300      	movs	r3, #0
 8021550:	2200      	movs	r2, #0
 8021552:	2041      	movs	r0, #65	; 0x41
 8021554:	47a0      	blx	r4
 8021556:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021558:	68fb      	ldr	r3, [r7, #12]
}
 802155a:	4618      	mov	r0, r3
 802155c:	3714      	adds	r7, #20
 802155e:	46bd      	mov	sp, r7
 8021560:	bd90      	pop	{r4, r7, pc}
 8021562:	bf00      	nop
 8021564:	00000004 	.word	0x00000004

08021568 <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8021568:	b590      	push	{r4, r7, lr}
 802156a:	b085      	sub	sp, #20
 802156c:	af00      	add	r7, sp, #0
 802156e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021570:	4b07      	ldr	r3, [pc, #28]	; (8021590 <_txe_thread_resume+0x28>)
 8021572:	f859 3003 	ldr.w	r3, [r9, r3]
 8021576:	681c      	ldr	r4, [r3, #0]
 8021578:	6879      	ldr	r1, [r7, #4]
 802157a:	2300      	movs	r3, #0
 802157c:	2200      	movs	r2, #0
 802157e:	2042      	movs	r0, #66	; 0x42
 8021580:	47a0      	blx	r4
 8021582:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021584:	68fb      	ldr	r3, [r7, #12]
}
 8021586:	4618      	mov	r0, r3
 8021588:	3714      	adds	r7, #20
 802158a:	46bd      	mov	sp, r7
 802158c:	bd90      	pop	{r4, r7, pc}
 802158e:	bf00      	nop
 8021590:	00000004 	.word	0x00000004

08021594 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8021594:	b590      	push	{r4, r7, lr}
 8021596:	b085      	sub	sp, #20
 8021598:	af00      	add	r7, sp, #0
 802159a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 802159c:	4b07      	ldr	r3, [pc, #28]	; (80215bc <_tx_thread_sleep+0x28>)
 802159e:	f859 3003 	ldr.w	r3, [r9, r3]
 80215a2:	681c      	ldr	r4, [r3, #0]
 80215a4:	2300      	movs	r3, #0
 80215a6:	2200      	movs	r2, #0
 80215a8:	6879      	ldr	r1, [r7, #4]
 80215aa:	2043      	movs	r0, #67	; 0x43
 80215ac:	47a0      	blx	r4
 80215ae:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215b0:	68fb      	ldr	r3, [r7, #12]
}
 80215b2:	4618      	mov	r0, r3
 80215b4:	3714      	adds	r7, #20
 80215b6:	46bd      	mov	sp, r7
 80215b8:	bd90      	pop	{r4, r7, pc}
 80215ba:	bf00      	nop
 80215bc:	00000004 	.word	0x00000004

080215c0 <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 80215c0:	b590      	push	{r4, r7, lr}
 80215c2:	b085      	sub	sp, #20
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 80215c8:	4b07      	ldr	r3, [pc, #28]	; (80215e8 <_tx_thread_stack_error_notify+0x28>)
 80215ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80215ce:	681c      	ldr	r4, [r3, #0]
 80215d0:	6879      	ldr	r1, [r7, #4]
 80215d2:	2300      	movs	r3, #0
 80215d4:	2200      	movs	r2, #0
 80215d6:	2044      	movs	r0, #68	; 0x44
 80215d8:	47a0      	blx	r4
 80215da:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215dc:	68fb      	ldr	r3, [r7, #12]
}
 80215de:	4618      	mov	r0, r3
 80215e0:	3714      	adds	r7, #20
 80215e2:	46bd      	mov	sp, r7
 80215e4:	bd90      	pop	{r4, r7, pc}
 80215e6:	bf00      	nop
 80215e8:	00000004 	.word	0x00000004

080215ec <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80215ec:	b590      	push	{r4, r7, lr}
 80215ee:	b085      	sub	sp, #20
 80215f0:	af00      	add	r7, sp, #0
 80215f2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80215f4:	4b07      	ldr	r3, [pc, #28]	; (8021614 <_txe_thread_suspend+0x28>)
 80215f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80215fa:	681c      	ldr	r4, [r3, #0]
 80215fc:	6879      	ldr	r1, [r7, #4]
 80215fe:	2300      	movs	r3, #0
 8021600:	2200      	movs	r2, #0
 8021602:	2045      	movs	r0, #69	; 0x45
 8021604:	47a0      	blx	r4
 8021606:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021608:	68fb      	ldr	r3, [r7, #12]
}
 802160a:	4618      	mov	r0, r3
 802160c:	3714      	adds	r7, #20
 802160e:	46bd      	mov	sp, r7
 8021610:	bd90      	pop	{r4, r7, pc}
 8021612:	bf00      	nop
 8021614:	00000004 	.word	0x00000004

08021618 <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8021618:	b590      	push	{r4, r7, lr}
 802161a:	b085      	sub	sp, #20
 802161c:	af00      	add	r7, sp, #0
 802161e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021620:	4b07      	ldr	r3, [pc, #28]	; (8021640 <_txe_thread_terminate+0x28>)
 8021622:	f859 3003 	ldr.w	r3, [r9, r3]
 8021626:	681c      	ldr	r4, [r3, #0]
 8021628:	6879      	ldr	r1, [r7, #4]
 802162a:	2300      	movs	r3, #0
 802162c:	2200      	movs	r2, #0
 802162e:	2046      	movs	r0, #70	; 0x46
 8021630:	47a0      	blx	r4
 8021632:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021634:	68fb      	ldr	r3, [r7, #12]
}
 8021636:	4618      	mov	r0, r3
 8021638:	3714      	adds	r7, #20
 802163a:	46bd      	mov	sp, r7
 802163c:	bd90      	pop	{r4, r7, pc}
 802163e:	bf00      	nop
 8021640:	00000004 	.word	0x00000004

08021644 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8021644:	b590      	push	{r4, r7, lr}
 8021646:	b087      	sub	sp, #28
 8021648:	af00      	add	r7, sp, #0
 802164a:	60f8      	str	r0, [r7, #12]
 802164c:	60b9      	str	r1, [r7, #8]
 802164e:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 8021650:	4b07      	ldr	r3, [pc, #28]	; (8021670 <_txe_thread_time_slice_change+0x2c>)
 8021652:	f859 3003 	ldr.w	r3, [r9, r3]
 8021656:	681c      	ldr	r4, [r3, #0]
 8021658:	68f9      	ldr	r1, [r7, #12]
 802165a:	687b      	ldr	r3, [r7, #4]
 802165c:	68ba      	ldr	r2, [r7, #8]
 802165e:	2047      	movs	r0, #71	; 0x47
 8021660:	47a0      	blx	r4
 8021662:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021664:	697b      	ldr	r3, [r7, #20]
}
 8021666:	4618      	mov	r0, r3
 8021668:	371c      	adds	r7, #28
 802166a:	46bd      	mov	sp, r7
 802166c:	bd90      	pop	{r4, r7, pc}
 802166e:	bf00      	nop
 8021670:	00000004 	.word	0x00000004

08021674 <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 8021674:	b590      	push	{r4, r7, lr}
 8021676:	b085      	sub	sp, #20
 8021678:	af00      	add	r7, sp, #0
 802167a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 802167c:	4b07      	ldr	r3, [pc, #28]	; (802169c <_txe_thread_wait_abort+0x28>)
 802167e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021682:	681c      	ldr	r4, [r3, #0]
 8021684:	6879      	ldr	r1, [r7, #4]
 8021686:	2300      	movs	r3, #0
 8021688:	2200      	movs	r2, #0
 802168a:	2048      	movs	r0, #72	; 0x48
 802168c:	47a0      	blx	r4
 802168e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021690:	68fb      	ldr	r3, [r7, #12]
}
 8021692:	4618      	mov	r0, r3
 8021694:	3714      	adds	r7, #20
 8021696:	46bd      	mov	sp, r7
 8021698:	bd90      	pop	{r4, r7, pc}
 802169a:	bf00      	nop
 802169c:	00000004 	.word	0x00000004

080216a0 <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 80216a0:	b590      	push	{r4, r7, lr}
 80216a2:	b083      	sub	sp, #12
 80216a4:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 80216a6:	4b07      	ldr	r3, [pc, #28]	; (80216c4 <_tx_time_get+0x24>)
 80216a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80216ac:	681c      	ldr	r4, [r3, #0]
 80216ae:	2300      	movs	r3, #0
 80216b0:	2200      	movs	r2, #0
 80216b2:	2100      	movs	r1, #0
 80216b4:	2049      	movs	r0, #73	; 0x49
 80216b6:	47a0      	blx	r4
 80216b8:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216ba:	687b      	ldr	r3, [r7, #4]
}
 80216bc:	4618      	mov	r0, r3
 80216be:	370c      	adds	r7, #12
 80216c0:	46bd      	mov	sp, r7
 80216c2:	bd90      	pop	{r4, r7, pc}
 80216c4:	00000004 	.word	0x00000004

080216c8 <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 80216c8:	b590      	push	{r4, r7, lr}
 80216ca:	b083      	sub	sp, #12
 80216cc:	af00      	add	r7, sp, #0
 80216ce:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 80216d0:	4b06      	ldr	r3, [pc, #24]	; (80216ec <_tx_time_set+0x24>)
 80216d2:	f859 3003 	ldr.w	r3, [r9, r3]
 80216d6:	681c      	ldr	r4, [r3, #0]
 80216d8:	2300      	movs	r3, #0
 80216da:	2200      	movs	r2, #0
 80216dc:	6879      	ldr	r1, [r7, #4]
 80216de:	204a      	movs	r0, #74	; 0x4a
 80216e0:	47a0      	blx	r4
}
 80216e2:	bf00      	nop
 80216e4:	370c      	adds	r7, #12
 80216e6:	46bd      	mov	sp, r7
 80216e8:	bd90      	pop	{r4, r7, pc}
 80216ea:	bf00      	nop
 80216ec:	00000004 	.word	0x00000004

080216f0 <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80216f0:	b590      	push	{r4, r7, lr}
 80216f2:	b085      	sub	sp, #20
 80216f4:	af00      	add	r7, sp, #0
 80216f6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80216f8:	4b07      	ldr	r3, [pc, #28]	; (8021718 <_txe_timer_activate+0x28>)
 80216fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80216fe:	681c      	ldr	r4, [r3, #0]
 8021700:	6879      	ldr	r1, [r7, #4]
 8021702:	2300      	movs	r3, #0
 8021704:	2200      	movs	r2, #0
 8021706:	204b      	movs	r0, #75	; 0x4b
 8021708:	47a0      	blx	r4
 802170a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802170c:	68fb      	ldr	r3, [r7, #12]
}
 802170e:	4618      	mov	r0, r3
 8021710:	3714      	adds	r7, #20
 8021712:	46bd      	mov	sp, r7
 8021714:	bd90      	pop	{r4, r7, pc}
 8021716:	bf00      	nop
 8021718:	00000004 	.word	0x00000004

0802171c <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 802171c:	b590      	push	{r4, r7, lr}
 802171e:	b087      	sub	sp, #28
 8021720:	af00      	add	r7, sp, #0
 8021722:	60f8      	str	r0, [r7, #12]
 8021724:	60b9      	str	r1, [r7, #8]
 8021726:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 8021728:	4b07      	ldr	r3, [pc, #28]	; (8021748 <_txe_timer_change+0x2c>)
 802172a:	f859 3003 	ldr.w	r3, [r9, r3]
 802172e:	681c      	ldr	r4, [r3, #0]
 8021730:	68f9      	ldr	r1, [r7, #12]
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	68ba      	ldr	r2, [r7, #8]
 8021736:	204c      	movs	r0, #76	; 0x4c
 8021738:	47a0      	blx	r4
 802173a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802173c:	697b      	ldr	r3, [r7, #20]
}
 802173e:	4618      	mov	r0, r3
 8021740:	371c      	adds	r7, #28
 8021742:	46bd      	mov	sp, r7
 8021744:	bd90      	pop	{r4, r7, pc}
 8021746:	bf00      	nop
 8021748:	00000004 	.word	0x00000004

0802174c <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 802174c:	b590      	push	{r4, r7, lr}
 802174e:	b08d      	sub	sp, #52	; 0x34
 8021750:	af00      	add	r7, sp, #0
 8021752:	60f8      	str	r0, [r7, #12]
 8021754:	60b9      	str	r1, [r7, #8]
 8021756:	607a      	str	r2, [r7, #4]
 8021758:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 802175e:	683b      	ldr	r3, [r7, #0]
 8021760:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 8021762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021764:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 8021766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021768:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 802176a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802176c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 802176e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021770:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8021772:	4b08      	ldr	r3, [pc, #32]	; (8021794 <_txe_timer_create+0x48>)
 8021774:	f859 3003 	ldr.w	r3, [r9, r3]
 8021778:	681c      	ldr	r4, [r3, #0]
 802177a:	68f9      	ldr	r1, [r7, #12]
 802177c:	68ba      	ldr	r2, [r7, #8]
 802177e:	f107 0314 	add.w	r3, r7, #20
 8021782:	204d      	movs	r0, #77	; 0x4d
 8021784:	47a0      	blx	r4
 8021786:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8021788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802178a:	4618      	mov	r0, r3
 802178c:	3734      	adds	r7, #52	; 0x34
 802178e:	46bd      	mov	sp, r7
 8021790:	bd90      	pop	{r4, r7, pc}
 8021792:	bf00      	nop
 8021794:	00000004 	.word	0x00000004

08021798 <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8021798:	b590      	push	{r4, r7, lr}
 802179a:	b085      	sub	sp, #20
 802179c:	af00      	add	r7, sp, #0
 802179e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80217a0:	4b07      	ldr	r3, [pc, #28]	; (80217c0 <_txe_timer_deactivate+0x28>)
 80217a2:	f859 3003 	ldr.w	r3, [r9, r3]
 80217a6:	681c      	ldr	r4, [r3, #0]
 80217a8:	6879      	ldr	r1, [r7, #4]
 80217aa:	2300      	movs	r3, #0
 80217ac:	2200      	movs	r2, #0
 80217ae:	204e      	movs	r0, #78	; 0x4e
 80217b0:	47a0      	blx	r4
 80217b2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217b4:	68fb      	ldr	r3, [r7, #12]
}
 80217b6:	4618      	mov	r0, r3
 80217b8:	3714      	adds	r7, #20
 80217ba:	46bd      	mov	sp, r7
 80217bc:	bd90      	pop	{r4, r7, pc}
 80217be:	bf00      	nop
 80217c0:	00000004 	.word	0x00000004

080217c4 <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 80217c4:	b590      	push	{r4, r7, lr}
 80217c6:	b085      	sub	sp, #20
 80217c8:	af00      	add	r7, sp, #0
 80217ca:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80217cc:	4b07      	ldr	r3, [pc, #28]	; (80217ec <_txe_timer_delete+0x28>)
 80217ce:	f859 3003 	ldr.w	r3, [r9, r3]
 80217d2:	681c      	ldr	r4, [r3, #0]
 80217d4:	6879      	ldr	r1, [r7, #4]
 80217d6:	2300      	movs	r3, #0
 80217d8:	2200      	movs	r2, #0
 80217da:	204f      	movs	r0, #79	; 0x4f
 80217dc:	47a0      	blx	r4
 80217de:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217e0:	68fb      	ldr	r3, [r7, #12]
}
 80217e2:	4618      	mov	r0, r3
 80217e4:	3714      	adds	r7, #20
 80217e6:	46bd      	mov	sp, r7
 80217e8:	bd90      	pop	{r4, r7, pc}
 80217ea:	bf00      	nop
 80217ec:	00000004 	.word	0x00000004

080217f0 <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80217f0:	b590      	push	{r4, r7, lr}
 80217f2:	b08b      	sub	sp, #44	; 0x2c
 80217f4:	af00      	add	r7, sp, #0
 80217f6:	60f8      	str	r0, [r7, #12]
 80217f8:	60b9      	str	r1, [r7, #8]
 80217fa:	607a      	str	r2, [r7, #4]
 80217fc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 8021802:	683b      	ldr	r3, [r7, #0]
 8021804:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 8021806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021808:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 802180a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802180c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802180e:	4b08      	ldr	r3, [pc, #32]	; (8021830 <_txe_timer_info_get+0x40>)
 8021810:	f859 3003 	ldr.w	r3, [r9, r3]
 8021814:	681c      	ldr	r4, [r3, #0]
 8021816:	68f9      	ldr	r1, [r7, #12]
 8021818:	68ba      	ldr	r2, [r7, #8]
 802181a:	f107 0314 	add.w	r3, r7, #20
 802181e:	2050      	movs	r0, #80	; 0x50
 8021820:	47a0      	blx	r4
 8021822:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021826:	4618      	mov	r0, r3
 8021828:	372c      	adds	r7, #44	; 0x2c
 802182a:	46bd      	mov	sp, r7
 802182c:	bd90      	pop	{r4, r7, pc}
 802182e:	bf00      	nop
 8021830:	00000004 	.word	0x00000004

08021834 <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021834:	b590      	push	{r4, r7, lr}
 8021836:	b08b      	sub	sp, #44	; 0x2c
 8021838:	af00      	add	r7, sp, #0
 802183a:	60f8      	str	r0, [r7, #12]
 802183c:	60b9      	str	r1, [r7, #8]
 802183e:	607a      	str	r2, [r7, #4]
 8021840:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 8021842:	687b      	ldr	r3, [r7, #4]
 8021844:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 8021846:	683b      	ldr	r3, [r7, #0]
 8021848:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 802184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802184c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 802184e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021850:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 8021852:	4b08      	ldr	r3, [pc, #32]	; (8021874 <_tx_timer_performance_info_get+0x40>)
 8021854:	f859 3003 	ldr.w	r3, [r9, r3]
 8021858:	681c      	ldr	r4, [r3, #0]
 802185a:	68f9      	ldr	r1, [r7, #12]
 802185c:	68ba      	ldr	r2, [r7, #8]
 802185e:	f107 0314 	add.w	r3, r7, #20
 8021862:	2051      	movs	r0, #81	; 0x51
 8021864:	47a0      	blx	r4
 8021866:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802186a:	4618      	mov	r0, r3
 802186c:	372c      	adds	r7, #44	; 0x2c
 802186e:	46bd      	mov	sp, r7
 8021870:	bd90      	pop	{r4, r7, pc}
 8021872:	bf00      	nop
 8021874:	00000004 	.word	0x00000004

08021878 <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021878:	b590      	push	{r4, r7, lr}
 802187a:	b089      	sub	sp, #36	; 0x24
 802187c:	af00      	add	r7, sp, #0
 802187e:	60f8      	str	r0, [r7, #12]
 8021880:	60b9      	str	r1, [r7, #8]
 8021882:	607a      	str	r2, [r7, #4]
 8021884:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 8021886:	687b      	ldr	r3, [r7, #4]
 8021888:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 802188a:	683b      	ldr	r3, [r7, #0]
 802188c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 802188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021890:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 8021892:	4b08      	ldr	r3, [pc, #32]	; (80218b4 <_tx_timer_performance_system_info_get+0x3c>)
 8021894:	f859 3003 	ldr.w	r3, [r9, r3]
 8021898:	681c      	ldr	r4, [r3, #0]
 802189a:	68f9      	ldr	r1, [r7, #12]
 802189c:	68ba      	ldr	r2, [r7, #8]
 802189e:	f107 0310 	add.w	r3, r7, #16
 80218a2:	2052      	movs	r0, #82	; 0x52
 80218a4:	47a0      	blx	r4
 80218a6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80218a8:	69fb      	ldr	r3, [r7, #28]
}
 80218aa:	4618      	mov	r0, r3
 80218ac:	3724      	adds	r7, #36	; 0x24
 80218ae:	46bd      	mov	sp, r7
 80218b0:	bd90      	pop	{r4, r7, pc}
 80218b2:	bf00      	nop
 80218b4:	00000004 	.word	0x00000004

080218b8 <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 80218b8:	b590      	push	{r4, r7, lr}
 80218ba:	b085      	sub	sp, #20
 80218bc:	af00      	add	r7, sp, #0
 80218be:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 80218c0:	4b07      	ldr	r3, [pc, #28]	; (80218e0 <_tx_trace_buffer_full_notify+0x28>)
 80218c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80218c6:	681c      	ldr	r4, [r3, #0]
 80218c8:	6879      	ldr	r1, [r7, #4]
 80218ca:	2300      	movs	r3, #0
 80218cc:	2200      	movs	r2, #0
 80218ce:	205a      	movs	r0, #90	; 0x5a
 80218d0:	47a0      	blx	r4
 80218d2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80218d4:	68fb      	ldr	r3, [r7, #12]
}
 80218d6:	4618      	mov	r0, r3
 80218d8:	3714      	adds	r7, #20
 80218da:	46bd      	mov	sp, r7
 80218dc:	bd90      	pop	{r4, r7, pc}
 80218de:	bf00      	nop
 80218e0:	00000004 	.word	0x00000004

080218e4 <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80218e4:	b590      	push	{r4, r7, lr}
 80218e6:	b083      	sub	sp, #12
 80218e8:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80218ea:	4b07      	ldr	r3, [pc, #28]	; (8021908 <_tx_trace_disable+0x24>)
 80218ec:	f859 3003 	ldr.w	r3, [r9, r3]
 80218f0:	681c      	ldr	r4, [r3, #0]
 80218f2:	2300      	movs	r3, #0
 80218f4:	2200      	movs	r2, #0
 80218f6:	2100      	movs	r1, #0
 80218f8:	2056      	movs	r0, #86	; 0x56
 80218fa:	47a0      	blx	r4
 80218fc:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80218fe:	687b      	ldr	r3, [r7, #4]
}
 8021900:	4618      	mov	r0, r3
 8021902:	370c      	adds	r7, #12
 8021904:	46bd      	mov	sp, r7
 8021906:	bd90      	pop	{r4, r7, pc}
 8021908:	00000004 	.word	0x00000004

0802190c <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 802190c:	b590      	push	{r4, r7, lr}
 802190e:	b087      	sub	sp, #28
 8021910:	af00      	add	r7, sp, #0
 8021912:	60f8      	str	r0, [r7, #12]
 8021914:	60b9      	str	r1, [r7, #8]
 8021916:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 8021918:	4b07      	ldr	r3, [pc, #28]	; (8021938 <_tx_trace_enable+0x2c>)
 802191a:	f859 3003 	ldr.w	r3, [r9, r3]
 802191e:	681c      	ldr	r4, [r3, #0]
 8021920:	68f9      	ldr	r1, [r7, #12]
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	68ba      	ldr	r2, [r7, #8]
 8021926:	2053      	movs	r0, #83	; 0x53
 8021928:	47a0      	blx	r4
 802192a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802192c:	697b      	ldr	r3, [r7, #20]
}
 802192e:	4618      	mov	r0, r3
 8021930:	371c      	adds	r7, #28
 8021932:	46bd      	mov	sp, r7
 8021934:	bd90      	pop	{r4, r7, pc}
 8021936:	bf00      	nop
 8021938:	00000004 	.word	0x00000004

0802193c <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 802193c:	b590      	push	{r4, r7, lr}
 802193e:	b085      	sub	sp, #20
 8021940:	af00      	add	r7, sp, #0
 8021942:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 8021944:	4b07      	ldr	r3, [pc, #28]	; (8021964 <_tx_trace_event_filter+0x28>)
 8021946:	f859 3003 	ldr.w	r3, [r9, r3]
 802194a:	681c      	ldr	r4, [r3, #0]
 802194c:	2300      	movs	r3, #0
 802194e:	2200      	movs	r2, #0
 8021950:	6879      	ldr	r1, [r7, #4]
 8021952:	2054      	movs	r0, #84	; 0x54
 8021954:	47a0      	blx	r4
 8021956:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021958:	68fb      	ldr	r3, [r7, #12]
}
 802195a:	4618      	mov	r0, r3
 802195c:	3714      	adds	r7, #20
 802195e:	46bd      	mov	sp, r7
 8021960:	bd90      	pop	{r4, r7, pc}
 8021962:	bf00      	nop
 8021964:	00000004 	.word	0x00000004

08021968 <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 8021968:	b590      	push	{r4, r7, lr}
 802196a:	b085      	sub	sp, #20
 802196c:	af00      	add	r7, sp, #0
 802196e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 8021970:	4b07      	ldr	r3, [pc, #28]	; (8021990 <_tx_trace_event_unfilter+0x28>)
 8021972:	f859 3003 	ldr.w	r3, [r9, r3]
 8021976:	681c      	ldr	r4, [r3, #0]
 8021978:	2300      	movs	r3, #0
 802197a:	2200      	movs	r2, #0
 802197c:	6879      	ldr	r1, [r7, #4]
 802197e:	2055      	movs	r0, #85	; 0x55
 8021980:	47a0      	blx	r4
 8021982:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021984:	68fb      	ldr	r3, [r7, #12]
}
 8021986:	4618      	mov	r0, r3
 8021988:	3714      	adds	r7, #20
 802198a:	46bd      	mov	sp, r7
 802198c:	bd90      	pop	{r4, r7, pc}
 802198e:	bf00      	nop
 8021990:	00000004 	.word	0x00000004

08021994 <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 8021994:	b590      	push	{r4, r7, lr}
 8021996:	b085      	sub	sp, #20
 8021998:	af00      	add	r7, sp, #0
 802199a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 802199c:	4b07      	ldr	r3, [pc, #28]	; (80219bc <_tx_trace_interrupt_control+0x28>)
 802199e:	f859 3003 	ldr.w	r3, [r9, r3]
 80219a2:	681c      	ldr	r4, [r3, #0]
 80219a4:	2300      	movs	r3, #0
 80219a6:	2200      	movs	r2, #0
 80219a8:	6879      	ldr	r1, [r7, #4]
 80219aa:	2057      	movs	r0, #87	; 0x57
 80219ac:	47a0      	blx	r4
 80219ae:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80219b0:	68fb      	ldr	r3, [r7, #12]
}
 80219b2:	4618      	mov	r0, r3
 80219b4:	3714      	adds	r7, #20
 80219b6:	46bd      	mov	sp, r7
 80219b8:	bd90      	pop	{r4, r7, pc}
 80219ba:	bf00      	nop
 80219bc:	00000004 	.word	0x00000004

080219c0 <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 80219c0:	b590      	push	{r4, r7, lr}
 80219c2:	b083      	sub	sp, #12
 80219c4:	af00      	add	r7, sp, #0
 80219c6:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219c8:	4b06      	ldr	r3, [pc, #24]	; (80219e4 <_tx_trace_isr_enter_insert+0x24>)
 80219ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80219ce:	681c      	ldr	r4, [r3, #0]
 80219d0:	2300      	movs	r3, #0
 80219d2:	2200      	movs	r2, #0
 80219d4:	6879      	ldr	r1, [r7, #4]
 80219d6:	2058      	movs	r0, #88	; 0x58
 80219d8:	47a0      	blx	r4
}
 80219da:	bf00      	nop
 80219dc:	370c      	adds	r7, #12
 80219de:	46bd      	mov	sp, r7
 80219e0:	bd90      	pop	{r4, r7, pc}
 80219e2:	bf00      	nop
 80219e4:	00000004 	.word	0x00000004

080219e8 <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80219e8:	b590      	push	{r4, r7, lr}
 80219ea:	b083      	sub	sp, #12
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219f0:	4b06      	ldr	r3, [pc, #24]	; (8021a0c <_tx_trace_isr_exit_insert+0x24>)
 80219f2:	f859 3003 	ldr.w	r3, [r9, r3]
 80219f6:	681c      	ldr	r4, [r3, #0]
 80219f8:	2300      	movs	r3, #0
 80219fa:	2200      	movs	r2, #0
 80219fc:	6879      	ldr	r1, [r7, #4]
 80219fe:	2059      	movs	r0, #89	; 0x59
 8021a00:	47a0      	blx	r4
}
 8021a02:	bf00      	nop
 8021a04:	370c      	adds	r7, #12
 8021a06:	46bd      	mov	sp, r7
 8021a08:	bd90      	pop	{r4, r7, pc}
 8021a0a:	bf00      	nop
 8021a0c:	00000004 	.word	0x00000004

08021a10 <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 8021a10:	b590      	push	{r4, r7, lr}
 8021a12:	b089      	sub	sp, #36	; 0x24
 8021a14:	af00      	add	r7, sp, #0
 8021a16:	60f8      	str	r0, [r7, #12]
 8021a18:	60b9      	str	r1, [r7, #8]
 8021a1a:	607a      	str	r2, [r7, #4]
 8021a1c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 8021a22:	683b      	ldr	r3, [r7, #0]
 8021a24:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 8021a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a28:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 8021a2a:	4b08      	ldr	r3, [pc, #32]	; (8021a4c <_tx_trace_user_event_insert+0x3c>)
 8021a2c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021a30:	681c      	ldr	r4, [r3, #0]
 8021a32:	f107 0310 	add.w	r3, r7, #16
 8021a36:	68ba      	ldr	r2, [r7, #8]
 8021a38:	68f9      	ldr	r1, [r7, #12]
 8021a3a:	205b      	movs	r0, #91	; 0x5b
 8021a3c:	47a0      	blx	r4
 8021a3e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021a40:	69fb      	ldr	r3, [r7, #28]
}
 8021a42:	4618      	mov	r0, r3
 8021a44:	3724      	adds	r7, #36	; 0x24
 8021a46:	46bd      	mov	sp, r7
 8021a48:	bd90      	pop	{r4, r7, pc}
 8021a4a:	bf00      	nop
 8021a4c:	00000004 	.word	0x00000004
