
Tx_MPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .preamble     000000a6  08020000  08020000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .dynsym       00000000  080200a8  08021adb  00011adb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dynstr       00000000  080200a8  08021adb  00011adb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rel.dyn      00000000  080200a8  080200a8  000100a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .got          00000030  08021a3c  08021a3c  00011a3c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  5 .plt          00000000  080200a8  08021adb  00011adb  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  6 .interp       00000000  080200a8  080200a8  00011adb  2**0
                  CONTENTS
  7 .hash         00000000  080200a8  08021adb  00011adb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .text         00001994  080200a8  080200a8  000100a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .rodata       0000006f  08021a6c  08021a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fast_run     00000000  20020030  20020030  00011adb  2**0
                  CONTENTS
 11 .data_run     00000000  20020030  20020030  00011adb  2**0
                  CONTENTS
 12 .bss          000023c8  20020030  20020030  00020030  2**4
                  ALLOC
 13 .heap         00000040  200223f8  200223f8  00020030  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  00011adb  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00011b11  2**0
                  CONTENTS, READONLY
 16 .debug_line   000286f0  00000000  00000000  00011b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000076  00000000  00000000  0003a244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0001c546  00000000  00000000  0003a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005a7c  00000000  00000000  00056800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00000ca0  00000000  00000000  0005c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00013dc2  00000000  00000000  0005cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0000c6a1  00000000  00000000  00070ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00001634  00000000  00000000  0007d384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .preamble:

08020000 <__preamble_start__>:
 8020000:	4d4f4455 	.word	0x4d4f4455
 8020004:	00000006 	.word	0x00000006
 8020008:	00000001 	.word	0x00000001
 802000c:	00000020 	.word	0x00000020
 8020010:	12345678 	.word	0x12345678
 8020014:	02000007 	.word	0x02000007
 8020018:	00000bad 	.word	0x00000bad
 802001c:	0000017d 	.word	0x0000017d
 8020020:	00000000 	.word	0x00000000
 8020024:	00000001 	.word	0x00000001
 8020028:	00000400 	.word	0x00000400
 802002c:	00000a11 	.word	0x00000a11
 8020030:	00000001 	.word	0x00000001
 8020034:	00000400 	.word	0x00000400
 8020038:	00001adb 	.word	0x00001adb
 802003c:	00002438 	.word	0x00002438
	...
 8020080:	00002541 	.word	0x00002541
 8020084:	61656100 	.word	0x61656100
 8020088:	01006962 	.word	0x01006962
 802008c:	0000001b 	.word	0x0000001b
 8020090:	4d2d3805 	.word	0x4d2d3805
 8020094:	49414d2e 	.word	0x49414d2e
 8020098:	1106004e 	.word	0x1106004e
 802009c:	03094d07 	.word	0x03094d07
 80200a0:	011b080a 	.word	0x011b080a
 80200a4:	012e      	.short	0x012e

Disassembly of section .text:

080200a8 <__text_start__>:
	...

080200b0 <_gcc_setup>:

    .global _gcc_setup
    .thumb_func
_gcc_setup:

    STMDB   sp!, {r3, r4, r5, r6, r7, lr}             // Store other preserved registers
 80200b0:	e92d 40f8 	stmdb	sp!, {r3, r4, r5, r6, r7, lr}

    ldr     r3, =__FLASH_segment_start__
 80200b4:	4b2e      	ldr	r3, [pc, #184]	; (8020170 <memory_set_done+0x2>)
    ldr     r4, =__RAM_segment_start__
 80200b6:	4c2f      	ldr	r4, [pc, #188]	; (8020174 <memory_set_done+0x6>)
    mov     r5,r0
 80200b8:	4605      	mov	r5, r0

    /* Copy GOT table. */

    ldr     r0, =__got_load_start__
 80200ba:	482f      	ldr	r0, [pc, #188]	; (8020178 <memory_set_done+0xa>)
    sub     r0,r0,r3
 80200bc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 80200c0:	4428      	add	r0, r5
    ldr     r1, =__new_got_start__
 80200c2:	492e      	ldr	r1, [pc, #184]	; (802017c <memory_set_done+0xe>)
    sub     r1,r1, r4
 80200c4:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 80200c8:	4449      	add	r1, r9
    ldr     r2, =__new_got_end__
 80200ca:	4a2d      	ldr	r2, [pc, #180]	; (8020180 <memory_set_done+0x12>)
    sub     r2,r2,r4
 80200cc:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 80200d0:	444a      	add	r2, r9

080200d2 <new_got_setup>:

new_got_setup:
    cmp     r1, r2          // See if there are more GOT entries
 80200d2:	4291      	cmp	r1, r2
    beq     got_setup_done  // No, done with GOT setup
 80200d4:	d011      	beq.n	80200fa <got_setup_done>
    ldr     r6, [r0]        // Pickup current GOT entry
 80200d6:	6806      	ldr	r6, [r0, #0]
    cmp     r6, #0          // Is it 0?
 80200d8:	2e00      	cmp	r6, #0
    beq     address_built   // Yes, just skip the adjustment
 80200da:	d008      	beq.n	80200ee <address_built>
    cmp     r6, r4          // Is it in the code or data area?
 80200dc:	42a6      	cmp	r6, r4
    blt     flash_area      // If less than, it is a code address
 80200de:	db03      	blt.n	80200e8 <flash_area>
    sub     r6, r6, r4      // Compute offset of data area
 80200e0:	eba6 0604 	sub.w	r6, r6, r4
    add     r6, r6, r9      // Build address based on the loaded data address
 80200e4:	444e      	add	r6, r9
    b       address_built   // Finished building address
 80200e6:	e002      	b.n	80200ee <address_built>

080200e8 <flash_area>:
flash_area:
    sub     r6, r6, r3      // Compute offset of code area
 80200e8:	eba6 0603 	sub.w	r6, r6, r3
    add     r6, r6, r5      // Build address based on the loaded code address
 80200ec:	442e      	add	r6, r5

080200ee <address_built>:
address_built:
    str     r6, [r1]        // Store in new GOT table
 80200ee:	600e      	str	r6, [r1, #0]
    add     r0, r0, #4      // Move to next entry
 80200f0:	f100 0004 	add.w	r0, r0, #4
    add     r1, r1, #4      //
 80200f4:	f101 0104 	add.w	r1, r1, #4
    b       new_got_setup   // Continue at the top of the loop
 80200f8:	e7eb      	b.n	80200d2 <new_got_setup>

080200fa <got_setup_done>:
got_setup_done:

    /* Copy initialised sections into RAM if required. */
  
    ldr     r0, =__data_load_start__
 80200fa:	4822      	ldr	r0, [pc, #136]	; (8020184 <memory_set_done+0x16>)
    sub     r0,r0,r3
 80200fc:	eba0 0003 	sub.w	r0, r0, r3
    add     r0,r0,r5
 8020100:	4428      	add	r0, r5
    ldr     r1, =__data_start__
 8020102:	4921      	ldr	r1, [pc, #132]	; (8020188 <memory_set_done+0x1a>)
    sub     r1,r1, r4
 8020104:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020108:	4449      	add	r1, r9
    ldr     r2, =__data_end__
 802010a:	4a20      	ldr	r2, [pc, #128]	; (802018c <memory_set_done+0x1e>)
    sub     r2,r2,r4
 802010c:	eba2 0204 	sub.w	r2, r2, r4
    add     r2,r2,r9
 8020110:	444a      	add	r2, r9
    bl      crt0_memory_copy
 8020112:	f000 f815 	bl	8020140 <crt0_memory_copy>
  
    /* Zero bss. */
    
    ldr     r0, =__bss_start__
 8020116:	481e      	ldr	r0, [pc, #120]	; (8020190 <memory_set_done+0x22>)
    sub     r0,r0,r4
 8020118:	eba0 0004 	sub.w	r0, r0, r4
    add     r0,r0,r9
 802011c:	4448      	add	r0, r9
    ldr     r1, =__bss_end__
 802011e:	491d      	ldr	r1, [pc, #116]	; (8020194 <memory_set_done+0x26>)
    sub     r1,r1,r4
 8020120:	eba1 0104 	sub.w	r1, r1, r4
    add     r1,r1,r9
 8020124:	4449      	add	r1, r9
    mov     r2, #0
 8020126:	f04f 0200 	mov.w	r2, #0
    bl      crt0_memory_set
 802012a:	f000 f81a 	bl	8020162 <crt0_memory_set>

    
    LDMIA   sp!, {r3, r4, r5, r6, r7, lr}       // Store other preserved registers
 802012e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bx      lr                                  // Return to caller
 8020132:	4770      	bx	lr
 8020134:	f3af 8000 	nop.w
 8020138:	f3af 8000 	nop.w
 802013c:	f3af 8000 	nop.w

08020140 <crt0_memory_copy>:

  /* Startup helper functions. */

    .thumb_func
crt0_memory_copy:
    cmp     r0, r1
 8020140:	4288      	cmp	r0, r1
    beq     memory_copy_done
 8020142:	d00d      	beq.n	8020160 <memory_copy_done>
    cmp     r2, r1
 8020144:	428a      	cmp	r2, r1
    beq     memory_copy_done
 8020146:	d00b      	beq.n	8020160 <memory_copy_done>
    sub     r2, r2, r1
 8020148:	eba2 0201 	sub.w	r2, r2, r1

0802014c <memory_copy_loop>:
memory_copy_loop:
    ldrb    r3, [r0]
 802014c:	7803      	ldrb	r3, [r0, #0]
    add     r0, r0, #1
 802014e:	f100 0001 	add.w	r0, r0, #1
    strb    r3, [r1]
 8020152:	700b      	strb	r3, [r1, #0]
    add     r1, r1, #1
 8020154:	f101 0101 	add.w	r1, r1, #1
    sub     r2, r2, #1
 8020158:	f1a2 0201 	sub.w	r2, r2, #1
    cmp     r2, #0
 802015c:	2a00      	cmp	r2, #0
    bne     memory_copy_loop
 802015e:	d1f5      	bne.n	802014c <memory_copy_loop>

08020160 <memory_copy_done>:
memory_copy_done:
    bx      lr
 8020160:	4770      	bx	lr

08020162 <crt0_memory_set>:

    .thumb_func
crt0_memory_set:
    cmp     r0, r1
 8020162:	4288      	cmp	r0, r1
    beq     memory_set_done
 8020164:	d003      	beq.n	802016e <memory_set_done>
    strb    r2, [r0]
 8020166:	7002      	strb	r2, [r0, #0]
    add     r0, r0, #1
 8020168:	f100 0001 	add.w	r0, r0, #1
    b       crt0_memory_set
 802016c:	e7f9      	b.n	8020162 <crt0_memory_set>

0802016e <memory_set_done>:
memory_set_done:
    bx      lr
 802016e:	4770      	bx	lr
    ldr     r3, =__FLASH_segment_start__
 8020170:	08020000 	.word	0x08020000
    ldr     r4, =__RAM_segment_start__
 8020174:	20020000 	.word	0x20020000
    ldr     r0, =__got_load_start__
 8020178:	08021a3c 	.word	0x08021a3c
    ldr     r1, =__new_got_start__
 802017c:	20020000 	.word	0x20020000
    ldr     r2, =__new_got_end__
 8020180:	20020030 	.word	0x20020030
    ldr     r0, =__data_load_start__
 8020184:	08021adc 	.word	0x08021adc
    ldr     r1, =__data_start__
 8020188:	20020030 	.word	0x20020030
    ldr     r2, =__data_end__
 802018c:	20020030 	.word	0x20020030
    ldr     r0, =__bss_start__
 8020190:	20020030 	.word	0x20020030
    ldr     r1, =__bss_end__
 8020194:	200223f8 	.word	0x200223f8

08020198 <default_module_start>:
  * @brief  Module entry function.
  * @param  id : Module ID
  * @retval None
  */
void    default_module_start(ULONG id)
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b08c      	sub	sp, #48	; 0x30
 802019c:	af08      	add	r7, sp, #32
 802019e:	6078      	str	r0, [r7, #4]
  CHAR    *pointer;
  
  /* Allocate all the objects. In MPU mode, modules cannot allocate control blocks within
  their own memory area so they cannot corrupt the resident portion of ThreadX by overwriting
  the control block(s).  */
  txm_module_object_allocate((void*)&MainThread, sizeof(TX_THREAD));
 80201a0:	21e8      	movs	r1, #232	; 0xe8
 80201a2:	4b3a      	ldr	r3, [pc, #232]	; (802028c <default_module_start+0xf4>)
 80201a4:	f859 3003 	ldr.w	r3, [r9, r3]
 80201a8:	4618      	mov	r0, r3
 80201aa:	f000 fca9 	bl	8020b00 <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBytePool, sizeof(TX_BYTE_POOL));
 80201ae:	2134      	movs	r1, #52	; 0x34
 80201b0:	4b37      	ldr	r3, [pc, #220]	; (8020290 <default_module_start+0xf8>)
 80201b2:	f859 3003 	ldr.w	r3, [r9, r3]
 80201b6:	4618      	mov	r0, r3
 80201b8:	f000 fca2 	bl	8020b00 <_txm_module_object_allocate>
  txm_module_object_allocate((void*)&ModuleBlockPool, sizeof(TX_BLOCK_POOL));
 80201bc:	2130      	movs	r1, #48	; 0x30
 80201be:	4b35      	ldr	r3, [pc, #212]	; (8020294 <default_module_start+0xfc>)
 80201c0:	f859 3003 	ldr.w	r3, [r9, r3]
 80201c4:	4618      	mov	r0, r3
 80201c6:	f000 fc9b 	bl	8020b00 <_txm_module_object_allocate>
  
  /* Create a byte memory pool from which to allocate the thread stacks.  */
  tx_byte_pool_create(ModuleBytePool, "Module Byte Pool", (UCHAR*)default_module_pool_space, DEFAULT_BYTE_POOL_SIZE);
 80201ca:	4b31      	ldr	r3, [pc, #196]	; (8020290 <default_module_start+0xf8>)
 80201cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80201d0:	6818      	ldr	r0, [r3, #0]
 80201d2:	2334      	movs	r3, #52	; 0x34
 80201d4:	9300      	str	r3, [sp, #0]
 80201d6:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80201da:	4a2f      	ldr	r2, [pc, #188]	; (8020298 <default_module_start+0x100>)
 80201dc:	f859 2002 	ldr.w	r2, [r9, r2]
 80201e0:	492e      	ldr	r1, [pc, #184]	; (802029c <default_module_start+0x104>)
 80201e2:	4479      	add	r1, pc
 80201e4:	f000 fa64 	bl	80206b0 <_txe_byte_pool_create>
  
  /* Allocate the stack for thread 0.  */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80201e8:	4b29      	ldr	r3, [pc, #164]	; (8020290 <default_module_start+0xf8>)
 80201ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80201ee:	6818      	ldr	r0, [r3, #0]
 80201f0:	f107 010c 	add.w	r1, r7, #12
 80201f4:	2300      	movs	r3, #0
 80201f6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80201fa:	f000 fa3b 	bl	8020674 <_txe_byte_allocate>
  
  /* Create the main thread.  */
  tx_thread_create(MainThread, "Module Main Thread", MainThread_Entry, 0,
 80201fe:	4b23      	ldr	r3, [pc, #140]	; (802028c <default_module_start+0xf4>)
 8020200:	f859 3003 	ldr.w	r3, [r9, r3]
 8020204:	6818      	ldr	r0, [r3, #0]
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	22e8      	movs	r2, #232	; 0xe8
 802020a:	9206      	str	r2, [sp, #24]
 802020c:	2201      	movs	r2, #1
 802020e:	9205      	str	r2, [sp, #20]
 8020210:	2200      	movs	r2, #0
 8020212:	9204      	str	r2, [sp, #16]
 8020214:	2202      	movs	r2, #2
 8020216:	9203      	str	r2, [sp, #12]
 8020218:	2202      	movs	r2, #2
 802021a:	9202      	str	r2, [sp, #8]
 802021c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020220:	9201      	str	r2, [sp, #4]
 8020222:	9300      	str	r3, [sp, #0]
 8020224:	2300      	movs	r3, #0
 8020226:	4a1e      	ldr	r2, [pc, #120]	; (80202a0 <default_module_start+0x108>)
 8020228:	f859 2002 	ldr.w	r2, [r9, r2]
 802022c:	491d      	ldr	r1, [pc, #116]	; (80202a4 <default_module_start+0x10c>)
 802022e:	4479      	add	r1, pc
 8020230:	f001 f836 	bl	80212a0 <_txe_thread_create>
                   pointer, DEFAULT_STACK_SIZE,
                   MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);
  
  /* Allocate the memory for a small block pool. */
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer,
 8020234:	4b16      	ldr	r3, [pc, #88]	; (8020290 <default_module_start+0xf8>)
 8020236:	f859 3003 	ldr.w	r3, [r9, r3]
 802023a:	6818      	ldr	r0, [r3, #0]
 802023c:	f107 010c 	add.w	r1, r7, #12
 8020240:	2300      	movs	r3, #0
 8020242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020246:	f000 fa15 	bl	8020674 <_txe_byte_allocate>
                   DEFAULT_BLOCK_POOL_SIZE, TX_NO_WAIT);
  
  /* Create a block memory pool. */
  tx_block_pool_create(ModuleBlockPool, "Module Block Pool",
 802024a:	4b12      	ldr	r3, [pc, #72]	; (8020294 <default_module_start+0xfc>)
 802024c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020250:	6818      	ldr	r0, [r3, #0]
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	2230      	movs	r2, #48	; 0x30
 8020256:	9201      	str	r2, [sp, #4]
 8020258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802025c:	9200      	str	r2, [sp, #0]
 802025e:	2204      	movs	r2, #4
 8020260:	4911      	ldr	r1, [pc, #68]	; (80202a8 <default_module_start+0x110>)
 8020262:	4479      	add	r1, pc
 8020264:	f000 f940 	bl	80204e8 <_txe_block_pool_create>
                       sizeof(ULONG), pointer, DEFAULT_BLOCK_POOL_SIZE);
  
  /* Allocate a block. */
  tx_block_allocate(ModuleBlockPool, (VOID **) &pointer,
 8020268:	4b0a      	ldr	r3, [pc, #40]	; (8020294 <default_module_start+0xfc>)
 802026a:	f859 3003 	ldr.w	r3, [r9, r3]
 802026e:	681b      	ldr	r3, [r3, #0]
 8020270:	f107 010c 	add.w	r1, r7, #12
 8020274:	2200      	movs	r2, #0
 8020276:	4618      	mov	r0, r3
 8020278:	f000 f91e 	bl	80204b8 <_txe_block_allocate>
                    TX_NO_WAIT);
  
  /* Release the block back to the pool. */
  tx_block_release(pointer);
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	4618      	mov	r0, r3
 8020280:	f000 f9e2 	bl	8020648 <_txe_block_release>
  
}
 8020284:	bf00      	nop
 8020286:	3710      	adds	r7, #16
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}
 802028c:	00000020 	.word	0x00000020
 8020290:	0000000c 	.word	0x0000000c
 8020294:	0000001c 	.word	0x0000001c
 8020298:	00000014 	.word	0x00000014
 802029c:	00001886 	.word	0x00001886
 80202a0:	00000018 	.word	0x00000018
 80202a4:	0000184e 	.word	0x0000184e
 80202a8:	0000182e 	.word	0x0000182e

080202ac <MainThread_Entry>:
  * @brief  Module main thread.
  * @param  thread_input: thread id
  * @retval none
  */
void MainThread_Entry(ULONG thread_input)
{
 80202ac:	b580      	push	{r7, lr}
 80202ae:	b094      	sub	sp, #80	; 0x50
 80202b0:	af08      	add	r7, sp, #32
 80202b2:	6078      	str	r0, [r7, #4]
//  ULONG *mpu_pointer = 0xe000ed94;
//  ULONG mpu_value = *mpu_pointer;

  CHAR *pointer;
  TX_TIMER *MaliciousTimer;
  txm_module_object_allocate((void*)&MaliciousTimer, sizeof(TX_TIMER));
 80202b4:	f107 0314 	add.w	r3, r7, #20
 80202b8:	2134      	movs	r1, #52	; 0x34
 80202ba:	4618      	mov	r0, r3
 80202bc:	f000 fc20 	bl	8020b00 <_txm_module_object_allocate>
  tx_timer_create(MaliciousTimer, "Malicious Timer", MaliciousTimerFunction, 0x54485244, 0x54485244, 0x54485244, TX_NO_ACTIVATE);
 80202c0:	6978      	ldr	r0, [r7, #20]
 80202c2:	2334      	movs	r3, #52	; 0x34
 80202c4:	9303      	str	r3, [sp, #12]
 80202c6:	2300      	movs	r3, #0
 80202c8:	9302      	str	r3, [sp, #8]
 80202ca:	4b67      	ldr	r3, [pc, #412]	; (8020468 <MainThread_Entry+0x1bc>)
 80202cc:	9301      	str	r3, [sp, #4]
 80202ce:	4b66      	ldr	r3, [pc, #408]	; (8020468 <MainThread_Entry+0x1bc>)
 80202d0:	9300      	str	r3, [sp, #0]
 80202d2:	4b65      	ldr	r3, [pc, #404]	; (8020468 <MainThread_Entry+0x1bc>)
 80202d4:	4a68      	ldr	r2, [pc, #416]	; (8020478 <MainThread_Entry+0x1cc>)
 80202d6:	f859 2002 	ldr.w	r2, [r9, r2]
 80202da:	4968      	ldr	r1, [pc, #416]	; (802047c <MainThread_Entry+0x1d0>)
 80202dc:	4479      	add	r1, pc
 80202de:	f001 fa2b 	bl	8021738 <_txe_timer_create>

  TX_THREAD *MaliciousThread;
  txm_module_object_allocate((void*)&MaliciousThread, sizeof(TX_THREAD));
 80202e2:	f107 0310 	add.w	r3, r7, #16
 80202e6:	21e8      	movs	r1, #232	; 0xe8
 80202e8:	4618      	mov	r0, r3
 80202ea:	f000 fc09 	bl	8020b00 <_txm_module_object_allocate>
  tx_byte_allocate(ModuleBytePool, (VOID **) &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80202ee:	4b64      	ldr	r3, [pc, #400]	; (8020480 <MainThread_Entry+0x1d4>)
 80202f0:	f859 3003 	ldr.w	r3, [r9, r3]
 80202f4:	6818      	ldr	r0, [r3, #0]
 80202f6:	f107 0118 	add.w	r1, r7, #24
 80202fa:	2300      	movs	r3, #0
 80202fc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020300:	f000 f9b8 	bl	8020674 <_txe_byte_allocate>
  tx_thread_create(MaliciousThread, "Malicious Thread", MainThread_Entry, 0,
 8020304:	6938      	ldr	r0, [r7, #16]
 8020306:	69bb      	ldr	r3, [r7, #24]
 8020308:	22e8      	movs	r2, #232	; 0xe8
 802030a:	9206      	str	r2, [sp, #24]
 802030c:	2201      	movs	r2, #1
 802030e:	9205      	str	r2, [sp, #20]
 8020310:	4a55      	ldr	r2, [pc, #340]	; (8020468 <MainThread_Entry+0x1bc>)
 8020312:	9204      	str	r2, [sp, #16]
 8020314:	2202      	movs	r2, #2
 8020316:	9203      	str	r2, [sp, #12]
 8020318:	2202      	movs	r2, #2
 802031a:	9202      	str	r2, [sp, #8]
 802031c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8020320:	9201      	str	r2, [sp, #4]
 8020322:	9300      	str	r3, [sp, #0]
 8020324:	2300      	movs	r3, #0
 8020326:	4a57      	ldr	r2, [pc, #348]	; (8020484 <MainThread_Entry+0x1d8>)
 8020328:	f859 2002 	ldr.w	r2, [r9, r2]
 802032c:	4956      	ldr	r1, [pc, #344]	; (8020488 <MainThread_Entry+0x1dc>)
 802032e:	4479      	add	r1, pc
 8020330:	f000 ffb6 	bl	80212a0 <_txe_thread_create>
                       MAIN_THREAD_PRIO, MAIN_THREAD_PREEMPTION_THRESHOLD, 0x54485244, TX_AUTO_START);

  ULONG time_slice;
  TX_THREAD *ForgedThread;
  // write thread_state
  ForgedThread = (ULONG) MaliciousThread + 24;
 8020334:	693b      	ldr	r3, [r7, #16]
 8020336:	3318      	adds	r3, #24
 8020338:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedThread, 0x1, &time_slice);
 802033a:	f107 030c 	add.w	r3, r7, #12
 802033e:	461a      	mov	r2, r3
 8020340:	2101      	movs	r1, #1
 8020342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020344:	f001 f974 	bl	8021630 <_txe_thread_time_slice_change>
  // write thread_stack_start
  ForgedThread = (ULONG) MaliciousTimer + 12;
 8020348:	697b      	ldr	r3, [r7, #20]
 802034a:	330c      	adds	r3, #12
 802034c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 802034e:	f107 030c 	add.w	r3, r7, #12
 8020352:	461a      	mov	r2, r3
 8020354:	4944      	ldr	r1, [pc, #272]	; (8020468 <MainThread_Entry+0x1bc>)
 8020356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020358:	f001 f96a 	bl	8021630 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 40;
 802035c:	697b      	ldr	r3, [r7, #20]
 802035e:	3328      	adds	r3, #40	; 0x28
 8020360:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedThread, 0x54485244, &time_slice);
 8020362:	f107 030c 	add.w	r3, r7, #12
 8020366:	461a      	mov	r2, r3
 8020368:	493f      	ldr	r1, [pc, #252]	; (8020468 <MainThread_Entry+0x1bc>)
 802036a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802036c:	f001 f960 	bl	8021630 <_txe_thread_time_slice_change>
  ForgedThread = (ULONG) MaliciousTimer + 64;
 8020370:	697b      	ldr	r3, [r7, #20]
 8020372:	3340      	adds	r3, #64	; 0x40
 8020374:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_thread_time_slice_change(ForgedThread, 0xe000ed94, &time_slice);
 8020376:	f107 030c 	add.w	r3, r7, #12
 802037a:	461a      	mov	r2, r3
 802037c:	493b      	ldr	r1, [pc, #236]	; (802046c <MainThread_Entry+0x1c0>)
 802037e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020380:	f001 f956 	bl	8021630 <_txe_thread_time_slice_change>
  // dereference thread_stack_start in thread object
  tx_thread_reset(MaliciousThread);
 8020384:	693b      	ldr	r3, [r7, #16]
 8020386:	4618      	mov	r0, r3
 8020388:	f001 f8ce 	bl	8021528 <_txe_thread_reset>


  // read from privileged kernel memory
  ULONG privileged_read_test = MaliciousTimer->tx_timer_id;
 802038c:	697b      	ldr	r3, [r7, #20]
 802038e:	681b      	ldr	r3, [r3, #0]
 8020390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Request access to the queue from the module manager */
  status = txm_module_object_pointer_get(TXM_QUEUE_OBJECT, "Resident Queue", (VOID **)&ResidentQueue);
 8020392:	4b3e      	ldr	r3, [pc, #248]	; (802048c <MainThread_Entry+0x1e0>)
 8020394:	f859 3003 	ldr.w	r3, [r9, r3]
 8020398:	461a      	mov	r2, r3
 802039a:	4b3d      	ldr	r3, [pc, #244]	; (8020490 <MainThread_Entry+0x1e4>)
 802039c:	447b      	add	r3, pc
 802039e:	4619      	mov	r1, r3
 80203a0:	2005      	movs	r0, #5
 80203a2:	f000 fbd9 	bl	8020b58 <_txm_module_object_pointer_get>
 80203a6:	6278      	str	r0, [r7, #36]	; 0x24

  if(status)
 80203a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d001      	beq.n	80203b2 <MainThread_Entry+0x106>
  {
    Error_Handler();
 80203ae:	f000 f871 	bl	8020494 <Error_Handler>
  }

  /* Writing to write and read region */
  s_msg = WRITING_TO_READWRITE;
 80203b2:	2358      	movs	r3, #88	; 0x58
 80203b4:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203b6:	4b35      	ldr	r3, [pc, #212]	; (802048c <MainThread_Entry+0x1e0>)
 80203b8:	f859 3003 	ldr.w	r3, [r9, r3]
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	f107 011c 	add.w	r1, r7, #28
 80203c2:	2200      	movs	r2, #0
 80203c4:	4618      	mov	r0, r3
 80203c6:	f000 fe3b 	bl	8021040 <_txe_queue_send>
  *(ULONG *)READWRITE_REGION = 0xABABABAB;
 80203ca:	4b29      	ldr	r3, [pc, #164]	; (8020470 <MainThread_Entry+0x1c4>)
 80203cc:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 80203d0:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 80203d2:	200a      	movs	r0, #10
 80203d4:	f001 f8d4 	bl	8021580 <_tx_thread_sleep>

  /* WReading from write and read region */
  s_msg = READING_FROM_READWRITE;
 80203d8:	2342      	movs	r3, #66	; 0x42
 80203da:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 80203dc:	4b2b      	ldr	r3, [pc, #172]	; (802048c <MainThread_Entry+0x1e0>)
 80203de:	f859 3003 	ldr.w	r3, [r9, r3]
 80203e2:	681b      	ldr	r3, [r3, #0]
 80203e4:	f107 011c 	add.w	r1, r7, #28
 80203e8:	2200      	movs	r2, #0
 80203ea:	4618      	mov	r0, r3
 80203ec:	f000 fe28 	bl	8021040 <_txe_queue_send>
  readbuffer = *(ULONG*)READWRITE_REGION;
 80203f0:	4b1f      	ldr	r3, [pc, #124]	; (8020470 <MainThread_Entry+0x1c4>)
 80203f2:	681b      	ldr	r3, [r3, #0]
 80203f4:	623b      	str	r3, [r7, #32]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 80203f6:	200a      	movs	r0, #10
 80203f8:	f001 f8c2 	bl	8021580 <_tx_thread_sleep>

  /* Reading from read only region */
  s_msg = READING_FROM_READONLY;
 80203fc:	2337      	movs	r3, #55	; 0x37
 80203fe:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020400:	4b22      	ldr	r3, [pc, #136]	; (802048c <MainThread_Entry+0x1e0>)
 8020402:	f859 3003 	ldr.w	r3, [r9, r3]
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	f107 011c 	add.w	r1, r7, #28
 802040c:	2200      	movs	r2, #0
 802040e:	4618      	mov	r0, r3
 8020410:	f000 fe16 	bl	8021040 <_txe_queue_send>
  readbuffer = *(ULONG*)READONLY_REGION;
 8020414:	4b17      	ldr	r3, [pc, #92]	; (8020474 <MainThread_Entry+0x1c8>)
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	623b      	str	r3, [r7, #32]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 802041a:	200a      	movs	r0, #10
 802041c:	f001 f8b0 	bl	8021580 <_tx_thread_sleep>

  /* Writing to read only region */
  s_msg = WRITING_TO_READONLY;
 8020420:	234d      	movs	r3, #77	; 0x4d
 8020422:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 8020424:	4b19      	ldr	r3, [pc, #100]	; (802048c <MainThread_Entry+0x1e0>)
 8020426:	f859 3003 	ldr.w	r3, [r9, r3]
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	f107 011c 	add.w	r1, r7, #28
 8020430:	2200      	movs	r2, #0
 8020432:	4618      	mov	r0, r3
 8020434:	f000 fe04 	bl	8021040 <_txe_queue_send>
  *(ULONG *)READONLY_REGION = 0xABABABAB;
 8020438:	4b0e      	ldr	r3, [pc, #56]	; (8020474 <MainThread_Entry+0x1c8>)
 802043a:	f04f 32ab 	mov.w	r2, #2880154539	; 0xabababab
 802043e:	601a      	str	r2, [r3, #0]
  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 10);
 8020440:	200a      	movs	r0, #10
 8020442:	f001 f89d 	bl	8021580 <_tx_thread_sleep>

  /* Notify module manager about job finish */
  s_msg = PROCESSING_FINISHED;
 8020446:	232c      	movs	r3, #44	; 0x2c
 8020448:	61fb      	str	r3, [r7, #28]
  tx_queue_send(ResidentQueue, &s_msg, TX_NO_WAIT);
 802044a:	4b10      	ldr	r3, [pc, #64]	; (802048c <MainThread_Entry+0x1e0>)
 802044c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	f107 011c 	add.w	r1, r7, #28
 8020456:	2200      	movs	r2, #0
 8020458:	4618      	mov	r0, r3
 802045a:	f000 fdf1 	bl	8021040 <_txe_queue_send>
  UNUSED(readbuffer);

  /* Stay here, waiting for the module manager to stop and loading the module*/
  while(1)
  {
    tx_thread_sleep(10);
 802045e:	200a      	movs	r0, #10
 8020460:	f001 f88e 	bl	8021580 <_tx_thread_sleep>
 8020464:	e7fb      	b.n	802045e <MainThread_Entry+0x1b2>
 8020466:	bf00      	nop
 8020468:	54485244 	.word	0x54485244
 802046c:	e000ed94 	.word	0xe000ed94
 8020470:	20010100 	.word	0x20010100
 8020474:	20010000 	.word	0x20010000
 8020478:	00000000 	.word	0x00000000
 802047c:	000017c8 	.word	0x000017c8
 8020480:	0000000c 	.word	0x0000000c
 8020484:	00000018 	.word	0x00000018
 8020488:	00001786 	.word	0x00001786
 802048c:	00000008 	.word	0x00000008
 8020490:	0000172c 	.word	0x0000172c

08020494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020494:	b580      	push	{r7, lr}
 8020496:	af00      	add	r7, sp, #0
  /* Nothing to do, block here */
  tx_thread_sleep(TX_WAIT_FOREVER);
 8020498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802049c:	f001 f870 	bl	8021580 <_tx_thread_sleep>
}
 80204a0:	bf00      	nop
 80204a2:	bd80      	pop	{r7, pc}

080204a4 <MaliciousTimerFunction>:

void MaliciousTimerFunction(ULONG input)
{
 80204a4:	b480      	push	{r7}
 80204a6:	b083      	sub	sp, #12
 80204a8:	af00      	add	r7, sp, #0
 80204aa:	6078      	str	r0, [r7, #4]

}
 80204ac:	bf00      	nop
 80204ae:	370c      	adds	r7, #12
 80204b0:	46bd      	mov	sp, r7
 80204b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b6:	4770      	bx	lr

080204b8 <_txe_block_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 80204b8:	b590      	push	{r4, r7, lr}
 80204ba:	b087      	sub	sp, #28
 80204bc:	af00      	add	r7, sp, #0
 80204be:	60f8      	str	r0, [r7, #12]
 80204c0:	60b9      	str	r1, [r7, #8]
 80204c2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) block_ptr, (ALIGN_TYPE) wait_option);
 80204c4:	4b07      	ldr	r3, [pc, #28]	; (80204e4 <_txe_block_allocate+0x2c>)
 80204c6:	f859 3003 	ldr.w	r3, [r9, r3]
 80204ca:	681c      	ldr	r4, [r3, #0]
 80204cc:	68f9      	ldr	r1, [r7, #12]
 80204ce:	68ba      	ldr	r2, [r7, #8]
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	2001      	movs	r0, #1
 80204d4:	47a0      	blx	r4
 80204d6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80204d8:	697b      	ldr	r3, [r7, #20]
}
 80204da:	4618      	mov	r0, r3
 80204dc:	371c      	adds	r7, #28
 80204de:	46bd      	mov	sp, r7
 80204e0:	bd90      	pop	{r4, r7, pc}
 80204e2:	bf00      	nop
 80204e4:	00000004 	.word	0x00000004

080204e8 <_txe_block_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80204e8:	b590      	push	{r4, r7, lr}
 80204ea:	b08b      	sub	sp, #44	; 0x2c
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	60f8      	str	r0, [r7, #12]
 80204f0:	60b9      	str	r1, [r7, #8]
 80204f2:	607a      	str	r2, [r7, #4]
 80204f4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) block_size;
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) pool_start;
 80204fa:	683b      	ldr	r3, [r7, #0]
 80204fc:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) pool_size;
 80204fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020500:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) pool_control_block_size;
 8020502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020504:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020506:	4b08      	ldr	r3, [pc, #32]	; (8020528 <_txe_block_pool_create+0x40>)
 8020508:	f859 3003 	ldr.w	r3, [r9, r3]
 802050c:	681c      	ldr	r4, [r3, #0]
 802050e:	68f9      	ldr	r1, [r7, #12]
 8020510:	68ba      	ldr	r2, [r7, #8]
 8020512:	f107 0314 	add.w	r3, r7, #20
 8020516:	2002      	movs	r0, #2
 8020518:	47a0      	blx	r4
 802051a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 802051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802051e:	4618      	mov	r0, r3
 8020520:	372c      	adds	r7, #44	; 0x2c
 8020522:	46bd      	mov	sp, r7
 8020524:	bd90      	pop	{r4, r7, pc}
 8020526:	bf00      	nop
 8020528:	00000004 	.word	0x00000004

0802052c <_txe_block_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 802052c:	b590      	push	{r4, r7, lr}
 802052e:	b085      	sub	sp, #20
 8020530:	af00      	add	r7, sp, #0
 8020532:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020534:	4b07      	ldr	r3, [pc, #28]	; (8020554 <_txe_block_pool_delete+0x28>)
 8020536:	f859 3003 	ldr.w	r3, [r9, r3]
 802053a:	681c      	ldr	r4, [r3, #0]
 802053c:	6879      	ldr	r1, [r7, #4]
 802053e:	2300      	movs	r3, #0
 8020540:	2200      	movs	r2, #0
 8020542:	2003      	movs	r0, #3
 8020544:	47a0      	blx	r4
 8020546:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020548:	68fb      	ldr	r3, [r7, #12]
}
 802054a:	4618      	mov	r0, r3
 802054c:	3714      	adds	r7, #20
 802054e:	46bd      	mov	sp, r7
 8020550:	bd90      	pop	{r4, r7, pc}
 8020552:	bf00      	nop
 8020554:	00000004 	.word	0x00000004

08020558 <_txe_block_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, ULONG *total_blocks, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 8020558:	b590      	push	{r4, r7, lr}
 802055a:	b08b      	sub	sp, #44	; 0x2c
 802055c:	af00      	add	r7, sp, #0
 802055e:	60f8      	str	r0, [r7, #12]
 8020560:	60b9      	str	r1, [r7, #8]
 8020562:	607a      	str	r2, [r7, #4]
 8020564:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_blocks;
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) total_blocks;
 802056a:	683b      	ldr	r3, [r7, #0]
 802056c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 802056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020570:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020574:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 8020576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020578:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802057a:	4b08      	ldr	r3, [pc, #32]	; (802059c <_txe_block_pool_info_get+0x44>)
 802057c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020580:	681c      	ldr	r4, [r3, #0]
 8020582:	68f9      	ldr	r1, [r7, #12]
 8020584:	68ba      	ldr	r2, [r7, #8]
 8020586:	f107 0310 	add.w	r3, r7, #16
 802058a:	2004      	movs	r0, #4
 802058c:	47a0      	blx	r4
 802058e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020592:	4618      	mov	r0, r3
 8020594:	372c      	adds	r7, #44	; 0x2c
 8020596:	46bd      	mov	sp, r7
 8020598:	bd90      	pop	{r4, r7, pc}
 802059a:	bf00      	nop
 802059c:	00000004 	.word	0x00000004

080205a0 <_tx_block_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205a0:	b590      	push	{r4, r7, lr}
 80205a2:	b089      	sub	sp, #36	; 0x24
 80205a4:	af00      	add	r7, sp, #0
 80205a6:	60f8      	str	r0, [r7, #12]
 80205a8:	60b9      	str	r1, [r7, #8]
 80205aa:	607a      	str	r2, [r7, #4]
 80205ac:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80205b2:	683b      	ldr	r3, [r7, #0]
 80205b4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80205b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205b8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 80205ba:	4b08      	ldr	r3, [pc, #32]	; (80205dc <_tx_block_pool_performance_info_get+0x3c>)
 80205bc:	f859 3003 	ldr.w	r3, [r9, r3]
 80205c0:	681c      	ldr	r4, [r3, #0]
 80205c2:	68f9      	ldr	r1, [r7, #12]
 80205c4:	68ba      	ldr	r2, [r7, #8]
 80205c6:	f107 0310 	add.w	r3, r7, #16
 80205ca:	2005      	movs	r0, #5
 80205cc:	47a0      	blx	r4
 80205ce:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80205d0:	69fb      	ldr	r3, [r7, #28]
}
 80205d2:	4618      	mov	r0, r3
 80205d4:	3724      	adds	r7, #36	; 0x24
 80205d6:	46bd      	mov	sp, r7
 80205d8:	bd90      	pop	{r4, r7, pc}
 80205da:	bf00      	nop
 80205dc:	00000004 	.word	0x00000004

080205e0 <_tx_block_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80205e0:	b590      	push	{r4, r7, lr}
 80205e2:	b089      	sub	sp, #36	; 0x24
 80205e4:	af00      	add	r7, sp, #0
 80205e6:	60f8      	str	r0, [r7, #12]
 80205e8:	60b9      	str	r1, [r7, #8]
 80205ea:	607a      	str	r2, [r7, #4]
 80205ec:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80205f2:	683b      	ldr	r3, [r7, #0]
 80205f4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80205f6:	4b08      	ldr	r3, [pc, #32]	; (8020618 <_tx_block_pool_performance_system_info_get+0x38>)
 80205f8:	f859 3003 	ldr.w	r3, [r9, r3]
 80205fc:	681c      	ldr	r4, [r3, #0]
 80205fe:	68f9      	ldr	r1, [r7, #12]
 8020600:	68ba      	ldr	r2, [r7, #8]
 8020602:	f107 0314 	add.w	r3, r7, #20
 8020606:	2006      	movs	r0, #6
 8020608:	47a0      	blx	r4
 802060a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802060c:	69fb      	ldr	r3, [r7, #28]
}
 802060e:	4618      	mov	r0, r3
 8020610:	3724      	adds	r7, #36	; 0x24
 8020612:	46bd      	mov	sp, r7
 8020614:	bd90      	pop	{r4, r7, pc}
 8020616:	bf00      	nop
 8020618:	00000004 	.word	0x00000004

0802061c <_txe_block_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 802061c:	b590      	push	{r4, r7, lr}
 802061e:	b085      	sub	sp, #20
 8020620:	af00      	add	r7, sp, #0
 8020622:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020624:	4b07      	ldr	r3, [pc, #28]	; (8020644 <_txe_block_pool_prioritize+0x28>)
 8020626:	f859 3003 	ldr.w	r3, [r9, r3]
 802062a:	681c      	ldr	r4, [r3, #0]
 802062c:	6879      	ldr	r1, [r7, #4]
 802062e:	2300      	movs	r3, #0
 8020630:	2200      	movs	r2, #0
 8020632:	2007      	movs	r0, #7
 8020634:	47a0      	blx	r4
 8020636:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020638:	68fb      	ldr	r3, [r7, #12]
}
 802063a:	4618      	mov	r0, r3
 802063c:	3714      	adds	r7, #20
 802063e:	46bd      	mov	sp, r7
 8020640:	bd90      	pop	{r4, r7, pc}
 8020642:	bf00      	nop
 8020644:	00000004 	.word	0x00000004

08020648 <_txe_block_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_block_release(VOID *block_ptr)
{
 8020648:	b590      	push	{r4, r7, lr}
 802064a:	b085      	sub	sp, #20
 802064c:	af00      	add	r7, sp, #0
 802064e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BLOCK_RELEASE_CALL, (ALIGN_TYPE) block_ptr, 0, 0);
 8020650:	4b07      	ldr	r3, [pc, #28]	; (8020670 <_txe_block_release+0x28>)
 8020652:	f859 3003 	ldr.w	r3, [r9, r3]
 8020656:	681c      	ldr	r4, [r3, #0]
 8020658:	6879      	ldr	r1, [r7, #4]
 802065a:	2300      	movs	r3, #0
 802065c:	2200      	movs	r2, #0
 802065e:	2008      	movs	r0, #8
 8020660:	47a0      	blx	r4
 8020662:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020664:	68fb      	ldr	r3, [r7, #12]
}
 8020666:	4618      	mov	r0, r3
 8020668:	3714      	adds	r7, #20
 802066a:	46bd      	mov	sp, r7
 802066c:	bd90      	pop	{r4, r7, pc}
 802066e:	bf00      	nop
 8020670:	00000004 	.word	0x00000004

08020674 <_txe_byte_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size, ULONG wait_option)
{
 8020674:	b590      	push	{r4, r7, lr}
 8020676:	b089      	sub	sp, #36	; 0x24
 8020678:	af00      	add	r7, sp, #0
 802067a:	60f8      	str	r0, [r7, #12]
 802067c:	60b9      	str	r1, [r7, #8]
 802067e:	607a      	str	r2, [r7, #4]
 8020680:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) memory_size;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) wait_option;
 8020686:	683b      	ldr	r3, [r7, #0]
 8020688:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_ALLOCATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) memory_ptr, (ALIGN_TYPE) extra_parameters);
 802068a:	4b08      	ldr	r3, [pc, #32]	; (80206ac <_txe_byte_allocate+0x38>)
 802068c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020690:	681c      	ldr	r4, [r3, #0]
 8020692:	68f9      	ldr	r1, [r7, #12]
 8020694:	68ba      	ldr	r2, [r7, #8]
 8020696:	f107 0314 	add.w	r3, r7, #20
 802069a:	2009      	movs	r0, #9
 802069c:	47a0      	blx	r4
 802069e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206a0:	69fb      	ldr	r3, [r7, #28]
}
 80206a2:	4618      	mov	r0, r3
 80206a4:	3724      	adds	r7, #36	; 0x24
 80206a6:	46bd      	mov	sp, r7
 80206a8:	bd90      	pop	{r4, r7, pc}
 80206aa:	bf00      	nop
 80206ac:	00000004 	.word	0x00000004

080206b0 <_txe_byte_pool_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80206b0:	b590      	push	{r4, r7, lr}
 80206b2:	b089      	sub	sp, #36	; 0x24
 80206b4:	af00      	add	r7, sp, #0
 80206b6:	60f8      	str	r0, [r7, #12]
 80206b8:	60b9      	str	r1, [r7, #8]
 80206ba:	607a      	str	r2, [r7, #4]
 80206bc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) pool_start;
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) pool_size;
 80206c2:	683b      	ldr	r3, [r7, #0]
 80206c4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) pool_control_block_size;
 80206c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206c8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_CREATE_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80206ca:	4b08      	ldr	r3, [pc, #32]	; (80206ec <_txe_byte_pool_create+0x3c>)
 80206cc:	f859 3003 	ldr.w	r3, [r9, r3]
 80206d0:	681c      	ldr	r4, [r3, #0]
 80206d2:	68f9      	ldr	r1, [r7, #12]
 80206d4:	68ba      	ldr	r2, [r7, #8]
 80206d6:	f107 0310 	add.w	r3, r7, #16
 80206da:	200a      	movs	r0, #10
 80206dc:	47a0      	blx	r4
 80206de:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80206e0:	69fb      	ldr	r3, [r7, #28]
}
 80206e2:	4618      	mov	r0, r3
 80206e4:	3724      	adds	r7, #36	; 0x24
 80206e6:	46bd      	mov	sp, r7
 80206e8:	bd90      	pop	{r4, r7, pc}
 80206ea:	bf00      	nop
 80206ec:	00000004 	.word	0x00000004

080206f0 <_txe_byte_pool_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80206f0:	b590      	push	{r4, r7, lr}
 80206f2:	b085      	sub	sp, #20
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_DELETE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 80206f8:	4b07      	ldr	r3, [pc, #28]	; (8020718 <_txe_byte_pool_delete+0x28>)
 80206fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80206fe:	681c      	ldr	r4, [r3, #0]
 8020700:	6879      	ldr	r1, [r7, #4]
 8020702:	2300      	movs	r3, #0
 8020704:	2200      	movs	r2, #0
 8020706:	200b      	movs	r0, #11
 8020708:	47a0      	blx	r4
 802070a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802070c:	68fb      	ldr	r3, [r7, #12]
}
 802070e:	4618      	mov	r0, r3
 8020710:	3714      	adds	r7, #20
 8020712:	46bd      	mov	sp, r7
 8020714:	bd90      	pop	{r4, r7, pc}
 8020716:	bf00      	nop
 8020718:	00000004 	.word	0x00000004

0802071c <_txe_byte_pool_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, ULONG *fragments, TX_THREAD **first_suspended, ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 802071c:	b590      	push	{r4, r7, lr}
 802071e:	b08b      	sub	sp, #44	; 0x2c
 8020720:	af00      	add	r7, sp, #0
 8020722:	60f8      	str	r0, [r7, #12]
 8020724:	60b9      	str	r1, [r7, #8]
 8020726:	607a      	str	r2, [r7, #4]
 8020728:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) available_bytes;
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) fragments;
 802072e:	683b      	ldr	r3, [r7, #0]
 8020730:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020734:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020738:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_pool;
 802073a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802073c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802073e:	4b08      	ldr	r3, [pc, #32]	; (8020760 <_txe_byte_pool_info_get+0x44>)
 8020740:	f859 3003 	ldr.w	r3, [r9, r3]
 8020744:	681c      	ldr	r4, [r3, #0]
 8020746:	68f9      	ldr	r1, [r7, #12]
 8020748:	68ba      	ldr	r2, [r7, #8]
 802074a:	f107 0310 	add.w	r3, r7, #16
 802074e:	200c      	movs	r0, #12
 8020750:	47a0      	blx	r4
 8020752:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020756:	4618      	mov	r0, r3
 8020758:	372c      	adds	r7, #44	; 0x2c
 802075a:	46bd      	mov	sp, r7
 802075c:	bd90      	pop	{r4, r7, pc}
 802075e:	bf00      	nop
 8020760:	00000004 	.word	0x00000004

08020764 <_tx_byte_pool_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8020764:	b590      	push	{r4, r7, lr}
 8020766:	b08d      	sub	sp, #52	; 0x34
 8020768:	af00      	add	r7, sp, #0
 802076a:	60f8      	str	r0, [r7, #12]
 802076c:	60b9      	str	r1, [r7, #8]
 802076e:	607a      	str	r2, [r7, #4]
 8020770:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) releases;
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) fragments_searched;
 8020776:	683b      	ldr	r3, [r7, #0]
 8020778:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) merges;
 802077a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802077c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) splits;
 802077e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020780:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) suspensions;
 8020782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020784:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8020786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020788:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) pool_ptr, (ALIGN_TYPE) allocates, (ALIGN_TYPE) extra_parameters);
 802078a:	4b08      	ldr	r3, [pc, #32]	; (80207ac <_tx_byte_pool_performance_info_get+0x48>)
 802078c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020790:	681c      	ldr	r4, [r3, #0]
 8020792:	68f9      	ldr	r1, [r7, #12]
 8020794:	68ba      	ldr	r2, [r7, #8]
 8020796:	f107 0314 	add.w	r3, r7, #20
 802079a:	200d      	movs	r0, #13
 802079c:	47a0      	blx	r4
 802079e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80207a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80207a2:	4618      	mov	r0, r3
 80207a4:	3734      	adds	r7, #52	; 0x34
 80207a6:	46bd      	mov	sp, r7
 80207a8:	bd90      	pop	{r4, r7, pc}
 80207aa:	bf00      	nop
 80207ac:	00000004 	.word	0x00000004

080207b0 <_tx_byte_pool_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 80207b0:	b590      	push	{r4, r7, lr}
 80207b2:	b08b      	sub	sp, #44	; 0x2c
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	60f8      	str	r0, [r7, #12]
 80207b8:	60b9      	str	r1, [r7, #8]
 80207ba:	607a      	str	r2, [r7, #4]
 80207bc:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) fragments_searched;
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) merges;
 80207c2:	683b      	ldr	r3, [r7, #0]
 80207c4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) splits;
 80207c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80207c8:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspensions;
 80207ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80207cc:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 80207ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80207d0:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) allocates, (ALIGN_TYPE) releases, (ALIGN_TYPE) extra_parameters);
 80207d2:	4b08      	ldr	r3, [pc, #32]	; (80207f4 <_tx_byte_pool_performance_system_info_get+0x44>)
 80207d4:	f859 3003 	ldr.w	r3, [r9, r3]
 80207d8:	681c      	ldr	r4, [r3, #0]
 80207da:	68f9      	ldr	r1, [r7, #12]
 80207dc:	68ba      	ldr	r2, [r7, #8]
 80207de:	f107 0310 	add.w	r3, r7, #16
 80207e2:	200e      	movs	r0, #14
 80207e4:	47a0      	blx	r4
 80207e6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 80207e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80207ea:	4618      	mov	r0, r3
 80207ec:	372c      	adds	r7, #44	; 0x2c
 80207ee:	46bd      	mov	sp, r7
 80207f0:	bd90      	pop	{r4, r7, pc}
 80207f2:	bf00      	nop
 80207f4:	00000004 	.word	0x00000004

080207f8 <_txe_byte_pool_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 80207f8:	b590      	push	{r4, r7, lr}
 80207fa:	b085      	sub	sp, #20
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_POOL_PRIORITIZE_CALL, (ALIGN_TYPE) pool_ptr, 0, 0);
 8020800:	4b07      	ldr	r3, [pc, #28]	; (8020820 <_txe_byte_pool_prioritize+0x28>)
 8020802:	f859 3003 	ldr.w	r3, [r9, r3]
 8020806:	681c      	ldr	r4, [r3, #0]
 8020808:	6879      	ldr	r1, [r7, #4]
 802080a:	2300      	movs	r3, #0
 802080c:	2200      	movs	r2, #0
 802080e:	200f      	movs	r0, #15
 8020810:	47a0      	blx	r4
 8020812:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020814:	68fb      	ldr	r3, [r7, #12]
}
 8020816:	4618      	mov	r0, r3
 8020818:	3714      	adds	r7, #20
 802081a:	46bd      	mov	sp, r7
 802081c:	bd90      	pop	{r4, r7, pc}
 802081e:	bf00      	nop
 8020820:	00000004 	.word	0x00000004

08020824 <_txe_byte_release>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_byte_release(VOID *memory_ptr)
{
 8020824:	b590      	push	{r4, r7, lr}
 8020826:	b085      	sub	sp, #20
 8020828:	af00      	add	r7, sp, #0
 802082a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_BYTE_RELEASE_CALL, (ALIGN_TYPE) memory_ptr, 0, 0);
 802082c:	4b07      	ldr	r3, [pc, #28]	; (802084c <_txe_byte_release+0x28>)
 802082e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020832:	681c      	ldr	r4, [r3, #0]
 8020834:	6879      	ldr	r1, [r7, #4]
 8020836:	2300      	movs	r3, #0
 8020838:	2200      	movs	r2, #0
 802083a:	2010      	movs	r0, #16
 802083c:	47a0      	blx	r4
 802083e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020840:	68fb      	ldr	r3, [r7, #12]
}
 8020842:	4618      	mov	r0, r3
 8020844:	3714      	adds	r7, #20
 8020846:	46bd      	mov	sp, r7
 8020848:	bd90      	pop	{r4, r7, pc}
 802084a:	bf00      	nop
 802084c:	00000004 	.word	0x00000004

08020850 <_txe_event_flags_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8020850:	b590      	push	{r4, r7, lr}
 8020852:	b087      	sub	sp, #28
 8020854:	af00      	add	r7, sp, #0
 8020856:	60f8      	str	r0, [r7, #12]
 8020858:	60b9      	str	r1, [r7, #8]
 802085a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_CREATE_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) event_control_block_size);
 802085c:	4b07      	ldr	r3, [pc, #28]	; (802087c <_txe_event_flags_create+0x2c>)
 802085e:	f859 3003 	ldr.w	r3, [r9, r3]
 8020862:	681c      	ldr	r4, [r3, #0]
 8020864:	68f9      	ldr	r1, [r7, #12]
 8020866:	68ba      	ldr	r2, [r7, #8]
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	2011      	movs	r0, #17
 802086c:	47a0      	blx	r4
 802086e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020870:	697b      	ldr	r3, [r7, #20]
}
 8020872:	4618      	mov	r0, r3
 8020874:	371c      	adds	r7, #28
 8020876:	46bd      	mov	sp, r7
 8020878:	bd90      	pop	{r4, r7, pc}
 802087a:	bf00      	nop
 802087c:	00000004 	.word	0x00000004

08020880 <_txe_event_flags_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8020880:	b590      	push	{r4, r7, lr}
 8020882:	b085      	sub	sp, #20
 8020884:	af00      	add	r7, sp, #0
 8020886:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_DELETE_CALL, (ALIGN_TYPE) group_ptr, 0, 0);
 8020888:	4b07      	ldr	r3, [pc, #28]	; (80208a8 <_txe_event_flags_delete+0x28>)
 802088a:	f859 3003 	ldr.w	r3, [r9, r3]
 802088e:	681c      	ldr	r4, [r3, #0]
 8020890:	6879      	ldr	r1, [r7, #4]
 8020892:	2300      	movs	r3, #0
 8020894:	2200      	movs	r2, #0
 8020896:	2012      	movs	r0, #18
 8020898:	47a0      	blx	r4
 802089a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802089c:	68fb      	ldr	r3, [r7, #12]
}
 802089e:	4618      	mov	r0, r3
 80208a0:	3714      	adds	r7, #20
 80208a2:	46bd      	mov	sp, r7
 80208a4:	bd90      	pop	{r4, r7, pc}
 80208a6:	bf00      	nop
 80208a8:	00000004 	.word	0x00000004

080208ac <_txe_event_flags_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags, UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80208ac:	b590      	push	{r4, r7, lr}
 80208ae:	b089      	sub	sp, #36	; 0x24
 80208b0:	af00      	add	r7, sp, #0
 80208b2:	60f8      	str	r0, [r7, #12]
 80208b4:	60b9      	str	r1, [r7, #8]
 80208b6:	607a      	str	r2, [r7, #4]
 80208b8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) get_option;
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) actual_flags_ptr;
 80208be:	683b      	ldr	r3, [r7, #0]
 80208c0:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) wait_option;
 80208c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208c4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) requested_flags, (ALIGN_TYPE) extra_parameters);
 80208c6:	4b08      	ldr	r3, [pc, #32]	; (80208e8 <_txe_event_flags_get+0x3c>)
 80208c8:	f859 3003 	ldr.w	r3, [r9, r3]
 80208cc:	681c      	ldr	r4, [r3, #0]
 80208ce:	68f9      	ldr	r1, [r7, #12]
 80208d0:	f107 0310 	add.w	r3, r7, #16
 80208d4:	68ba      	ldr	r2, [r7, #8]
 80208d6:	2013      	movs	r0, #19
 80208d8:	47a0      	blx	r4
 80208da:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80208dc:	69fb      	ldr	r3, [r7, #28]
}
 80208de:	4618      	mov	r0, r3
 80208e0:	3724      	adds	r7, #36	; 0x24
 80208e2:	46bd      	mov	sp, r7
 80208e4:	bd90      	pop	{r4, r7, pc}
 80208e6:	bf00      	nop
 80208e8:	00000004 	.word	0x00000004

080208ec <_txe_event_flags_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, TX_THREAD **first_suspended, ULONG *suspended_count, TX_EVENT_FLAGS_GROUP **next_group)
{
 80208ec:	b590      	push	{r4, r7, lr}
 80208ee:	b08b      	sub	sp, #44	; 0x2c
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	60f8      	str	r0, [r7, #12]
 80208f4:	60b9      	str	r1, [r7, #8]
 80208f6:	607a      	str	r2, [r7, #4]
 80208f8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_flags;
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8020902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020904:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_group;
 8020906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020908:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802090a:	4b08      	ldr	r3, [pc, #32]	; (802092c <_txe_event_flags_info_get+0x40>)
 802090c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020910:	681c      	ldr	r4, [r3, #0]
 8020912:	68f9      	ldr	r1, [r7, #12]
 8020914:	68ba      	ldr	r2, [r7, #8]
 8020916:	f107 0314 	add.w	r3, r7, #20
 802091a:	2014      	movs	r0, #20
 802091c:	47a0      	blx	r4
 802091e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020922:	4618      	mov	r0, r3
 8020924:	372c      	adds	r7, #44	; 0x2c
 8020926:	46bd      	mov	sp, r7
 8020928:	bd90      	pop	{r4, r7, pc}
 802092a:	bf00      	nop
 802092c:	00000004 	.word	0x00000004

08020930 <_tx_event_flags_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020930:	b590      	push	{r4, r7, lr}
 8020932:	b089      	sub	sp, #36	; 0x24
 8020934:	af00      	add	r7, sp, #0
 8020936:	60f8      	str	r0, [r7, #12]
 8020938:	60b9      	str	r1, [r7, #8]
 802093a:	607a      	str	r2, [r7, #4]
 802093c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020942:	683b      	ldr	r3, [r7, #0]
 8020944:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020948:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) sets, (ALIGN_TYPE) extra_parameters);
 802094a:	4b08      	ldr	r3, [pc, #32]	; (802096c <_tx_event_flags_performance_info_get+0x3c>)
 802094c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020950:	681c      	ldr	r4, [r3, #0]
 8020952:	68f9      	ldr	r1, [r7, #12]
 8020954:	68ba      	ldr	r2, [r7, #8]
 8020956:	f107 0310 	add.w	r3, r7, #16
 802095a:	2015      	movs	r0, #21
 802095c:	47a0      	blx	r4
 802095e:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020960:	69fb      	ldr	r3, [r7, #28]
}
 8020962:	4618      	mov	r0, r3
 8020964:	3724      	adds	r7, #36	; 0x24
 8020966:	46bd      	mov	sp, r7
 8020968:	bd90      	pop	{r4, r7, pc}
 802096a:	bf00      	nop
 802096c:	00000004 	.word	0x00000004

08020970 <_tx_event_flags_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8020970:	b590      	push	{r4, r7, lr}
 8020972:	b089      	sub	sp, #36	; 0x24
 8020974:	af00      	add	r7, sp, #0
 8020976:	60f8      	str	r0, [r7, #12]
 8020978:	60b9      	str	r1, [r7, #8]
 802097a:	607a      	str	r2, [r7, #4]
 802097c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020982:	683b      	ldr	r3, [r7, #0]
 8020984:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) sets, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020986:	4b08      	ldr	r3, [pc, #32]	; (80209a8 <_tx_event_flags_performance_system_info_get+0x38>)
 8020988:	f859 3003 	ldr.w	r3, [r9, r3]
 802098c:	681c      	ldr	r4, [r3, #0]
 802098e:	68f9      	ldr	r1, [r7, #12]
 8020990:	68ba      	ldr	r2, [r7, #8]
 8020992:	f107 0314 	add.w	r3, r7, #20
 8020996:	2016      	movs	r0, #22
 8020998:	47a0      	blx	r4
 802099a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802099c:	69fb      	ldr	r3, [r7, #28]
}
 802099e:	4618      	mov	r0, r3
 80209a0:	3724      	adds	r7, #36	; 0x24
 80209a2:	46bd      	mov	sp, r7
 80209a4:	bd90      	pop	{r4, r7, pc}
 80209a6:	bf00      	nop
 80209a8:	00000004 	.word	0x00000004

080209ac <_txe_event_flags_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80209ac:	b590      	push	{r4, r7, lr}
 80209ae:	b087      	sub	sp, #28
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	60f8      	str	r0, [r7, #12]
 80209b4:	60b9      	str	r1, [r7, #8]
 80209b6:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) flags_to_set, (ALIGN_TYPE) set_option);
 80209b8:	4b07      	ldr	r3, [pc, #28]	; (80209d8 <_txe_event_flags_set+0x2c>)
 80209ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80209be:	681c      	ldr	r4, [r3, #0]
 80209c0:	68f9      	ldr	r1, [r7, #12]
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	68ba      	ldr	r2, [r7, #8]
 80209c6:	2017      	movs	r0, #23
 80209c8:	47a0      	blx	r4
 80209ca:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80209cc:	697b      	ldr	r3, [r7, #20]
}
 80209ce:	4618      	mov	r0, r3
 80209d0:	371c      	adds	r7, #28
 80209d2:	46bd      	mov	sp, r7
 80209d4:	bd90      	pop	{r4, r7, pc}
 80209d6:	bf00      	nop
 80209d8:	00000004 	.word	0x00000004

080209dc <_txe_event_flags_set_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *))
{
 80209dc:	b590      	push	{r4, r7, lr}
 80209de:	b085      	sub	sp, #20
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	6078      	str	r0, [r7, #4]
 80209e4:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_EVENT_FLAGS_SET_NOTIFY_CALL, (ALIGN_TYPE) group_ptr, (ALIGN_TYPE) events_set_notify, 0);
 80209e6:	4b07      	ldr	r3, [pc, #28]	; (8020a04 <_txe_event_flags_set_notify+0x28>)
 80209e8:	f859 3003 	ldr.w	r3, [r9, r3]
 80209ec:	681c      	ldr	r4, [r3, #0]
 80209ee:	6879      	ldr	r1, [r7, #4]
 80209f0:	683a      	ldr	r2, [r7, #0]
 80209f2:	2300      	movs	r3, #0
 80209f4:	2018      	movs	r0, #24
 80209f6:	47a0      	blx	r4
 80209f8:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80209fa:	68fb      	ldr	r3, [r7, #12]
}
 80209fc:	4618      	mov	r0, r3
 80209fe:	3714      	adds	r7, #20
 8020a00:	46bd      	mov	sp, r7
 8020a02:	bd90      	pop	{r4, r7, pc}
 8020a04:	00000004 	.word	0x00000004

08020a08 <_txm_module_application_request>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT txm_module_application_request(ULONG request, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 8020a08:	b590      	push	{r4, r7, lr}
 8020a0a:	b087      	sub	sp, #28
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	60f8      	str	r0, [r7, #12]
 8020a10:	60b9      	str	r1, [r7, #8]
 8020a12:	607a      	str	r2, [r7, #4]
 8020a14:	603b      	str	r3, [r7, #0]

UINT   return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT)(_txm_module_kernel_call_dispatcher)(TXM_APPLICATION_REQUEST_ID_BASE+request, param_1, param_2, param_3);
 8020a16:	4b08      	ldr	r3, [pc, #32]	; (8020a38 <_txm_module_application_request+0x30>)
 8020a18:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a1c:	681c      	ldr	r4, [r3, #0]
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 8020a24:	683b      	ldr	r3, [r7, #0]
 8020a26:	687a      	ldr	r2, [r7, #4]
 8020a28:	68b9      	ldr	r1, [r7, #8]
 8020a2a:	47a0      	blx	r4
 8020a2c:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020a2e:	697b      	ldr	r3, [r7, #20]
}
 8020a30:	4618      	mov	r0, r3
 8020a32:	371c      	adds	r7, #28
 8020a34:	46bd      	mov	sp, r7
 8020a36:	bd90      	pop	{r4, r7, pc}
 8020a38:	00000004 	.word	0x00000004

08020a3c <_txm_module_callback_request_thread_entry>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txm_module_callback_request_thread_entry(ULONG id)
{
 8020a3c:	b580      	push	{r7, lr}
 8020a3e:	b098      	sub	sp, #96	; 0x60
 8020a40:	af00      	add	r7, sp, #0
 8020a42:	6078      	str	r0, [r7, #4]

    /* Disable warning of parameter not used. */
    TX_PARAMETER_NOT_USED(id);

    /* Pickup pointer to the request queue.  */
    request_queue =  _txm_module_entry_info -> txm_module_thread_entry_info_callback_request_queue;
 8020a44:	4b2d      	ldr	r3, [pc, #180]	; (8020afc <_txm_module_callback_request_thread_entry+0xc0>)
 8020a46:	f859 3003 	ldr.w	r3, [r9, r3]
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a4e:	65bb      	str	r3, [r7, #88]	; 0x58
    /* Loop to process callback messages from the module manager.  */
    while(1)
    {

        /* Wait for the callback request for the module.  */
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020a50:	f107 030c 	add.w	r3, r7, #12
 8020a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020a58:	4619      	mov	r1, r3
 8020a5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020a5c:	f000 fad8 	bl	8021010 <_txe_queue_receive>
 8020a60:	6578      	str	r0, [r7, #84]	; 0x54

        /* Check to see if a request was received.  */
        if (status != TX_SUCCESS)
 8020a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d144      	bne.n	8020af2 <_txm_module_callback_request_thread_entry+0xb6>
            /* This should not happen - get out of the loop.  */
            break;
        }

        /* Pickup the activation count in the message.  */
        activation_count =  callback_message.txm_module_callback_message_activation_count;
 8020a68:	693b      	ldr	r3, [r7, #16]
 8020a6a:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Loop to call the callback function the correct number of times.  */
        while (activation_count)
 8020a6c:	e03d      	b.n	8020aea <_txm_module_callback_request_thread_entry+0xae>
        {

            /* Decrement the activation count.  */
            activation_count--;
 8020a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020a70:	3b01      	subs	r3, #1
 8020a72:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Now dispatch the callback function.  */
            switch (callback_message.txm_module_callback_message_type)
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	2b04      	cmp	r3, #4
 8020a78:	d836      	bhi.n	8020ae8 <_txm_module_callback_request_thread_entry+0xac>
 8020a7a:	a202      	add	r2, pc, #8	; (adr r2, 8020a84 <_txm_module_callback_request_thread_entry+0x48>)
 8020a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020a80:	441a      	add	r2, r3
 8020a82:	4710      	bx	r2
 8020a84:	00000015 	.word	0x00000015
 8020a88:	00000023 	.word	0x00000023
 8020a8c:	00000033 	.word	0x00000033
 8020a90:	00000043 	.word	0x00000043
 8020a94:	00000053 	.word	0x00000053
            {

            case TXM_TIMER_CALLBACK:

                /* Setup timer callback pointer.  */
                timer_callback =  (void (*)(ULONG)) callback_message.txm_module_callback_message_application_function;
 8020a98:	697b      	ldr	r3, [r7, #20]
 8020a9a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Call application's timer callback.  */
                (timer_callback)((ULONG) callback_message.txm_module_callback_message_param_1);
 8020a9c:	69ba      	ldr	r2, [r7, #24]
 8020a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020aa0:	4610      	mov	r0, r2
 8020aa2:	4798      	blx	r3

                break;
 8020aa4:	e021      	b.n	8020aea <_txm_module_callback_request_thread_entry+0xae>

            case TXM_EVENTS_SET_CALLBACK:

                /* Setup events set callback pointer.  */
                events_set_notify =  (void (*)(TX_EVENT_FLAGS_GROUP *)) callback_message.txm_module_callback_message_application_function;
 8020aa6:	697b      	ldr	r3, [r7, #20]
 8020aa8:	647b      	str	r3, [r7, #68]	; 0x44

                /* Call events set notify callback.  */
                (events_set_notify)((TX_EVENT_FLAGS_GROUP *) callback_message.txm_module_callback_message_param_1);
 8020aaa:	69bb      	ldr	r3, [r7, #24]
 8020aac:	461a      	mov	r2, r3
 8020aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020ab0:	4610      	mov	r0, r2
 8020ab2:	4798      	blx	r3

                break;
 8020ab4:	e019      	b.n	8020aea <_txm_module_callback_request_thread_entry+0xae>

            case TXM_QUEUE_SEND_CALLBACK:

                /* Setup queue send callback pointer.  */
                queue_send_notify =  (void (*)(TX_QUEUE *)) callback_message.txm_module_callback_message_application_function;
 8020ab6:	697b      	ldr	r3, [r7, #20]
 8020ab8:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Call queue send notify callback.  */
                (queue_send_notify)((TX_QUEUE *) callback_message.txm_module_callback_message_param_1);
 8020aba:	69bb      	ldr	r3, [r7, #24]
 8020abc:	461a      	mov	r2, r3
 8020abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020ac0:	4610      	mov	r0, r2
 8020ac2:	4798      	blx	r3

                break;
 8020ac4:	e011      	b.n	8020aea <_txm_module_callback_request_thread_entry+0xae>

            case TXM_SEMAPHORE_PUT_CALLBACK:

                /* Setup semaphore put callback pointer.  */
                semaphore_put_notify =  (void (*)(TX_SEMAPHORE *)) callback_message.txm_module_callback_message_application_function;
 8020ac6:	697b      	ldr	r3, [r7, #20]
 8020ac8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Call semaphore put notify callback.  */
                (semaphore_put_notify)((TX_SEMAPHORE *) callback_message.txm_module_callback_message_param_1);
 8020aca:	69bb      	ldr	r3, [r7, #24]
 8020acc:	461a      	mov	r2, r3
 8020ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020ad0:	4610      	mov	r0, r2
 8020ad2:	4798      	blx	r3

                break;
 8020ad4:	e009      	b.n	8020aea <_txm_module_callback_request_thread_entry+0xae>

            case TXM_THREAD_ENTRY_EXIT_CALLBACK:

                /* Setup thread entry/exit callback pointer.  */
                thread_entry_exit_notify =  (void (*)(TX_THREAD *, UINT)) callback_message.txm_module_callback_message_application_function;
 8020ad6:	697b      	ldr	r3, [r7, #20]
 8020ad8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Call thread entry/exit notify callback.  */
                (thread_entry_exit_notify)((TX_THREAD *) callback_message.txm_module_callback_message_param_1, (UINT) callback_message.txm_module_callback_message_param_2);
 8020ada:	69bb      	ldr	r3, [r7, #24]
 8020adc:	4618      	mov	r0, r3
 8020ade:	69fa      	ldr	r2, [r7, #28]
 8020ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020ae2:	4611      	mov	r1, r2
 8020ae4:	4798      	blx	r3

                break;
 8020ae6:	e000      	b.n	8020aea <_txm_module_callback_request_thread_entry+0xae>
                    /* Call the USBX callback function.  */
                    _txm_module_usbx_callback_request(&callback_message);
                }
#endif

                break;
 8020ae8:	bf00      	nop
        while (activation_count)
 8020aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d1be      	bne.n	8020a6e <_txm_module_callback_request_thread_entry+0x32>
        status =  _txe_queue_receive(request_queue, (VOID *) &callback_message, TX_WAIT_FOREVER);
 8020af0:	e7ae      	b.n	8020a50 <_txm_module_callback_request_thread_entry+0x14>
            break;
 8020af2:	bf00      	nop
            }
        }
    }
}
 8020af4:	bf00      	nop
 8020af6:	3760      	adds	r7, #96	; 0x60
 8020af8:	46bd      	mov	sp, r7
 8020afa:	bd80      	pop	{r7, pc}
 8020afc:	00000010 	.word	0x00000010

08020b00 <_txm_module_object_allocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_allocate(VOID **object_ptr, ULONG object_size)
{
 8020b00:	b590      	push	{r4, r7, lr}
 8020b02:	b085      	sub	sp, #20
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
 8020b08:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_ALLOCATE_CALL, (ALIGN_TYPE) object_ptr, (ALIGN_TYPE) object_size, 0);
 8020b0a:	4b07      	ldr	r3, [pc, #28]	; (8020b28 <_txm_module_object_allocate+0x28>)
 8020b0c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b10:	681c      	ldr	r4, [r3, #0]
 8020b12:	6879      	ldr	r1, [r7, #4]
 8020b14:	2300      	movs	r3, #0
 8020b16:	683a      	ldr	r2, [r7, #0]
 8020b18:	205f      	movs	r0, #95	; 0x5f
 8020b1a:	47a0      	blx	r4
 8020b1c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b1e:	68fb      	ldr	r3, [r7, #12]
}
 8020b20:	4618      	mov	r0, r3
 8020b22:	3714      	adds	r7, #20
 8020b24:	46bd      	mov	sp, r7
 8020b26:	bd90      	pop	{r4, r7, pc}
 8020b28:	00000004 	.word	0x00000004

08020b2c <_txm_module_object_deallocate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_deallocate(VOID *object_ptr)
{
 8020b2c:	b590      	push	{r4, r7, lr}
 8020b2e:	b085      	sub	sp, #20
 8020b30:	af00      	add	r7, sp, #0
 8020b32:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_DEALLOCATE_CALL, (ALIGN_TYPE) object_ptr, 0, 0);
 8020b34:	4b07      	ldr	r3, [pc, #28]	; (8020b54 <_txm_module_object_deallocate+0x28>)
 8020b36:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b3a:	681c      	ldr	r4, [r3, #0]
 8020b3c:	6879      	ldr	r1, [r7, #4]
 8020b3e:	2300      	movs	r3, #0
 8020b40:	2200      	movs	r2, #0
 8020b42:	2060      	movs	r0, #96	; 0x60
 8020b44:	47a0      	blx	r4
 8020b46:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020b48:	68fb      	ldr	r3, [r7, #12]
}
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	3714      	adds	r7, #20
 8020b4e:	46bd      	mov	sp, r7
 8020b50:	bd90      	pop	{r4, r7, pc}
 8020b52:	bf00      	nop
 8020b54:	00000004 	.word	0x00000004

08020b58 <_txm_module_object_pointer_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8020b58:	b590      	push	{r4, r7, lr}
 8020b5a:	b087      	sub	sp, #28
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) object_ptr);
 8020b64:	4b07      	ldr	r3, [pc, #28]	; (8020b84 <_txm_module_object_pointer_get+0x2c>)
 8020b66:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b6a:	681c      	ldr	r4, [r3, #0]
 8020b6c:	68ba      	ldr	r2, [r7, #8]
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	68f9      	ldr	r1, [r7, #12]
 8020b72:	205d      	movs	r0, #93	; 0x5d
 8020b74:	47a0      	blx	r4
 8020b76:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020b78:	697b      	ldr	r3, [r7, #20]
}
 8020b7a:	4618      	mov	r0, r3
 8020b7c:	371c      	adds	r7, #28
 8020b7e:	46bd      	mov	sp, r7
 8020b80:	bd90      	pop	{r4, r7, pc}
 8020b82:	bf00      	nop
 8020b84:	00000004 	.word	0x00000004

08020b88 <_txm_module_object_pointer_get_extended>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_object_pointer_get_extended(UINT object_type, CHAR *name, UINT name_length, VOID **object_ptr)
{
 8020b88:	b590      	push	{r4, r7, lr}
 8020b8a:	b089      	sub	sp, #36	; 0x24
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	60f8      	str	r0, [r7, #12]
 8020b90:	60b9      	str	r1, [r7, #8]
 8020b92:	607a      	str	r2, [r7, #4]
 8020b94:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) name_length;
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) object_ptr;
 8020b9a:	683b      	ldr	r3, [r7, #0]
 8020b9c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL, (ALIGN_TYPE) object_type, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020b9e:	4b08      	ldr	r3, [pc, #32]	; (8020bc0 <_txm_module_object_pointer_get_extended+0x38>)
 8020ba0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ba4:	681c      	ldr	r4, [r3, #0]
 8020ba6:	68ba      	ldr	r2, [r7, #8]
 8020ba8:	f107 0314 	add.w	r3, r7, #20
 8020bac:	68f9      	ldr	r1, [r7, #12]
 8020bae:	205e      	movs	r0, #94	; 0x5e
 8020bb0:	47a0      	blx	r4
 8020bb2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020bb4:	69fb      	ldr	r3, [r7, #28]
}
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	3724      	adds	r7, #36	; 0x24
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	bd90      	pop	{r4, r7, pc}
 8020bbe:	bf00      	nop
 8020bc0:	00000004 	.word	0x00000004

08020bc4 <_txm_module_thread_shell_entry>:
/*                                                                        */
/*  10-15-2021      Scott Larson            Initial Version 6.1.9         */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_thread_shell_entry(TX_THREAD *thread_ptr, TXM_MODULE_THREAD_ENTRY_INFO *thread_info)
{
 8020bc4:	b580      	push	{r7, lr}
 8020bc6:	b084      	sub	sp, #16
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]
 8020bcc:	6039      	str	r1, [r7, #0]
#endif


    /* Determine if this is the start thread.  If so, we must prepare the module for
       execution.  If not, simply skip the C startup code.  */
    if (thread_info -> txm_module_thread_entry_info_start_thread)
 8020bce:	683b      	ldr	r3, [r7, #0]
 8020bd0:	69db      	ldr	r3, [r3, #28]
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d01b      	beq.n	8020c0e <_txm_module_thread_shell_entry+0x4a>
    {
        /* Initialize the C environment.  */
        _gcc_setup(thread_info -> txm_module_thread_entry_info_code_base_address);
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	68db      	ldr	r3, [r3, #12]
 8020bda:	4618      	mov	r0, r3
 8020bdc:	f7ff fa68 	bl	80200b0 <_gcc_setup>
        
        /* Save the entry info pointer, for later use.  */
        _txm_module_entry_info =  thread_info;
 8020be0:	4b1b      	ldr	r3, [pc, #108]	; (8020c50 <_txm_module_thread_shell_entry+0x8c>)
 8020be2:	f859 3003 	ldr.w	r3, [r9, r3]
 8020be6:	683a      	ldr	r2, [r7, #0]
 8020be8:	601a      	str	r2, [r3, #0]
        
        /* Save the kernel function dispatch address. This is used to make all resident calls from
           the module.  */
        _txm_module_kernel_call_dispatcher =  thread_info -> txm_module_thread_entry_info_kernel_call_dispatcher;
 8020bea:	683b      	ldr	r3, [r7, #0]
 8020bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020bee:	4b19      	ldr	r3, [pc, #100]	; (8020c54 <_txm_module_thread_shell_entry+0x90>)
 8020bf0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bf4:	601a      	str	r2, [r3, #0]
        
        /* Ensure that we have a valid pointer.  */
        while (!_txm_module_kernel_call_dispatcher)
 8020bf6:	bf00      	nop
 8020bf8:	4b16      	ldr	r3, [pc, #88]	; (8020c54 <_txm_module_thread_shell_entry+0x90>)
 8020bfa:	f859 3003 	ldr.w	r3, [r9, r3]
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d0f9      	beq.n	8020bf8 <_txm_module_thread_shell_entry+0x34>
               An error here typically indicates the resident portion of _tx_thread_schedule
               is not supporting the trap to obtain the function pointer.   */
        }
        
        /* Resume the module's callback thread, already created in the manager.  */
        _txe_thread_resume(thread_info -> txm_module_thread_entry_info_callback_request_thread);
 8020c04:	683b      	ldr	r3, [r7, #0]
 8020c06:	6a1b      	ldr	r3, [r3, #32]
 8020c08:	4618      	mov	r0, r3
 8020c0a:	f000 fca3 	bl	8021554 <_txe_thread_resume>
    }

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c0e:	683b      	ldr	r3, [r7, #0]
 8020c10:	699b      	ldr	r3, [r3, #24]
 8020c12:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c14:	68fb      	ldr	r3, [r7, #12]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d003      	beq.n	8020c22 <_txm_module_thread_shell_entry+0x5e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8020c1a:	68fb      	ldr	r3, [r7, #12]
 8020c1c:	2100      	movs	r1, #0
 8020c1e:	6878      	ldr	r0, [r7, #4]
 8020c20:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_info -> txm_module_thread_entry_info_entry) (thread_info -> txm_module_thread_entry_info_parameter);
 8020c22:	683b      	ldr	r3, [r7, #0]
 8020c24:	691b      	ldr	r3, [r3, #16]
 8020c26:	683a      	ldr	r2, [r7, #0]
 8020c28:	6952      	ldr	r2, [r2, #20]
 8020c2a:	4610      	mov	r0, r2
 8020c2c:	4798      	blx	r3


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_info -> txm_module_thread_entry_info_exit_notify;
 8020c2e:	683b      	ldr	r3, [r7, #0]
 8020c30:	699b      	ldr	r3, [r3, #24]
 8020c32:	60fb      	str	r3, [r7, #12]

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d003      	beq.n	8020c42 <_txm_module_thread_shell_entry+0x7e>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8020c3a:	68fb      	ldr	r3, [r7, #12]
 8020c3c:	2101      	movs	r1, #1
 8020c3e:	6878      	ldr	r0, [r7, #4]
 8020c40:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _txm_module_thread_system_suspend(thread_ptr);
 8020c42:	6878      	ldr	r0, [r7, #4]
 8020c44:	f000 f808 	bl	8020c58 <_txm_module_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8020c48:	bf00      	nop
 8020c4a:	3710      	adds	r7, #16
 8020c4c:	46bd      	mov	sp, r7
 8020c4e:	bd80      	pop	{r7, pc}
 8020c50:	00000010 	.word	0x00000010
 8020c54:	00000004 	.word	0x00000004

08020c58 <_txm_module_thread_system_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_thread_system_suspend(TX_THREAD *thread_ptr)
{
 8020c58:	b590      	push	{r4, r7, lr}
 8020c5a:	b085      	sub	sp, #20
 8020c5c:	af00      	add	r7, sp, #0
 8020c5e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SYSTEM_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8020c60:	4b07      	ldr	r3, [pc, #28]	; (8020c80 <_txm_module_thread_system_suspend+0x28>)
 8020c62:	f859 3003 	ldr.w	r3, [r9, r3]
 8020c66:	681c      	ldr	r4, [r3, #0]
 8020c68:	6879      	ldr	r1, [r7, #4]
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	205c      	movs	r0, #92	; 0x5c
 8020c70:	47a0      	blx	r4
 8020c72:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020c74:	68fb      	ldr	r3, [r7, #12]
}
 8020c76:	4618      	mov	r0, r3
 8020c78:	3714      	adds	r7, #20
 8020c7a:	46bd      	mov	sp, r7
 8020c7c:	bd90      	pop	{r4, r7, pc}
 8020c7e:	bf00      	nop
 8020c80:	00000004 	.word	0x00000004

08020c84 <_txe_mutex_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8020c84:	b590      	push	{r4, r7, lr}
 8020c86:	b089      	sub	sp, #36	; 0x24
 8020c88:	af00      	add	r7, sp, #0
 8020c8a:	60f8      	str	r0, [r7, #12]
 8020c8c:	60b9      	str	r1, [r7, #8]
 8020c8e:	607a      	str	r2, [r7, #4]
 8020c90:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) inherit;
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) mutex_control_block_size;
 8020c96:	683b      	ldr	r3, [r7, #0]
 8020c98:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_CREATE_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020c9a:	4b08      	ldr	r3, [pc, #32]	; (8020cbc <_txe_mutex_create+0x38>)
 8020c9c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ca0:	681c      	ldr	r4, [r3, #0]
 8020ca2:	68f9      	ldr	r1, [r7, #12]
 8020ca4:	68ba      	ldr	r2, [r7, #8]
 8020ca6:	f107 0314 	add.w	r3, r7, #20
 8020caa:	201a      	movs	r0, #26
 8020cac:	47a0      	blx	r4
 8020cae:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8020cb0:	69fb      	ldr	r3, [r7, #28]
}
 8020cb2:	4618      	mov	r0, r3
 8020cb4:	3724      	adds	r7, #36	; 0x24
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	bd90      	pop	{r4, r7, pc}
 8020cba:	bf00      	nop
 8020cbc:	00000004 	.word	0x00000004

08020cc0 <_txe_mutex_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8020cc0:	b590      	push	{r4, r7, lr}
 8020cc2:	b085      	sub	sp, #20
 8020cc4:	af00      	add	r7, sp, #0
 8020cc6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_DELETE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020cc8:	4b07      	ldr	r3, [pc, #28]	; (8020ce8 <_txe_mutex_delete+0x28>)
 8020cca:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cce:	681c      	ldr	r4, [r3, #0]
 8020cd0:	6879      	ldr	r1, [r7, #4]
 8020cd2:	2300      	movs	r3, #0
 8020cd4:	2200      	movs	r2, #0
 8020cd6:	201b      	movs	r0, #27
 8020cd8:	47a0      	blx	r4
 8020cda:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020cdc:	68fb      	ldr	r3, [r7, #12]
}
 8020cde:	4618      	mov	r0, r3
 8020ce0:	3714      	adds	r7, #20
 8020ce2:	46bd      	mov	sp, r7
 8020ce4:	bd90      	pop	{r4, r7, pc}
 8020ce6:	bf00      	nop
 8020ce8:	00000004 	.word	0x00000004

08020cec <_txe_mutex_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8020cec:	b590      	push	{r4, r7, lr}
 8020cee:	b085      	sub	sp, #20
 8020cf0:	af00      	add	r7, sp, #0
 8020cf2:	6078      	str	r0, [r7, #4]
 8020cf4:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) wait_option, 0);
 8020cf6:	4b07      	ldr	r3, [pc, #28]	; (8020d14 <_txe_mutex_get+0x28>)
 8020cf8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020cfc:	681c      	ldr	r4, [r3, #0]
 8020cfe:	6879      	ldr	r1, [r7, #4]
 8020d00:	2300      	movs	r3, #0
 8020d02:	683a      	ldr	r2, [r7, #0]
 8020d04:	201c      	movs	r0, #28
 8020d06:	47a0      	blx	r4
 8020d08:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020d0a:	68fb      	ldr	r3, [r7, #12]
}
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	3714      	adds	r7, #20
 8020d10:	46bd      	mov	sp, r7
 8020d12:	bd90      	pop	{r4, r7, pc}
 8020d14:	00000004 	.word	0x00000004

08020d18 <_txe_mutex_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner, TX_THREAD **first_suspended, ULONG *suspended_count, TX_MUTEX **next_mutex)
{
 8020d18:	b590      	push	{r4, r7, lr}
 8020d1a:	b08b      	sub	sp, #44	; 0x2c
 8020d1c:	af00      	add	r7, sp, #0
 8020d1e:	60f8      	str	r0, [r7, #12]
 8020d20:	60b9      	str	r1, [r7, #8]
 8020d22:	607a      	str	r2, [r7, #4]
 8020d24:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) count;
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) owner;
 8020d2a:	683b      	ldr	r3, [r7, #0]
 8020d2c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d30:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d34:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_mutex;
 8020d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d38:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020d3a:	4b08      	ldr	r3, [pc, #32]	; (8020d5c <_txe_mutex_info_get+0x44>)
 8020d3c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d40:	681c      	ldr	r4, [r3, #0]
 8020d42:	68f9      	ldr	r1, [r7, #12]
 8020d44:	68ba      	ldr	r2, [r7, #8]
 8020d46:	f107 0310 	add.w	r3, r7, #16
 8020d4a:	201d      	movs	r0, #29
 8020d4c:	47a0      	blx	r4
 8020d4e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d52:	4618      	mov	r0, r3
 8020d54:	372c      	adds	r7, #44	; 0x2c
 8020d56:	46bd      	mov	sp, r7
 8020d58:	bd90      	pop	{r4, r7, pc}
 8020d5a:	bf00      	nop
 8020d5c:	00000004 	.word	0x00000004

08020d60 <_tx_mutex_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020d60:	b590      	push	{r4, r7, lr}
 8020d62:	b08b      	sub	sp, #44	; 0x2c
 8020d64:	af00      	add	r7, sp, #0
 8020d66:	60f8      	str	r0, [r7, #12]
 8020d68:	60b9      	str	r1, [r7, #8]
 8020d6a:	607a      	str	r2, [r7, #4]
 8020d6c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 8020d72:	683b      	ldr	r3, [r7, #0]
 8020d74:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 8020d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d78:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) inversions;
 8020d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d7c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) inheritances;
 8020d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d80:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) mutex_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 8020d82:	4b08      	ldr	r3, [pc, #32]	; (8020da4 <_tx_mutex_performance_info_get+0x44>)
 8020d84:	f859 3003 	ldr.w	r3, [r9, r3]
 8020d88:	681c      	ldr	r4, [r3, #0]
 8020d8a:	68f9      	ldr	r1, [r7, #12]
 8020d8c:	68ba      	ldr	r2, [r7, #8]
 8020d8e:	f107 0310 	add.w	r3, r7, #16
 8020d92:	201e      	movs	r0, #30
 8020d94:	47a0      	blx	r4
 8020d96:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020d9a:	4618      	mov	r0, r3
 8020d9c:	372c      	adds	r7, #44	; 0x2c
 8020d9e:	46bd      	mov	sp, r7
 8020da0:	bd90      	pop	{r4, r7, pc}
 8020da2:	bf00      	nop
 8020da4:	00000004 	.word	0x00000004

08020da8 <_tx_mutex_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8020da8:	b590      	push	{r4, r7, lr}
 8020daa:	b08b      	sub	sp, #44	; 0x2c
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	60f8      	str	r0, [r7, #12]
 8020db0:	60b9      	str	r1, [r7, #8]
 8020db2:	607a      	str	r2, [r7, #4]
 8020db4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) inversions;
 8020dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020dc0:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) inheritances;
 8020dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020dc4:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 8020dc6:	4b08      	ldr	r3, [pc, #32]	; (8020de8 <_tx_mutex_performance_system_info_get+0x40>)
 8020dc8:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dcc:	681c      	ldr	r4, [r3, #0]
 8020dce:	68f9      	ldr	r1, [r7, #12]
 8020dd0:	68ba      	ldr	r2, [r7, #8]
 8020dd2:	f107 0314 	add.w	r3, r7, #20
 8020dd6:	201f      	movs	r0, #31
 8020dd8:	47a0      	blx	r4
 8020dda:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020dde:	4618      	mov	r0, r3
 8020de0:	372c      	adds	r7, #44	; 0x2c
 8020de2:	46bd      	mov	sp, r7
 8020de4:	bd90      	pop	{r4, r7, pc}
 8020de6:	bf00      	nop
 8020de8:	00000004 	.word	0x00000004

08020dec <_txe_mutex_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8020dec:	b590      	push	{r4, r7, lr}
 8020dee:	b085      	sub	sp, #20
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PRIORITIZE_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020df4:	4b07      	ldr	r3, [pc, #28]	; (8020e14 <_txe_mutex_prioritize+0x28>)
 8020df6:	f859 3003 	ldr.w	r3, [r9, r3]
 8020dfa:	681c      	ldr	r4, [r3, #0]
 8020dfc:	6879      	ldr	r1, [r7, #4]
 8020dfe:	2300      	movs	r3, #0
 8020e00:	2200      	movs	r2, #0
 8020e02:	2020      	movs	r0, #32
 8020e04:	47a0      	blx	r4
 8020e06:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e08:	68fb      	ldr	r3, [r7, #12]
}
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	3714      	adds	r7, #20
 8020e0e:	46bd      	mov	sp, r7
 8020e10:	bd90      	pop	{r4, r7, pc}
 8020e12:	bf00      	nop
 8020e14:	00000004 	.word	0x00000004

08020e18 <_txe_mutex_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8020e18:	b590      	push	{r4, r7, lr}
 8020e1a:	b085      	sub	sp, #20
 8020e1c:	af00      	add	r7, sp, #0
 8020e1e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_MUTEX_PUT_CALL, (ALIGN_TYPE) mutex_ptr, 0, 0);
 8020e20:	4b07      	ldr	r3, [pc, #28]	; (8020e40 <_txe_mutex_put+0x28>)
 8020e22:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e26:	681c      	ldr	r4, [r3, #0]
 8020e28:	6879      	ldr	r1, [r7, #4]
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	2200      	movs	r2, #0
 8020e2e:	2021      	movs	r0, #33	; 0x21
 8020e30:	47a0      	blx	r4
 8020e32:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020e34:	68fb      	ldr	r3, [r7, #12]
}
 8020e36:	4618      	mov	r0, r3
 8020e38:	3714      	adds	r7, #20
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd90      	pop	{r4, r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	00000004 	.word	0x00000004

08020e44 <_txe_queue_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8020e44:	b590      	push	{r4, r7, lr}
 8020e46:	b08b      	sub	sp, #44	; 0x2c
 8020e48:	af00      	add	r7, sp, #0
 8020e4a:	60f8      	str	r0, [r7, #12]
 8020e4c:	60b9      	str	r1, [r7, #8]
 8020e4e:	607a      	str	r2, [r7, #4]
 8020e50:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) message_size;
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) queue_start;
 8020e56:	683b      	ldr	r3, [r7, #0]
 8020e58:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) queue_size;
 8020e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e5c:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) queue_control_block_size;
 8020e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020e60:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_CREATE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 8020e62:	4b08      	ldr	r3, [pc, #32]	; (8020e84 <_txe_queue_create+0x40>)
 8020e64:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e68:	681c      	ldr	r4, [r3, #0]
 8020e6a:	68f9      	ldr	r1, [r7, #12]
 8020e6c:	68ba      	ldr	r2, [r7, #8]
 8020e6e:	f107 0314 	add.w	r3, r7, #20
 8020e72:	2022      	movs	r0, #34	; 0x22
 8020e74:	47a0      	blx	r4
 8020e76:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020e7a:	4618      	mov	r0, r3
 8020e7c:	372c      	adds	r7, #44	; 0x2c
 8020e7e:	46bd      	mov	sp, r7
 8020e80:	bd90      	pop	{r4, r7, pc}
 8020e82:	bf00      	nop
 8020e84:	00000004 	.word	0x00000004

08020e88 <_txe_queue_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 8020e88:	b590      	push	{r4, r7, lr}
 8020e8a:	b085      	sub	sp, #20
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_DELETE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020e90:	4b07      	ldr	r3, [pc, #28]	; (8020eb0 <_txe_queue_delete+0x28>)
 8020e92:	f859 3003 	ldr.w	r3, [r9, r3]
 8020e96:	681c      	ldr	r4, [r3, #0]
 8020e98:	6879      	ldr	r1, [r7, #4]
 8020e9a:	2300      	movs	r3, #0
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	2023      	movs	r0, #35	; 0x23
 8020ea0:	47a0      	blx	r4
 8020ea2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ea4:	68fb      	ldr	r3, [r7, #12]
}
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	3714      	adds	r7, #20
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	bd90      	pop	{r4, r7, pc}
 8020eae:	bf00      	nop
 8020eb0:	00000004 	.word	0x00000004

08020eb4 <_txe_queue_flush>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8020eb4:	b590      	push	{r4, r7, lr}
 8020eb6:	b085      	sub	sp, #20
 8020eb8:	af00      	add	r7, sp, #0
 8020eba:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FLUSH_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020ebc:	4b07      	ldr	r3, [pc, #28]	; (8020edc <_txe_queue_flush+0x28>)
 8020ebe:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ec2:	681c      	ldr	r4, [r3, #0]
 8020ec4:	6879      	ldr	r1, [r7, #4]
 8020ec6:	2300      	movs	r3, #0
 8020ec8:	2200      	movs	r2, #0
 8020eca:	2024      	movs	r0, #36	; 0x24
 8020ecc:	47a0      	blx	r4
 8020ece:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8020ed0:	68fb      	ldr	r3, [r7, #12]
}
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	3714      	adds	r7, #20
 8020ed6:	46bd      	mov	sp, r7
 8020ed8:	bd90      	pop	{r4, r7, pc}
 8020eda:	bf00      	nop
 8020edc:	00000004 	.word	0x00000004

08020ee0 <_txe_queue_front_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8020ee0:	b590      	push	{r4, r7, lr}
 8020ee2:	b087      	sub	sp, #28
 8020ee4:	af00      	add	r7, sp, #0
 8020ee6:	60f8      	str	r0, [r7, #12]
 8020ee8:	60b9      	str	r1, [r7, #8]
 8020eea:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_FRONT_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 8020eec:	4b07      	ldr	r3, [pc, #28]	; (8020f0c <_txe_queue_front_send+0x2c>)
 8020eee:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ef2:	681c      	ldr	r4, [r3, #0]
 8020ef4:	68f9      	ldr	r1, [r7, #12]
 8020ef6:	68ba      	ldr	r2, [r7, #8]
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	2025      	movs	r0, #37	; 0x25
 8020efc:	47a0      	blx	r4
 8020efe:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8020f00:	697b      	ldr	r3, [r7, #20]
}
 8020f02:	4618      	mov	r0, r3
 8020f04:	371c      	adds	r7, #28
 8020f06:	46bd      	mov	sp, r7
 8020f08:	bd90      	pop	{r4, r7, pc}
 8020f0a:	bf00      	nop
 8020f0c:	00000004 	.word	0x00000004

08020f10 <_txe_queue_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage, TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8020f10:	b590      	push	{r4, r7, lr}
 8020f12:	b08b      	sub	sp, #44	; 0x2c
 8020f14:	af00      	add	r7, sp, #0
 8020f16:	60f8      	str	r0, [r7, #12]
 8020f18:	60b9      	str	r1, [r7, #8]
 8020f1a:	607a      	str	r2, [r7, #4]
 8020f1c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) enqueued;
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) available_storage;
 8020f22:	683b      	ldr	r3, [r7, #0]
 8020f24:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) first_suspended;
 8020f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f28:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) suspended_count;
 8020f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f2c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) next_queue;
 8020f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f30:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 8020f32:	4b08      	ldr	r3, [pc, #32]	; (8020f54 <_txe_queue_info_get+0x44>)
 8020f34:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f38:	681c      	ldr	r4, [r3, #0]
 8020f3a:	68f9      	ldr	r1, [r7, #12]
 8020f3c:	68ba      	ldr	r2, [r7, #8]
 8020f3e:	f107 0310 	add.w	r3, r7, #16
 8020f42:	2026      	movs	r0, #38	; 0x26
 8020f44:	47a0      	blx	r4
 8020f46:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f4a:	4618      	mov	r0, r3
 8020f4c:	372c      	adds	r7, #44	; 0x2c
 8020f4e:	46bd      	mov	sp, r7
 8020f50:	bd90      	pop	{r4, r7, pc}
 8020f52:	bf00      	nop
 8020f54:	00000004 	.word	0x00000004

08020f58 <_tx_queue_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020f58:	b590      	push	{r4, r7, lr}
 8020f5a:	b08b      	sub	sp, #44	; 0x2c
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	60f8      	str	r0, [r7, #12]
 8020f60:	60b9      	str	r1, [r7, #8]
 8020f62:	607a      	str	r2, [r7, #4]
 8020f64:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[5];

    extra_parameters[0] = (ALIGN_TYPE) messages_received;
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) empty_suspensions;
 8020f6a:	683b      	ldr	r3, [r7, #0]
 8020f6c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) full_suspensions;
 8020f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f70:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) full_errors;
 8020f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f74:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) timeouts;
 8020f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f78:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) extra_parameters);
 8020f7a:	4b08      	ldr	r3, [pc, #32]	; (8020f9c <_tx_queue_performance_info_get+0x44>)
 8020f7c:	f859 3003 	ldr.w	r3, [r9, r3]
 8020f80:	681c      	ldr	r4, [r3, #0]
 8020f82:	68f9      	ldr	r1, [r7, #12]
 8020f84:	68ba      	ldr	r2, [r7, #8]
 8020f86:	f107 0310 	add.w	r3, r7, #16
 8020f8a:	2027      	movs	r0, #39	; 0x27
 8020f8c:	47a0      	blx	r4
 8020f8e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020f92:	4618      	mov	r0, r3
 8020f94:	372c      	adds	r7, #44	; 0x2c
 8020f96:	46bd      	mov	sp, r7
 8020f98:	bd90      	pop	{r4, r7, pc}
 8020f9a:	bf00      	nop
 8020f9c:	00000004 	.word	0x00000004

08020fa0 <_tx_queue_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received, ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8020fa0:	b590      	push	{r4, r7, lr}
 8020fa2:	b08b      	sub	sp, #44	; 0x2c
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	60f8      	str	r0, [r7, #12]
 8020fa8:	60b9      	str	r1, [r7, #8]
 8020faa:	607a      	str	r2, [r7, #4]
 8020fac:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) empty_suspensions;
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) full_suspensions;
 8020fb2:	683b      	ldr	r3, [r7, #0]
 8020fb4:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) full_errors;
 8020fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020fb8:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) timeouts;
 8020fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020fbc:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) messages_sent, (ALIGN_TYPE) messages_received, (ALIGN_TYPE) extra_parameters);
 8020fbe:	4b08      	ldr	r3, [pc, #32]	; (8020fe0 <_tx_queue_performance_system_info_get+0x40>)
 8020fc0:	f859 3003 	ldr.w	r3, [r9, r3]
 8020fc4:	681c      	ldr	r4, [r3, #0]
 8020fc6:	68f9      	ldr	r1, [r7, #12]
 8020fc8:	68ba      	ldr	r2, [r7, #8]
 8020fca:	f107 0314 	add.w	r3, r7, #20
 8020fce:	2028      	movs	r0, #40	; 0x28
 8020fd0:	47a0      	blx	r4
 8020fd2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8020fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	372c      	adds	r7, #44	; 0x2c
 8020fda:	46bd      	mov	sp, r7
 8020fdc:	bd90      	pop	{r4, r7, pc}
 8020fde:	bf00      	nop
 8020fe0:	00000004 	.word	0x00000004

08020fe4 <_txe_queue_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8020fe4:	b590      	push	{r4, r7, lr}
 8020fe6:	b085      	sub	sp, #20
 8020fe8:	af00      	add	r7, sp, #0
 8020fea:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_PRIORITIZE_CALL, (ALIGN_TYPE) queue_ptr, 0, 0);
 8020fec:	4b07      	ldr	r3, [pc, #28]	; (802100c <_txe_queue_prioritize+0x28>)
 8020fee:	f859 3003 	ldr.w	r3, [r9, r3]
 8020ff2:	681c      	ldr	r4, [r3, #0]
 8020ff4:	6879      	ldr	r1, [r7, #4]
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	2200      	movs	r2, #0
 8020ffa:	2029      	movs	r0, #41	; 0x29
 8020ffc:	47a0      	blx	r4
 8020ffe:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021000:	68fb      	ldr	r3, [r7, #12]
}
 8021002:	4618      	mov	r0, r3
 8021004:	3714      	adds	r7, #20
 8021006:	46bd      	mov	sp, r7
 8021008:	bd90      	pop	{r4, r7, pc}
 802100a:	bf00      	nop
 802100c:	00000004 	.word	0x00000004

08021010 <_txe_queue_receive>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8021010:	b590      	push	{r4, r7, lr}
 8021012:	b087      	sub	sp, #28
 8021014:	af00      	add	r7, sp, #0
 8021016:	60f8      	str	r0, [r7, #12]
 8021018:	60b9      	str	r1, [r7, #8]
 802101a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_RECEIVE_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) destination_ptr, (ALIGN_TYPE) wait_option);
 802101c:	4b07      	ldr	r3, [pc, #28]	; (802103c <_txe_queue_receive+0x2c>)
 802101e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021022:	681c      	ldr	r4, [r3, #0]
 8021024:	68f9      	ldr	r1, [r7, #12]
 8021026:	68ba      	ldr	r2, [r7, #8]
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	202a      	movs	r0, #42	; 0x2a
 802102c:	47a0      	blx	r4
 802102e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021030:	697b      	ldr	r3, [r7, #20]
}
 8021032:	4618      	mov	r0, r3
 8021034:	371c      	adds	r7, #28
 8021036:	46bd      	mov	sp, r7
 8021038:	bd90      	pop	{r4, r7, pc}
 802103a:	bf00      	nop
 802103c:	00000004 	.word	0x00000004

08021040 <_txe_queue_send>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8021040:	b590      	push	{r4, r7, lr}
 8021042:	b087      	sub	sp, #28
 8021044:	af00      	add	r7, sp, #0
 8021046:	60f8      	str	r0, [r7, #12]
 8021048:	60b9      	str	r1, [r7, #8]
 802104a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) source_ptr, (ALIGN_TYPE) wait_option);
 802104c:	4b07      	ldr	r3, [pc, #28]	; (802106c <_txe_queue_send+0x2c>)
 802104e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021052:	681c      	ldr	r4, [r3, #0]
 8021054:	68f9      	ldr	r1, [r7, #12]
 8021056:	68ba      	ldr	r2, [r7, #8]
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	202b      	movs	r0, #43	; 0x2b
 802105c:	47a0      	blx	r4
 802105e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021060:	697b      	ldr	r3, [r7, #20]
}
 8021062:	4618      	mov	r0, r3
 8021064:	371c      	adds	r7, #28
 8021066:	46bd      	mov	sp, r7
 8021068:	bd90      	pop	{r4, r7, pc}
 802106a:	bf00      	nop
 802106c:	00000004 	.word	0x00000004

08021070 <_txe_queue_send_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 8021070:	b590      	push	{r4, r7, lr}
 8021072:	b085      	sub	sp, #20
 8021074:	af00      	add	r7, sp, #0
 8021076:	6078      	str	r0, [r7, #4]
 8021078:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_QUEUE_SEND_NOTIFY_CALL, (ALIGN_TYPE) queue_ptr, (ALIGN_TYPE) queue_send_notify, 0);
 802107a:	4b07      	ldr	r3, [pc, #28]	; (8021098 <_txe_queue_send_notify+0x28>)
 802107c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021080:	681c      	ldr	r4, [r3, #0]
 8021082:	6879      	ldr	r1, [r7, #4]
 8021084:	683a      	ldr	r2, [r7, #0]
 8021086:	2300      	movs	r3, #0
 8021088:	202c      	movs	r0, #44	; 0x2c
 802108a:	47a0      	blx	r4
 802108c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802108e:	68fb      	ldr	r3, [r7, #12]
}
 8021090:	4618      	mov	r0, r3
 8021092:	3714      	adds	r7, #20
 8021094:	46bd      	mov	sp, r7
 8021096:	bd90      	pop	{r4, r7, pc}
 8021098:	00000004 	.word	0x00000004

0802109c <_txe_semaphore_ceiling_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 802109c:	b590      	push	{r4, r7, lr}
 802109e:	b085      	sub	sp, #20
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
 80210a4:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CEILING_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) ceiling, 0);
 80210a6:	4b07      	ldr	r3, [pc, #28]	; (80210c4 <_txe_semaphore_ceiling_put+0x28>)
 80210a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80210ac:	681c      	ldr	r4, [r3, #0]
 80210ae:	6879      	ldr	r1, [r7, #4]
 80210b0:	2300      	movs	r3, #0
 80210b2:	683a      	ldr	r2, [r7, #0]
 80210b4:	202d      	movs	r0, #45	; 0x2d
 80210b6:	47a0      	blx	r4
 80210b8:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80210ba:	68fb      	ldr	r3, [r7, #12]
}
 80210bc:	4618      	mov	r0, r3
 80210be:	3714      	adds	r7, #20
 80210c0:	46bd      	mov	sp, r7
 80210c2:	bd90      	pop	{r4, r7, pc}
 80210c4:	00000004 	.word	0x00000004

080210c8 <_txe_semaphore_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80210c8:	b590      	push	{r4, r7, lr}
 80210ca:	b089      	sub	sp, #36	; 0x24
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	60f8      	str	r0, [r7, #12]
 80210d0:	60b9      	str	r1, [r7, #8]
 80210d2:	607a      	str	r2, [r7, #4]
 80210d4:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) initial_count;
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) semaphore_control_block_size;
 80210da:	683b      	ldr	r3, [r7, #0]
 80210dc:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_CREATE_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80210de:	4b08      	ldr	r3, [pc, #32]	; (8021100 <_txe_semaphore_create+0x38>)
 80210e0:	f859 3003 	ldr.w	r3, [r9, r3]
 80210e4:	681c      	ldr	r4, [r3, #0]
 80210e6:	68f9      	ldr	r1, [r7, #12]
 80210e8:	68ba      	ldr	r2, [r7, #8]
 80210ea:	f107 0314 	add.w	r3, r7, #20
 80210ee:	202e      	movs	r0, #46	; 0x2e
 80210f0:	47a0      	blx	r4
 80210f2:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80210f4:	69fb      	ldr	r3, [r7, #28]
}
 80210f6:	4618      	mov	r0, r3
 80210f8:	3724      	adds	r7, #36	; 0x24
 80210fa:	46bd      	mov	sp, r7
 80210fc:	bd90      	pop	{r4, r7, pc}
 80210fe:	bf00      	nop
 8021100:	00000004 	.word	0x00000004

08021104 <_txe_semaphore_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8021104:	b590      	push	{r4, r7, lr}
 8021106:	b085      	sub	sp, #20
 8021108:	af00      	add	r7, sp, #0
 802110a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_DELETE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 802110c:	4b07      	ldr	r3, [pc, #28]	; (802112c <_txe_semaphore_delete+0x28>)
 802110e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021112:	681c      	ldr	r4, [r3, #0]
 8021114:	6879      	ldr	r1, [r7, #4]
 8021116:	2300      	movs	r3, #0
 8021118:	2200      	movs	r2, #0
 802111a:	202f      	movs	r0, #47	; 0x2f
 802111c:	47a0      	blx	r4
 802111e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021120:	68fb      	ldr	r3, [r7, #12]
}
 8021122:	4618      	mov	r0, r3
 8021124:	3714      	adds	r7, #20
 8021126:	46bd      	mov	sp, r7
 8021128:	bd90      	pop	{r4, r7, pc}
 802112a:	bf00      	nop
 802112c:	00000004 	.word	0x00000004

08021130 <_txe_semaphore_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8021130:	b590      	push	{r4, r7, lr}
 8021132:	b085      	sub	sp, #20
 8021134:	af00      	add	r7, sp, #0
 8021136:	6078      	str	r0, [r7, #4]
 8021138:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) wait_option, 0);
 802113a:	4b07      	ldr	r3, [pc, #28]	; (8021158 <_txe_semaphore_get+0x28>)
 802113c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021140:	681c      	ldr	r4, [r3, #0]
 8021142:	6879      	ldr	r1, [r7, #4]
 8021144:	2300      	movs	r3, #0
 8021146:	683a      	ldr	r2, [r7, #0]
 8021148:	2030      	movs	r0, #48	; 0x30
 802114a:	47a0      	blx	r4
 802114c:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802114e:	68fb      	ldr	r3, [r7, #12]
}
 8021150:	4618      	mov	r0, r3
 8021152:	3714      	adds	r7, #20
 8021154:	46bd      	mov	sp, r7
 8021156:	bd90      	pop	{r4, r7, pc}
 8021158:	00000004 	.word	0x00000004

0802115c <_txe_semaphore_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, TX_THREAD **first_suspended, ULONG *suspended_count, TX_SEMAPHORE **next_semaphore)
{
 802115c:	b590      	push	{r4, r7, lr}
 802115e:	b08b      	sub	sp, #44	; 0x2c
 8021160:	af00      	add	r7, sp, #0
 8021162:	60f8      	str	r0, [r7, #12]
 8021164:	60b9      	str	r1, [r7, #8]
 8021166:	607a      	str	r2, [r7, #4]
 8021168:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) current_value;
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) first_suspended;
 802116e:	683b      	ldr	r3, [r7, #0]
 8021170:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) suspended_count;
 8021172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021174:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_semaphore;
 8021176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021178:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 802117a:	4b08      	ldr	r3, [pc, #32]	; (802119c <_txe_semaphore_info_get+0x40>)
 802117c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021180:	681c      	ldr	r4, [r3, #0]
 8021182:	68f9      	ldr	r1, [r7, #12]
 8021184:	68ba      	ldr	r2, [r7, #8]
 8021186:	f107 0314 	add.w	r3, r7, #20
 802118a:	2031      	movs	r0, #49	; 0x31
 802118c:	47a0      	blx	r4
 802118e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021192:	4618      	mov	r0, r3
 8021194:	372c      	adds	r7, #44	; 0x2c
 8021196:	46bd      	mov	sp, r7
 8021198:	bd90      	pop	{r4, r7, pc}
 802119a:	bf00      	nop
 802119c:	00000004 	.word	0x00000004

080211a0 <_tx_semaphore_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211a0:	b590      	push	{r4, r7, lr}
 80211a2:	b089      	sub	sp, #36	; 0x24
 80211a4:	af00      	add	r7, sp, #0
 80211a6:	60f8      	str	r0, [r7, #12]
 80211a8:	60b9      	str	r1, [r7, #8]
 80211aa:	607a      	str	r2, [r7, #4]
 80211ac:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) gets;
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) suspensions;
 80211b2:	683b      	ldr	r3, [r7, #0]
 80211b4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) timeouts;
 80211b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211b8:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) puts, (ALIGN_TYPE) extra_parameters);
 80211ba:	4b08      	ldr	r3, [pc, #32]	; (80211dc <_tx_semaphore_performance_info_get+0x3c>)
 80211bc:	f859 3003 	ldr.w	r3, [r9, r3]
 80211c0:	681c      	ldr	r4, [r3, #0]
 80211c2:	68f9      	ldr	r1, [r7, #12]
 80211c4:	68ba      	ldr	r2, [r7, #8]
 80211c6:	f107 0310 	add.w	r3, r7, #16
 80211ca:	2032      	movs	r0, #50	; 0x32
 80211cc:	47a0      	blx	r4
 80211ce:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 80211d0:	69fb      	ldr	r3, [r7, #28]
}
 80211d2:	4618      	mov	r0, r3
 80211d4:	3724      	adds	r7, #36	; 0x24
 80211d6:	46bd      	mov	sp, r7
 80211d8:	bd90      	pop	{r4, r7, pc}
 80211da:	bf00      	nop
 80211dc:	00000004 	.word	0x00000004

080211e0 <_tx_semaphore_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 80211e0:	b590      	push	{r4, r7, lr}
 80211e2:	b089      	sub	sp, #36	; 0x24
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	60f8      	str	r0, [r7, #12]
 80211e8:	60b9      	str	r1, [r7, #8]
 80211ea:	607a      	str	r2, [r7, #4]
 80211ec:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[2];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) timeouts;
 80211f2:	683b      	ldr	r3, [r7, #0]
 80211f4:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) puts, (ALIGN_TYPE) gets, (ALIGN_TYPE) extra_parameters);
 80211f6:	4b08      	ldr	r3, [pc, #32]	; (8021218 <_tx_semaphore_performance_system_info_get+0x38>)
 80211f8:	f859 3003 	ldr.w	r3, [r9, r3]
 80211fc:	681c      	ldr	r4, [r3, #0]
 80211fe:	68f9      	ldr	r1, [r7, #12]
 8021200:	68ba      	ldr	r2, [r7, #8]
 8021202:	f107 0314 	add.w	r3, r7, #20
 8021206:	2033      	movs	r0, #51	; 0x33
 8021208:	47a0      	blx	r4
 802120a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 802120c:	69fb      	ldr	r3, [r7, #28]
}
 802120e:	4618      	mov	r0, r3
 8021210:	3724      	adds	r7, #36	; 0x24
 8021212:	46bd      	mov	sp, r7
 8021214:	bd90      	pop	{r4, r7, pc}
 8021216:	bf00      	nop
 8021218:	00000004 	.word	0x00000004

0802121c <_txe_semaphore_prioritize>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 802121c:	b590      	push	{r4, r7, lr}
 802121e:	b085      	sub	sp, #20
 8021220:	af00      	add	r7, sp, #0
 8021222:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PRIORITIZE_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021224:	4b07      	ldr	r3, [pc, #28]	; (8021244 <_txe_semaphore_prioritize+0x28>)
 8021226:	f859 3003 	ldr.w	r3, [r9, r3]
 802122a:	681c      	ldr	r4, [r3, #0]
 802122c:	6879      	ldr	r1, [r7, #4]
 802122e:	2300      	movs	r3, #0
 8021230:	2200      	movs	r2, #0
 8021232:	2034      	movs	r0, #52	; 0x34
 8021234:	47a0      	blx	r4
 8021236:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021238:	68fb      	ldr	r3, [r7, #12]
}
 802123a:	4618      	mov	r0, r3
 802123c:	3714      	adds	r7, #20
 802123e:	46bd      	mov	sp, r7
 8021240:	bd90      	pop	{r4, r7, pc}
 8021242:	bf00      	nop
 8021244:	00000004 	.word	0x00000004

08021248 <_txe_semaphore_put>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8021248:	b590      	push	{r4, r7, lr}
 802124a:	b085      	sub	sp, #20
 802124c:	af00      	add	r7, sp, #0
 802124e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_CALL, (ALIGN_TYPE) semaphore_ptr, 0, 0);
 8021250:	4b07      	ldr	r3, [pc, #28]	; (8021270 <_txe_semaphore_put+0x28>)
 8021252:	f859 3003 	ldr.w	r3, [r9, r3]
 8021256:	681c      	ldr	r4, [r3, #0]
 8021258:	6879      	ldr	r1, [r7, #4]
 802125a:	2300      	movs	r3, #0
 802125c:	2200      	movs	r2, #0
 802125e:	2035      	movs	r0, #53	; 0x35
 8021260:	47a0      	blx	r4
 8021262:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021264:	68fb      	ldr	r3, [r7, #12]
}
 8021266:	4618      	mov	r0, r3
 8021268:	3714      	adds	r7, #20
 802126a:	46bd      	mov	sp, r7
 802126c:	bd90      	pop	{r4, r7, pc}
 802126e:	bf00      	nop
 8021270:	00000004 	.word	0x00000004

08021274 <_txe_semaphore_put_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8021274:	b590      	push	{r4, r7, lr}
 8021276:	b085      	sub	sp, #20
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
 802127c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_SEMAPHORE_PUT_NOTIFY_CALL, (ALIGN_TYPE) semaphore_ptr, (ALIGN_TYPE) semaphore_put_notify, 0);
 802127e:	4b07      	ldr	r3, [pc, #28]	; (802129c <_txe_semaphore_put_notify+0x28>)
 8021280:	f859 3003 	ldr.w	r3, [r9, r3]
 8021284:	681c      	ldr	r4, [r3, #0]
 8021286:	6879      	ldr	r1, [r7, #4]
 8021288:	683a      	ldr	r2, [r7, #0]
 802128a:	2300      	movs	r3, #0
 802128c:	2036      	movs	r0, #54	; 0x36
 802128e:	47a0      	blx	r4
 8021290:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021292:	68fb      	ldr	r3, [r7, #12]
}
 8021294:	4618      	mov	r0, r3
 8021296:	3714      	adds	r7, #20
 8021298:	46bd      	mov	sp, r7
 802129a:	bd90      	pop	{r4, r7, pc}
 802129c:	00000004 	.word	0x00000004

080212a0 <_txe_thread_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG entry_input), ULONG entry_input, VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold, ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80212a0:	b590      	push	{r4, r7, lr}
 80212a2:	b08f      	sub	sp, #60	; 0x3c
 80212a4:	af00      	add	r7, sp, #0
 80212a6:	60f8      	str	r0, [r7, #12]
 80212a8:	60b9      	str	r1, [r7, #8]
 80212aa:	607a      	str	r2, [r7, #4]
 80212ac:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) entry_function;
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) entry_input;
 80212b2:	683b      	ldr	r3, [r7, #0]
 80212b4:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) stack_start;
 80212b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212b8:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) stack_size;
 80212ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80212bc:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) priority;
 80212be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80212c0:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) preempt_threshold;
 80212c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212c4:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) time_slice;
 80212c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80212c8:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) auto_start;
 80212ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80212cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) thread_control_block_size;
 80212ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80212d0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_CREATE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 80212d2:	4b08      	ldr	r3, [pc, #32]	; (80212f4 <_txe_thread_create+0x54>)
 80212d4:	f859 3003 	ldr.w	r3, [r9, r3]
 80212d8:	681c      	ldr	r4, [r3, #0]
 80212da:	68f9      	ldr	r1, [r7, #12]
 80212dc:	68ba      	ldr	r2, [r7, #8]
 80212de:	f107 0310 	add.w	r3, r7, #16
 80212e2:	2037      	movs	r0, #55	; 0x37
 80212e4:	47a0      	blx	r4
 80212e6:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 80212e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80212ea:	4618      	mov	r0, r3
 80212ec:	373c      	adds	r7, #60	; 0x3c
 80212ee:	46bd      	mov	sp, r7
 80212f0:	bd90      	pop	{r4, r7, pc}
 80212f2:	bf00      	nop
 80212f4:	00000004 	.word	0x00000004

080212f8 <_txe_thread_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80212f8:	b590      	push	{r4, r7, lr}
 80212fa:	b085      	sub	sp, #20
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_DELETE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021300:	4b07      	ldr	r3, [pc, #28]	; (8021320 <_txe_thread_delete+0x28>)
 8021302:	f859 3003 	ldr.w	r3, [r9, r3]
 8021306:	681c      	ldr	r4, [r3, #0]
 8021308:	6879      	ldr	r1, [r7, #4]
 802130a:	2300      	movs	r3, #0
 802130c:	2200      	movs	r2, #0
 802130e:	2038      	movs	r0, #56	; 0x38
 8021310:	47a0      	blx	r4
 8021312:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021314:	68fb      	ldr	r3, [r7, #12]
}
 8021316:	4618      	mov	r0, r3
 8021318:	3714      	adds	r7, #20
 802131a:	46bd      	mov	sp, r7
 802131c:	bd90      	pop	{r4, r7, pc}
 802131e:	bf00      	nop
 8021320:	00000004 	.word	0x00000004

08021324 <_txe_thread_entry_exit_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 8021324:	b590      	push	{r4, r7, lr}
 8021326:	b085      	sub	sp, #20
 8021328:	af00      	add	r7, sp, #0
 802132a:	6078      	str	r0, [r7, #4]
 802132c:	6039      	str	r1, [r7, #0]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) thread_entry_exit_notify, 0);
 802132e:	4b07      	ldr	r3, [pc, #28]	; (802134c <_txe_thread_entry_exit_notify+0x28>)
 8021330:	f859 3003 	ldr.w	r3, [r9, r3]
 8021334:	681c      	ldr	r4, [r3, #0]
 8021336:	6879      	ldr	r1, [r7, #4]
 8021338:	683a      	ldr	r2, [r7, #0]
 802133a:	2300      	movs	r3, #0
 802133c:	2039      	movs	r0, #57	; 0x39
 802133e:	47a0      	blx	r4
 8021340:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021342:	68fb      	ldr	r3, [r7, #12]
}
 8021344:	4618      	mov	r0, r3
 8021346:	3714      	adds	r7, #20
 8021348:	46bd      	mov	sp, r7
 802134a:	bd90      	pop	{r4, r7, pc}
 802134c:	00000004 	.word	0x00000004

08021350 <_tx_thread_identify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
TX_THREAD *_tx_thread_identify(VOID)
{
 8021350:	b590      	push	{r4, r7, lr}
 8021352:	b083      	sub	sp, #12
 8021354:	af00      	add	r7, sp, #0

TX_THREAD *return_value;

    /* Call module manager dispatcher.  */
    return_value = (TX_THREAD *) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_IDENTIFY_CALL, 0, 0, 0);
 8021356:	4b08      	ldr	r3, [pc, #32]	; (8021378 <_tx_thread_identify+0x28>)
 8021358:	f859 3003 	ldr.w	r3, [r9, r3]
 802135c:	681c      	ldr	r4, [r3, #0]
 802135e:	2300      	movs	r3, #0
 8021360:	2200      	movs	r2, #0
 8021362:	2100      	movs	r1, #0
 8021364:	203a      	movs	r0, #58	; 0x3a
 8021366:	47a0      	blx	r4
 8021368:	4603      	mov	r3, r0
 802136a:	607b      	str	r3, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 802136c:	687b      	ldr	r3, [r7, #4]
}
 802136e:	4618      	mov	r0, r3
 8021370:	370c      	adds	r7, #12
 8021372:	46bd      	mov	sp, r7
 8021374:	bd90      	pop	{r4, r7, pc}
 8021376:	bf00      	nop
 8021378:	00000004 	.word	0x00000004

0802137c <_txe_thread_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, UINT *priority, UINT *preemption_threshold, ULONG *time_slice, TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 802137c:	b590      	push	{r4, r7, lr}
 802137e:	b08d      	sub	sp, #52	; 0x34
 8021380:	af00      	add	r7, sp, #0
 8021382:	60f8      	str	r0, [r7, #12]
 8021384:	60b9      	str	r1, [r7, #8]
 8021386:	607a      	str	r2, [r7, #4]
 8021388:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[7];

    extra_parameters[0] = (ALIGN_TYPE) state;
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) run_count;
 802138e:	683b      	ldr	r3, [r7, #0]
 8021390:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority;
 8021392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021394:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) preemption_threshold;
 8021396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021398:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slice;
 802139a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802139c:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) next_thread;
 802139e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80213a0:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) next_suspended_thread;
 80213a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80213a4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80213a6:	4b08      	ldr	r3, [pc, #32]	; (80213c8 <_txe_thread_info_get+0x4c>)
 80213a8:	f859 3003 	ldr.w	r3, [r9, r3]
 80213ac:	681c      	ldr	r4, [r3, #0]
 80213ae:	68f9      	ldr	r1, [r7, #12]
 80213b0:	68ba      	ldr	r2, [r7, #8]
 80213b2:	f107 0310 	add.w	r3, r7, #16
 80213b6:	203b      	movs	r0, #59	; 0x3b
 80213b8:	47a0      	blx	r4
 80213ba:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 80213bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80213be:	4618      	mov	r0, r3
 80213c0:	3734      	adds	r7, #52	; 0x34
 80213c2:	46bd      	mov	sp, r7
 80213c4:	bd90      	pop	{r4, r7, pc}
 80213c6:	bf00      	nop
 80213c8:	00000004 	.word	0x00000004

080213cc <_tx_thread_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_interrupt_control(UINT new_posture)
{
 80213cc:	b590      	push	{r4, r7, lr}
 80213ce:	b085      	sub	sp, #20
 80213d0:	af00      	add	r7, sp, #0
 80213d2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 80213d4:	4b07      	ldr	r3, [pc, #28]	; (80213f4 <_tx_thread_interrupt_control+0x28>)
 80213d6:	f859 3003 	ldr.w	r3, [r9, r3]
 80213da:	681c      	ldr	r4, [r3, #0]
 80213dc:	2300      	movs	r3, #0
 80213de:	2200      	movs	r2, #0
 80213e0:	6879      	ldr	r1, [r7, #4]
 80213e2:	2019      	movs	r0, #25
 80213e4:	47a0      	blx	r4
 80213e6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80213e8:	68fb      	ldr	r3, [r7, #12]
}
 80213ea:	4618      	mov	r0, r3
 80213ec:	3714      	adds	r7, #20
 80213ee:	46bd      	mov	sp, r7
 80213f0:	bd90      	pop	{r4, r7, pc}
 80213f2:	bf00      	nop
 80213f4:	00000004 	.word	0x00000004

080213f8 <_tx_thread_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 80213f8:	b590      	push	{r4, r7, lr}
 80213fa:	b08f      	sub	sp, #60	; 0x3c
 80213fc:	af00      	add	r7, sp, #0
 80213fe:	60f8      	str	r0, [r7, #12]
 8021400:	60b9      	str	r1, [r7, #8]
 8021402:	607a      	str	r2, [r7, #4]
 8021404:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) suspensions;
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) solicited_preemptions;
 802140a:	683b      	ldr	r3, [r7, #0]
 802140c:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) interrupt_preemptions;
 802140e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021410:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) priority_inversions;
 8021412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021414:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) time_slices;
 8021416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021418:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) relinquishes;
 802141a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802141c:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) timeouts;
 802141e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021420:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) wait_aborts;
 8021422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021424:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) last_preempted_by;
 8021426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021428:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) extra_parameters);
 802142a:	4b08      	ldr	r3, [pc, #32]	; (802144c <_tx_thread_performance_info_get+0x54>)
 802142c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021430:	681c      	ldr	r4, [r3, #0]
 8021432:	68f9      	ldr	r1, [r7, #12]
 8021434:	68ba      	ldr	r2, [r7, #8]
 8021436:	f107 0310 	add.w	r3, r7, #16
 802143a:	203c      	movs	r0, #60	; 0x3c
 802143c:	47a0      	blx	r4
 802143e:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021442:	4618      	mov	r0, r3
 8021444:	373c      	adds	r7, #60	; 0x3c
 8021446:	46bd      	mov	sp, r7
 8021448:	bd90      	pop	{r4, r7, pc}
 802144a:	bf00      	nop
 802144c:	00000004 	.word	0x00000004

08021450 <_tx_thread_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions, ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions, ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, ULONG *non_idle_returns, ULONG *idle_returns)
{
 8021450:	b590      	push	{r4, r7, lr}
 8021452:	b08f      	sub	sp, #60	; 0x3c
 8021454:	af00      	add	r7, sp, #0
 8021456:	60f8      	str	r0, [r7, #12]
 8021458:	60b9      	str	r1, [r7, #8]
 802145a:	607a      	str	r2, [r7, #4]
 802145c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[9];

    extra_parameters[0] = (ALIGN_TYPE) solicited_preemptions;
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) interrupt_preemptions;
 8021462:	683b      	ldr	r3, [r7, #0]
 8021464:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) priority_inversions;
 8021466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021468:	61bb      	str	r3, [r7, #24]
    extra_parameters[3] = (ALIGN_TYPE) time_slices;
 802146a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802146c:	61fb      	str	r3, [r7, #28]
    extra_parameters[4] = (ALIGN_TYPE) relinquishes;
 802146e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021470:	623b      	str	r3, [r7, #32]
    extra_parameters[5] = (ALIGN_TYPE) timeouts;
 8021472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021474:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[6] = (ALIGN_TYPE) wait_aborts;
 8021476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021478:	62bb      	str	r3, [r7, #40]	; 0x28
    extra_parameters[7] = (ALIGN_TYPE) non_idle_returns;
 802147a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    extra_parameters[8] = (ALIGN_TYPE) idle_returns;
 802147e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021480:	633b      	str	r3, [r7, #48]	; 0x30

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) resumptions, (ALIGN_TYPE) suspensions, (ALIGN_TYPE) extra_parameters);
 8021482:	4b08      	ldr	r3, [pc, #32]	; (80214a4 <_tx_thread_performance_system_info_get+0x54>)
 8021484:	f859 3003 	ldr.w	r3, [r9, r3]
 8021488:	681c      	ldr	r4, [r3, #0]
 802148a:	68f9      	ldr	r1, [r7, #12]
 802148c:	68ba      	ldr	r2, [r7, #8]
 802148e:	f107 0310 	add.w	r3, r7, #16
 8021492:	203d      	movs	r0, #61	; 0x3d
 8021494:	47a0      	blx	r4
 8021496:	6378      	str	r0, [r7, #52]	; 0x34

    /* Return value to the caller.  */
    return(return_value);
 8021498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802149a:	4618      	mov	r0, r3
 802149c:	373c      	adds	r7, #60	; 0x3c
 802149e:	46bd      	mov	sp, r7
 80214a0:	bd90      	pop	{r4, r7, pc}
 80214a2:	bf00      	nop
 80214a4:	00000004 	.word	0x00000004

080214a8 <_txe_thread_preemption_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80214a8:	b590      	push	{r4, r7, lr}
 80214aa:	b087      	sub	sp, #28
 80214ac:	af00      	add	r7, sp, #0
 80214ae:	60f8      	str	r0, [r7, #12]
 80214b0:	60b9      	str	r1, [r7, #8]
 80214b2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PREEMPTION_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_threshold, (ALIGN_TYPE) old_threshold);
 80214b4:	4b07      	ldr	r3, [pc, #28]	; (80214d4 <_txe_thread_preemption_change+0x2c>)
 80214b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80214ba:	681c      	ldr	r4, [r3, #0]
 80214bc:	68f9      	ldr	r1, [r7, #12]
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	68ba      	ldr	r2, [r7, #8]
 80214c2:	203e      	movs	r0, #62	; 0x3e
 80214c4:	47a0      	blx	r4
 80214c6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214c8:	697b      	ldr	r3, [r7, #20]
}
 80214ca:	4618      	mov	r0, r3
 80214cc:	371c      	adds	r7, #28
 80214ce:	46bd      	mov	sp, r7
 80214d0:	bd90      	pop	{r4, r7, pc}
 80214d2:	bf00      	nop
 80214d4:	00000004 	.word	0x00000004

080214d8 <_txe_thread_priority_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 80214d8:	b590      	push	{r4, r7, lr}
 80214da:	b087      	sub	sp, #28
 80214dc:	af00      	add	r7, sp, #0
 80214de:	60f8      	str	r0, [r7, #12]
 80214e0:	60b9      	str	r1, [r7, #8]
 80214e2:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_PRIORITY_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_priority, (ALIGN_TYPE) old_priority);
 80214e4:	4b07      	ldr	r3, [pc, #28]	; (8021504 <_txe_thread_priority_change+0x2c>)
 80214e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80214ea:	681c      	ldr	r4, [r3, #0]
 80214ec:	68f9      	ldr	r1, [r7, #12]
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	68ba      	ldr	r2, [r7, #8]
 80214f2:	203f      	movs	r0, #63	; 0x3f
 80214f4:	47a0      	blx	r4
 80214f6:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 80214f8:	697b      	ldr	r3, [r7, #20]
}
 80214fa:	4618      	mov	r0, r3
 80214fc:	371c      	adds	r7, #28
 80214fe:	46bd      	mov	sp, r7
 8021500:	bd90      	pop	{r4, r7, pc}
 8021502:	bf00      	nop
 8021504:	00000004 	.word	0x00000004

08021508 <_txe_thread_relinquish>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _txe_thread_relinquish(VOID)
{
 8021508:	b598      	push	{r3, r4, r7, lr}
 802150a:	af00      	add	r7, sp, #0


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RELINQUISH_CALL, 0, 0, 0);
 802150c:	4b05      	ldr	r3, [pc, #20]	; (8021524 <_txe_thread_relinquish+0x1c>)
 802150e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021512:	681c      	ldr	r4, [r3, #0]
 8021514:	2300      	movs	r3, #0
 8021516:	2200      	movs	r2, #0
 8021518:	2100      	movs	r1, #0
 802151a:	2040      	movs	r0, #64	; 0x40
 802151c:	47a0      	blx	r4
}
 802151e:	bf00      	nop
 8021520:	bd98      	pop	{r3, r4, r7, pc}
 8021522:	bf00      	nop
 8021524:	00000004 	.word	0x00000004

08021528 <_txe_thread_reset>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_reset(TX_THREAD *thread_ptr)
{
 8021528:	b590      	push	{r4, r7, lr}
 802152a:	b085      	sub	sp, #20
 802152c:	af00      	add	r7, sp, #0
 802152e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESET_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021530:	4b07      	ldr	r3, [pc, #28]	; (8021550 <_txe_thread_reset+0x28>)
 8021532:	f859 3003 	ldr.w	r3, [r9, r3]
 8021536:	681c      	ldr	r4, [r3, #0]
 8021538:	6879      	ldr	r1, [r7, #4]
 802153a:	2300      	movs	r3, #0
 802153c:	2200      	movs	r2, #0
 802153e:	2041      	movs	r0, #65	; 0x41
 8021540:	47a0      	blx	r4
 8021542:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021544:	68fb      	ldr	r3, [r7, #12]
}
 8021546:	4618      	mov	r0, r3
 8021548:	3714      	adds	r7, #20
 802154a:	46bd      	mov	sp, r7
 802154c:	bd90      	pop	{r4, r7, pc}
 802154e:	bf00      	nop
 8021550:	00000004 	.word	0x00000004

08021554 <_txe_thread_resume>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8021554:	b590      	push	{r4, r7, lr}
 8021556:	b085      	sub	sp, #20
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_RESUME_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 802155c:	4b07      	ldr	r3, [pc, #28]	; (802157c <_txe_thread_resume+0x28>)
 802155e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021562:	681c      	ldr	r4, [r3, #0]
 8021564:	6879      	ldr	r1, [r7, #4]
 8021566:	2300      	movs	r3, #0
 8021568:	2200      	movs	r2, #0
 802156a:	2042      	movs	r0, #66	; 0x42
 802156c:	47a0      	blx	r4
 802156e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021570:	68fb      	ldr	r3, [r7, #12]
}
 8021572:	4618      	mov	r0, r3
 8021574:	3714      	adds	r7, #20
 8021576:	46bd      	mov	sp, r7
 8021578:	bd90      	pop	{r4, r7, pc}
 802157a:	bf00      	nop
 802157c:	00000004 	.word	0x00000004

08021580 <_tx_thread_sleep>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_sleep(ULONG timer_ticks)
{
 8021580:	b590      	push	{r4, r7, lr}
 8021582:	b085      	sub	sp, #20
 8021584:	af00      	add	r7, sp, #0
 8021586:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SLEEP_CALL, (ALIGN_TYPE) timer_ticks, 0, 0);
 8021588:	4b07      	ldr	r3, [pc, #28]	; (80215a8 <_tx_thread_sleep+0x28>)
 802158a:	f859 3003 	ldr.w	r3, [r9, r3]
 802158e:	681c      	ldr	r4, [r3, #0]
 8021590:	2300      	movs	r3, #0
 8021592:	2200      	movs	r2, #0
 8021594:	6879      	ldr	r1, [r7, #4]
 8021596:	2043      	movs	r0, #67	; 0x43
 8021598:	47a0      	blx	r4
 802159a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802159c:	68fb      	ldr	r3, [r7, #12]
}
 802159e:	4618      	mov	r0, r3
 80215a0:	3714      	adds	r7, #20
 80215a2:	46bd      	mov	sp, r7
 80215a4:	bd90      	pop	{r4, r7, pc}
 80215a6:	bf00      	nop
 80215a8:	00000004 	.word	0x00000004

080215ac <_tx_thread_stack_error_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 80215ac:	b590      	push	{r4, r7, lr}
 80215ae:	b085      	sub	sp, #20
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_STACK_ERROR_NOTIFY_CALL, (ALIGN_TYPE) stack_error_handler, 0, 0);
 80215b4:	4b07      	ldr	r3, [pc, #28]	; (80215d4 <_tx_thread_stack_error_notify+0x28>)
 80215b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80215ba:	681c      	ldr	r4, [r3, #0]
 80215bc:	6879      	ldr	r1, [r7, #4]
 80215be:	2300      	movs	r3, #0
 80215c0:	2200      	movs	r2, #0
 80215c2:	2044      	movs	r0, #68	; 0x44
 80215c4:	47a0      	blx	r4
 80215c6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215c8:	68fb      	ldr	r3, [r7, #12]
}
 80215ca:	4618      	mov	r0, r3
 80215cc:	3714      	adds	r7, #20
 80215ce:	46bd      	mov	sp, r7
 80215d0:	bd90      	pop	{r4, r7, pc}
 80215d2:	bf00      	nop
 80215d4:	00000004 	.word	0x00000004

080215d8 <_txe_thread_suspend>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80215d8:	b590      	push	{r4, r7, lr}
 80215da:	b085      	sub	sp, #20
 80215dc:	af00      	add	r7, sp, #0
 80215de:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_SUSPEND_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 80215e0:	4b07      	ldr	r3, [pc, #28]	; (8021600 <_txe_thread_suspend+0x28>)
 80215e2:	f859 3003 	ldr.w	r3, [r9, r3]
 80215e6:	681c      	ldr	r4, [r3, #0]
 80215e8:	6879      	ldr	r1, [r7, #4]
 80215ea:	2300      	movs	r3, #0
 80215ec:	2200      	movs	r2, #0
 80215ee:	2045      	movs	r0, #69	; 0x45
 80215f0:	47a0      	blx	r4
 80215f2:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80215f4:	68fb      	ldr	r3, [r7, #12]
}
 80215f6:	4618      	mov	r0, r3
 80215f8:	3714      	adds	r7, #20
 80215fa:	46bd      	mov	sp, r7
 80215fc:	bd90      	pop	{r4, r7, pc}
 80215fe:	bf00      	nop
 8021600:	00000004 	.word	0x00000004

08021604 <_txe_thread_terminate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8021604:	b590      	push	{r4, r7, lr}
 8021606:	b085      	sub	sp, #20
 8021608:	af00      	add	r7, sp, #0
 802160a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TERMINATE_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 802160c:	4b07      	ldr	r3, [pc, #28]	; (802162c <_txe_thread_terminate+0x28>)
 802160e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021612:	681c      	ldr	r4, [r3, #0]
 8021614:	6879      	ldr	r1, [r7, #4]
 8021616:	2300      	movs	r3, #0
 8021618:	2200      	movs	r2, #0
 802161a:	2046      	movs	r0, #70	; 0x46
 802161c:	47a0      	blx	r4
 802161e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021620:	68fb      	ldr	r3, [r7, #12]
}
 8021622:	4618      	mov	r0, r3
 8021624:	3714      	adds	r7, #20
 8021626:	46bd      	mov	sp, r7
 8021628:	bd90      	pop	{r4, r7, pc}
 802162a:	bf00      	nop
 802162c:	00000004 	.word	0x00000004

08021630 <_txe_thread_time_slice_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 8021630:	b590      	push	{r4, r7, lr}
 8021632:	b087      	sub	sp, #28
 8021634:	af00      	add	r7, sp, #0
 8021636:	60f8      	str	r0, [r7, #12]
 8021638:	60b9      	str	r1, [r7, #8]
 802163a:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_TIME_SLICE_CHANGE_CALL, (ALIGN_TYPE) thread_ptr, (ALIGN_TYPE) new_time_slice, (ALIGN_TYPE) old_time_slice);
 802163c:	4b07      	ldr	r3, [pc, #28]	; (802165c <_txe_thread_time_slice_change+0x2c>)
 802163e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021642:	681c      	ldr	r4, [r3, #0]
 8021644:	68f9      	ldr	r1, [r7, #12]
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	68ba      	ldr	r2, [r7, #8]
 802164a:	2047      	movs	r0, #71	; 0x47
 802164c:	47a0      	blx	r4
 802164e:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021650:	697b      	ldr	r3, [r7, #20]
}
 8021652:	4618      	mov	r0, r3
 8021654:	371c      	adds	r7, #28
 8021656:	46bd      	mov	sp, r7
 8021658:	bd90      	pop	{r4, r7, pc}
 802165a:	bf00      	nop
 802165c:	00000004 	.word	0x00000004

08021660 <_txe_thread_wait_abort>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_thread_wait_abort(TX_THREAD *thread_ptr)
{
 8021660:	b590      	push	{r4, r7, lr}
 8021662:	b085      	sub	sp, #20
 8021664:	af00      	add	r7, sp, #0
 8021666:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_THREAD_WAIT_ABORT_CALL, (ALIGN_TYPE) thread_ptr, 0, 0);
 8021668:	4b07      	ldr	r3, [pc, #28]	; (8021688 <_txe_thread_wait_abort+0x28>)
 802166a:	f859 3003 	ldr.w	r3, [r9, r3]
 802166e:	681c      	ldr	r4, [r3, #0]
 8021670:	6879      	ldr	r1, [r7, #4]
 8021672:	2300      	movs	r3, #0
 8021674:	2200      	movs	r2, #0
 8021676:	2048      	movs	r0, #72	; 0x48
 8021678:	47a0      	blx	r4
 802167a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802167c:	68fb      	ldr	r3, [r7, #12]
}
 802167e:	4618      	mov	r0, r3
 8021680:	3714      	adds	r7, #20
 8021682:	46bd      	mov	sp, r7
 8021684:	bd90      	pop	{r4, r7, pc}
 8021686:	bf00      	nop
 8021688:	00000004 	.word	0x00000004

0802168c <_tx_time_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
ULONG _tx_time_get(VOID)
{
 802168c:	b590      	push	{r4, r7, lr}
 802168e:	b083      	sub	sp, #12
 8021690:	af00      	add	r7, sp, #0

ULONG return_value;

    /* Call module manager dispatcher.  */
    return_value = (ULONG) (_txm_module_kernel_call_dispatcher)(TXM_TIME_GET_CALL, 0, 0, 0);
 8021692:	4b07      	ldr	r3, [pc, #28]	; (80216b0 <_tx_time_get+0x24>)
 8021694:	f859 3003 	ldr.w	r3, [r9, r3]
 8021698:	681c      	ldr	r4, [r3, #0]
 802169a:	2300      	movs	r3, #0
 802169c:	2200      	movs	r2, #0
 802169e:	2100      	movs	r1, #0
 80216a0:	2049      	movs	r0, #73	; 0x49
 80216a2:	47a0      	blx	r4
 80216a4:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80216a6:	687b      	ldr	r3, [r7, #4]
}
 80216a8:	4618      	mov	r0, r3
 80216aa:	370c      	adds	r7, #12
 80216ac:	46bd      	mov	sp, r7
 80216ae:	bd90      	pop	{r4, r7, pc}
 80216b0:	00000004 	.word	0x00000004

080216b4 <_tx_time_set>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_time_set(ULONG new_time)
{
 80216b4:	b590      	push	{r4, r7, lr}
 80216b6:	b083      	sub	sp, #12
 80216b8:	af00      	add	r7, sp, #0
 80216ba:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TIME_SET_CALL, (ALIGN_TYPE) new_time, 0, 0);
 80216bc:	4b06      	ldr	r3, [pc, #24]	; (80216d8 <_tx_time_set+0x24>)
 80216be:	f859 3003 	ldr.w	r3, [r9, r3]
 80216c2:	681c      	ldr	r4, [r3, #0]
 80216c4:	2300      	movs	r3, #0
 80216c6:	2200      	movs	r2, #0
 80216c8:	6879      	ldr	r1, [r7, #4]
 80216ca:	204a      	movs	r0, #74	; 0x4a
 80216cc:	47a0      	blx	r4
}
 80216ce:	bf00      	nop
 80216d0:	370c      	adds	r7, #12
 80216d2:	46bd      	mov	sp, r7
 80216d4:	bd90      	pop	{r4, r7, pc}
 80216d6:	bf00      	nop
 80216d8:	00000004 	.word	0x00000004

080216dc <_txe_timer_activate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_activate(TX_TIMER *timer_ptr)
{
 80216dc:	b590      	push	{r4, r7, lr}
 80216de:	b085      	sub	sp, #20
 80216e0:	af00      	add	r7, sp, #0
 80216e2:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_ACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80216e4:	4b07      	ldr	r3, [pc, #28]	; (8021704 <_txe_timer_activate+0x28>)
 80216e6:	f859 3003 	ldr.w	r3, [r9, r3]
 80216ea:	681c      	ldr	r4, [r3, #0]
 80216ec:	6879      	ldr	r1, [r7, #4]
 80216ee:	2300      	movs	r3, #0
 80216f0:	2200      	movs	r2, #0
 80216f2:	204b      	movs	r0, #75	; 0x4b
 80216f4:	47a0      	blx	r4
 80216f6:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80216f8:	68fb      	ldr	r3, [r7, #12]
}
 80216fa:	4618      	mov	r0, r3
 80216fc:	3714      	adds	r7, #20
 80216fe:	46bd      	mov	sp, r7
 8021700:	bd90      	pop	{r4, r7, pc}
 8021702:	bf00      	nop
 8021704:	00000004 	.word	0x00000004

08021708 <_txe_timer_change>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 8021708:	b590      	push	{r4, r7, lr}
 802170a:	b087      	sub	sp, #28
 802170c:	af00      	add	r7, sp, #0
 802170e:	60f8      	str	r0, [r7, #12]
 8021710:	60b9      	str	r1, [r7, #8]
 8021712:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CHANGE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) initial_ticks, (ALIGN_TYPE) reschedule_ticks);
 8021714:	4b07      	ldr	r3, [pc, #28]	; (8021734 <_txe_timer_change+0x2c>)
 8021716:	f859 3003 	ldr.w	r3, [r9, r3]
 802171a:	681c      	ldr	r4, [r3, #0]
 802171c:	68f9      	ldr	r1, [r7, #12]
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	68ba      	ldr	r2, [r7, #8]
 8021722:	204c      	movs	r0, #76	; 0x4c
 8021724:	47a0      	blx	r4
 8021726:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021728:	697b      	ldr	r3, [r7, #20]
}
 802172a:	4618      	mov	r0, r3
 802172c:	371c      	adds	r7, #28
 802172e:	46bd      	mov	sp, r7
 8021730:	bd90      	pop	{r4, r7, pc}
 8021732:	bf00      	nop
 8021734:	00000004 	.word	0x00000004

08021738 <_txe_timer_create>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, VOID (*expiration_function)(ULONG), ULONG expiration_input, ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8021738:	b590      	push	{r4, r7, lr}
 802173a:	b08d      	sub	sp, #52	; 0x34
 802173c:	af00      	add	r7, sp, #0
 802173e:	60f8      	str	r0, [r7, #12]
 8021740:	60b9      	str	r1, [r7, #8]
 8021742:	607a      	str	r2, [r7, #4]
 8021744:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[6];

    extra_parameters[0] = (ALIGN_TYPE) expiration_function;
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) expiration_input;
 802174a:	683b      	ldr	r3, [r7, #0]
 802174c:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) initial_ticks;
 802174e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021750:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) reschedule_ticks;
 8021752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021754:	623b      	str	r3, [r7, #32]
    extra_parameters[4] = (ALIGN_TYPE) auto_activate;
 8021756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021758:	627b      	str	r3, [r7, #36]	; 0x24
    extra_parameters[5] = (ALIGN_TYPE) timer_control_block_size;
 802175a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802175c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_CREATE_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name_ptr, (ALIGN_TYPE) extra_parameters);
 802175e:	4b08      	ldr	r3, [pc, #32]	; (8021780 <_txe_timer_create+0x48>)
 8021760:	f859 3003 	ldr.w	r3, [r9, r3]
 8021764:	681c      	ldr	r4, [r3, #0]
 8021766:	68f9      	ldr	r1, [r7, #12]
 8021768:	68ba      	ldr	r2, [r7, #8]
 802176a:	f107 0314 	add.w	r3, r7, #20
 802176e:	204d      	movs	r0, #77	; 0x4d
 8021770:	47a0      	blx	r4
 8021772:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Return value to the caller.  */
    return(return_value);
 8021774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8021776:	4618      	mov	r0, r3
 8021778:	3734      	adds	r7, #52	; 0x34
 802177a:	46bd      	mov	sp, r7
 802177c:	bd90      	pop	{r4, r7, pc}
 802177e:	bf00      	nop
 8021780:	00000004 	.word	0x00000004

08021784 <_txe_timer_deactivate>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8021784:	b590      	push	{r4, r7, lr}
 8021786:	b085      	sub	sp, #20
 8021788:	af00      	add	r7, sp, #0
 802178a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DEACTIVATE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 802178c:	4b07      	ldr	r3, [pc, #28]	; (80217ac <_txe_timer_deactivate+0x28>)
 802178e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021792:	681c      	ldr	r4, [r3, #0]
 8021794:	6879      	ldr	r1, [r7, #4]
 8021796:	2300      	movs	r3, #0
 8021798:	2200      	movs	r2, #0
 802179a:	204e      	movs	r0, #78	; 0x4e
 802179c:	47a0      	blx	r4
 802179e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217a0:	68fb      	ldr	r3, [r7, #12]
}
 80217a2:	4618      	mov	r0, r3
 80217a4:	3714      	adds	r7, #20
 80217a6:	46bd      	mov	sp, r7
 80217a8:	bd90      	pop	{r4, r7, pc}
 80217aa:	bf00      	nop
 80217ac:	00000004 	.word	0x00000004

080217b0 <_txe_timer_delete>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_delete(TX_TIMER *timer_ptr)
{
 80217b0:	b590      	push	{r4, r7, lr}
 80217b2:	b085      	sub	sp, #20
 80217b4:	af00      	add	r7, sp, #0
 80217b6:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_DELETE_CALL, (ALIGN_TYPE) timer_ptr, 0, 0);
 80217b8:	4b07      	ldr	r3, [pc, #28]	; (80217d8 <_txe_timer_delete+0x28>)
 80217ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80217be:	681c      	ldr	r4, [r3, #0]
 80217c0:	6879      	ldr	r1, [r7, #4]
 80217c2:	2300      	movs	r3, #0
 80217c4:	2200      	movs	r2, #0
 80217c6:	204f      	movs	r0, #79	; 0x4f
 80217c8:	47a0      	blx	r4
 80217ca:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80217cc:	68fb      	ldr	r3, [r7, #12]
}
 80217ce:	4618      	mov	r0, r3
 80217d0:	3714      	adds	r7, #20
 80217d2:	46bd      	mov	sp, r7
 80217d4:	bd90      	pop	{r4, r7, pc}
 80217d6:	bf00      	nop
 80217d8:	00000004 	.word	0x00000004

080217dc <_txe_timer_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 80217dc:	b590      	push	{r4, r7, lr}
 80217de:	b08b      	sub	sp, #44	; 0x2c
 80217e0:	af00      	add	r7, sp, #0
 80217e2:	60f8      	str	r0, [r7, #12]
 80217e4:	60b9      	str	r1, [r7, #8]
 80217e6:	607a      	str	r2, [r7, #4]
 80217e8:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) active;
 80217ea:	687b      	ldr	r3, [r7, #4]
 80217ec:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) remaining_ticks;
 80217ee:	683b      	ldr	r3, [r7, #0]
 80217f0:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) reschedule_ticks;
 80217f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217f4:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) next_timer;
 80217f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80217f8:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) name, (ALIGN_TYPE) extra_parameters);
 80217fa:	4b08      	ldr	r3, [pc, #32]	; (802181c <_txe_timer_info_get+0x40>)
 80217fc:	f859 3003 	ldr.w	r3, [r9, r3]
 8021800:	681c      	ldr	r4, [r3, #0]
 8021802:	68f9      	ldr	r1, [r7, #12]
 8021804:	68ba      	ldr	r2, [r7, #8]
 8021806:	f107 0314 	add.w	r3, r7, #20
 802180a:	2050      	movs	r0, #80	; 0x50
 802180c:	47a0      	blx	r4
 802180e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021812:	4618      	mov	r0, r3
 8021814:	372c      	adds	r7, #44	; 0x2c
 8021816:	46bd      	mov	sp, r7
 8021818:	bd90      	pop	{r4, r7, pc}
 802181a:	bf00      	nop
 802181c:	00000004 	.word	0x00000004

08021820 <_tx_timer_performance_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021820:	b590      	push	{r4, r7, lr}
 8021822:	b08b      	sub	sp, #44	; 0x2c
 8021824:	af00      	add	r7, sp, #0
 8021826:	60f8      	str	r0, [r7, #12]
 8021828:	60b9      	str	r1, [r7, #8]
 802182a:	607a      	str	r2, [r7, #4]
 802182c:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[4];

    extra_parameters[0] = (ALIGN_TYPE) reactivates;
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	617b      	str	r3, [r7, #20]
    extra_parameters[1] = (ALIGN_TYPE) deactivates;
 8021832:	683b      	ldr	r3, [r7, #0]
 8021834:	61bb      	str	r3, [r7, #24]
    extra_parameters[2] = (ALIGN_TYPE) expirations;
 8021836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021838:	61fb      	str	r3, [r7, #28]
    extra_parameters[3] = (ALIGN_TYPE) expiration_adjusts;
 802183a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802183c:	623b      	str	r3, [r7, #32]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_INFO_GET_CALL, (ALIGN_TYPE) timer_ptr, (ALIGN_TYPE) activates, (ALIGN_TYPE) extra_parameters);
 802183e:	4b08      	ldr	r3, [pc, #32]	; (8021860 <_tx_timer_performance_info_get+0x40>)
 8021840:	f859 3003 	ldr.w	r3, [r9, r3]
 8021844:	681c      	ldr	r4, [r3, #0]
 8021846:	68f9      	ldr	r1, [r7, #12]
 8021848:	68ba      	ldr	r2, [r7, #8]
 802184a:	f107 0314 	add.w	r3, r7, #20
 802184e:	2051      	movs	r0, #81	; 0x51
 8021850:	47a0      	blx	r4
 8021852:	6278      	str	r0, [r7, #36]	; 0x24

    /* Return value to the caller.  */
    return(return_value);
 8021854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021856:	4618      	mov	r0, r3
 8021858:	372c      	adds	r7, #44	; 0x2c
 802185a:	46bd      	mov	sp, r7
 802185c:	bd90      	pop	{r4, r7, pc}
 802185e:	bf00      	nop
 8021860:	00000004 	.word	0x00000004

08021864 <_tx_timer_performance_system_info_get>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates, ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8021864:	b590      	push	{r4, r7, lr}
 8021866:	b089      	sub	sp, #36	; 0x24
 8021868:	af00      	add	r7, sp, #0
 802186a:	60f8      	str	r0, [r7, #12]
 802186c:	60b9      	str	r1, [r7, #8]
 802186e:	607a      	str	r2, [r7, #4]
 8021870:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) deactivates;
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) expirations;
 8021876:	683b      	ldr	r3, [r7, #0]
 8021878:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) expiration_adjusts;
 802187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802187c:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL, (ALIGN_TYPE) activates, (ALIGN_TYPE) reactivates, (ALIGN_TYPE) extra_parameters);
 802187e:	4b08      	ldr	r3, [pc, #32]	; (80218a0 <_tx_timer_performance_system_info_get+0x3c>)
 8021880:	f859 3003 	ldr.w	r3, [r9, r3]
 8021884:	681c      	ldr	r4, [r3, #0]
 8021886:	68f9      	ldr	r1, [r7, #12]
 8021888:	68ba      	ldr	r2, [r7, #8]
 802188a:	f107 0310 	add.w	r3, r7, #16
 802188e:	2052      	movs	r0, #82	; 0x52
 8021890:	47a0      	blx	r4
 8021892:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021894:	69fb      	ldr	r3, [r7, #28]
}
 8021896:	4618      	mov	r0, r3
 8021898:	3724      	adds	r7, #36	; 0x24
 802189a:	46bd      	mov	sp, r7
 802189c:	bd90      	pop	{r4, r7, pc}
 802189e:	bf00      	nop
 80218a0:	00000004 	.word	0x00000004

080218a4 <_tx_trace_buffer_full_notify>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 80218a4:	b590      	push	{r4, r7, lr}
 80218a6:	b085      	sub	sp, #20
 80218a8:	af00      	add	r7, sp, #0
 80218aa:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_BUFFER_FULL_NOTIFY_CALL, (ALIGN_TYPE) full_buffer_callback, 0, 0);
 80218ac:	4b07      	ldr	r3, [pc, #28]	; (80218cc <_tx_trace_buffer_full_notify+0x28>)
 80218ae:	f859 3003 	ldr.w	r3, [r9, r3]
 80218b2:	681c      	ldr	r4, [r3, #0]
 80218b4:	6879      	ldr	r1, [r7, #4]
 80218b6:	2300      	movs	r3, #0
 80218b8:	2200      	movs	r2, #0
 80218ba:	205a      	movs	r0, #90	; 0x5a
 80218bc:	47a0      	blx	r4
 80218be:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 80218c0:	68fb      	ldr	r3, [r7, #12]
}
 80218c2:	4618      	mov	r0, r3
 80218c4:	3714      	adds	r7, #20
 80218c6:	46bd      	mov	sp, r7
 80218c8:	bd90      	pop	{r4, r7, pc}
 80218ca:	bf00      	nop
 80218cc:	00000004 	.word	0x00000004

080218d0 <_tx_trace_disable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_disable(VOID)
{
 80218d0:	b590      	push	{r4, r7, lr}
 80218d2:	b083      	sub	sp, #12
 80218d4:	af00      	add	r7, sp, #0

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_DISABLE_CALL, 0, 0, 0);
 80218d6:	4b07      	ldr	r3, [pc, #28]	; (80218f4 <_tx_trace_disable+0x24>)
 80218d8:	f859 3003 	ldr.w	r3, [r9, r3]
 80218dc:	681c      	ldr	r4, [r3, #0]
 80218de:	2300      	movs	r3, #0
 80218e0:	2200      	movs	r2, #0
 80218e2:	2100      	movs	r1, #0
 80218e4:	2056      	movs	r0, #86	; 0x56
 80218e6:	47a0      	blx	r4
 80218e8:	6078      	str	r0, [r7, #4]

    /* Return value to the caller.  */
    return(return_value);
 80218ea:	687b      	ldr	r3, [r7, #4]
}
 80218ec:	4618      	mov	r0, r3
 80218ee:	370c      	adds	r7, #12
 80218f0:	46bd      	mov	sp, r7
 80218f2:	bd90      	pop	{r4, r7, pc}
 80218f4:	00000004 	.word	0x00000004

080218f8 <_tx_trace_enable>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 80218f8:	b590      	push	{r4, r7, lr}
 80218fa:	b087      	sub	sp, #28
 80218fc:	af00      	add	r7, sp, #0
 80218fe:	60f8      	str	r0, [r7, #12]
 8021900:	60b9      	str	r1, [r7, #8]
 8021902:	607a      	str	r2, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ENABLE_CALL, (ALIGN_TYPE) trace_buffer_start, (ALIGN_TYPE) trace_buffer_size, (ALIGN_TYPE) registry_entries);
 8021904:	4b07      	ldr	r3, [pc, #28]	; (8021924 <_tx_trace_enable+0x2c>)
 8021906:	f859 3003 	ldr.w	r3, [r9, r3]
 802190a:	681c      	ldr	r4, [r3, #0]
 802190c:	68f9      	ldr	r1, [r7, #12]
 802190e:	687b      	ldr	r3, [r7, #4]
 8021910:	68ba      	ldr	r2, [r7, #8]
 8021912:	2053      	movs	r0, #83	; 0x53
 8021914:	47a0      	blx	r4
 8021916:	6178      	str	r0, [r7, #20]

    /* Return value to the caller.  */
    return(return_value);
 8021918:	697b      	ldr	r3, [r7, #20]
}
 802191a:	4618      	mov	r0, r3
 802191c:	371c      	adds	r7, #28
 802191e:	46bd      	mov	sp, r7
 8021920:	bd90      	pop	{r4, r7, pc}
 8021922:	bf00      	nop
 8021924:	00000004 	.word	0x00000004

08021928 <_tx_trace_event_filter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_filter(ULONG event_filter_bits)
{
 8021928:	b590      	push	{r4, r7, lr}
 802192a:	b085      	sub	sp, #20
 802192c:	af00      	add	r7, sp, #0
 802192e:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_FILTER_CALL, (ALIGN_TYPE) event_filter_bits, 0, 0);
 8021930:	4b07      	ldr	r3, [pc, #28]	; (8021950 <_tx_trace_event_filter+0x28>)
 8021932:	f859 3003 	ldr.w	r3, [r9, r3]
 8021936:	681c      	ldr	r4, [r3, #0]
 8021938:	2300      	movs	r3, #0
 802193a:	2200      	movs	r2, #0
 802193c:	6879      	ldr	r1, [r7, #4]
 802193e:	2054      	movs	r0, #84	; 0x54
 8021940:	47a0      	blx	r4
 8021942:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021944:	68fb      	ldr	r3, [r7, #12]
}
 8021946:	4618      	mov	r0, r3
 8021948:	3714      	adds	r7, #20
 802194a:	46bd      	mov	sp, r7
 802194c:	bd90      	pop	{r4, r7, pc}
 802194e:	bf00      	nop
 8021950:	00000004 	.word	0x00000004

08021954 <_tx_trace_event_unfilter>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 8021954:	b590      	push	{r4, r7, lr}
 8021956:	b085      	sub	sp, #20
 8021958:	af00      	add	r7, sp, #0
 802195a:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_EVENT_UNFILTER_CALL, (ALIGN_TYPE) event_unfilter_bits, 0, 0);
 802195c:	4b07      	ldr	r3, [pc, #28]	; (802197c <_tx_trace_event_unfilter+0x28>)
 802195e:	f859 3003 	ldr.w	r3, [r9, r3]
 8021962:	681c      	ldr	r4, [r3, #0]
 8021964:	2300      	movs	r3, #0
 8021966:	2200      	movs	r2, #0
 8021968:	6879      	ldr	r1, [r7, #4]
 802196a:	2055      	movs	r0, #85	; 0x55
 802196c:	47a0      	blx	r4
 802196e:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 8021970:	68fb      	ldr	r3, [r7, #12]
}
 8021972:	4618      	mov	r0, r3
 8021974:	3714      	adds	r7, #20
 8021976:	46bd      	mov	sp, r7
 8021978:	bd90      	pop	{r4, r7, pc}
 802197a:	bf00      	nop
 802197c:	00000004 	.word	0x00000004

08021980 <_tx_trace_interrupt_control>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_interrupt_control(UINT new_posture)
{
 8021980:	b590      	push	{r4, r7, lr}
 8021982:	b085      	sub	sp, #20
 8021984:	af00      	add	r7, sp, #0
 8021986:	6078      	str	r0, [r7, #4]

UINT return_value;

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_INTERRUPT_CONTROL_CALL, (ALIGN_TYPE) new_posture, 0, 0);
 8021988:	4b07      	ldr	r3, [pc, #28]	; (80219a8 <_tx_trace_interrupt_control+0x28>)
 802198a:	f859 3003 	ldr.w	r3, [r9, r3]
 802198e:	681c      	ldr	r4, [r3, #0]
 8021990:	2300      	movs	r3, #0
 8021992:	2200      	movs	r2, #0
 8021994:	6879      	ldr	r1, [r7, #4]
 8021996:	2057      	movs	r0, #87	; 0x57
 8021998:	47a0      	blx	r4
 802199a:	60f8      	str	r0, [r7, #12]

    /* Return value to the caller.  */
    return(return_value);
 802199c:	68fb      	ldr	r3, [r7, #12]
}
 802199e:	4618      	mov	r0, r3
 80219a0:	3714      	adds	r7, #20
 80219a2:	46bd      	mov	sp, r7
 80219a4:	bd90      	pop	{r4, r7, pc}
 80219a6:	bf00      	nop
 80219a8:	00000004 	.word	0x00000004

080219ac <_tx_trace_isr_enter_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_enter_insert(ULONG isr_id)
{
 80219ac:	b590      	push	{r4, r7, lr}
 80219ae:	b083      	sub	sp, #12
 80219b0:	af00      	add	r7, sp, #0
 80219b2:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_ENTER_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219b4:	4b06      	ldr	r3, [pc, #24]	; (80219d0 <_tx_trace_isr_enter_insert+0x24>)
 80219b6:	f859 3003 	ldr.w	r3, [r9, r3]
 80219ba:	681c      	ldr	r4, [r3, #0]
 80219bc:	2300      	movs	r3, #0
 80219be:	2200      	movs	r2, #0
 80219c0:	6879      	ldr	r1, [r7, #4]
 80219c2:	2058      	movs	r0, #88	; 0x58
 80219c4:	47a0      	blx	r4
}
 80219c6:	bf00      	nop
 80219c8:	370c      	adds	r7, #12
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bd90      	pop	{r4, r7, pc}
 80219ce:	bf00      	nop
 80219d0:	00000004 	.word	0x00000004

080219d4 <_tx_trace_isr_exit_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _tx_trace_isr_exit_insert(ULONG isr_id)
{
 80219d4:	b590      	push	{r4, r7, lr}
 80219d6:	b083      	sub	sp, #12
 80219d8:	af00      	add	r7, sp, #0
 80219da:	6078      	str	r0, [r7, #4]


    /* Call module manager dispatcher.  */
    (_txm_module_kernel_call_dispatcher)(TXM_TRACE_ISR_EXIT_INSERT_CALL, (ALIGN_TYPE) isr_id, 0, 0);
 80219dc:	4b06      	ldr	r3, [pc, #24]	; (80219f8 <_tx_trace_isr_exit_insert+0x24>)
 80219de:	f859 3003 	ldr.w	r3, [r9, r3]
 80219e2:	681c      	ldr	r4, [r3, #0]
 80219e4:	2300      	movs	r3, #0
 80219e6:	2200      	movs	r2, #0
 80219e8:	6879      	ldr	r1, [r7, #4]
 80219ea:	2059      	movs	r0, #89	; 0x59
 80219ec:	47a0      	blx	r4
}
 80219ee:	bf00      	nop
 80219f0:	370c      	adds	r7, #12
 80219f2:	46bd      	mov	sp, r7
 80219f4:	bd90      	pop	{r4, r7, pc}
 80219f6:	bf00      	nop
 80219f8:	00000004 	.word	0x00000004

080219fc <_tx_trace_user_event_insert>:
/*                                            CALL_NOT_USED option,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 80219fc:	b590      	push	{r4, r7, lr}
 80219fe:	b089      	sub	sp, #36	; 0x24
 8021a00:	af00      	add	r7, sp, #0
 8021a02:	60f8      	str	r0, [r7, #12]
 8021a04:	60b9      	str	r1, [r7, #8]
 8021a06:	607a      	str	r2, [r7, #4]
 8021a08:	603b      	str	r3, [r7, #0]

UINT return_value;
ALIGN_TYPE extra_parameters[3];

    extra_parameters[0] = (ALIGN_TYPE) info_field_2;
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	613b      	str	r3, [r7, #16]
    extra_parameters[1] = (ALIGN_TYPE) info_field_3;
 8021a0e:	683b      	ldr	r3, [r7, #0]
 8021a10:	617b      	str	r3, [r7, #20]
    extra_parameters[2] = (ALIGN_TYPE) info_field_4;
 8021a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a14:	61bb      	str	r3, [r7, #24]

    /* Call module manager dispatcher.  */
    return_value = (UINT) (_txm_module_kernel_call_dispatcher)(TXM_TRACE_USER_EVENT_INSERT_CALL, (ALIGN_TYPE) event_id, (ALIGN_TYPE) info_field_1, (ALIGN_TYPE) extra_parameters);
 8021a16:	4b08      	ldr	r3, [pc, #32]	; (8021a38 <_tx_trace_user_event_insert+0x3c>)
 8021a18:	f859 3003 	ldr.w	r3, [r9, r3]
 8021a1c:	681c      	ldr	r4, [r3, #0]
 8021a1e:	f107 0310 	add.w	r3, r7, #16
 8021a22:	68ba      	ldr	r2, [r7, #8]
 8021a24:	68f9      	ldr	r1, [r7, #12]
 8021a26:	205b      	movs	r0, #91	; 0x5b
 8021a28:	47a0      	blx	r4
 8021a2a:	61f8      	str	r0, [r7, #28]

    /* Return value to the caller.  */
    return(return_value);
 8021a2c:	69fb      	ldr	r3, [r7, #28]
}
 8021a2e:	4618      	mov	r0, r3
 8021a30:	3724      	adds	r7, #36	; 0x24
 8021a32:	46bd      	mov	sp, r7
 8021a34:	bd90      	pop	{r4, r7, pc}
 8021a36:	bf00      	nop
 8021a38:	00000004 	.word	0x00000004
